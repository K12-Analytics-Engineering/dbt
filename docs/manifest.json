{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v4.json", "dbt_version": "1.0.5", "generated_at": "2022-04-21T03:00:21.442359Z", "invocation_id": "740cab8b-81ac-4fe5-beb0-cb12a09c8ef3", "env": {}, "project_id": "46f86faa6bbf9ac94a7e459509a20ed0", "user_id": "7d118a79-ec1e-45a4-8eb3-5de7a4c878f3", "send_anonymous_usage_stats": true, "adapter_type": "bigquery"}, "nodes": {"model.project.dim_survey": {"raw_sql": "{# \nselect\n    {{ dbt_utils.surrogate_key([\n        'namespace',\n        'survey_identifier'\n    ]) }}                                       as survey_key,\n    school_year_type_reference.school_year      as school_year,\n    namespace                                   as namespace,\n    survey_identifier                           as survey_identifier,\n    survey_title                                as title\nfrom {{ ref('stg_edfi_surveys') }} #}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "surveys", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_surveys", "fqn": ["project", "marts", "surveys", "dim_survey"], "unique_id": "model.project.dim_survey", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "marts/surveys/dim_survey.sql", "original_file_path": "models/marts/surveys/dim_survey.sql", "name": "dim_survey", "alias": "dim_survey", "checksum": {"name": "sha256", "checksum": "83474df9eebe2eef9d5b17c73fdff5133b680a6735d19b8bb5b497587b2e34d2"}, "tags": [], "refs": [], "sources": [], "description": "One row per survey", "columns": {"survey_key": {"name": "survey_key", "description": "Primary key for dimension table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_year": {"name": "school_year", "description": "School year for which the assessment ocurred within", "meta": {}, "data_type": null, "quote": null, "tags": []}, "namespace": {"name": "namespace", "description": "Namespace for the survey", "meta": {}, "data_type": null, "quote": null, "tags": []}, "survey_identifier": {"name": "survey_identifier", "description": "Unique identifier for the respective survey", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title": {"name": "title", "description": "Title of the survey", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/marts/surveys/surveys.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "surveys"}, "created_at": 1650509848.5763988, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_surveys`.`dim_survey`"}, "model.project.dim_survey_question": {"raw_sql": "{# \nselect\n    {{ dbt_utils.surrogate_key([\n        'survey_reference.namespace',\n        'survey_reference.survey_identifier',\n        'question_code'\n    ]) }}                                       as survey_question_key,\n    {{ dbt_utils.surrogate_key([\n        'survey_reference.namespace',\n        'survey_reference.survey_identifier'\n    ]) }}                                       as survey_key,\n    question_code                               as survey_question_identifier,\n    question_text                               as text,\n    question_form_descriptor                    as type\nfrom {{ ref('stg_edfi_survey_questions') }} #}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "surveys", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_surveys", "fqn": ["project", "marts", "surveys", "dim_survey_question"], "unique_id": "model.project.dim_survey_question", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "marts/surveys/dim_survey_question.sql", "original_file_path": "models/marts/surveys/dim_survey_question.sql", "name": "dim_survey_question", "alias": "dim_survey_question", "checksum": {"name": "sha256", "checksum": "a124052365fd1f2b076f043b62ec7eb2562298eed3e11860c8b9eb66154d0cda"}, "tags": [], "refs": [], "sources": [], "description": "One row per survey per question", "columns": {"survey_question_key": {"name": "survey_question_key", "description": "Primary key for dimension table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "survey_key": {"name": "survey_key", "description": "Foreign key to `dim_survey`", "meta": {}, "data_type": null, "quote": null, "tags": []}, "survey_question_identifier": {"name": "survey_question_identifier", "description": "Unique identifier for the respective survey question", "meta": {}, "data_type": null, "quote": null, "tags": []}, "text": {"name": "text", "description": "The text of the question", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "The type of question", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/marts/surveys/surveys.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "surveys"}, "created_at": 1650509848.5784087, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_surveys`.`dim_survey_question`"}, "model.project.fct_survey_response": {"raw_sql": "{# \nselect\n    {{ dbt_utils.surrogate_key([\n        'survey_question_responses.survey_question_reference.namespace',\n        'survey_question_responses.survey_question_reference.survey_identifier'\n    ]) }}                                               as survey_key,\n    {{ dbt_utils.surrogate_key([\n        'survey_question_responses.survey_question_reference.namespace',\n        'survey_question_responses.survey_question_reference.survey_identifier',\n        'survey_question_responses.survey_question_reference.question_code'\n    ]) }}                                               as survey_question_key,\n    {{ dbt_utils.surrogate_key([\n        'survey_responses.student_reference.student_unique_id',\n        'survey_question_responses.school_year'\n    ]) }}                                               as student_key,\n    survey_responses.survey_response_identifier         as survey_response_identifier,\n    survey_responses.response_date                      as response_date,\n    {# value.survey_question_response_value_identifier     as , #}\n    value.numeric_response                              as numeric_response,\n    value.text_response                                 as text_response\nfrom {{ ref('stg_edfi_survey_question_responses') }} survey_question_responses\ncross join unnest(survey_question_responses.values) as value\nleft join {{ ref('stg_edfi_survey_responses') }} survey_responses\n    on survey_question_responses.survey_response_reference.namespace = survey_responses.survey_reference.namespace\n    and survey_question_responses.survey_response_reference.survey_identifier = survey_responses.survey_reference.survey_identifier\n    and survey_question_responses.survey_response_reference.survey_response_identifier = survey_responses.survey_response_identifier #}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.project.stg_edfi_survey_question_responses", "model.project.stg_edfi_survey_responses"]}, "config": {"enabled": true, "alias": null, "schema": "surveys", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_surveys", "fqn": ["project", "marts", "surveys", "fct_survey_response"], "unique_id": "model.project.fct_survey_response", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "marts/surveys/fct_survey_response.sql", "original_file_path": "models/marts/surveys/fct_survey_response.sql", "name": "fct_survey_response", "alias": "fct_survey_response", "checksum": {"name": "sha256", "checksum": "570cff027af261d23be19a05e532eaf487fdae19d017929444d50b3641ab9565"}, "tags": [], "refs": [["stg_edfi_survey_question_responses"], ["stg_edfi_survey_responses"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/surveys/fct_survey_response.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "surveys"}, "created_at": 1650509848.165601, "compiled_sql": "\n    value.numeric_response                              as numeric_response,\n    value.text_response                                 as text_response\nfrom `gcp-project`.`dev_staging`.`stg_edfi_survey_question_responses` survey_question_responses\ncross join unnest(survey_question_responses.values) as value\nleft join `gcp-project`.`dev_staging`.`stg_edfi_survey_responses` survey_responses\n    on survey_question_responses.survey_response_reference.namespace = survey_responses.survey_reference.namespace\n    and survey_question_responses.survey_response_reference.survey_identifier = survey_responses.survey_reference.survey_identifier\n    and survey_question_responses.survey_response_reference.survey_response_identifier = survey_responses.survey_response_identifier #}", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_surveys`.`fct_survey_response`"}, "model.project.stg_nwea_map_assessment_results": {"raw_sql": "select\n    district__state_i_d                                      as district_state_id,\n    district_name                                            as local_education_agency_name,\n    school_name                                              as school_name,\n    split(split(term_name, \"-\")[OFFSET(0)], \" \")[OFFSET(0)]  as term_name,\n    split(term_name, \"-\")[OFFSET(1)]                         as school_year,\n    student_i_d                                              as student_unique_id,\n    student__state_i_d                                       as student_state_id,\n    subject                                                  as subject,\n    REPLACE(course, 'Math K-12', 'Mathematics')              as course,\n    cast(growth_measure_y_n as BOOL)                         as is_growth_measure,\n    norms_reference_data\t                                 as norms_reference_data,\n    test_i_d                                                 as test_id,\n    test_type                                                as test_type,\n    test_name                                                as test_name,\n    cast(parse_date('%m/%d/%Y', test_start_date) as STRING)  as test_start_date,\n    SAFE_CAST(test_duration_minutes as int64)                as test_duration_minutes,\n    SAFE_CAST(test_r_i_t_score as int64)                     as test_rit_score,\n    SAFE_CAST(test_percentile as int64)                      as test_percentile,\n    SAFE_CAST(percent_correct as int64)                      as percent_correct,\n    SAFE_CAST(fall_to_winter_projected_growth as int64)      as fall_to_winter_projected_growth,\n    SAFE_CAST(fall_to_winter_observed_growth as int64)       as fall_to_winter_observed_growth,\n    if(\n        CONTAINS_SUBSTR(fall_to_winter_met_projected_growth, \"Yes\"),\n        TRUE,\n        FALSE\n    )                                                        as met_fall_to_winter_projected_growth,\n    goal1_name                                               as goal1_name,\n    goal1_adjective                                          as goal1_adjective,\n    goal1_rit_score                                          as goal1_rit_score,\n    goal2_name                                               as goal2_name,\n    goal2_adjective                                          as goal2_adjective,\n    goal2_rit_score                                          as goal2_rit_score,\n    goal3_name                                               as goal3_name,\n    goal3_adjective                                          as goal3_adjective,\n    goal3_rit_score                                          as goal3_rit_score,\n    goal4_name                                               as goal4_name,\n    goal4_adjective                                          as goal4_adjective,\n    goal4_rit_score                                          as goal4_rit_score\nfrom {{ source('staging', 'base_nwea_map_assessment_results') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.project.staging.base_nwea_map_assessment_results"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_staging", "fqn": ["project", "staging", "nwea_map", "stg_nwea_map_assessment_results"], "unique_id": "model.project.stg_nwea_map_assessment_results", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "staging/nwea_map/stg_nwea_map_assessment_results.sql", "original_file_path": "models/staging/nwea_map/stg_nwea_map_assessment_results.sql", "name": "stg_nwea_map_assessment_results", "alias": "stg_nwea_map_assessment_results", "checksum": {"name": "sha256", "checksum": "e7fee16b76ee5c10551502fc681392137e55112f9b2e158690c140f29402edcc"}, "tags": [], "refs": [], "sources": [["staging", "base_nwea_map_assessment_results"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/staging/nwea_map/stg_nwea_map.yml", "compiled_path": "target/compiled/project/models/staging/nwea_map/stg_nwea_map_assessment_results.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging"}, "created_at": 1650509848.7370098, "compiled_sql": "select\n    district__state_i_d                                      as district_state_id,\n    district_name                                            as local_education_agency_name,\n    school_name                                              as school_name,\n    split(split(term_name, \"-\")[OFFSET(0)], \" \")[OFFSET(0)]  as term_name,\n    split(term_name, \"-\")[OFFSET(1)]                         as school_year,\n    student_i_d                                              as student_unique_id,\n    student__state_i_d                                       as student_state_id,\n    subject                                                  as subject,\n    REPLACE(course, 'Math K-12', 'Mathematics')              as course,\n    cast(growth_measure_y_n as BOOL)                         as is_growth_measure,\n    norms_reference_data\t                                 as norms_reference_data,\n    test_i_d                                                 as test_id,\n    test_type                                                as test_type,\n    test_name                                                as test_name,\n    cast(parse_date('%m/%d/%Y', test_start_date) as STRING)  as test_start_date,\n    SAFE_CAST(test_duration_minutes as int64)                as test_duration_minutes,\n    SAFE_CAST(test_r_i_t_score as int64)                     as test_rit_score,\n    SAFE_CAST(test_percentile as int64)                      as test_percentile,\n    SAFE_CAST(percent_correct as int64)                      as percent_correct,\n    SAFE_CAST(fall_to_winter_projected_growth as int64)      as fall_to_winter_projected_growth,\n    SAFE_CAST(fall_to_winter_observed_growth as int64)       as fall_to_winter_observed_growth,\n    if(\n        CONTAINS_SUBSTR(fall_to_winter_met_projected_growth, \"Yes\"),\n        TRUE,\n        FALSE\n    )                                                        as met_fall_to_winter_projected_growth,\n    goal1_name                                               as goal1_name,\n    goal1_adjective                                          as goal1_adjective,\n    goal1_rit_score                                          as goal1_rit_score,\n    goal2_name                                               as goal2_name,\n    goal2_adjective                                          as goal2_adjective,\n    goal2_rit_score                                          as goal2_rit_score,\n    goal3_name                                               as goal3_name,\n    goal3_adjective                                          as goal3_adjective,\n    goal3_rit_score                                          as goal3_rit_score,\n    goal4_name                                               as goal4_name,\n    goal4_adjective                                          as goal4_adjective,\n    goal4_rit_score                                          as goal4_rit_score\nfrom `gcp-project`.`dev_staging`.`base_nwea_map_assessment_results`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_staging`.`stg_nwea_map_assessment_results`"}, "model.project.stg_google_forms": {"raw_sql": "select\n    json_value(data, '$.formId')                as form_id,\n    json_value(data, '$.info.documentTitle')    as form_title,\n    json_value(data, '$.revisionId')            as revision_id\nfrom {{ source('staging', 'base_google_forms_questions') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.project.staging.base_google_forms_questions"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_staging", "fqn": ["project", "staging", "google_forms", "stg_google_forms"], "unique_id": "model.project.stg_google_forms", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "staging/google_forms/stg_google_forms.sql", "original_file_path": "models/staging/google_forms/stg_google_forms.sql", "name": "stg_google_forms", "alias": "stg_google_forms", "checksum": {"name": "sha256", "checksum": "e73404dc04c9cf72766c4c9cc71379db711e83ad0dfb990728f4b4599e92bbb6"}, "tags": [], "refs": [], "sources": [["staging", "base_google_forms_questions"]], "description": "One row per Google Form fetched from API", "columns": {"form_id": {"name": "form_id", "description": "Unique identifier for Google Form", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/staging/google_forms/stg_google_forms.yml", "compiled_path": "target/compiled/project/models/staging/google_forms/stg_google_forms.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging"}, "created_at": 1650509849.0710113, "compiled_sql": "select\n    json_value(data, '$.formId')                as form_id,\n    json_value(data, '$.info.documentTitle')    as form_title,\n    json_value(data, '$.revisionId')            as revision_id\nfrom `gcp-project`.`dev_staging`.`base_google_forms_questions`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_staging`.`stg_google_forms`"}, "model.project.google_forms_edfi_surveys": {"raw_sql": "select\n    'uri://forms.google.com'        as namespace,\n    form_id                         as surveyIdentifier,\n    struct( 2022 as schoolYear )    as schoolYearTypeReference,\n    form_title                      as surveyTitle\nfrom {{ ref('stg_google_forms') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.project.stg_google_forms"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_staging", "fqn": ["project", "staging", "google_forms", "google_forms_edfi_surveys"], "unique_id": "model.project.google_forms_edfi_surveys", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "staging/google_forms/google_forms_edfi_surveys.sql", "original_file_path": "models/staging/google_forms/google_forms_edfi_surveys.sql", "name": "google_forms_edfi_surveys", "alias": "google_forms_edfi_surveys", "checksum": {"name": "sha256", "checksum": "5c21d2e79f65b87f87edee2c4a29e7945d704f449c4263e588a3d756f6f63343"}, "tags": [], "refs": [["stg_google_forms"]], "sources": [], "description": "A survey to identified or anonymous respondents", "columns": {"namespace": {"name": "namespace", "description": "Namespace for the Google Form", "meta": {}, "data_type": null, "quote": null, "tags": []}, "surveyIdentifier": {"name": "surveyIdentifier", "description": "The unique survey identifier from the survey tool", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schoolYearTypeReference": {"name": "schoolYearTypeReference", "description": "School year", "meta": {}, "data_type": null, "quote": null, "tags": []}, "surveyTitle": {"name": "surveyTitle", "description": "Title of the Google Form", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/staging/google_forms/stg_google_forms.yml", "compiled_path": "target/compiled/project/models/staging/google_forms/google_forms_edfi_surveys.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging"}, "created_at": 1650509849.0737839, "compiled_sql": "select\n    'uri://forms.google.com'        as namespace,\n    form_id                         as surveyIdentifier,\n    struct( 2022 as schoolYear )    as schoolYearTypeReference,\n    form_title                      as surveyTitle\nfrom `gcp-project`.`dev_staging`.`stg_google_forms`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_staging`.`google_forms_edfi_surveys`"}, "model.project.google_forms_edfi_survey_question_responses": {"raw_sql": "select\n    struct(\n        'uri://forms.google.com'       as namespace,\n        response.question_id           as questionCode,\n        google_forms_responses.form_id as surveyIdentifier\n    )                                                       as surveyQuestionReference,\n    struct(\n        'uri://forms.google.com'                as namespace,\n        google_forms_responses.form_id          as surveyIdentifier,\n        google_forms_responses.response_id      as surveyResponseIdentifier\n    )                                                       as surveyResponseReference,\n    array(\n        select as struct\n            1                           as surveyQuestionResponseValueIdentifier,\n            response.question_response  as textResponse\n    )                                                       as values\nfrom {{ ref('stg_google_forms_responses') }} as google_forms_responses,\n    unnest(google_forms_responses.responses) response", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.project.stg_google_forms_responses"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_staging", "fqn": ["project", "staging", "google_forms", "google_forms_edfi_survey_question_responses"], "unique_id": "model.project.google_forms_edfi_survey_question_responses", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "staging/google_forms/google_forms_edfi_survey_question_responses.sql", "original_file_path": "models/staging/google_forms/google_forms_edfi_survey_question_responses.sql", "name": "google_forms_edfi_survey_question_responses", "alias": "google_forms_edfi_survey_question_responses", "checksum": {"name": "sha256", "checksum": "cf8da8ee87f92083c21a99d3bafc43bf7abb5394f4a918d5ba230bacfbd0a292"}, "tags": [], "refs": [["stg_google_forms_responses"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/google_forms/google_forms_edfi_survey_question_responses.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging"}, "created_at": 1650509848.4433827, "compiled_sql": "select\n    struct(\n        'uri://forms.google.com'       as namespace,\n        response.question_id           as questionCode,\n        google_forms_responses.form_id as surveyIdentifier\n    )                                                       as surveyQuestionReference,\n    struct(\n        'uri://forms.google.com'                as namespace,\n        google_forms_responses.form_id          as surveyIdentifier,\n        google_forms_responses.response_id      as surveyResponseIdentifier\n    )                                                       as surveyResponseReference,\n    array(\n        select as struct\n            1                           as surveyQuestionResponseValueIdentifier,\n            response.question_response  as textResponse\n    )                                                       as values\nfrom `gcp-project`.`dev_staging`.`stg_google_forms_responses` as google_forms_responses,\n    unnest(google_forms_responses.responses) response", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_staging`.`google_forms_edfi_survey_question_responses`"}, "model.project.google_forms_edfi_survey_responses": {"raw_sql": "select\n    google_forms_responses.response_id as surveyResponseIdentifier,\n    struct(\n        dim_student.student_unique_id as studentUniqueId\n    )   as studentReference,\n    struct(\n        'uri://forms.google.com'       as namespace,\n        google_forms_responses.form_id as surveyIdentifier\n    ) as surveyReference,\n    dim_student.email as electronicMailAddress,\n    CONCAT(\n        dim_student.student_first_name, ' ',\n        dim_student.student_last_surname\n     ) as fullName,\n    FORMAT_DATE('%Y-%m-%d', EXTRACT(DATE from google_forms_responses.last_submitted)) as responseDate\nfrom {{ ref('stg_google_forms_responses') }} google_forms_responses\nleft join{{ ref('dim_student') }} dim_student\n    on google_forms_responses.respondent_email = dim_student.email", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.project.stg_google_forms_responses", "model.project.dim_student"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_staging", "fqn": ["project", "staging", "google_forms", "google_forms_edfi_survey_responses"], "unique_id": "model.project.google_forms_edfi_survey_responses", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "staging/google_forms/google_forms_edfi_survey_responses.sql", "original_file_path": "models/staging/google_forms/google_forms_edfi_survey_responses.sql", "name": "google_forms_edfi_survey_responses", "alias": "google_forms_edfi_survey_responses", "checksum": {"name": "sha256", "checksum": "f6bbd4bbf05ff44d07a427d61132d1d7c00e89372a0a9176ab07ea53874330e3"}, "tags": [], "refs": [["stg_google_forms_responses"], ["dim_student"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/google_forms/google_forms_edfi_survey_responses.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging"}, "created_at": 1650509848.4450536, "compiled_sql": "select\n    google_forms_responses.response_id as surveyResponseIdentifier,\n    struct(\n        dim_student.student_unique_id as studentUniqueId\n    )   as studentReference,\n    struct(\n        'uri://forms.google.com'       as namespace,\n        google_forms_responses.form_id as surveyIdentifier\n    ) as surveyReference,\n    dim_student.email as electronicMailAddress,\n    CONCAT(\n        dim_student.student_first_name, ' ',\n        dim_student.student_last_surname\n     ) as fullName,\n    FORMAT_DATE('%Y-%m-%d', EXTRACT(DATE from google_forms_responses.last_submitted)) as responseDate\nfrom `gcp-project`.`dev_staging`.`stg_google_forms_responses` google_forms_responses\nleft join`gcp-project`.`dev_core`.`dim_student` dim_student\n    on google_forms_responses.respondent_email = dim_student.email", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_staging`.`google_forms_edfi_survey_responses`"}, "model.project.google_forms_deleted_responses": {"raw_sql": "select\n    edfi_survey_responses.id            as survey_responses_id,\n    edfi_survey_question_responses.id   as survey_question_responses_id\nfrom {{ ref('stg_edfi_survey_question_responses') }} as edfi_survey_question_responses\nleft join {{ ref('stg_edfi_survey_responses') }} as edfi_survey_responses\n    on edfi_survey_question_responses.survey_response_reference.namespace = edfi_survey_responses.survey_reference.namespace\n    and edfi_survey_question_responses.survey_response_reference.survey_identifier = edfi_survey_responses.survey_reference.survey_identifier\n    and edfi_survey_question_responses.survey_response_reference.survey_response_identifier = edfi_survey_responses.survey_response_identifier\nleft join {{ ref('google_forms_edfi_survey_question_responses') }} as forms_survey_question_responses\n    on edfi_survey_question_responses.survey_response_reference.namespace = forms_survey_question_responses.surveyResponseReference.namespace\n    and edfi_survey_question_responses.survey_response_reference.survey_identifier = forms_survey_question_responses.surveyResponseReference.surveyIdentifier\n    and edfi_survey_question_responses.survey_response_reference.survey_response_identifier = forms_survey_question_responses.surveyResponseReference.surveyResponseIdentifier\nwhere forms_survey_question_responses.surveyResponseReference.surveyResponseIdentifier is null", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.project.stg_edfi_survey_question_responses", "model.project.stg_edfi_survey_responses", "model.project.google_forms_edfi_survey_question_responses"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_staging", "fqn": ["project", "staging", "google_forms", "google_forms_deleted_responses"], "unique_id": "model.project.google_forms_deleted_responses", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "staging/google_forms/google_forms_deleted_responses.sql", "original_file_path": "models/staging/google_forms/google_forms_deleted_responses.sql", "name": "google_forms_deleted_responses", "alias": "google_forms_deleted_responses", "checksum": {"name": "sha256", "checksum": "0409e6653ce3c4e68b6df835b629458463ecd98e8bacf4fd69d911887b0b882d"}, "tags": [], "refs": [["stg_edfi_survey_question_responses"], ["stg_edfi_survey_responses"], ["google_forms_edfi_survey_question_responses"]], "sources": [], "description": "This data model returns Ed-Fi API survey response ids and survey question response ids for records that are in the ODS, but have been deleted from the source Google Form responses\n", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/staging/google_forms/stg_google_forms.yml", "compiled_path": "target/compiled/project/models/staging/google_forms/google_forms_deleted_responses.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging"}, "created_at": 1650509849.072213, "compiled_sql": "select\n    edfi_survey_responses.id            as survey_responses_id,\n    edfi_survey_question_responses.id   as survey_question_responses_id\nfrom `gcp-project`.`dev_staging`.`stg_edfi_survey_question_responses` as edfi_survey_question_responses\nleft join `gcp-project`.`dev_staging`.`stg_edfi_survey_responses` as edfi_survey_responses\n    on edfi_survey_question_responses.survey_response_reference.namespace = edfi_survey_responses.survey_reference.namespace\n    and edfi_survey_question_responses.survey_response_reference.survey_identifier = edfi_survey_responses.survey_reference.survey_identifier\n    and edfi_survey_question_responses.survey_response_reference.survey_response_identifier = edfi_survey_responses.survey_response_identifier\nleft join `gcp-project`.`dev_staging`.`google_forms_edfi_survey_question_responses` as forms_survey_question_responses\n    on edfi_survey_question_responses.survey_response_reference.namespace = forms_survey_question_responses.surveyResponseReference.namespace\n    and edfi_survey_question_responses.survey_response_reference.survey_identifier = forms_survey_question_responses.surveyResponseReference.surveyIdentifier\n    and edfi_survey_question_responses.survey_response_reference.survey_response_identifier = forms_survey_question_responses.surveyResponseReference.surveyResponseIdentifier\nwhere forms_survey_question_responses.surveyResponseReference.surveyResponseIdentifier is null", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_staging`.`google_forms_deleted_responses`"}, "test.project.unique_dim_survey_survey_key.06f98b78fd": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "survey_key", "model": "{{ get_where_subquery(ref('dim_survey')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_survey"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "surveys", "unique_dim_survey_survey_key"], "unique_id": "test.project.unique_dim_survey_survey_key.06f98b78fd", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "unique_dim_survey_survey_key.sql", "original_file_path": "models/marts/surveys/surveys.yml", "name": "unique_dim_survey_survey_key", "alias": "unique_dim_survey_survey_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_survey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/surveys/surveys.yml/unique_dim_survey_survey_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650509848.5791254, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select survey_key as unique_field\n  from `gcp-project`.`dev_surveys`.`dim_survey`\n  where survey_key is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "survey_key", "file_key_name": "models.dim_survey"}, "test.project.not_null_dim_survey_survey_key.5be831148e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "survey_key", "model": "{{ get_where_subquery(ref('dim_survey')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_survey"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "surveys", "not_null_dim_survey_survey_key"], "unique_id": "test.project.not_null_dim_survey_survey_key.5be831148e", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "not_null_dim_survey_survey_key.sql", "original_file_path": "models/marts/surveys/surveys.yml", "name": "not_null_dim_survey_survey_key", "alias": "not_null_dim_survey_survey_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_survey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/surveys/surveys.yml/not_null_dim_survey_survey_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650509848.5805528, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-project`.`dev_surveys`.`dim_survey`\nwhere survey_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "survey_key", "file_key_name": "models.dim_survey"}, "test.project.not_null_dim_survey_namespace.ebc0b8ae90": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "namespace", "model": "{{ get_where_subquery(ref('dim_survey')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_survey"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "surveys", "not_null_dim_survey_namespace"], "unique_id": "test.project.not_null_dim_survey_namespace.ebc0b8ae90", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "not_null_dim_survey_namespace.sql", "original_file_path": "models/marts/surveys/surveys.yml", "name": "not_null_dim_survey_namespace", "alias": "not_null_dim_survey_namespace", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_survey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/surveys/surveys.yml/not_null_dim_survey_namespace.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650509848.5821593, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-project`.`dev_surveys`.`dim_survey`\nwhere namespace is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "namespace", "file_key_name": "models.dim_survey"}, "test.project.not_null_dim_survey_survey_identifier.44423bac2a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "survey_identifier", "model": "{{ get_where_subquery(ref('dim_survey')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_survey"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "surveys", "not_null_dim_survey_survey_identifier"], "unique_id": "test.project.not_null_dim_survey_survey_identifier.44423bac2a", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "not_null_dim_survey_survey_identifier.sql", "original_file_path": "models/marts/surveys/surveys.yml", "name": "not_null_dim_survey_survey_identifier", "alias": "not_null_dim_survey_survey_identifier", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_survey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/surveys/surveys.yml/not_null_dim_survey_survey_identifier.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650509848.5836127, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-project`.`dev_surveys`.`dim_survey`\nwhere survey_identifier is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "survey_identifier", "file_key_name": "models.dim_survey"}, "test.project.not_null_dim_survey_title.bd8681ca91": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "title", "model": "{{ get_where_subquery(ref('dim_survey')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_survey"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "surveys", "not_null_dim_survey_title"], "unique_id": "test.project.not_null_dim_survey_title.bd8681ca91", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "not_null_dim_survey_title.sql", "original_file_path": "models/marts/surveys/surveys.yml", "name": "not_null_dim_survey_title", "alias": "not_null_dim_survey_title", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_survey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/surveys/surveys.yml/not_null_dim_survey_title.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650509848.5851183, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-project`.`dev_surveys`.`dim_survey`\nwhere title is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "title", "file_key_name": "models.dim_survey"}, "test.project.unique_dim_survey_question_survey_question_key.ff3c28d992": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "survey_question_key", "model": "{{ get_where_subquery(ref('dim_survey_question')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_survey_question"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "surveys", "unique_dim_survey_question_survey_question_key"], "unique_id": "test.project.unique_dim_survey_question_survey_question_key.ff3c28d992", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "unique_dim_survey_question_survey_question_key.sql", "original_file_path": "models/marts/surveys/surveys.yml", "name": "unique_dim_survey_question_survey_question_key", "alias": "unique_dim_survey_question_survey_question_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_survey_question"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/surveys/surveys.yml/unique_dim_survey_question_survey_question_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650509848.586701, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select survey_question_key as unique_field\n  from `gcp-project`.`dev_surveys`.`dim_survey_question`\n  where survey_question_key is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "survey_question_key", "file_key_name": "models.dim_survey_question"}, "test.project.not_null_dim_survey_question_survey_question_key.30658bc614": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "survey_question_key", "model": "{{ get_where_subquery(ref('dim_survey_question')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_survey_question"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "surveys", "not_null_dim_survey_question_survey_question_key"], "unique_id": "test.project.not_null_dim_survey_question_survey_question_key.30658bc614", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "not_null_dim_survey_question_survey_question_key.sql", "original_file_path": "models/marts/surveys/surveys.yml", "name": "not_null_dim_survey_question_survey_question_key", "alias": "not_null_dim_survey_question_survey_question_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_survey_question"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/surveys/surveys.yml/not_null_dim_survey_question_survey_question_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650509848.5881526, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-project`.`dev_surveys`.`dim_survey_question`\nwhere survey_question_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "survey_question_key", "file_key_name": "models.dim_survey_question"}, "test.project.relationships_dim_survey_question_survey_key__survey_key__ref_dim_survey_.c326a16f76": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_dim_survey_quest_c5246fbdcd8fca56c784f25839714458\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_survey')", "field": "survey_key", "column_name": "survey_key", "model": "{{ get_where_subquery(ref('dim_survey_question')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_survey", "model.project.dim_survey_question"]}, "config": {"enabled": true, "alias": "relationships_dim_survey_quest_c5246fbdcd8fca56c784f25839714458", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "surveys", "relationships_dim_survey_question_survey_key__survey_key__ref_dim_survey_"], "unique_id": "test.project.relationships_dim_survey_question_survey_key__survey_key__ref_dim_survey_.c326a16f76", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "relationships_dim_survey_quest_c5246fbdcd8fca56c784f25839714458.sql", "original_file_path": "models/marts/surveys/surveys.yml", "name": "relationships_dim_survey_question_survey_key__survey_key__ref_dim_survey_", "alias": "relationships_dim_survey_quest_c5246fbdcd8fca56c784f25839714458", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_survey"], ["dim_survey_question"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/surveys/surveys.yml/relationships_dim_survey_quest_c5246fbdcd8fca56c784f25839714458.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_dim_survey_quest_c5246fbdcd8fca56c784f25839714458"}, "created_at": 1650509848.5896773, "compiled_sql": "\n    \n    \n\nwith child as (\n    select survey_key as from_field\n    from `gcp-project`.`dev_surveys`.`dim_survey_question`\n    where survey_key is not null\n),\n\nparent as (\n    select survey_key as to_field\n    from `gcp-project`.`dev_surveys`.`dim_survey`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "survey_key", "file_key_name": "models.dim_survey_question"}, "test.project.not_null_dim_survey_question_survey_question_identifier.28c61e03d8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "survey_question_identifier", "model": "{{ get_where_subquery(ref('dim_survey_question')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_survey_question"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "surveys", "not_null_dim_survey_question_survey_question_identifier"], "unique_id": "test.project.not_null_dim_survey_question_survey_question_identifier.28c61e03d8", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "not_null_dim_survey_question_survey_question_identifier.sql", "original_file_path": "models/marts/surveys/surveys.yml", "name": "not_null_dim_survey_question_survey_question_identifier", "alias": "not_null_dim_survey_question_survey_question_identifier", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_survey_question"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/surveys/surveys.yml/not_null_dim_survey_question_survey_question_identifier.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650509848.5939753, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-project`.`dev_surveys`.`dim_survey_question`\nwhere survey_question_identifier is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "survey_question_identifier", "file_key_name": "models.dim_survey_question"}, "test.project.not_null_dim_survey_question_text.8c76c49c42": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "text", "model": "{{ get_where_subquery(ref('dim_survey_question')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_survey_question"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "surveys", "not_null_dim_survey_question_text"], "unique_id": "test.project.not_null_dim_survey_question_text.8c76c49c42", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "not_null_dim_survey_question_text.sql", "original_file_path": "models/marts/surveys/surveys.yml", "name": "not_null_dim_survey_question_text", "alias": "not_null_dim_survey_question_text", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_survey_question"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/surveys/surveys.yml/not_null_dim_survey_question_text.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650509848.5954742, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-project`.`dev_surveys`.`dim_survey_question`\nwhere text is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "text", "file_key_name": "models.dim_survey_question"}, "test.project.not_null_dim_survey_question_type.529c95202a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "type", "model": "{{ get_where_subquery(ref('dim_survey_question')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_survey_question"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "surveys", "not_null_dim_survey_question_type"], "unique_id": "test.project.not_null_dim_survey_question_type.529c95202a", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "not_null_dim_survey_question_type.sql", "original_file_path": "models/marts/surveys/surveys.yml", "name": "not_null_dim_survey_question_type", "alias": "not_null_dim_survey_question_type", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_survey_question"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/surveys/surveys.yml/not_null_dim_survey_question_type.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650509848.5970788, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-project`.`dev_surveys`.`dim_survey_question`\nwhere type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "type", "file_key_name": "models.dim_survey_question"}, "test.project.unique_stg_google_forms_form_id.af71bf645b": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "form_id", "model": "{{ get_where_subquery(ref('stg_google_forms')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.project.stg_google_forms"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "staging", "google_forms", "unique_stg_google_forms_form_id"], "unique_id": "test.project.unique_stg_google_forms_form_id.af71bf645b", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "unique_stg_google_forms_form_id.sql", "original_file_path": "models/staging/google_forms/stg_google_forms.yml", "name": "unique_stg_google_forms_form_id", "alias": "unique_stg_google_forms_form_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_google_forms"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/google_forms/stg_google_forms.yml/unique_stg_google_forms_form_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650509849.0744724, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select form_id as unique_field\n  from `gcp-project`.`dev_staging`.`stg_google_forms`\n  where form_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "form_id", "file_key_name": "models.stg_google_forms"}, "test.project.not_null_stg_google_forms_form_id.3c450263cd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "form_id", "model": "{{ get_where_subquery(ref('stg_google_forms')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.stg_google_forms"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "staging", "google_forms", "not_null_stg_google_forms_form_id"], "unique_id": "test.project.not_null_stg_google_forms_form_id.3c450263cd", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "not_null_stg_google_forms_form_id.sql", "original_file_path": "models/staging/google_forms/stg_google_forms.yml", "name": "not_null_stg_google_forms_form_id", "alias": "not_null_stg_google_forms_form_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_google_forms"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/google_forms/stg_google_forms.yml/not_null_stg_google_forms_form_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650509849.0761073, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-project`.`dev_staging`.`stg_google_forms`\nwhere form_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "form_id", "file_key_name": "models.stg_google_forms"}, "test.project.unique_google_forms_deleted_responses_survey_responses_id_survey_question_responses_id.0926e7fbe9": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_google_forms_deleted_re_367718587cdcf7513e7d38bcfd9071e2\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "survey_responses_id || '-' || survey_question_responses_id", "model": "{{ get_where_subquery(ref('google_forms_deleted_responses')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.project.google_forms_deleted_responses"]}, "config": {"enabled": true, "alias": "unique_google_forms_deleted_re_367718587cdcf7513e7d38bcfd9071e2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "staging", "google_forms", "unique_google_forms_deleted_responses_survey_responses_id_survey_question_responses_id"], "unique_id": "test.project.unique_google_forms_deleted_responses_survey_responses_id_survey_question_responses_id.0926e7fbe9", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "unique_google_forms_deleted_re_367718587cdcf7513e7d38bcfd9071e2.sql", "original_file_path": "models/staging/google_forms/stg_google_forms.yml", "name": "unique_google_forms_deleted_responses_survey_responses_id_survey_question_responses_id", "alias": "unique_google_forms_deleted_re_367718587cdcf7513e7d38bcfd9071e2", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["google_forms_deleted_responses"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/google_forms/stg_google_forms.yml/unique_google_forms_deleted_re_367718587cdcf7513e7d38bcfd9071e2.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_google_forms_deleted_re_367718587cdcf7513e7d38bcfd9071e2"}, "created_at": 1650509849.0805407, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select survey_responses_id || '-' || survey_question_responses_id as unique_field\n  from `gcp-project`.`dev_staging`.`google_forms_deleted_responses`\n  where survey_responses_id || '-' || survey_question_responses_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.google_forms_deleted_responses"}, "test.project.not_null_google_forms_edfi_surveys_namespace.efc76b1797": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "namespace", "model": "{{ get_where_subquery(ref('google_forms_edfi_surveys')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.google_forms_edfi_surveys"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "staging", "google_forms", "not_null_google_forms_edfi_surveys_namespace"], "unique_id": "test.project.not_null_google_forms_edfi_surveys_namespace.efc76b1797", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "not_null_google_forms_edfi_surveys_namespace.sql", "original_file_path": "models/staging/google_forms/stg_google_forms.yml", "name": "not_null_google_forms_edfi_surveys_namespace", "alias": "not_null_google_forms_edfi_surveys_namespace", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["google_forms_edfi_surveys"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/google_forms/stg_google_forms.yml/not_null_google_forms_edfi_surveys_namespace.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650509849.0820513, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-project`.`dev_staging`.`google_forms_edfi_surveys`\nwhere namespace is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "namespace", "file_key_name": "models.google_forms_edfi_surveys"}, "test.project.not_null_google_forms_edfi_surveys_surveyIdentifier.ff4076d488": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "surveyIdentifier", "model": "{{ get_where_subquery(ref('google_forms_edfi_surveys')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.google_forms_edfi_surveys"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "staging", "google_forms", "not_null_google_forms_edfi_surveys_surveyIdentifier"], "unique_id": "test.project.not_null_google_forms_edfi_surveys_surveyIdentifier.ff4076d488", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "not_null_google_forms_edfi_surveys_surveyIdentifier.sql", "original_file_path": "models/staging/google_forms/stg_google_forms.yml", "name": "not_null_google_forms_edfi_surveys_surveyIdentifier", "alias": "not_null_google_forms_edfi_surveys_surveyIdentifier", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["google_forms_edfi_surveys"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/google_forms/stg_google_forms.yml/not_null_google_forms_edfi_surveys_surveyIdentifier.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650509849.0834408, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-project`.`dev_staging`.`google_forms_edfi_surveys`\nwhere surveyIdentifier is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "surveyIdentifier", "file_key_name": "models.google_forms_edfi_surveys"}, "test.project.not_null_google_forms_edfi_surveys_schoolYearTypeReference.c0f4244952": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "schoolYearTypeReference", "model": "{{ get_where_subquery(ref('google_forms_edfi_surveys')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.google_forms_edfi_surveys"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "staging", "google_forms", "not_null_google_forms_edfi_surveys_schoolYearTypeReference"], "unique_id": "test.project.not_null_google_forms_edfi_surveys_schoolYearTypeReference.c0f4244952", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "not_null_google_forms_edfi_surveys_schoolYearTypeReference.sql", "original_file_path": "models/staging/google_forms/stg_google_forms.yml", "name": "not_null_google_forms_edfi_surveys_schoolYearTypeReference", "alias": "not_null_google_forms_edfi_surveys_schoolYearTypeReference", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["google_forms_edfi_surveys"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/google_forms/stg_google_forms.yml/not_null_google_forms_edfi_surveys_schoolYearTypeReference.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650509849.0848265, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-project`.`dev_staging`.`google_forms_edfi_surveys`\nwhere schoolYearTypeReference is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "schoolYearTypeReference", "file_key_name": "models.google_forms_edfi_surveys"}, "test.project.not_null_google_forms_edfi_surveys_surveyTitle.0935a70322": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "surveyTitle", "model": "{{ get_where_subquery(ref('google_forms_edfi_surveys')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.google_forms_edfi_surveys"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "staging", "google_forms", "not_null_google_forms_edfi_surveys_surveyTitle"], "unique_id": "test.project.not_null_google_forms_edfi_surveys_surveyTitle.0935a70322", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "not_null_google_forms_edfi_surveys_surveyTitle.sql", "original_file_path": "models/staging/google_forms/stg_google_forms.yml", "name": "not_null_google_forms_edfi_surveys_surveyTitle", "alias": "not_null_google_forms_edfi_surveys_surveyTitle", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["google_forms_edfi_surveys"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/google_forms/stg_google_forms.yml/not_null_google_forms_edfi_surveys_surveyTitle.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650509849.086387, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-project`.`dev_staging`.`google_forms_edfi_surveys`\nwhere surveyTitle is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "surveyTitle", "file_key_name": "models.google_forms_edfi_surveys"}, "model.project.rpt_student_attendance": {"raw_sql": "with max_school_year_dates as (\n\n    select\n        school_year,\n        max(date) as latest_date\n    from {{ ref('fct_student_attendance') }}\n    group by 1\n\n)\n\nselect\n    fct_student_attendance.school_year                                     as school_year,\n    dim_local_education_agency.local_education_agency_name                 as local_education_agency_name,\n    dim_school.school_id                                                   as school_id,\n    dim_school.school_name                                                 as school_name,\n    dim_student.student_unique_id                                          as student_unique_id,\n    dim_student.student_display_name                                       as student_display_name,\n    dim_student.student_last_surname                                       as student_last_surname,\n    dim_student.student_first_name                                         as student_first_name,\n    dim_student.is_actively_enrolled_in_school                             as is_actively_enrolled_in_school,\n    dim_student.grade_level                                                as grade_level,\n    dim_student.grade_level_id                                             as grade_level_id,\n    dim_student.gender                                                     as gender,\n    dim_student.limited_english_proficiency                                as limited_english_proficiency,\n    dim_student.is_english_language_learner                                as is_english_language_learner,\n    dim_student.in_special_education_program                               as in_special_education_program,\n    dim_student.is_hispanic                                                as is_hispanic,\n    dim_student.race_and_ethnicity_roll_up                                 as race_and_ethnicity_roll_up,\n    dim_date.date                                                          as date,\n    dim_date.month_name                                                    as month_name,\n    dim_date.month_sort_order                                              as month_sort_order,\n    fct_student_attendance.school_attendance_event_category_descriptor     as school_attendance_event_category_descriptor,\n    fct_student_attendance.event_duration                                  as event_duration,\n    fct_student_attendance.reported_as_present_at_school                   as reported_as_present_at_school,\n    fct_student_attendance.reported_as_absent_from_school                  as reported_as_absent_from_school,\n    fct_student_attendance.reported_as_present_at_home_room                as reported_as_present_at_home_room,\n    fct_student_attendance.reported_as_absent_from_home_room               as reported_as_absent_from_home_room,\n    fct_student_attendance.is_on_the_verge                                 as is_on_the_verge,\n    fct_student_attendance.is_chronically_absent                           as is_chronically_absent,\n    if(\n        dim_date.date = max_school_year_dates.latest_date, TRUE, FALSE\n    )                                                                      as is_latest_date_avaliable,\n    rls_user_student_data_authorization.authorized_emails\nfrom {{ ref('fct_student_attendance') }} fct_student_attendance\nleft join {{ ref('dim_student') }} dim_student\n    on fct_student_attendance.student_key = dim_student.student_key\nleft join {{ ref('dim_date') }} dim_date\n    on fct_student_attendance.date = dim_date.date\nleft join {{ ref('dim_school') }} dim_school\n    on fct_student_attendance.school_key = dim_school.school_key\nleft join {{ ref('dim_local_education_agency') }} dim_local_education_agency\n    on dim_school.local_education_agency_key = dim_local_education_agency.local_education_agency_key\nleft join {{ ref('rls_user_student_data_authorization') }} rls_user_student_data_authorization\n    on fct_student_attendance.student_key = rls_user_student_data_authorization.student_key\nleft join max_school_year_dates on fct_student_attendance.school_year = max_school_year_dates.school_year", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.project.fct_student_attendance", "model.project.fct_student_attendance", "model.project.dim_student", "model.project.dim_date", "model.project.dim_school", "model.project.dim_local_education_agency", "model.project.rls_user_student_data_authorization"]}, "config": {"enabled": true, "alias": null, "schema": "attendance", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "cluster_by": ["school_name", "grade_level", "student_display_name"], "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_attendance", "fqn": ["project", "marts", "attendance", "rpt_student_attendance"], "unique_id": "model.project.rpt_student_attendance", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "marts/attendance/rpt_student_attendance.sql", "original_file_path": "models/marts/attendance/rpt_student_attendance.sql", "name": "rpt_student_attendance", "alias": "rpt_student_attendance", "checksum": {"name": "sha256", "checksum": "7ea482f800191db5e74e9b16fd262ff24cf3cb399587e52cff9b7c1597a42833"}, "tags": ["edfi"], "refs": [["fct_student_attendance"], ["fct_student_attendance"], ["dim_student"], ["dim_date"], ["dim_school"], ["dim_local_education_agency"], ["rls_user_student_data_authorization"]], "sources": [], "description": "# Report student attendance\n\nGrain: one row per student per school year per school per instructional day they hold an enrollment\n\nUsed for looking at a student's attendance by day. This fact table provides a row for each instructional day the student holds an enrollment up to the previous date.", "columns": {"is_latest_date_avaliable": {"name": "is_latest_date_avaliable", "description": "TRUE/FALSE if the date record is the lastest date available for the respective school year", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/marts/attendance/attendance.yml", "compiled_path": "target/compiled/project/models/marts/attendance/rpt_student_attendance.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "attendance", "tags": "edfi"}, "created_at": 1650510021.9071457, "compiled_sql": "with max_school_year_dates as (\n\n    select\n        school_year,\n        max(date) as latest_date\n    from `gcp-project`.`dev_attendance`.`fct_student_attendance`\n    group by 1\n\n)\n\nselect\n    fct_student_attendance.school_year                                     as school_year,\n    dim_local_education_agency.local_education_agency_name                 as local_education_agency_name,\n    dim_school.school_id                                                   as school_id,\n    dim_school.school_name                                                 as school_name,\n    dim_student.student_unique_id                                          as student_unique_id,\n    dim_student.student_display_name                                       as student_display_name,\n    dim_student.student_last_surname                                       as student_last_surname,\n    dim_student.student_first_name                                         as student_first_name,\n    dim_student.is_actively_enrolled_in_school                             as is_actively_enrolled_in_school,\n    dim_student.grade_level                                                as grade_level,\n    dim_student.grade_level_id                                             as grade_level_id,\n    dim_student.gender                                                     as gender,\n    dim_student.limited_english_proficiency                                as limited_english_proficiency,\n    dim_student.is_english_language_learner                                as is_english_language_learner,\n    dim_student.in_special_education_program                               as in_special_education_program,\n    dim_student.is_hispanic                                                as is_hispanic,\n    dim_student.race_and_ethnicity_roll_up                                 as race_and_ethnicity_roll_up,\n    dim_date.date                                                          as date,\n    dim_date.month_name                                                    as month_name,\n    dim_date.month_sort_order                                              as month_sort_order,\n    fct_student_attendance.school_attendance_event_category_descriptor     as school_attendance_event_category_descriptor,\n    fct_student_attendance.event_duration                                  as event_duration,\n    fct_student_attendance.reported_as_present_at_school                   as reported_as_present_at_school,\n    fct_student_attendance.reported_as_absent_from_school                  as reported_as_absent_from_school,\n    fct_student_attendance.reported_as_present_at_home_room                as reported_as_present_at_home_room,\n    fct_student_attendance.reported_as_absent_from_home_room               as reported_as_absent_from_home_room,\n    fct_student_attendance.is_on_the_verge                                 as is_on_the_verge,\n    fct_student_attendance.is_chronically_absent                           as is_chronically_absent,\n    if(\n        dim_date.date = max_school_year_dates.latest_date, TRUE, FALSE\n    )                                                                      as is_latest_date_avaliable,\n    rls_user_student_data_authorization.authorized_emails\nfrom `gcp-project`.`dev_attendance`.`fct_student_attendance` fct_student_attendance\nleft join `gcp-project`.`dev_core`.`dim_student` dim_student\n    on fct_student_attendance.student_key = dim_student.student_key\nleft join `gcp-project`.`dev_core`.`dim_date` dim_date\n    on fct_student_attendance.date = dim_date.date\nleft join `gcp-project`.`dev_core`.`dim_school` dim_school\n    on fct_student_attendance.school_key = dim_school.school_key\nleft join `gcp-project`.`dev_core`.`dim_local_education_agency` dim_local_education_agency\n    on dim_school.local_education_agency_key = dim_local_education_agency.local_education_agency_key\nleft join `gcp-project`.`dev_row_level_security`.`rls_user_student_data_authorization` rls_user_student_data_authorization\n    on fct_student_attendance.student_key = rls_user_student_data_authorization.student_key\nleft join max_school_year_dates on fct_student_attendance.school_year = max_school_year_dates.school_year", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_attendance`.`rpt_student_attendance`"}, "model.project.current_gpa": {"raw_sql": "with grades as (\n\n    select\n        fct_student_section_grade.student_key,\n        dim_section.available_credits,\n        {{ get_unweighted_gpa_point('letter_grade_earned') }} as unweighted_gpa_point\n    from {{ ref('fct_student_section_grade') }} fct_student_section_grade\n    left join {{ ref('dim_grading_period') }} dim_grading_period\n        on fct_student_section_grade.grading_period_key = dim_grading_period.grading_period_key\n    left join {{ ref('dim_section') }} dim_section\n        on fct_student_section_grade.section_key = dim_section.section_key\n    where\n        dim_grading_period.is_current_grading_period IS TRUE\n        and fct_student_section_grade.is_actively_enrolled_in_section = 1\n        and course_gpa_applicability = 'Applicable'\n\n),\n\ngpa_points as (\n\n    select\n        student_key,\n        available_credits,\n        unweighted_gpa_point * available_credits as unweighted_gpa_points\n    from grades\n\n)\n\nselect\n    dim_school.school_name                                           as school_name,\n    dim_student.student_unique_id                                    as student_unique_id,\n    dim_student.student_display_name                                 as student_display_name,\n    fct_student_school.school_year                                   as school_year,\n    dim_student.grade_level                                          as grade_level,\n    dim_student.grade_level_id                                       as grade_level_id,\n    dim_student.gender                                               as gender,\n    dim_student.limited_english_proficiency                          as limited_english_proficiency,\n    dim_student.is_english_language_learner                          as is_english_language_learner,\n    dim_student.in_special_education_program                         as in_special_education_program,\n    dim_student.is_hispanic                                          as is_hispanic,\n    dim_student.race_and_ethnicity_roll_up                           as race_and_ethnicity_roll_up,\n    SUM(unweighted_gpa_points) / SUM(available_credits) as unweighted_current_gpa\nfrom gpa_points\nleft join {{ ref('fct_student_school') }} fct_student_school\n    on gpa_points.student_key = fct_student_school.student_key\nleft join {{ ref('dim_student') }} dim_student\n    on gpa_points.student_key = dim_student.student_key\nleft join {{ ref('dim_school') }} dim_school\n    on fct_student_school.school_key = dim_school.school_key\nwhere fct_student_school.is_actively_enrolled_in_school = 1\ngroup by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.project.get_unweighted_gpa_point"], "nodes": ["model.project.fct_student_section_grade", "model.project.dim_grading_period", "model.project.dim_section", "model.project.fct_student_school", "model.project.dim_student", "model.project.dim_school"]}, "config": {"enabled": true, "alias": null, "schema": "grades", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "materialization": "view", "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_grades", "fqn": ["project", "metrics", "current_gpa"], "unique_id": "model.project.current_gpa", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "metrics/current_gpa.sql", "original_file_path": "models/metrics/current_gpa.sql", "name": "current_gpa", "alias": "current_gpa", "checksum": {"name": "sha256", "checksum": "eef6d183ac84375fc8717b4ca4a32640dc393cbff50ff9a415cd0b30d2919969"}, "tags": [], "refs": [["fct_student_section_grade"], ["dim_grading_period"], ["dim_section"], ["fct_student_school"], ["dim_student"], ["dim_school"]], "sources": [], "description": "Unweighted GPA taking into account grades from the current grading period and active section enrollments\n", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/metrics/metrics.yml", "compiled_path": "target/compiled/project/models/metrics/current_gpa.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}}, "created_at": 1650510021.9476538, "compiled_sql": "with grades as (\n\n    select\n        fct_student_section_grade.student_key,\n        dim_section.available_credits,\n        \n    case letter_grade_earned\n        when 'A+'   then 4.4\n        when 'A'    then 4\n        when 'A-'   then 3.7\n        when 'B+'   then 3.4\n        when 'B'    then 3\n        when 'B-'   then 2.7\n        when 'C+'   then 2.4\n        when 'C'    then 2\n        when 'C-'   then 1.7\n        when 'D+'   then 1.4\n        when 'D'    then 1.4\n        when 'D-'   then 0.6\n        when 'F'    then 0\n        else NULL\n    end\n as unweighted_gpa_point\n    from `gcp-project`.`dev_grades`.`fct_student_section_grade` fct_student_section_grade\n    left join `gcp-project`.`dev_core`.`dim_grading_period` dim_grading_period\n        on fct_student_section_grade.grading_period_key = dim_grading_period.grading_period_key\n    left join `gcp-project`.`dev_core`.`dim_section` dim_section\n        on fct_student_section_grade.section_key = dim_section.section_key\n    where\n        dim_grading_period.is_current_grading_period IS TRUE\n        and fct_student_section_grade.is_actively_enrolled_in_section = 1\n        and course_gpa_applicability = 'Applicable'\n\n),\n\ngpa_points as (\n\n    select\n        student_key,\n        available_credits,\n        unweighted_gpa_point * available_credits as unweighted_gpa_points\n    from grades\n\n)\n\nselect\n    dim_school.school_name                                           as school_name,\n    dim_student.student_unique_id                                    as student_unique_id,\n    dim_student.student_display_name                                 as student_display_name,\n    fct_student_school.school_year                                   as school_year,\n    dim_student.grade_level                                          as grade_level,\n    dim_student.grade_level_id                                       as grade_level_id,\n    dim_student.gender                                               as gender,\n    dim_student.limited_english_proficiency                          as limited_english_proficiency,\n    dim_student.is_english_language_learner                          as is_english_language_learner,\n    dim_student.in_special_education_program                         as in_special_education_program,\n    dim_student.is_hispanic                                          as is_hispanic,\n    dim_student.race_and_ethnicity_roll_up                           as race_and_ethnicity_roll_up,\n    SUM(unweighted_gpa_points) / SUM(available_credits) as unweighted_current_gpa\nfrom gpa_points\nleft join `gcp-project`.`dev_core`.`fct_student_school` fct_student_school\n    on gpa_points.student_key = fct_student_school.student_key\nleft join `gcp-project`.`dev_core`.`dim_student` dim_student\n    on gpa_points.student_key = dim_student.student_key\nleft join `gcp-project`.`dev_core`.`dim_school` dim_school\n    on fct_student_school.school_key = dim_school.school_key\nwhere fct_student_school.is_actively_enrolled_in_school = 1\ngroup by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_grades`.`current_gpa`"}, "model.project.nwea_map_edfi_student_assessments": {"raw_sql": "with goal_score_results as (\n\n        -- transform wide goal1, goal2, etc columns to long under goal columns\n        select\n            test_id as test_id,\n            test_type as test_type,\n            term_name as term_name,\n            course as academic_subject,\n            goal_name,\n            goal_adjective,\n            goal_rit_score\n        from {{ ref('stg_nwea_map_assessment_results') }}\n        UNPIVOT(\n            (goal_name, goal_adjective, goal_rit_score)\n            FOR goals in (\n                (goal1_name, goal1_adjective, goal1_rit_score),\n                (goal2_name, goal2_adjective, goal2_rit_score),\n                (goal3_name, goal3_adjective, goal3_rit_score),\n                (goal4_name, goal4_adjective, goal4_rit_score)\n            )\n        )\n\n),\n\nstudent_objective_assessments as (\n\n    -- transform goal data into objective assessment spec\n    select\n        test_id,\n        struct(\n\n                struct(\n                    CONCAT(\n                        test_type, \"-\",\n                        term_name, \"-\",\n                        academic_subject\n                    )                   as AssessmentIdentifier,\n                    goal_name as IdentificationCode,\n                    \"uri://nwea.org\" as Namespace\n                ) as ObjectiveAssessmentReference\n                ,\n                array(\n                    select as struct\n                        \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#Proficiency level\"   as AssessmentReportingMethodDescriptor,\n                        CONCAT(\n                            \"uri://nwea.org/PerformanceLevelDescriptor#\",\n                            goal_adjective\n                        )                                                                         as PerformanceLevelDescriptor\n                ) as PerformanceLevels,\n                array(\n                    select as struct\n                        \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#RIT scale score\"                as AssessmentReportingMethodDescriptor,\n                        \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#Integer\"                              as ResultDatatypeTypeDescriptor,\n                        goal_rit_score                                                                      as Result\n                ) as ScoreResults\n\n        ) as result\n    from goal_score_results\n    where goal_name != \"\"\n\n),\n\nstudent_objective_assessments_array as (\n\n    -- aggregate object assessment data into an array\n    select\n        test_id,\n        ARRAY_AGG(result) as student_objective_assessments\n    from student_objective_assessments\n    group by test_id\n\n),\n\nscore_results as (\n\n    {% for score in [\n        [\"RIT scale score\", \"Integer\", \"test_rit_score\"],\n        [\"Percentile\", \"Integer\", \"test_percentile\"],\n    ] %}\n\n        select\n            test_id,\n            struct(\n                \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#{{score[0]}}\"      as AssessmentReportingMethodDescriptor,\n                \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#{{score[1]}}\"             as ResultDatatypeTypeDescriptor,\n                {{score[2]}}                                                            as Result\n            ) as result\n        from {{ ref('stg_nwea_map_assessment_results') }} \n        where test_type = \"Survey With Goals\" and {{score[2]}} is not null\n            \n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n\n),\n\nscore_results_array as (\n\n    -- aggregate assessment score result structs into an array\n    select\n        test_id,\n        ARRAY_AGG(result) as score_results\n    from score_results\n    group by test_id\n\n),\n\nperformance_levels as (\n\n    {% for performance_level in [\n        [\"uri://nwea.org/AssessmentReportingMethodDescriptor#Fall-To-Winter Met Projected Growth\", \"met_fall_to_winter_projected_growth\"],\n    ] %}\n\n        select\n            test_id,\n            struct(\n                \"{{performance_level[0]}}\"                                      as AssessmentReportingMethodDescriptor,\n                CONCAT(\n                    \"uri://ed-fi.org/PerformanceLevelDescriptor#\",\n                    if({{performance_level[1]}}, \"Pass\", \"Fail\")\n                )                                                               as PerformanceLevelDescriptor\n            ) as result\n            from {{ ref('stg_nwea_map_assessment_results') }} \n            where test_type = \"Survey With Goals\" and {{performance_level[1]}} is not null\n            \n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n\n),\n\nperformance_levels_array as (\n\n    -- aggregate assessment performance levels structs into an array\n    select\n        test_id,\n        ARRAY_AGG(result) as performance_levels\n    from performance_levels\n    group by test_id\n\n)\n\n\nselect\n    stg_nwea_map_assessment_results.test_id                                as StudentAssessmentIdentifier,\n    struct(\n        CONCAT(\n            test_type, \"-\",\n            term_name, \"-\",\n            course\n        )                   as AssessmentIdentifier,\n        \"uri://nwea.org\"    as Namespace\n    )                                                                     as AssessmentReference,\n    struct( school_year as SchoolYear )                                   as SchoolYearTypeReference,\n    struct( student_unique_id as StudentUniqueId )                        as StudentReference,\n    test_start_date                                                       as AdministrationDate,\n    performance_levels_array.performance_levels                           as PerformanceLevels,\n    score_results_array.score_results                                     as ScoreResults,\n    student_objective_assessments_array.student_objective_assessments     as StudentObjectiveAssessments\nfrom {{ ref('stg_nwea_map_assessment_results') }} stg_nwea_map_assessment_results\nleft join student_objective_assessments_array on stg_nwea_map_assessment_results.test_id = student_objective_assessments_array.test_id\nleft join score_results_array on stg_nwea_map_assessment_results.test_id = score_results_array.test_id\nleft join performance_levels_array on stg_nwea_map_assessment_results.test_id = performance_levels_array.test_id\nwhere stg_nwea_map_assessment_results.test_type = \"Survey With Goals\"", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.project.stg_nwea_map_assessment_results", "model.project.stg_nwea_map_assessment_results", "model.project.stg_nwea_map_assessment_results", "model.project.stg_nwea_map_assessment_results", "model.project.stg_nwea_map_assessment_results"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_staging", "fqn": ["project", "staging", "nwea_map", "nwea_map_edfi_student_assessments"], "unique_id": "model.project.nwea_map_edfi_student_assessments", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "staging/nwea_map/nwea_map_edfi_student_assessments.sql", "original_file_path": "models/staging/nwea_map/nwea_map_edfi_student_assessments.sql", "name": "nwea_map_edfi_student_assessments", "alias": "nwea_map_edfi_student_assessments", "checksum": {"name": "sha256", "checksum": "a11b07ffeca0d88d1c834c6f3998e21fe559b8a44fd124ebfb6656965abe7e06"}, "tags": [], "refs": [["stg_nwea_map_assessment_results"], ["stg_nwea_map_assessment_results"], ["stg_nwea_map_assessment_results"], ["stg_nwea_map_assessment_results"], ["stg_nwea_map_assessment_results"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/staging/nwea_map/stg_nwea_map.yml", "compiled_path": "target/compiled/project/models/staging/nwea_map/nwea_map_edfi_student_assessments.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging"}, "created_at": 1650510021.9497128, "compiled_sql": "with goal_score_results as (\n\n        -- transform wide goal1, goal2, etc columns to long under goal columns\n        select\n            test_id as test_id,\n            test_type as test_type,\n            term_name as term_name,\n            course as academic_subject,\n            goal_name,\n            goal_adjective,\n            goal_rit_score\n        from `gcp-project`.`dev_staging`.`stg_nwea_map_assessment_results`\n        UNPIVOT(\n            (goal_name, goal_adjective, goal_rit_score)\n            FOR goals in (\n                (goal1_name, goal1_adjective, goal1_rit_score),\n                (goal2_name, goal2_adjective, goal2_rit_score),\n                (goal3_name, goal3_adjective, goal3_rit_score),\n                (goal4_name, goal4_adjective, goal4_rit_score)\n            )\n        )\n\n),\n\nstudent_objective_assessments as (\n\n    -- transform goal data into objective assessment spec\n    select\n        test_id,\n        struct(\n\n                struct(\n                    CONCAT(\n                        test_type, \"-\",\n                        term_name, \"-\",\n                        academic_subject\n                    )                   as AssessmentIdentifier,\n                    goal_name as IdentificationCode,\n                    \"uri://nwea.org\" as Namespace\n                ) as ObjectiveAssessmentReference\n                ,\n                array(\n                    select as struct\n                        \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#Proficiency level\"   as AssessmentReportingMethodDescriptor,\n                        CONCAT(\n                            \"uri://nwea.org/PerformanceLevelDescriptor#\",\n                            goal_adjective\n                        )                                                                         as PerformanceLevelDescriptor\n                ) as PerformanceLevels,\n                array(\n                    select as struct\n                        \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#RIT scale score\"                as AssessmentReportingMethodDescriptor,\n                        \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#Integer\"                              as ResultDatatypeTypeDescriptor,\n                        goal_rit_score                                                                      as Result\n                ) as ScoreResults\n\n        ) as result\n    from goal_score_results\n    where goal_name != \"\"\n\n),\n\nstudent_objective_assessments_array as (\n\n    -- aggregate object assessment data into an array\n    select\n        test_id,\n        ARRAY_AGG(result) as student_objective_assessments\n    from student_objective_assessments\n    group by test_id\n\n),\n\nscore_results as (\n\n    \n\n        select\n            test_id,\n            struct(\n                \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#RIT scale score\"      as AssessmentReportingMethodDescriptor,\n                \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#Integer\"             as ResultDatatypeTypeDescriptor,\n                test_rit_score                                                            as Result\n            ) as result\n        from `gcp-project`.`dev_staging`.`stg_nwea_map_assessment_results` \n        where test_type = \"Survey With Goals\" and test_rit_score is not null\n            \n             union all \n\n        \n\n        select\n            test_id,\n            struct(\n                \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#Percentile\"      as AssessmentReportingMethodDescriptor,\n                \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#Integer\"             as ResultDatatypeTypeDescriptor,\n                test_percentile                                                            as Result\n            ) as result\n        from `gcp-project`.`dev_staging`.`stg_nwea_map_assessment_results` \n        where test_type = \"Survey With Goals\" and test_percentile is not null\n            \n            \n\n        \n\n),\n\nscore_results_array as (\n\n    -- aggregate assessment score result structs into an array\n    select\n        test_id,\n        ARRAY_AGG(result) as score_results\n    from score_results\n    group by test_id\n\n),\n\nperformance_levels as (\n\n    \n\n        select\n            test_id,\n            struct(\n                \"uri://nwea.org/AssessmentReportingMethodDescriptor#Fall-To-Winter Met Projected Growth\"                                      as AssessmentReportingMethodDescriptor,\n                CONCAT(\n                    \"uri://ed-fi.org/PerformanceLevelDescriptor#\",\n                    if(met_fall_to_winter_projected_growth, \"Pass\", \"Fail\")\n                )                                                               as PerformanceLevelDescriptor\n            ) as result\n            from `gcp-project`.`dev_staging`.`stg_nwea_map_assessment_results` \n            where test_type = \"Survey With Goals\" and met_fall_to_winter_projected_growth is not null\n            \n            \n\n        \n\n),\n\nperformance_levels_array as (\n\n    -- aggregate assessment performance levels structs into an array\n    select\n        test_id,\n        ARRAY_AGG(result) as performance_levels\n    from performance_levels\n    group by test_id\n\n)\n\n\nselect\n    stg_nwea_map_assessment_results.test_id                                as StudentAssessmentIdentifier,\n    struct(\n        CONCAT(\n            test_type, \"-\",\n            term_name, \"-\",\n            course\n        )                   as AssessmentIdentifier,\n        \"uri://nwea.org\"    as Namespace\n    )                                                                     as AssessmentReference,\n    struct( school_year as SchoolYear )                                   as SchoolYearTypeReference,\n    struct( student_unique_id as StudentUniqueId )                        as StudentReference,\n    test_start_date                                                       as AdministrationDate,\n    performance_levels_array.performance_levels                           as PerformanceLevels,\n    score_results_array.score_results                                     as ScoreResults,\n    student_objective_assessments_array.student_objective_assessments     as StudentObjectiveAssessments\nfrom `gcp-project`.`dev_staging`.`stg_nwea_map_assessment_results` stg_nwea_map_assessment_results\nleft join student_objective_assessments_array on stg_nwea_map_assessment_results.test_id = student_objective_assessments_array.test_id\nleft join score_results_array on stg_nwea_map_assessment_results.test_id = score_results_array.test_id\nleft join performance_levels_array on stg_nwea_map_assessment_results.test_id = performance_levels_array.test_id\nwhere stg_nwea_map_assessment_results.test_type = \"Survey With Goals\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_staging`.`nwea_map_edfi_student_assessments`"}, "model.project.stg_edfi_school_year_types": {"raw_sql": "{{ retrieve_edfi_records_from_data_lake('base_edfi_school_year_types') }}\n\nselect distinct\n    date_extracted                                  as date_extracted,\n    cast(json_value(data, '$.schoolYear') as int64) as school_year,\n    id                                      as id,\n    json_value(data, '$.schoolYearDescription')     as school_year_description\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_school_year_types", "source.project.staging.base_edfi_school_year_types"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_school_year_types"], "unique_id": "model.project.stg_edfi_school_year_types", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "staging/edfi/stg_edfi_school_year_types.sql", "original_file_path": "models/staging/edfi/stg_edfi_school_year_types.sql", "name": "stg_edfi_school_year_types", "alias": "stg_edfi_school_year_types", "checksum": {"name": "sha256", "checksum": "682f176cdd7f3b293ccc8434a9f17b7f965e800b1ff889d2bdc286e229d013c5"}, "tags": ["edfi"], "refs": [], "sources": [["staging", "base_edfi_school_year_types"], ["staging", "base_edfi_school_year_types"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_school_year_types.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "labels": {"edfi_version": "5_3"}}, "created_at": 1650510021.5191925, "compiled_sql": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `gcp-project`.`dev_staging`.`base_edfi_school_year_types`\n    where is_complete_extract IS TRUE\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `gcp-project`.`dev_staging`.`base_edfi_school_year_types` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            OR base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect distinct\n    date_extracted                                  as date_extracted,\n    cast(json_value(data, '$.schoolYear') as int64) as school_year,\n    id                                      as id,\n    json_value(data, '$.schoolYearDescription')     as school_year_description\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_staging`.`stg_edfi_school_year_types`"}, "model.project.fct_staff_school": {"raw_sql": "select\n    {{ dbt_utils.surrogate_key([\n            'seoa.staff_reference.staff_unique_id',\n            'seoa.school_year'\n    ]) }}                                               as staff_key,\n    {{ dbt_utils.surrogate_key([\n        'seoa.education_organization_reference.education_organization_id',\n        'seoa.school_year'\n    ]) }}                                               as school_key,\n    seoa.school_year                                    as school_year,\n    seoa.staff_classification_descriptor                as staff_classification,\n    ssa.academic_subjects                               as academic_subjects,\n    ssa.grade_levels                                    as grade_levels,\n    seoa.begin_date                                     as begin_date,\n    seoa.end_date                                       as end_date,\n    if(current_date BETWEEN seoa.begin_date and seoa.end_date, 1, 0) as is_actively_assigned_to_school\nfrom {{ ref('stg_edfi_staff_education_organization_assignment_associations') }} seoa\nleft join {{ ref('stg_edfi_staff_school_associations') }} ssa\n    on seoa.school_year = ssa.school_year\n    and seoa.staff_reference.staff_unique_id = ssa.staff_reference.staff_unique_id\n    and seoa.education_organization_reference.education_organization_id = ssa.school_reference.school_id\nwhere seoa.education_organization_reference.education_organization_id in (\n\n    select school_id from {{ ref('stg_edfi_schools') }}\n\n)", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.project.stg_edfi_staff_education_organization_assignment_associations", "model.project.stg_edfi_staff_school_associations", "model.project.stg_edfi_schools"]}, "config": {"enabled": true, "alias": null, "schema": "core", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_core", "fqn": ["project", "marts", "core", "fct_staff_school"], "unique_id": "model.project.fct_staff_school", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "marts/core/fct_staff_school.sql", "original_file_path": "models/marts/core/fct_staff_school.sql", "name": "fct_staff_school", "alias": "fct_staff_school", "checksum": {"name": "sha256", "checksum": "501cb36773b1aff50e590d54431a46e756a24aa2756a3f47742452ffb810cd9e"}, "tags": ["edfi"], "refs": [["stg_edfi_staff_education_organization_assignment_associations"], ["stg_edfi_staff_school_associations"], ["stg_edfi_schools"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/fct_staff_school.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "core", "tags": "edfi"}, "created_at": 1650510021.5247493, "compiled_sql": "select\n    to_hex(md5(cast(coalesce(cast(seoa.staff_reference.staff_unique_id as \n    string\n), '') || '-' || coalesce(cast(seoa.school_year as \n    string\n), '') as \n    string\n)))                                               as staff_key,\n    to_hex(md5(cast(coalesce(cast(seoa.education_organization_reference.education_organization_id as \n    string\n), '') || '-' || coalesce(cast(seoa.school_year as \n    string\n), '') as \n    string\n)))                                               as school_key,\n    seoa.school_year                                    as school_year,\n    seoa.staff_classification_descriptor                as staff_classification,\n    ssa.academic_subjects                               as academic_subjects,\n    ssa.grade_levels                                    as grade_levels,\n    seoa.begin_date                                     as begin_date,\n    seoa.end_date                                       as end_date,\n    if(current_date BETWEEN seoa.begin_date and seoa.end_date, 1, 0) as is_actively_assigned_to_school\nfrom `gcp-project`.`dev_staging`.`stg_edfi_staff_education_organization_assignment_associations` seoa\nleft join `gcp-project`.`dev_staging`.`stg_edfi_staff_school_associations` ssa\n    on seoa.school_year = ssa.school_year\n    and seoa.staff_reference.staff_unique_id = ssa.staff_reference.staff_unique_id\n    and seoa.education_organization_reference.education_organization_id = ssa.school_reference.school_id\nwhere seoa.education_organization_reference.education_organization_id in (\n\n    select school_id from `gcp-project`.`dev_staging`.`stg_edfi_schools`\n\n)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_core`.`fct_staff_school`"}, "model.project.nwea_map_edfi_objective_assessments": {"raw_sql": "with goals as (\n\n    {% for goal_number in [1,2,3,4] %}\n\n        select distinct \n            test_type                                   as test_type,\n            term_name                                   as term_name,\n            course                                      as academic_subject,\n            \"{{goal_number}}\"                           as goal_number,\n            goal{{goal_number}}_name                    as goal_name\n        from {{ ref('stg_nwea_map_assessment_results') }}\n        where test_type = 'Survey With Goals' and goal{{goal_number}}_name != ''\n        \n        {% if not loop.last %} union all {% endif %}\n\n    {% endfor %}\n\n)\n\n\nselect\n    goals.goal_name                                                    as IdentificationCode,\n    struct(\n        CONCAT(\n            test_type, \"-\",\n            term_name, \"-\",\n            academic_subject\n        )                           as AssessmentIdentifier,\n        \"uri://nwea.org\"            as Namespace\n    )                                                                   as AssessmentReference,\n    CONCAT(\"Goal \", goals.goal_number)                                  as Description,\n    CONCAT(\n        \"uri://ed-fi.org/AcademicSubjectDescriptor#\",\n        goals.academic_subject\n    )                                                                   as AcademicSubjectDescriptor,\n    array(\n\n        {% for descriptor in [\"Low\", \"LoAvg\", \"Avg\", \"HiAvg\", \"High\"] %}\n\n            select as struct\n                \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#Proficiency level\" as AssessmentReportingMethodDescriptor,\n                \"uri://nwea.org/PerformanceLevelDescriptor#{{descriptor}}\"          as PerformanceLevelDescriptor,\n                \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level\"                as ResultDatatypeTypeDescriptor\n        \n                {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n\n    )                                                                   as PerformanceLevels,\n    array(\n        {% for score in [\n            [\"RIT scale score\", \"Integer\"],\n            [\"Standard error measurement\", \"Decimal\"]\n        ] %}\n\n            select as struct\n                \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#{{score[0]}}\" as AssessmentReportingMethodDescriptor,\n                \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#{{score[1]}}\" as ResultDatatypeTypeDescriptor\n\n            {% if not loop.last %} union all {% endif %}\n        \n        {% endfor %}\n\n    )                                                                   as Scores\nfrom goals", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.project.stg_nwea_map_assessment_results", "model.project.stg_nwea_map_assessment_results", "model.project.stg_nwea_map_assessment_results", "model.project.stg_nwea_map_assessment_results"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_staging", "fqn": ["project", "staging", "nwea_map", "nwea_map_edfi_objective_assessments"], "unique_id": "model.project.nwea_map_edfi_objective_assessments", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "staging/nwea_map/nwea_map_edfi_objective_assessments.sql", "original_file_path": "models/staging/nwea_map/nwea_map_edfi_objective_assessments.sql", "name": "nwea_map_edfi_objective_assessments", "alias": "nwea_map_edfi_objective_assessments", "checksum": {"name": "sha256", "checksum": "880661cc3ce6069833176d3369138b2145d2030ec2e818bc05a18f55442dbf09"}, "tags": [], "refs": [["stg_nwea_map_assessment_results"], ["stg_nwea_map_assessment_results"], ["stg_nwea_map_assessment_results"], ["stg_nwea_map_assessment_results"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/staging/nwea_map/stg_nwea_map.yml", "compiled_path": "target/compiled/project/models/staging/nwea_map/nwea_map_edfi_objective_assessments.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging"}, "created_at": 1650510021.951555, "compiled_sql": "with goals as (\n\n    \n\n        select distinct \n            test_type                                   as test_type,\n            term_name                                   as term_name,\n            course                                      as academic_subject,\n            \"1\"                           as goal_number,\n            goal1_name                    as goal_name\n        from `gcp-project`.`dev_staging`.`stg_nwea_map_assessment_results`\n        where test_type = 'Survey With Goals' and goal1_name != ''\n        \n         union all \n\n    \n\n        select distinct \n            test_type                                   as test_type,\n            term_name                                   as term_name,\n            course                                      as academic_subject,\n            \"2\"                           as goal_number,\n            goal2_name                    as goal_name\n        from `gcp-project`.`dev_staging`.`stg_nwea_map_assessment_results`\n        where test_type = 'Survey With Goals' and goal2_name != ''\n        \n         union all \n\n    \n\n        select distinct \n            test_type                                   as test_type,\n            term_name                                   as term_name,\n            course                                      as academic_subject,\n            \"3\"                           as goal_number,\n            goal3_name                    as goal_name\n        from `gcp-project`.`dev_staging`.`stg_nwea_map_assessment_results`\n        where test_type = 'Survey With Goals' and goal3_name != ''\n        \n         union all \n\n    \n\n        select distinct \n            test_type                                   as test_type,\n            term_name                                   as term_name,\n            course                                      as academic_subject,\n            \"4\"                           as goal_number,\n            goal4_name                    as goal_name\n        from `gcp-project`.`dev_staging`.`stg_nwea_map_assessment_results`\n        where test_type = 'Survey With Goals' and goal4_name != ''\n        \n        \n\n    \n\n)\n\n\nselect\n    goals.goal_name                                                    as IdentificationCode,\n    struct(\n        CONCAT(\n            test_type, \"-\",\n            term_name, \"-\",\n            academic_subject\n        )                           as AssessmentIdentifier,\n        \"uri://nwea.org\"            as Namespace\n    )                                                                   as AssessmentReference,\n    CONCAT(\"Goal \", goals.goal_number)                                  as Description,\n    CONCAT(\n        \"uri://ed-fi.org/AcademicSubjectDescriptor#\",\n        goals.academic_subject\n    )                                                                   as AcademicSubjectDescriptor,\n    array(\n\n        \n\n            select as struct\n                \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#Proficiency level\" as AssessmentReportingMethodDescriptor,\n                \"uri://nwea.org/PerformanceLevelDescriptor#Low\"          as PerformanceLevelDescriptor,\n                \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level\"                as ResultDatatypeTypeDescriptor\n        \n                 union all \n\n        \n\n            select as struct\n                \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#Proficiency level\" as AssessmentReportingMethodDescriptor,\n                \"uri://nwea.org/PerformanceLevelDescriptor#LoAvg\"          as PerformanceLevelDescriptor,\n                \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level\"                as ResultDatatypeTypeDescriptor\n        \n                 union all \n\n        \n\n            select as struct\n                \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#Proficiency level\" as AssessmentReportingMethodDescriptor,\n                \"uri://nwea.org/PerformanceLevelDescriptor#Avg\"          as PerformanceLevelDescriptor,\n                \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level\"                as ResultDatatypeTypeDescriptor\n        \n                 union all \n\n        \n\n            select as struct\n                \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#Proficiency level\" as AssessmentReportingMethodDescriptor,\n                \"uri://nwea.org/PerformanceLevelDescriptor#HiAvg\"          as PerformanceLevelDescriptor,\n                \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level\"                as ResultDatatypeTypeDescriptor\n        \n                 union all \n\n        \n\n            select as struct\n                \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#Proficiency level\" as AssessmentReportingMethodDescriptor,\n                \"uri://nwea.org/PerformanceLevelDescriptor#High\"          as PerformanceLevelDescriptor,\n                \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level\"                as ResultDatatypeTypeDescriptor\n        \n                \n\n        \n\n    )                                                                   as PerformanceLevels,\n    array(\n        \n\n            select as struct\n                \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#RIT scale score\" as AssessmentReportingMethodDescriptor,\n                \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#Integer\" as ResultDatatypeTypeDescriptor\n\n             union all \n        \n        \n\n            select as struct\n                \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#Standard error measurement\" as AssessmentReportingMethodDescriptor,\n                \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#Decimal\" as ResultDatatypeTypeDescriptor\n\n            \n        \n        \n\n    )                                                                   as Scores\nfrom goals", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_staging`.`nwea_map_edfi_objective_assessments`"}, "model.project.dim_date": {"raw_sql": "with dates as (\n    select distinct\n        date,\n        calendar_reference.school_year\n    from  {{ ref('stg_edfi_calendar_dates') }}\n)\n\n\nselect\n    date                                                    as date,\n    EXTRACT(DAY from date)                                  as day,\n    EXTRACT(MONTH from date)                                as month,\n    FORMAT_DATETIME('%B', date)                             as month_name,\n    EXTRACT(QUARTER from date)                              as calendar_quarter,\n    case\n        when EXTRACT(QUARTER from date) = 1 then 'First'\n        when EXTRACT(QUARTER from date) = 2 then 'Second'\n        when EXTRACT(QUARTER from date) = 3 then 'Third'\n        when EXTRACT(QUARTER from date) = 4 then 'Fourth'\n    end                                                     as calendar_quarter_name,\n    cast(school_year as int64)                              as calendar_year,\n    if(\n        EXTRACT(MONTH from date) >= 7, \n        EXTRACT(MONTH from date) - 6,\n        EXTRACT(MONTH from date) + 6\n    )                                                       as month_sort_order -- note in core amt\nfrom dates", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.project.stg_edfi_calendar_dates"]}, "config": {"enabled": true, "alias": null, "schema": "core", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_core", "fqn": ["project", "marts", "core", "dim_date"], "unique_id": "model.project.dim_date", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "marts/core/dim_date.sql", "original_file_path": "models/marts/core/dim_date.sql", "name": "dim_date", "alias": "dim_date", "checksum": {"name": "sha256", "checksum": "f40e7190fa194a89438d650f94e33bfb5d17eeb446efe01f6d5e2cfb34c901cf"}, "tags": ["edfi"], "refs": [["stg_edfi_calendar_dates"]], "sources": [], "description": "# Date dim\n\nA date dimension table can be found in almost every dimensional model and allows the analytics engineer to look at student performance across different time periods. An explicit date dimension table can also help store date attributes that are not supported by a SQL date function (ie. month sort order in the context of a school year).\n\nThis dimension table notably lacks the date key found in Ed-Fi's Analytics Middle Tier. This is also counter to what Kimball tells us to do. Instead, fact tables found in the marts that include a date, use the DATE type. Kimball argues that if a fact table does this, it will cause folks to use SQL functions on that date to extract items like month name and avoid the join to the date dimension when they need to retrieve such information. You should use the date if you need the date and join on the date dimension if you need more.", "columns": {"date": {"name": "date", "description": "Calendar date", "meta": {}, "data_type": null, "quote": null, "tags": []}, "day": {"name": "day", "description": "Day number", "meta": {}, "data_type": null, "quote": null, "tags": []}, "month": {"name": "month", "description": "Month number", "meta": {}, "data_type": null, "quote": null, "tags": []}, "month_name": {"name": "month_name", "description": "Month name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "calendar_quarter": {"name": "calendar_quarter", "description": "Based on 1: Jan-Mar, 2: Apr-Jun, 3: Jul-Sep, 4: Oct-Dec", "meta": {}, "data_type": null, "quote": null, "tags": []}, "calendar_quarter_name": {"name": "calendar_quarter_name", "description": "Calendar quarter name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "calendar_year": {"name": "calendar_year", "description": "Full four digit year", "meta": {}, "data_type": null, "quote": null, "tags": []}, "month_sort_order": {"name": "month_sort_order", "description": "Looks at school year as July - June", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/marts/core/core.yml", "compiled_path": "target/compiled/project/models/marts/core/dim_date.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "core", "tags": "edfi"}, "created_at": 1650510021.9564393, "compiled_sql": "with dates as (\n    select distinct\n        date,\n        calendar_reference.school_year\n    from  `gcp-project`.`dev_staging`.`stg_edfi_calendar_dates`\n)\n\n\nselect\n    date                                                    as date,\n    EXTRACT(DAY from date)                                  as day,\n    EXTRACT(MONTH from date)                                as month,\n    FORMAT_DATETIME('%B', date)                             as month_name,\n    EXTRACT(QUARTER from date)                              as calendar_quarter,\n    case\n        when EXTRACT(QUARTER from date) = 1 then 'First'\n        when EXTRACT(QUARTER from date) = 2 then 'Second'\n        when EXTRACT(QUARTER from date) = 3 then 'Third'\n        when EXTRACT(QUARTER from date) = 4 then 'Fourth'\n    end                                                     as calendar_quarter_name,\n    cast(school_year as int64)                              as calendar_year,\n    if(\n        EXTRACT(MONTH from date) >= 7, \n        EXTRACT(MONTH from date) - 6,\n        EXTRACT(MONTH from date) + 6\n    )                                                       as month_sort_order -- note in core amt\nfrom dates", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_core`.`dim_date`"}, "model.project.rpt_student_section_grade": {"raw_sql": "with section_grade as (\n\n    select\n        fct_student_section_grade.school_year,\n        fct_student_section_grade.school_key,\n        fct_student_section_grade.section_key,\n        fct_student_section_grade.student_key,\n        fct_student_section_grade.staff_group_key,\n        fct_student_section_grade.is_actively_enrolled_in_section,\n        ARRAY_AGG(\n            struct(\n                dim_grading_period.grading_period_name,\n                dim_grading_period.is_current_grading_period,\n                fct_student_section_grade.grade_type,\n                fct_student_section_grade.numeric_grade_earned,\n                fct_student_section_grade.letter_grade_earned\n            )\n        ) as grade\n    from {{ ref('fct_student_section_grade') }} fct_student_section_grade\n    left join {{ ref('dim_grading_period') }} dim_grading_period\n        on fct_student_section_grade.grading_period_key = dim_grading_period.grading_period_key\n    group by 1,2,3,4,5,6\n\n),\n\nstaff as (\n\n    select\n        section_grade.school_year,\n        section_grade.school_key,\n        section_grade.section_key,\n        section_grade.student_key,\n        ARRAY_AGG(\n            struct(\n                dim_staff.staff_last_surname,\n                dim_staff.staff_first_name,\n                dim_staff.staff_display_name,\n                dim_staff.email,\n                bridge_staff_group.classroom_position\n            )\n        ) as staff\n    from section_grade\n    left join {{ ref('bridge_staff_group') }} bridge_staff_group\n        on section_grade.staff_group_key = bridge_staff_group.staff_group_key\n    left join {{ ref('dim_staff') }} dim_staff\n        on bridge_staff_group.staff_key = dim_staff.staff_key\n    group by 1,2,3,4\n\n)\n\n\nselect\n    section_grade.school_year                                   as school_year,\n    dim_local_education_agency.local_education_agency_name      as local_education_agency_name,\n    dim_school.school_name                                      as school_name,\n    dim_student.student_unique_id                               as student_unique_id,\n    dim_student.student_last_surname                            as student_last_surname,\n    dim_student.student_first_name                              as student_first_name,\n    dim_student.student_display_name                            as student_display_name,\n    dim_student.is_actively_enrolled_in_school                  as is_actively_enrolled_in_school,\n    dim_student.grade_level                                     as grade_level,\n    dim_student.grade_level_id                                  as grade_level_id,\n    dim_student.gender                                          as gender,\n    dim_student.limited_english_proficiency                     as limited_english_proficiency,\n    dim_student.is_english_language_learner                     as is_english_language_learner,\n    dim_student.in_special_education_program                    as in_special_education_program,\n    dim_student.is_hispanic                                     as is_hispanic,\n    dim_student.race_and_ethnicity_roll_up                      as race_and_ethnicity_roll_up,\n    dim_section.local_course_code                               as local_course_code,\n    dim_section.course_title                                    as course_title,\n    dim_section.section_identifier                              as section_identifier,\n    dim_section.course_academic_subject                         as academic_subject,\n    dim_section.course_gpa_applicability                        as course_gpa_applicability,\n    dim_section.available_credits                               as available_credits,\n    section_grade.is_actively_enrolled_in_section               as is_actively_enrolled_in_section,\n    dim_session.session_name                                    as session_name,\n    dim_session.term_name                                       as term_name,\n    staff.staff                                                 as staff,\n    section_grade.grade                                         as grade\nfrom section_grade\nleft join staff\n    on section_grade.school_year = staff.school_year\n    and section_grade.school_key = staff.school_key\n    and section_grade.section_key = staff.section_key\n    and section_grade.student_key = staff.student_key\nleft join {{ ref('dim_section') }} dim_section\n    on section_grade.section_key = dim_section.section_key\nleft join {{ ref('dim_session') }} dim_session\n    on dim_section.session_key = dim_session.session_key\nleft join {{ ref('dim_student') }} dim_student\n    on section_grade.student_key = dim_student.student_key\nleft join {{ ref('dim_school') }} dim_school\n    on section_grade.school_key = dim_school.school_key\nleft join {{ ref('dim_local_education_agency') }} dim_local_education_agency\n    on dim_school.local_education_agency_key = dim_local_education_agency.local_education_agency_key", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.project.fct_student_section_grade", "model.project.dim_grading_period", "model.project.bridge_staff_group", "model.project.dim_staff", "model.project.dim_section", "model.project.dim_session", "model.project.dim_student", "model.project.dim_school", "model.project.dim_local_education_agency"]}, "config": {"enabled": true, "alias": null, "schema": "grades", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_grades", "fqn": ["project", "marts", "grades", "rpt_student_section_grade"], "unique_id": "model.project.rpt_student_section_grade", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "marts/grades/rpt_student_section_grade.sql", "original_file_path": "models/marts/grades/rpt_student_section_grade.sql", "name": "rpt_student_section_grade", "alias": "rpt_student_section_grade", "checksum": {"name": "sha256", "checksum": "18323199445fd38fd7a3c31aa65ab45a49756548f370dd1f58fd68861dd179d0"}, "tags": ["edfi"], "refs": [["fct_student_section_grade"], ["dim_grading_period"], ["bridge_staff_group"], ["dim_staff"], ["dim_section"], ["dim_session"], ["dim_student"], ["dim_school"], ["dim_local_education_agency"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/grades/rpt_student_section_grade.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "grades", "tags": "edfi"}, "created_at": 1650510021.552906, "compiled_sql": "with section_grade as (\n\n    select\n        fct_student_section_grade.school_year,\n        fct_student_section_grade.school_key,\n        fct_student_section_grade.section_key,\n        fct_student_section_grade.student_key,\n        fct_student_section_grade.staff_group_key,\n        fct_student_section_grade.is_actively_enrolled_in_section,\n        ARRAY_AGG(\n            struct(\n                dim_grading_period.grading_period_name,\n                dim_grading_period.is_current_grading_period,\n                fct_student_section_grade.grade_type,\n                fct_student_section_grade.numeric_grade_earned,\n                fct_student_section_grade.letter_grade_earned\n            )\n        ) as grade\n    from `gcp-project`.`dev_grades`.`fct_student_section_grade` fct_student_section_grade\n    left join `gcp-project`.`dev_core`.`dim_grading_period` dim_grading_period\n        on fct_student_section_grade.grading_period_key = dim_grading_period.grading_period_key\n    group by 1,2,3,4,5,6\n\n),\n\nstaff as (\n\n    select\n        section_grade.school_year,\n        section_grade.school_key,\n        section_grade.section_key,\n        section_grade.student_key,\n        ARRAY_AGG(\n            struct(\n                dim_staff.staff_last_surname,\n                dim_staff.staff_first_name,\n                dim_staff.staff_display_name,\n                dim_staff.email,\n                bridge_staff_group.classroom_position\n            )\n        ) as staff\n    from section_grade\n    left join `gcp-project`.`dev_core`.`bridge_staff_group` bridge_staff_group\n        on section_grade.staff_group_key = bridge_staff_group.staff_group_key\n    left join `gcp-project`.`dev_core`.`dim_staff` dim_staff\n        on bridge_staff_group.staff_key = dim_staff.staff_key\n    group by 1,2,3,4\n\n)\n\n\nselect\n    section_grade.school_year                                   as school_year,\n    dim_local_education_agency.local_education_agency_name      as local_education_agency_name,\n    dim_school.school_name                                      as school_name,\n    dim_student.student_unique_id                               as student_unique_id,\n    dim_student.student_last_surname                            as student_last_surname,\n    dim_student.student_first_name                              as student_first_name,\n    dim_student.student_display_name                            as student_display_name,\n    dim_student.is_actively_enrolled_in_school                  as is_actively_enrolled_in_school,\n    dim_student.grade_level                                     as grade_level,\n    dim_student.grade_level_id                                  as grade_level_id,\n    dim_student.gender                                          as gender,\n    dim_student.limited_english_proficiency                     as limited_english_proficiency,\n    dim_student.is_english_language_learner                     as is_english_language_learner,\n    dim_student.in_special_education_program                    as in_special_education_program,\n    dim_student.is_hispanic                                     as is_hispanic,\n    dim_student.race_and_ethnicity_roll_up                      as race_and_ethnicity_roll_up,\n    dim_section.local_course_code                               as local_course_code,\n    dim_section.course_title                                    as course_title,\n    dim_section.section_identifier                              as section_identifier,\n    dim_section.course_academic_subject                         as academic_subject,\n    dim_section.course_gpa_applicability                        as course_gpa_applicability,\n    dim_section.available_credits                               as available_credits,\n    section_grade.is_actively_enrolled_in_section               as is_actively_enrolled_in_section,\n    dim_session.session_name                                    as session_name,\n    dim_session.term_name                                       as term_name,\n    staff.staff                                                 as staff,\n    section_grade.grade                                         as grade\nfrom section_grade\nleft join staff\n    on section_grade.school_year = staff.school_year\n    and section_grade.school_key = staff.school_key\n    and section_grade.section_key = staff.section_key\n    and section_grade.student_key = staff.student_key\nleft join `gcp-project`.`dev_core`.`dim_section` dim_section\n    on section_grade.section_key = dim_section.section_key\nleft join `gcp-project`.`dev_core`.`dim_session` dim_session\n    on dim_section.session_key = dim_session.session_key\nleft join `gcp-project`.`dev_core`.`dim_student` dim_student\n    on section_grade.student_key = dim_student.student_key\nleft join `gcp-project`.`dev_core`.`dim_school` dim_school\n    on section_grade.school_key = dim_school.school_key\nleft join `gcp-project`.`dev_core`.`dim_local_education_agency` dim_local_education_agency\n    on dim_school.local_education_agency_key = dim_local_education_agency.local_education_agency_key", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_grades`.`rpt_student_section_grade`"}, "model.project.dim_student": {"raw_sql": "with school_year_end_dates as (\n\n    select\n        school_year_type_reference.school_year,\n        school_reference.school_id,\n        max(end_date) as school_year_end_date\n    from {{ ref('stg_edfi_sessions') }}\n    group by 1, 2\n\n\n),\n\nactive_enrollments as (\n\n    select distinct\n        student_school_associations.student_reference.student_unique_id            as student_unique_id,\n        student_school_associations.school_year_type_reference.school_year         as school_year,\n        'Yes'                                                                      as is_actively_enrolled_in_school\n    from {{ ref('stg_edfi_student_school_associations') }} student_school_associations\n    left join school_year_end_dates\n        on student_school_associations.school_year_type_reference.school_year = school_year_end_dates.school_year\n        and student_school_associations.school_reference.school_id = school_year_end_dates.school_id\n    where\n        student_school_associations.exit_withdraw_date is null\n        OR (\n            -- active enrollment for current year\n            current_date >= student_school_associations.entry_date\n            and current_date < student_school_associations.exit_withdraw_date\n        )\n        -- if student exited a previous year on the final day of the session\n        -- replace school_year_end_dates.school_year_end_date with DATE 'YYYY-MM-DD' if max session end date does\n        -- not represent school year end date\n        OR student_school_associations.exit_withdraw_date >= school_year_end_dates.school_year_end_date\n\n),\n\nstudent_grade_level_ranked as (\n\n    select\n        school_year_type_reference.school_year,\n        student_reference.student_unique_id,\n        school_reference.school_id,\n        {{ convert_grade_level_to_short_label('entry_grade_level_descriptor') }}     as grade_level,\n        {{ convert_grade_level_to_id('entry_grade_level_descriptor') }}              as grade_level_id,\n        row_number() over (\n            partition by\n                student_reference.student_unique_id,\n                school_year_type_reference.school_year\n            order by\n                school_year_type_reference.school_year DESC,\n                student_reference.student_unique_id,\n                entry_date DESC\n        ) as rank,\n    from {{ ref('stg_edfi_student_school_associations') }}\n\n),\n\nstudent_grade_level as (\n\n    select * from student_grade_level_ranked where rank = 1\n\n),\n\nstudents as (\n\n    select distinct\n        {{ dbt_utils.surrogate_key([\n                'students.student_unique_id',\n                'students.school_year'\n        ]) }}                                                           as student_key,\n        students.school_year                                            as school_year,\n        students.student_unique_id                                      as student_unique_id,\n        students.first_name                                             as student_first_name,\n        students.middle_name                                            as student_middle_name,\n        students.last_surname                                           as student_last_surname,\n        CONCAT(\n            students.last_surname, ', ',\n            students.first_name, ' ',\n            COALESCE(LEFT(students.middle_name, 1), '')\n        )                                                               as student_display_name,\n        seoa.electronic_mail[SAFE_OFFSET(0)].address                    as email,\n        ifnull(active_enrollments.is_actively_enrolled_in_school, 'No')           as is_actively_enrolled_in_school,\n        student_grade_level.grade_level                                 as grade_level,\n        student_grade_level.grade_level_id                              as grade_level_id,\n        COALESCE(\n            seoa.limited_english_proficiency_descriptor,\n            'Not applicable'\n        )                                                               as limited_english_proficiency,\n        if(\n            seoa.limited_english_proficiency_descriptor = \"Limited\",\n            \"Yes\",\n            \"No\"\n        )                                                               as is_english_language_learner,\n        if (\n            edfi_programs.program_name is not null,\n            \"Yes\",\n            \"No\"\n        )                                                               as in_special_education_program,\n        if(seoa.hispanic_latino_ethnicity IS TRUE, 'Yes', 'No')         as is_hispanic,\n        case\n            when seoa.hispanic_latino_ethnicity IS TRUE then 'Hispanic or Latino'\n            when ARRAY_LENGTH(seoa.races) > 1 then 'Two or more races'\n            when ARRAY_LENGTH(seoa.races) = 0 then 'Unknown'\n            else seoa.races[OFFSET(0)].race_descriptor\n        end                                                             as race_and_ethnicity_roll_up,\n        seoa.sex_descriptor                                             as gender,\n        students.birth_date                                             as birth_date\n    from {{ ref('stg_edfi_students') }} students\n    left join {{ ref('stg_edfi_student_education_organization_associations') }} seoa \n        on students.student_unique_id = seoa.student_reference.student_unique_id\n        and students.school_year = seoa.school_year\n    left join {{ ref('stg_edfi_student_special_education_program_associations') }} edfi_student_sped_associations\n        on students.school_year = edfi_student_sped_associations.school_year\n        and seoa.education_organization_reference.education_organization_id = edfi_student_sped_associations.program_reference.education_organization_id\n        and students.student_unique_id = edfi_student_sped_associations.student_reference.student_unique_id\n    left join {{ ref('stg_edfi_programs') }} edfi_programs\n        on edfi_student_sped_associations.school_year = edfi_programs.school_year\n        and edfi_student_sped_associations.program_reference.program_type_descriptor = edfi_programs.program_type_descriptor\n        and edfi_student_sped_associations.program_reference.education_organization_id = edfi_programs.education_organization_reference.education_organization_id\n        and edfi_programs.program_name = \"Special Education\"\n    left join active_enrollments\n        on students.student_unique_id = active_enrollments.student_unique_id\n        and students.school_year = active_enrollments.school_year\n    left join student_grade_level\n        on students.student_unique_id = student_grade_level.student_unique_id\n        and students.school_year = student_grade_level.school_year\n\n)\n\n\nselect\n    student_key,\n    school_year,\n    student_unique_id,\n    student_first_name,\n    student_middle_name,\n    student_last_surname,\n    student_display_name,\n    email,\n    is_actively_enrolled_in_school,\n    grade_level,\n    grade_level_id,\n    ifnull(race_and_ethnicity_roll_up, 'Unknown') as race_and_ethnicity_roll_up,\n    gender,\n    birth_date,\n    MIN(limited_english_proficiency)    as limited_english_proficiency,\n    max(is_english_language_learner)    as is_english_language_learner,\n    max(in_special_education_program)   as in_special_education_program,\n    max(is_hispanic)                    as is_hispanic\nfrom students\ngroup by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.project.convert_grade_level_to_short_label", "macro.project.convert_grade_level_to_id", "macro.dbt_utils.surrogate_key"], "nodes": ["model.project.stg_edfi_sessions", "model.project.stg_edfi_student_school_associations", "model.project.stg_edfi_student_school_associations", "model.project.stg_edfi_students", "model.project.stg_edfi_student_education_organization_associations", "model.project.stg_edfi_student_special_education_program_associations", "model.project.stg_edfi_programs"]}, "config": {"enabled": true, "alias": null, "schema": "core", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_core", "fqn": ["project", "marts", "core", "dim_student"], "unique_id": "model.project.dim_student", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "marts/core/dim_student.sql", "original_file_path": "models/marts/core/dim_student.sql", "name": "dim_student", "alias": "dim_student", "checksum": {"name": "sha256", "checksum": "cf1458ae70c320a6b2b6e08fcf56265d97ba0145449cefb857e132a09c4ab562"}, "tags": ["edfi"], "refs": [["stg_edfi_sessions"], ["stg_edfi_student_school_associations"], ["stg_edfi_student_school_associations"], ["stg_edfi_students"], ["stg_edfi_student_education_organization_associations"], ["stg_edfi_student_special_education_program_associations"], ["stg_edfi_programs"]], "sources": [], "description": "# Student dim\n\nGrain: one record per student per school year\n\nEd-Fi's Analytics Middle Tier provides two student dims related to the student's LEA association and the student's school association. This dim combines those two dims to provide one student dim that can be used downstream. If a student has multiple school enrollments, only their most recent will show in this dim.", "columns": {"student_key": {"name": "student_key", "description": "Primary key for dimension table. This surrogate key is based on the student's unique id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_key": {"name": "school_key", "description": "Foreign key to `dim_school`", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_year": {"name": "school_year", "description": "School year", "meta": {}, "data_type": null, "quote": null, "tags": []}, "student_unique_id": {"name": "student_unique_id", "description": "Student unique identifier", "meta": {}, "data_type": null, "quote": null, "tags": []}, "student_last_surname": {"name": "student_last_surname", "description": "The name borne in common by members of a family.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "student_first_name": {"name": "student_first_name", "description": "A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "student_display_name": {"name": "student_display_name", "description": "Concatenation of student's last name, first name, and first letter of middle name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "Student email", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_enrollment_date": {"name": "school_enrollment_date", "description": "The date the student began their school enrollment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_exit_date": {"name": "school_exit_date", "description": "Typically the day after the student concluded their final day of enrollment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_enrolled_at_school": {"name": "is_enrolled_at_school", "description": "0 or 1 depending on if the student holds an active enrollment at the school", "meta": {}, "data_type": null, "quote": null, "tags": []}, "grade_level": {"name": "grade_level", "description": "Grade level label", "meta": {}, "data_type": null, "quote": null, "tags": []}, "grade_level_id": {"name": "grade_level_id", "description": "Grade level id useful for sorting dropdowns in bi tools", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gender": {"name": "gender", "description": "The student's gender as last reported to the education organization", "meta": {}, "data_type": null, "quote": null, "tags": []}, "limited_english_proficiency": {"name": "limited_english_proficiency", "description": "An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_english_language_learner": {"name": "is_english_language_learner", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "in_special_education_program": {"name": "in_special_education_program", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_hispanic": {"name": "is_hispanic", "description": "An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race, as last reported to the education organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "race": {"name": "race", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "race_and_ethnicity_roll_up": {"name": "race_and_ethnicity_roll_up", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/marts/core/core.yml", "compiled_path": "target/compiled/project/models/marts/core/dim_student.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "core", "tags": "edfi"}, "created_at": 1650510021.9635646, "compiled_sql": "with school_year_end_dates as (\n\n    select\n        school_year_type_reference.school_year,\n        school_reference.school_id,\n        max(end_date) as school_year_end_date\n    from `gcp-project`.`dev_staging`.`stg_edfi_sessions`\n    group by 1, 2\n\n\n),\n\nactive_enrollments as (\n\n    select distinct\n        student_school_associations.student_reference.student_unique_id            as student_unique_id,\n        student_school_associations.school_year_type_reference.school_year         as school_year,\n        'Yes'                                                                      as is_actively_enrolled_in_school\n    from `gcp-project`.`dev_staging`.`stg_edfi_student_school_associations` student_school_associations\n    left join school_year_end_dates\n        on student_school_associations.school_year_type_reference.school_year = school_year_end_dates.school_year\n        and student_school_associations.school_reference.school_id = school_year_end_dates.school_id\n    where\n        student_school_associations.exit_withdraw_date is null\n        OR (\n            -- active enrollment for current year\n            current_date >= student_school_associations.entry_date\n            and current_date < student_school_associations.exit_withdraw_date\n        )\n        -- if student exited a previous year on the final day of the session\n        -- replace school_year_end_dates.school_year_end_date with DATE 'YYYY-MM-DD' if max session end date does\n        -- not represent school year end date\n        OR student_school_associations.exit_withdraw_date >= school_year_end_dates.school_year_end_date\n\n),\n\nstudent_grade_level_ranked as (\n\n    select\n        school_year_type_reference.school_year,\n        student_reference.student_unique_id,\n        school_reference.school_id,\n        \n    case entry_grade_level_descriptor\n        when 'Infant/toddler'            then 'Infant'\n        when 'Preschool/Prekindergarten' then 'PreK'\n        when 'Transitional Kindergarten' then 'TK'\n        when 'Kindergarten'              then 'K'\n        when 'First grade'               then '1'\n        when 'Second grade'              then '2'\n        when 'Third grade'               then '3'\n        when 'Fourth grade'              then '4'\n        when 'Fifth grade'               then '5'\n        when 'Sixth grade'               then '6'\n        when 'Seventh grade'             then '7'\n        when 'Eighth grade'              then '8'\n        when 'Ninth grade'               then '9'\n        when 'Tenth grade'               then '10'\n        when 'Eleventh grade'            then '11'\n        when 'Twelfth grade'             then '12'\n        else '999999999'\n    end\n     as grade_level,\n        \n    case entry_grade_level_descriptor\n        when 'Infant/toddler'            then -3\n        when 'Preschool/Prekindergarten' then -2\n        when 'Transitional Kindergarten' then -1\n        when 'Kindergarten'              then 1\n        when 'First grade'               then 2\n        when 'Second grade'              then 3\n        when 'Third grade'               then 4\n        when 'Fourth grade'              then 5\n        when 'Fifth grade'               then 6\n        when 'Sixth grade'               then 7\n        when 'Seventh grade'             then 8\n        when 'Eighth grade'              then 9\n        when 'Ninth grade'               then 10\n        when 'Tenth grade'               then 11\n        when 'Eleventh grade'            then 12\n        when 'Twelfth grade'             then 13\n        else 999999999\n    end\n              as grade_level_id,\n        row_number() over (\n            partition by\n                student_reference.student_unique_id,\n                school_year_type_reference.school_year\n            order by\n                school_year_type_reference.school_year DESC,\n                student_reference.student_unique_id,\n                entry_date DESC\n        ) as rank,\n    from `gcp-project`.`dev_staging`.`stg_edfi_student_school_associations`\n\n),\n\nstudent_grade_level as (\n\n    select * from student_grade_level_ranked where rank = 1\n\n),\n\nstudents as (\n\n    select distinct\n        to_hex(md5(cast(coalesce(cast(students.student_unique_id as \n    string\n), '') || '-' || coalesce(cast(students.school_year as \n    string\n), '') as \n    string\n)))                                                           as student_key,\n        students.school_year                                            as school_year,\n        students.student_unique_id                                      as student_unique_id,\n        students.first_name                                             as student_first_name,\n        students.middle_name                                            as student_middle_name,\n        students.last_surname                                           as student_last_surname,\n        CONCAT(\n            students.last_surname, ', ',\n            students.first_name, ' ',\n            COALESCE(LEFT(students.middle_name, 1), '')\n        )                                                               as student_display_name,\n        seoa.electronic_mail[SAFE_OFFSET(0)].address                    as email,\n        ifnull(active_enrollments.is_actively_enrolled_in_school, 'No')           as is_actively_enrolled_in_school,\n        student_grade_level.grade_level                                 as grade_level,\n        student_grade_level.grade_level_id                              as grade_level_id,\n        COALESCE(\n            seoa.limited_english_proficiency_descriptor,\n            'Not applicable'\n        )                                                               as limited_english_proficiency,\n        if(\n            seoa.limited_english_proficiency_descriptor = \"Limited\",\n            \"Yes\",\n            \"No\"\n        )                                                               as is_english_language_learner,\n        if (\n            edfi_programs.program_name is not null,\n            \"Yes\",\n            \"No\"\n        )                                                               as in_special_education_program,\n        if(seoa.hispanic_latino_ethnicity IS TRUE, 'Yes', 'No')         as is_hispanic,\n        case\n            when seoa.hispanic_latino_ethnicity IS TRUE then 'Hispanic or Latino'\n            when ARRAY_LENGTH(seoa.races) > 1 then 'Two or more races'\n            when ARRAY_LENGTH(seoa.races) = 0 then 'Unknown'\n            else seoa.races[OFFSET(0)].race_descriptor\n        end                                                             as race_and_ethnicity_roll_up,\n        seoa.sex_descriptor                                             as gender,\n        students.birth_date                                             as birth_date\n    from `gcp-project`.`dev_staging`.`stg_edfi_students` students\n    left join `gcp-project`.`dev_staging`.`stg_edfi_student_education_organization_associations` seoa \n        on students.student_unique_id = seoa.student_reference.student_unique_id\n        and students.school_year = seoa.school_year\n    left join `gcp-project`.`dev_staging`.`stg_edfi_student_special_education_program_associations` edfi_student_sped_associations\n        on students.school_year = edfi_student_sped_associations.school_year\n        and seoa.education_organization_reference.education_organization_id = edfi_student_sped_associations.program_reference.education_organization_id\n        and students.student_unique_id = edfi_student_sped_associations.student_reference.student_unique_id\n    left join `gcp-project`.`dev_staging`.`stg_edfi_programs` edfi_programs\n        on edfi_student_sped_associations.school_year = edfi_programs.school_year\n        and edfi_student_sped_associations.program_reference.program_type_descriptor = edfi_programs.program_type_descriptor\n        and edfi_student_sped_associations.program_reference.education_organization_id = edfi_programs.education_organization_reference.education_organization_id\n        and edfi_programs.program_name = \"Special Education\"\n    left join active_enrollments\n        on students.student_unique_id = active_enrollments.student_unique_id\n        and students.school_year = active_enrollments.school_year\n    left join student_grade_level\n        on students.student_unique_id = student_grade_level.student_unique_id\n        and students.school_year = student_grade_level.school_year\n\n)\n\n\nselect\n    student_key,\n    school_year,\n    student_unique_id,\n    student_first_name,\n    student_middle_name,\n    student_last_surname,\n    student_display_name,\n    email,\n    is_actively_enrolled_in_school,\n    grade_level,\n    grade_level_id,\n    ifnull(race_and_ethnicity_roll_up, 'Unknown') as race_and_ethnicity_roll_up,\n    gender,\n    birth_date,\n    MIN(limited_english_proficiency)    as limited_english_proficiency,\n    max(is_english_language_learner)    as is_english_language_learner,\n    max(in_special_education_program)   as in_special_education_program,\n    max(is_hispanic)                    as is_hispanic\nfrom students\ngroup by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_core`.`dim_student`"}, "model.project.stg_google_forms_responses": {"raw_sql": "{% call set_sql_header(config) %}\n\n    CREATE TEMP FUNCTION jsonObjectKeys(input STRING)\n    RETURNS Array<struct<question_id STRING, question_response STRING>>\n    LANGUAGE js as \"\"\"\n\n        var values = [];\n        var object = JSON.parse(input);\n\n        for (let key in object) {\n            answers = object[key]['textAnswers']['answers'];\n            for (let answer of answers) {\n                values.push({\n                    question_id: object[key]['questionId'],\n                    question_response: answer['value']\n                });\n            }\n        \n        }\n        \n        return values;\n\n    \"\"\";\n\n{% endcall %}\n\nwith responses as (\n    select  \n        json_value(data, '$.formId')            as form_id,\n        json_value(data, '$.responseId')        as response_id,\n        json_value(data, '$.respondentEmail')   as respondent_email,\n        question,\n        cast(json_value(data, '$.lastSubmittedTime') as TIMESTAMP) as last_submitted\n    from {{ source('staging', 'base_google_forms_responses') }}\n    cross join unnest(jsonObjectKeys(JSON_QUERY(data, '$.answers'))) question\n)\n\nselect\n    form_id                     as form_id,\n    to_hex(md5(response_id))    as response_id,\n    respondent_email            as respondent_email,\n    last_submitted              as last_submitted,\n    ARRAY_AGG(\n        struct(\n            question.question_id,\n            question.question_response\n        )\n    )                          as responses\nfrom responses\ngroup by\n    form_id,\n    response_id,\n    respondent_email,\n    last_submitted", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.set_sql_header"], "nodes": ["source.project.staging.base_google_forms_responses"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "sql_header": "\n\n    CREATE TEMP FUNCTION jsonObjectKeys(input STRING)\n    RETURNS Array<struct<question_id STRING, question_response STRING>>\n    LANGUAGE js as \"\"\"\n\n        var values = [];\n        var object = JSON.parse(input);\n\n        for (let key in object) {\n            answers = object[key]['textAnswers']['answers'];\n            for (let answer of answers) {\n                values.push({\n                    question_id: object[key]['questionId'],\n                    question_response: answer['value']\n                });\n            }\n        \n        }\n        \n        return values;\n\n    \"\"\";\n\n", "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_staging", "fqn": ["project", "staging", "google_forms", "stg_google_forms_responses"], "unique_id": "model.project.stg_google_forms_responses", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "staging/google_forms/stg_google_forms_responses.sql", "original_file_path": "models/staging/google_forms/stg_google_forms_responses.sql", "name": "stg_google_forms_responses", "alias": "stg_google_forms_responses", "checksum": {"name": "sha256", "checksum": "cb0a809b09b5f8bff14c279ecee6e605be18269a60784f0fec2850b8de060c6c"}, "tags": [], "refs": [], "sources": [["staging", "base_google_forms_responses"]], "description": "One row per Google Form per response", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/staging/google_forms/stg_google_forms.yml", "compiled_path": "target/compiled/project/models/staging/google_forms/stg_google_forms_responses.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "sql_header": "\n\n    CREATE TEMP FUNCTION jsonObjectKeys(input STRING)\n    RETURNS Array<struct<question_id STRING, question_response STRING>>\n    LANGUAGE js as \"\"\"\n\n        var values = [];\n        var object = JSON.parse(input);\n\n        for (let key in object) {\n            answers = object[key]['textAnswers']['answers'];\n            for (let answer of answers) {\n                values.push({\n                    question_id: object[key]['questionId'],\n                    question_response: answer['value']\n                });\n            }\n        \n        }\n        \n        return values;\n\n    \"\"\";\n\n"}, "created_at": 1650510022.0897362, "compiled_sql": "\n\nwith responses as (\n    select  \n        json_value(data, '$.formId')            as form_id,\n        json_value(data, '$.responseId')        as response_id,\n        json_value(data, '$.respondentEmail')   as respondent_email,\n        question,\n        cast(json_value(data, '$.lastSubmittedTime') as TIMESTAMP) as last_submitted\n    from `gcp-project`.`dev_staging`.`base_google_forms_responses`\n    cross join unnest(jsonObjectKeys(JSON_QUERY(data, '$.answers'))) question\n)\n\nselect\n    form_id                     as form_id,\n    to_hex(md5(response_id))    as response_id,\n    respondent_email            as respondent_email,\n    last_submitted              as last_submitted,\n    ARRAY_AGG(\n        struct(\n            question.question_id,\n            question.question_response\n        )\n    )                          as responses\nfrom responses\ngroup by\n    form_id,\n    response_id,\n    respondent_email,\n    last_submitted", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_staging`.`stg_google_forms_responses`"}, "model.project.rpt_student_assessment": {"raw_sql": "with assessments as (\n\n    select\n        fct_student_assessment.school_year,\n        fct_student_assessment.student_assessment_identifier,\n        ARRAY_AGG(\n            struct(\n                fct_student_assessment.reporting_method                    as reporting_method,\n                fct_student_assessment.student_result                      as student_result\n            )\n        ) as assessment_student_score\n    from {{ ref('fct_student_assessment') }} fct_student_assessment\n    left join {{ ref('dim_assessment') }} dim_assessment\n        on fct_student_assessment.assessment_key = dim_assessment.assessment_key\n    where dim_assessment.objective_assessment_identification_code is null\n    group by 1, 2\n\n),\n\nobjective_assessments as (\n\n    select\n        fct_student_assessment.school_year,\n        fct_student_assessment.student_assessment_identifier,\n        ARRAY_AGG(\n            struct(\n                dim_assessment.objective_assessment_identification_code              as identification_code,\n                dim_assessment.objective_assessment_description                      as description,\n                fct_student_assessment.reporting_method                                        as reporting_method,\n                fct_student_assessment.student_result                                          as student_result\n            )\n        ) as objective_assessment_student_score\n    from {{ ref('fct_student_assessment') }} fct_student_assessment\n    left join {{ ref('dim_assessment') }} dim_assessment\n        on fct_student_assessment.assessment_key = dim_assessment.assessment_key\n    where dim_assessment.objective_assessment_identification_code is not null\n    group by 1, 2\n\n)\n\nselect\n    fct_student_assessment.school_year                          as school_year,\n    dim_school.school_name                                      as school_name,\n    dim_student.student_unique_id                               as student_unique_id,\n    dim_student.student_last_surname                            as student_last_surname,\n    dim_student.student_first_name                              as student_first_name,\n    dim_student.student_display_name                            as student_display_name,\n    dim_student.is_actively_enrolled_in_school                  as is_actively_enrolled_in_school,\n    dim_student.grade_level                                     as grade_level,\n    dim_student.grade_level_id                                  as grade_level_id,\n    dim_student.gender                                          as gender,\n    dim_student.limited_english_proficiency                     as limited_english_proficiency,\n    dim_student.is_english_language_learner                     as is_english_language_learner,\n    dim_student.in_special_education_program                    as in_special_education_program,\n    dim_student.is_hispanic                                     as is_hispanic,\n    dim_student.race_and_ethnicity_roll_up                      as race_and_ethnicity_roll_up,\n    dim_assessment.assessment_identifier                        as assessment_identifier,\n    dim_assessment.title                                        as title,\n    dim_assessment.namespace                                    as namespace,\n    fct_student_assessment.student_assessment_identifier        as student_assessment_identifier,\n    objective_assessments.objective_assessment_student_score    as objective_assessment_student_score,\n    assessments.assessment_student_score                        as assessment_student_score\nfrom {{ ref('fct_student_assessment') }} fct_student_assessment\nleft join {{ ref('dim_assessment') }} dim_assessment\n    on fct_student_assessment.assessment_key = dim_assessment.assessment_key\nleft join assessments\n    on fct_student_assessment.student_assessment_identifier = assessments.student_assessment_identifier\nleft join objective_assessments\n    on fct_student_assessment.student_assessment_identifier = objective_assessments.student_assessment_identifier\nleft join {{ ref('dim_student') }} dim_student\n    on fct_student_assessment.student_key = dim_student.student_key\nleft join {{ ref('dim_school') }} dim_school\n    on fct_student_assessment.school_key = dim_school.school_key\nwhere \n    dim_assessment.objective_assessment_identification_code is null\n    and dim_student.student_unique_id is not null", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.project.fct_student_assessment", "model.project.dim_assessment", "model.project.fct_student_assessment", "model.project.dim_assessment", "model.project.fct_student_assessment", "model.project.dim_assessment", "model.project.dim_student", "model.project.dim_school"]}, "config": {"enabled": true, "alias": null, "schema": "assessments", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_assessments", "fqn": ["project", "marts", "assessments", "rpt_student_assessment"], "unique_id": "model.project.rpt_student_assessment", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "marts/assessments/rpt_student_assessment.sql", "original_file_path": "models/marts/assessments/rpt_student_assessment.sql", "name": "rpt_student_assessment", "alias": "rpt_student_assessment", "checksum": {"name": "sha256", "checksum": "73d90e8373947c224d79b9a6d4c032886ad6e5f83726739764dc6448d5c857e4"}, "tags": ["edfi"], "refs": [["fct_student_assessment"], ["dim_assessment"], ["fct_student_assessment"], ["dim_assessment"], ["fct_student_assessment"], ["dim_assessment"], ["dim_student"], ["dim_school"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/assessments/rpt_student_assessment.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "assessments", "tags": "edfi"}, "created_at": 1650510021.5696876, "compiled_sql": "with assessments as (\n\n    select\n        fct_student_assessment.school_year,\n        fct_student_assessment.student_assessment_identifier,\n        ARRAY_AGG(\n            struct(\n                fct_student_assessment.reporting_method                    as reporting_method,\n                fct_student_assessment.student_result                      as student_result\n            )\n        ) as assessment_student_score\n    from `gcp-project`.`dev_assessments`.`fct_student_assessment` fct_student_assessment\n    left join `gcp-project`.`dev_assessments`.`dim_assessment` dim_assessment\n        on fct_student_assessment.assessment_key = dim_assessment.assessment_key\n    where dim_assessment.objective_assessment_identification_code is null\n    group by 1, 2\n\n),\n\nobjective_assessments as (\n\n    select\n        fct_student_assessment.school_year,\n        fct_student_assessment.student_assessment_identifier,\n        ARRAY_AGG(\n            struct(\n                dim_assessment.objective_assessment_identification_code              as identification_code,\n                dim_assessment.objective_assessment_description                      as description,\n                fct_student_assessment.reporting_method                                        as reporting_method,\n                fct_student_assessment.student_result                                          as student_result\n            )\n        ) as objective_assessment_student_score\n    from `gcp-project`.`dev_assessments`.`fct_student_assessment` fct_student_assessment\n    left join `gcp-project`.`dev_assessments`.`dim_assessment` dim_assessment\n        on fct_student_assessment.assessment_key = dim_assessment.assessment_key\n    where dim_assessment.objective_assessment_identification_code is not null\n    group by 1, 2\n\n)\n\nselect\n    fct_student_assessment.school_year                          as school_year,\n    dim_school.school_name                                      as school_name,\n    dim_student.student_unique_id                               as student_unique_id,\n    dim_student.student_last_surname                            as student_last_surname,\n    dim_student.student_first_name                              as student_first_name,\n    dim_student.student_display_name                            as student_display_name,\n    dim_student.is_actively_enrolled_in_school                  as is_actively_enrolled_in_school,\n    dim_student.grade_level                                     as grade_level,\n    dim_student.grade_level_id                                  as grade_level_id,\n    dim_student.gender                                          as gender,\n    dim_student.limited_english_proficiency                     as limited_english_proficiency,\n    dim_student.is_english_language_learner                     as is_english_language_learner,\n    dim_student.in_special_education_program                    as in_special_education_program,\n    dim_student.is_hispanic                                     as is_hispanic,\n    dim_student.race_and_ethnicity_roll_up                      as race_and_ethnicity_roll_up,\n    dim_assessment.assessment_identifier                        as assessment_identifier,\n    dim_assessment.title                                        as title,\n    dim_assessment.namespace                                    as namespace,\n    fct_student_assessment.student_assessment_identifier        as student_assessment_identifier,\n    objective_assessments.objective_assessment_student_score    as objective_assessment_student_score,\n    assessments.assessment_student_score                        as assessment_student_score\nfrom `gcp-project`.`dev_assessments`.`fct_student_assessment` fct_student_assessment\nleft join `gcp-project`.`dev_assessments`.`dim_assessment` dim_assessment\n    on fct_student_assessment.assessment_key = dim_assessment.assessment_key\nleft join assessments\n    on fct_student_assessment.student_assessment_identifier = assessments.student_assessment_identifier\nleft join objective_assessments\n    on fct_student_assessment.student_assessment_identifier = objective_assessments.student_assessment_identifier\nleft join `gcp-project`.`dev_core`.`dim_student` dim_student\n    on fct_student_assessment.student_key = dim_student.student_key\nleft join `gcp-project`.`dev_core`.`dim_school` dim_school\n    on fct_student_assessment.school_key = dim_school.school_key\nwhere \n    dim_assessment.objective_assessment_identification_code is null\n    and dim_student.student_unique_id is not null", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_assessments`.`rpt_student_assessment`"}, "model.project.dim_assessment": {"raw_sql": "select\n    {{ dbt_utils.surrogate_key([\n        'assessments.assessment_identifier',\n        'assessments.namespace',\n    ]) }}                                               as assessment_key,\n    {{ dbt_utils.surrogate_key([\n        'education_organization_reference.education_organization_id',\n        'assessments.school_year'\n    ]) }}                                               as education_organization_key,\n    assessments.school_year                             as school_year,\n    assessments.assessment_identifier                   as assessment_identifier,\n    assessments.assessment_family                       as assessment_family,\n    assessments.namespace                               as namespace,\n    assessments.assessment_title                        as title,\n    ifnull(assessments.assessment_version, 0)           as version,\n    assessments.assessment_category_descriptor\t        as category,\n    assessment_form                                     as form,\n    if(adaptive_assessment IS TRUE, 'Yes', 'No')        as adaptive_assessment,\n    NULL                                                as objective_assessment_identification_code,\n    NULL                                                as objective_assessment_academic_subject,\n    NULL                                                as objective_assessment_description\nfrom {{ ref('stg_edfi_assessments') }} assessments\n\n\nunion all\n\n\nselect\n    {{ dbt_utils.surrogate_key([\n        'assessments.assessment_identifier',\n        'assessments.namespace',\n        'objective_assessments.identification_code'\n    ]) }}                                               as assessment_key,\n    {{ dbt_utils.surrogate_key([\n        'education_organization_reference.education_organization_id',\n        'assessments.school_year'\n    ]) }}                                               as education_organization_key,\n    assessments.school_year                             as school_year,\n    assessments.assessment_identifier                   as assessment_identifier,\n    assessments.assessment_family                       as assessment_family,\n    assessments.namespace                               as namespace,\n    assessments.assessment_title                        as title,\n    ifnull(assessments.assessment_version, 0)           as version,\n    assessments.assessment_category_descriptor\t        as category,\n    assessment_form                                     as form,\n    if(adaptive_assessment IS TRUE, 'Yes', 'No')        as adaptive_assessment,\n    objective_assessments.identification_code           as objective_assessment_identification_code,\n    objective_assessments.academic_subject_descriptor   as objective_assessment_academic_subject,\n    objective_assessments.description                   as objective_assessment_description\nfrom {{ ref('stg_edfi_assessments') }} assessments\nleft join {{ ref('stg_edfi_objective_assessments') }} objective_assessments\n    on assessments.assessment_identifier = objective_assessments.assessment_reference.assessment_identifier\n    and assessments.namespace = objective_assessments.assessment_reference.namespace\n    and assessments.school_year = objective_assessments.school_year", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.project.stg_edfi_assessments", "model.project.stg_edfi_assessments", "model.project.stg_edfi_objective_assessments"]}, "config": {"enabled": true, "alias": null, "schema": "assessments", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_assessments", "fqn": ["project", "marts", "assessments", "dim_assessment"], "unique_id": "model.project.dim_assessment", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "marts/assessments/dim_assessment.sql", "original_file_path": "models/marts/assessments/dim_assessment.sql", "name": "dim_assessment", "alias": "dim_assessment", "checksum": {"name": "sha256", "checksum": "9f56f72de920c690ed8f17b6fa65a2a96db30b87dc1259e1d4f970e704f91ee2"}, "tags": ["edfi"], "refs": [["stg_edfi_assessments"], ["stg_edfi_assessments"], ["stg_edfi_objective_assessments"]], "sources": [], "description": "# Assessments dim\n\nGrain size: a row per assessment and objective assessment", "columns": {"assessment_key": {"name": "assessment_key", "description": "Primary key for dimension table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "education_organization_key": {"name": "education_organization_key", "description": "Primary key for dimension table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_year": {"name": "school_year", "description": "School year", "meta": {}, "data_type": null, "quote": null, "tags": []}, "assessment_identifier": {"name": "assessment_identifier", "description": "The unique identifier that describes the assessment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "assessment_family": {"name": "assessment_family", "description": "Assessment family", "meta": {}, "data_type": null, "quote": null, "tags": []}, "namespace": {"name": "namespace", "description": "Typically defines the vendor who sent the assessment data", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title": {"name": "title", "description": "The title description of the assessment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "version": {"name": "version", "description": "Describes what version the assessment or objective assessment focuses on", "meta": {}, "data_type": null, "quote": null, "tags": []}, "category": {"name": "category", "description": "Describes what category the assessment or objective assessment focuses on", "meta": {}, "data_type": null, "quote": null, "tags": []}, "form": {"name": "form", "description": "This is the minimum score that can be achieved for this assessment or objective assessment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "adaptive_assessment": {"name": "adaptive_assessment", "description": "This is the maximum score that can be achieved for this assessment or objective assessment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "objective_assessment_identification_code": {"name": "objective_assessment_identification_code", "description": "Unique identifier for objective assessment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "objective_assessment_academic_subject": {"name": "objective_assessment_academic_subject", "description": "Academic subject for objective assessment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "objective_assessment_description": {"name": "objective_assessment_description", "description": "Description for objective assessment", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/marts/assessments/assessments.yml", "compiled_path": "target/compiled/project/models/marts/assessments/dim_assessment.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "assessments", "tags": "edfi"}, "created_at": 1650510022.0983684, "compiled_sql": "select\n    to_hex(md5(cast(coalesce(cast(assessments.assessment_identifier as \n    string\n), '') || '-' || coalesce(cast(assessments.namespace as \n    string\n), '') as \n    string\n)))                                               as assessment_key,\n    to_hex(md5(cast(coalesce(cast(education_organization_reference.education_organization_id as \n    string\n), '') || '-' || coalesce(cast(assessments.school_year as \n    string\n), '') as \n    string\n)))                                               as education_organization_key,\n    assessments.school_year                             as school_year,\n    assessments.assessment_identifier                   as assessment_identifier,\n    assessments.assessment_family                       as assessment_family,\n    assessments.namespace                               as namespace,\n    assessments.assessment_title                        as title,\n    ifnull(assessments.assessment_version, 0)           as version,\n    assessments.assessment_category_descriptor\t        as category,\n    assessment_form                                     as form,\n    if(adaptive_assessment IS TRUE, 'Yes', 'No')        as adaptive_assessment,\n    NULL                                                as objective_assessment_identification_code,\n    NULL                                                as objective_assessment_academic_subject,\n    NULL                                                as objective_assessment_description\nfrom `gcp-project`.`dev_staging`.`stg_edfi_assessments` assessments\n\n\nunion all\n\n\nselect\n    to_hex(md5(cast(coalesce(cast(assessments.assessment_identifier as \n    string\n), '') || '-' || coalesce(cast(assessments.namespace as \n    string\n), '') || '-' || coalesce(cast(objective_assessments.identification_code as \n    string\n), '') as \n    string\n)))                                               as assessment_key,\n    to_hex(md5(cast(coalesce(cast(education_organization_reference.education_organization_id as \n    string\n), '') || '-' || coalesce(cast(assessments.school_year as \n    string\n), '') as \n    string\n)))                                               as education_organization_key,\n    assessments.school_year                             as school_year,\n    assessments.assessment_identifier                   as assessment_identifier,\n    assessments.assessment_family                       as assessment_family,\n    assessments.namespace                               as namespace,\n    assessments.assessment_title                        as title,\n    ifnull(assessments.assessment_version, 0)           as version,\n    assessments.assessment_category_descriptor\t        as category,\n    assessment_form                                     as form,\n    if(adaptive_assessment IS TRUE, 'Yes', 'No')        as adaptive_assessment,\n    objective_assessments.identification_code           as objective_assessment_identification_code,\n    objective_assessments.academic_subject_descriptor   as objective_assessment_academic_subject,\n    objective_assessments.description                   as objective_assessment_description\nfrom `gcp-project`.`dev_staging`.`stg_edfi_assessments` assessments\nleft join `gcp-project`.`dev_staging`.`stg_edfi_objective_assessments` objective_assessments\n    on assessments.assessment_identifier = objective_assessments.assessment_reference.assessment_identifier\n    and assessments.namespace = objective_assessments.assessment_reference.namespace\n    and assessments.school_year = objective_assessments.school_year", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_assessments`.`dim_assessment`"}, "model.project.stg_edfi_assessments": {"raw_sql": "{{ retrieve_edfi_records_from_data_lake('base_edfi_assessments') }}\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    json_value(data, '$.assessmentIdentifier') as assessment_identifier,\n    json_value(data, '$.assessmentFamily') as assessment_family,\n    json_value(data, '$.assessmentForm') as assessment_form,\n    json_value(data, '$.assessmentTitle') as assessment_title,\n    cast(json_value(data, '$.assessmentVersion') as int64) as assessment_version,\n    cast(json_value(data, '$.maxRawScore') as float64) as max_raw_score,\n    json_value(data, '$.namespace') as namespace,\n    json_value(data, '$.nomenclature') as nomenclature,\n    cast(json_value(data, \"$.adaptiveAssessment\") as BOOL) as adaptive_assessment,\n    split(json_value(data, \"$.assessmentCategoryDescriptor\"), '#')[OFFSET(1)] as assessment_category_descriptor,\n    parse_date('%Y-%m-%d', json_value(data, \"$.revisionDate\")) as revision_date,\n    struct(\n        json_value(data, '$.educationOrganizationReference.educationOrganizationId') as education_organization_id\n    ) as education_organization_reference,\n    array(\n        select as struct \n            split(json_value(academic_subjects, \"$.academicSubjectDescriptor\"), '#')[OFFSET(1)] as academic_subject_descriptor,\n        from unnest(json_query_array(data, \"$.academicSubjects\")) academic_subjects \n    ) as academic_subjects,\n    array(\n        select as struct \n            split(json_value(grade_levels, \"$.gradeLevelDescriptor\"), '#')[OFFSET(1)] as grade_level_descriptor\n        from unnest(json_query_array(data, \"$.assessedGradeLevels\")) grade_levels \n    ) as assessed_grade_levels,\n    array(\n        select as struct \n            split(json_value(codes, \"$.assessmentIdentificationSystemDescriptor\"), '#')[OFFSET(1)] as assessment_identification_system_descriptor,\n            json_value(codes, \"$.assigningOrganizationIdentificationCode\") as assigning_organization_identification_code,\n            json_value(codes, \"$.identificationCode\") as identification_code\n        from unnest(json_query_array(data, \"$.identificationCodes\")) codes \n    ) as identification_codes,\n    array(\n        select as struct \n            split(json_value(languages, \"$.languageDescriptor\"), '#')[OFFSET(1)] as language_descriptor,\n        from unnest(json_query_array(data, \"$.languages\")) languages \n    ) as languages,\n    array(\n        select as struct \n            split(json_value(performance_levels, \"$.assessmentReportingMethodDescriptor\"), '#')[OFFSET(1)] as assessment_reporting_method_descriptor,\n            split(json_value(performance_levels, \"$.performanceLevelDescriptor\"), '#')[OFFSET(1)] as performance_level_descriptor,\n            split(json_value(performance_levels, \"$.resultDatatypeTypeDescriptor\"), '#')[OFFSET(1)] as result_datatype_type_descriptor,\n            json_value(performance_levels, \"$.maximumScore\") as maximum_score,\n            json_value(performance_levels, \"$.minimumScore\") as minimum_score\n        from unnest(json_query_array(data, \"$.performanceLevels\")) performance_levels \n    ) as performance_levels,\n    array(\n        select as struct \n            split(json_value(period, \"$.assessmentPeriodDescriptor\"), '#')[OFFSET(1)] as assessment_period_descriptor,\n            parse_date('%Y-%m-%d', json_value(period, \"$.beginDate\")) as begin_date,\n            parse_date('%Y-%m-%d', json_value(period, \"$.endDate\")) as end_date\n        from unnest(json_query_array(data, \"$.period\")) period \n    ) as period,\n    array(\n        select as struct \n            split(json_value(platform_types, \"$.platformTypeDescriptor\"), '#')[OFFSET(1)] as platform_type_descriptor,\n        from unnest(json_query_array(data, \"$.platformTypes\")) platform_types \n    ) as platform_types,\n    array(\n        select as struct \n            split(json_value(scores, \"$.assessmentReportingMethodDescriptor\"), '#')[OFFSET(1)] as assessment_reporting_method_descriptor,\n            split(json_value(scores, \"$.resultDatatypeTypeDescriptor\"), '#')[OFFSET(1)] as result_datatype_type_descriptor,\n            json_value(scores, \"$.maximumScore\") as maximum_score,\n            json_value(scores, \"$.minimumScore\") as minimum_score\n        from unnest(json_query_array(data, \"$.scores\")) scores \n    ) as scores,\n    array(\n        select as struct\n            json_value(sections, '$.sectionReference.localCourseCode') as local_course_code,\n            json_value(sections, '$.sectionReference.schoolId') as school_id,\n            json_value(sections, '$.sectionReference.schoolYear') as school_year,\n            json_value(sections, '$.sectionReference.sectionIdentifier') as section_identifier,\n            json_value(sections, '$.sectionReference.sessionName') as session_name\n        from unnest(json_query_array(data, \"$.sections\")) sections \n    ) as sections\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_assessments", "source.project.staging.base_edfi_assessments"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_assessments"], "unique_id": "model.project.stg_edfi_assessments", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "staging/edfi/stg_edfi_assessments.sql", "original_file_path": "models/staging/edfi/stg_edfi_assessments.sql", "name": "stg_edfi_assessments", "alias": "stg_edfi_assessments", "checksum": {"name": "sha256", "checksum": "4af5d35a0cce00a883086677eed928bd3f80adf1be88e66edb1dc292a5149267"}, "tags": ["edfi"], "refs": [], "sources": [["staging", "base_edfi_assessments"], ["staging", "base_edfi_assessments"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_assessments.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "labels": {"edfi_version": "5_3"}}, "created_at": 1650510021.58203, "compiled_sql": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `gcp-project`.`dev_staging`.`base_edfi_assessments`\n    where is_complete_extract IS TRUE\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `gcp-project`.`dev_staging`.`base_edfi_assessments` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            OR base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    json_value(data, '$.assessmentIdentifier') as assessment_identifier,\n    json_value(data, '$.assessmentFamily') as assessment_family,\n    json_value(data, '$.assessmentForm') as assessment_form,\n    json_value(data, '$.assessmentTitle') as assessment_title,\n    cast(json_value(data, '$.assessmentVersion') as int64) as assessment_version,\n    cast(json_value(data, '$.maxRawScore') as float64) as max_raw_score,\n    json_value(data, '$.namespace') as namespace,\n    json_value(data, '$.nomenclature') as nomenclature,\n    cast(json_value(data, \"$.adaptiveAssessment\") as BOOL) as adaptive_assessment,\n    split(json_value(data, \"$.assessmentCategoryDescriptor\"), '#')[OFFSET(1)] as assessment_category_descriptor,\n    parse_date('%Y-%m-%d', json_value(data, \"$.revisionDate\")) as revision_date,\n    struct(\n        json_value(data, '$.educationOrganizationReference.educationOrganizationId') as education_organization_id\n    ) as education_organization_reference,\n    array(\n        select as struct \n            split(json_value(academic_subjects, \"$.academicSubjectDescriptor\"), '#')[OFFSET(1)] as academic_subject_descriptor,\n        from unnest(json_query_array(data, \"$.academicSubjects\")) academic_subjects \n    ) as academic_subjects,\n    array(\n        select as struct \n            split(json_value(grade_levels, \"$.gradeLevelDescriptor\"), '#')[OFFSET(1)] as grade_level_descriptor\n        from unnest(json_query_array(data, \"$.assessedGradeLevels\")) grade_levels \n    ) as assessed_grade_levels,\n    array(\n        select as struct \n            split(json_value(codes, \"$.assessmentIdentificationSystemDescriptor\"), '#')[OFFSET(1)] as assessment_identification_system_descriptor,\n            json_value(codes, \"$.assigningOrganizationIdentificationCode\") as assigning_organization_identification_code,\n            json_value(codes, \"$.identificationCode\") as identification_code\n        from unnest(json_query_array(data, \"$.identificationCodes\")) codes \n    ) as identification_codes,\n    array(\n        select as struct \n            split(json_value(languages, \"$.languageDescriptor\"), '#')[OFFSET(1)] as language_descriptor,\n        from unnest(json_query_array(data, \"$.languages\")) languages \n    ) as languages,\n    array(\n        select as struct \n            split(json_value(performance_levels, \"$.assessmentReportingMethodDescriptor\"), '#')[OFFSET(1)] as assessment_reporting_method_descriptor,\n            split(json_value(performance_levels, \"$.performanceLevelDescriptor\"), '#')[OFFSET(1)] as performance_level_descriptor,\n            split(json_value(performance_levels, \"$.resultDatatypeTypeDescriptor\"), '#')[OFFSET(1)] as result_datatype_type_descriptor,\n            json_value(performance_levels, \"$.maximumScore\") as maximum_score,\n            json_value(performance_levels, \"$.minimumScore\") as minimum_score\n        from unnest(json_query_array(data, \"$.performanceLevels\")) performance_levels \n    ) as performance_levels,\n    array(\n        select as struct \n            split(json_value(period, \"$.assessmentPeriodDescriptor\"), '#')[OFFSET(1)] as assessment_period_descriptor,\n            parse_date('%Y-%m-%d', json_value(period, \"$.beginDate\")) as begin_date,\n            parse_date('%Y-%m-%d', json_value(period, \"$.endDate\")) as end_date\n        from unnest(json_query_array(data, \"$.period\")) period \n    ) as period,\n    array(\n        select as struct \n            split(json_value(platform_types, \"$.platformTypeDescriptor\"), '#')[OFFSET(1)] as platform_type_descriptor,\n        from unnest(json_query_array(data, \"$.platformTypes\")) platform_types \n    ) as platform_types,\n    array(\n        select as struct \n            split(json_value(scores, \"$.assessmentReportingMethodDescriptor\"), '#')[OFFSET(1)] as assessment_reporting_method_descriptor,\n            split(json_value(scores, \"$.resultDatatypeTypeDescriptor\"), '#')[OFFSET(1)] as result_datatype_type_descriptor,\n            json_value(scores, \"$.maximumScore\") as maximum_score,\n            json_value(scores, \"$.minimumScore\") as minimum_score\n        from unnest(json_query_array(data, \"$.scores\")) scores \n    ) as scores,\n    array(\n        select as struct\n            json_value(sections, '$.sectionReference.localCourseCode') as local_course_code,\n            json_value(sections, '$.sectionReference.schoolId') as school_id,\n            json_value(sections, '$.sectionReference.schoolYear') as school_year,\n            json_value(sections, '$.sectionReference.sectionIdentifier') as section_identifier,\n            json_value(sections, '$.sectionReference.sessionName') as session_name\n        from unnest(json_query_array(data, \"$.sections\")) sections \n    ) as sections\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_staging`.`stg_edfi_assessments`"}, "model.project.fct_student_attendance": {"raw_sql": "with student_attendance as (\n\n    select\n        {{ dbt_utils.surrogate_key([\n            'schools.local_education_agency_id',\n            'ssa.school_year_type_reference.school_year'\n        ]) }}                                                                                               as local_education_agency_key,\n        {{ dbt_utils.surrogate_key([\n            'ssa.school_reference.school_id',\n            'ssa.school_year_type_reference.school_year'\n        ]) }}                                                                                               as school_key,\n        {{ dbt_utils.surrogate_key([\n            'ssa.student_reference.student_unique_id',\n            'ssa.school_year_type_reference.school_year'\n        ]) }}                                                                                               as student_key,\n        ssa.school_year_type_reference.school_year                                                          as school_year,\n        calendar_dates.date                                                                                 as date,\n        ifnull(MIN(school_attendance.attendance_event_category_descriptor), 'In Attendance')                as school_attendance_event_category_descriptor,\n        ifnull(school_attendance.event_duration, 0)                                                         as event_duration,\n        max(if(school_attendance.attendance_event_category_descriptor = 'In Attendance', 1, 0))             as reported_as_present_at_school,\n        max(if(\n            school_attendance.attendance_event_category_descriptor in ('Excused Absence', 'Unexcused Absence'), 1, 0\n        ))                                                                                                  as reported_as_absent_from_school,\n        max(if(\n            school_attendance.attendance_event_category_descriptor = 'In Attendance' \n                and student_section_associations.homeroom_indicator IS TRUE,\n            1, 0\n        ))                                                                                                  as reported_as_present_at_home_room,\n        max(if(\n            school_attendance.attendance_event_category_descriptor in ('Excused Absence', 'Unexcused Absence') \n                and student_section_associations.homeroom_indicator IS TRUE,\n            1, 0\n        ))                                                                                                  as reported_as_absent_from_home_room,\n        COUNT(1) over(\n            partition by ssa.school_year_type_reference.school_year, ssa.student_reference.student_unique_id\n            order by ssa.school_year_type_reference.school_year, ssa.student_reference.student_unique_id, calendar_dates.date \n            rows between unbounded preceding and current row\n        )                                                                                                   as number_days_enrolled_thus_far,\n        SUM(school_attendance.event_duration) over(\n            partition by ssa.school_year_type_reference.school_year, ssa.student_reference.student_unique_id\n            order by ssa.school_year_type_reference.school_year, ssa.student_reference.student_unique_id, calendar_dates.date \n            rows between unbounded preceding and current row\n        )                                                                                                   as sum_event_duration_thus_far\n    from {{ ref('stg_edfi_student_school_associations') }} ssa\n    left join {{ ref('stg_edfi_schools') }} schools\n        on ssa.school_reference.school_id = schools.school_id\n        and ssa.school_year_type_reference.school_year = schools.school_year\n    left join {{ ref('stg_edfi_students') }} students\n        on ssa.school_year = students.school_year\n        and ssa.student_reference.student_unique_id = students.student_unique_id\n    left join {{ ref('stg_edfi_calendar_dates') }} calendar_dates\n        on ssa.school_year = calendar_dates.school_year\n        and ssa.school_reference.school_id = calendar_dates.calendar_reference.school_id\n        and ssa.entry_date <= calendar_dates.date\n        and (\n            ssa.exit_withdraw_date is null\n            OR ssa.exit_withdraw_date >= calendar_dates.date\n        )\n    cross join unnest(calendar_dates.calendar_events) as calendar_events\n    -- school attendance\n    left join {{ ref('stg_edfi_student_school_attendance_events') }} school_attendance\n        on ssa.school_year = school_attendance.school_year\n        and school_attendance.student_reference.student_unique_id = ssa.student_reference.student_unique_id\n        and school_attendance.school_reference.school_id = ssa.school_reference.school_id\n        and (\n            ssa.school_year_type_reference.school_year is null\n            OR \n            school_attendance.session_reference.school_year = ssa.school_year_type_reference.school_year\n        )\n        and school_attendance.event_date = calendar_dates.date\n    -- section attendance\n    left join{{ ref('stg_edfi_student_section_attendance_events') }} section_attendance\n        on ssa.school_year = section_attendance.school_year\n        and section_attendance.student_reference.student_unique_id = ssa.student_reference.student_unique_id\n        and section_attendance.section_reference.school_id = ssa.school_reference.school_id\n        and section_attendance.event_date = calendar_dates.date\n        and (\n            ssa.school_year_type_reference.school_year is null\n            OR \n            section_attendance.section_reference.school_year = ssa.school_year_type_reference.school_year\n        )\n    left join {{ ref('stg_edfi_student_section_associations') }} student_section_associations\n        on section_attendance.school_year = student_section_associations.school_year\n        and student_section_associations.student_reference.student_unique_id = section_attendance.student_reference.student_unique_id\n        and student_section_associations.section_reference.local_course_code = section_attendance.section_reference.local_course_code\n        and student_section_associations.section_reference.school_id = section_attendance.section_reference.school_id\n        and student_section_associations.section_reference.school_year = section_attendance.section_reference.school_year\n        and student_section_associations.section_reference.section_identifier = section_attendance.section_reference.section_identifier\n        and student_section_associations.section_reference.session_name = section_attendance.section_reference.session_name\n    where\n        calendar_dates.date < current_date\n        and calendar_events.calendar_event_descriptor = 'Instructional day'\n    group by\n        ssa.student_reference.student_unique_id,\n        schools.local_education_agency_id,\n        ssa.school_reference.school_id,\n        ssa.school_year_type_reference.school_year,\n        calendar_dates.date,\n        school_attendance.event_duration\n\n)\n\nselect\n    local_education_agency_key,\n    school_key,\n    student_key,\n    school_year,\n    date,\n    school_attendance_event_category_descriptor,\n    event_duration,\n    reported_as_present_at_school,\n    reported_as_absent_from_school,\n    reported_as_present_at_home_room,\n    reported_as_absent_from_home_room,\n    if(sum_event_duration_thus_far >= 15, 1, 0)                                                                    as is_chronically_absent,\n    if((number_days_enrolled_thus_far - sum_event_duration_thus_far) / number_days_enrolled_thus_far < 0.92, 1, 0) as is_on_the_verge -- early warning indicator\nfrom student_attendance", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.project.stg_edfi_student_school_associations", "model.project.stg_edfi_schools", "model.project.stg_edfi_students", "model.project.stg_edfi_calendar_dates", "model.project.stg_edfi_student_school_attendance_events", "model.project.stg_edfi_student_section_attendance_events", "model.project.stg_edfi_student_section_associations"]}, "config": {"enabled": true, "alias": null, "schema": "attendance", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_attendance", "fqn": ["project", "marts", "attendance", "fct_student_attendance"], "unique_id": "model.project.fct_student_attendance", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "marts/attendance/fct_student_attendance.sql", "original_file_path": "models/marts/attendance/fct_student_attendance.sql", "name": "fct_student_attendance", "alias": "fct_student_attendance", "checksum": {"name": "sha256", "checksum": "99f34e696e8d41c6a4ff470a4d60f09d2b8809aeb883ef1a5f152fe3e920ae86"}, "tags": ["edfi"], "refs": [["stg_edfi_student_school_associations"], ["stg_edfi_schools"], ["stg_edfi_students"], ["stg_edfi_calendar_dates"], ["stg_edfi_student_school_attendance_events"], ["stg_edfi_student_section_attendance_events"], ["stg_edfi_student_section_associations"]], "sources": [], "description": "# Student attendance fact\n\nGrain: one row per student per school year per school per instructional day they hold an enrollment\n\nUsed for looking at a student's attendance by day. This fact table provides a row for each instructional day the student holds an enrollment up to the previous date.", "columns": {"local_education_agency_key": {"name": "local_education_agency_key", "description": "Foreign key to `dim_local_education_agency`", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_key": {"name": "school_key", "description": "Foreign key to `dim_school`", "meta": {}, "data_type": null, "quote": null, "tags": []}, "student_key": {"name": "student_key", "description": "Foreign key to `dim_student`", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_year": {"name": "school_year", "description": "School year", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "Attendance date", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_attendance_event_category_descriptor": {"name": "school_attendance_event_category_descriptor", "description": "Descriptor for student school attendance event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_duration": {"name": "event_duration", "description": "Absence event duration", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reported_as_present_at_school": {"name": "reported_as_present_at_school", "description": "1 if the student was present for the school day", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reported_as_absent_from_school": {"name": "reported_as_absent_from_school", "description": "1 if the student was absent for the school day", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reported_as_present_at_home_room": {"name": "reported_as_present_at_home_room", "description": "1 if the student was present during their home room class", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reported_as_absent_from_home_room": {"name": "reported_as_absent_from_home_room", "description": "1 if the student was absent during their home room class", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_chronically_absent": {"name": "is_chronically_absent", "description": "1 if the student has 15 or more absences", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_on_the_verge": {"name": "is_on_the_verge", "description": "1 if the student has an average daily attendance below 92%", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/marts/attendance/attendance.yml", "compiled_path": "target/compiled/project/models/marts/attendance/fct_student_attendance.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "attendance", "tags": "edfi"}, "created_at": 1650510021.912217, "compiled_sql": "with student_attendance as (\n\n    select\n        to_hex(md5(cast(coalesce(cast(schools.local_education_agency_id as \n    string\n), '') || '-' || coalesce(cast(ssa.school_year_type_reference.school_year as \n    string\n), '') as \n    string\n)))                                                                                               as local_education_agency_key,\n        to_hex(md5(cast(coalesce(cast(ssa.school_reference.school_id as \n    string\n), '') || '-' || coalesce(cast(ssa.school_year_type_reference.school_year as \n    string\n), '') as \n    string\n)))                                                                                               as school_key,\n        to_hex(md5(cast(coalesce(cast(ssa.student_reference.student_unique_id as \n    string\n), '') || '-' || coalesce(cast(ssa.school_year_type_reference.school_year as \n    string\n), '') as \n    string\n)))                                                                                               as student_key,\n        ssa.school_year_type_reference.school_year                                                          as school_year,\n        calendar_dates.date                                                                                 as date,\n        ifnull(MIN(school_attendance.attendance_event_category_descriptor), 'In Attendance')                as school_attendance_event_category_descriptor,\n        ifnull(school_attendance.event_duration, 0)                                                         as event_duration,\n        max(if(school_attendance.attendance_event_category_descriptor = 'In Attendance', 1, 0))             as reported_as_present_at_school,\n        max(if(\n            school_attendance.attendance_event_category_descriptor in ('Excused Absence', 'Unexcused Absence'), 1, 0\n        ))                                                                                                  as reported_as_absent_from_school,\n        max(if(\n            school_attendance.attendance_event_category_descriptor = 'In Attendance' \n                and student_section_associations.homeroom_indicator IS TRUE,\n            1, 0\n        ))                                                                                                  as reported_as_present_at_home_room,\n        max(if(\n            school_attendance.attendance_event_category_descriptor in ('Excused Absence', 'Unexcused Absence') \n                and student_section_associations.homeroom_indicator IS TRUE,\n            1, 0\n        ))                                                                                                  as reported_as_absent_from_home_room,\n        COUNT(1) over(\n            partition by ssa.school_year_type_reference.school_year, ssa.student_reference.student_unique_id\n            order by ssa.school_year_type_reference.school_year, ssa.student_reference.student_unique_id, calendar_dates.date \n            rows between unbounded preceding and current row\n        )                                                                                                   as number_days_enrolled_thus_far,\n        SUM(school_attendance.event_duration) over(\n            partition by ssa.school_year_type_reference.school_year, ssa.student_reference.student_unique_id\n            order by ssa.school_year_type_reference.school_year, ssa.student_reference.student_unique_id, calendar_dates.date \n            rows between unbounded preceding and current row\n        )                                                                                                   as sum_event_duration_thus_far\n    from `gcp-project`.`dev_staging`.`stg_edfi_student_school_associations` ssa\n    left join `gcp-project`.`dev_staging`.`stg_edfi_schools` schools\n        on ssa.school_reference.school_id = schools.school_id\n        and ssa.school_year_type_reference.school_year = schools.school_year\n    left join `gcp-project`.`dev_staging`.`stg_edfi_students` students\n        on ssa.school_year = students.school_year\n        and ssa.student_reference.student_unique_id = students.student_unique_id\n    left join `gcp-project`.`dev_staging`.`stg_edfi_calendar_dates` calendar_dates\n        on ssa.school_year = calendar_dates.school_year\n        and ssa.school_reference.school_id = calendar_dates.calendar_reference.school_id\n        and ssa.entry_date <= calendar_dates.date\n        and (\n            ssa.exit_withdraw_date is null\n            OR ssa.exit_withdraw_date >= calendar_dates.date\n        )\n    cross join unnest(calendar_dates.calendar_events) as calendar_events\n    -- school attendance\n    left join `gcp-project`.`dev_staging`.`stg_edfi_student_school_attendance_events` school_attendance\n        on ssa.school_year = school_attendance.school_year\n        and school_attendance.student_reference.student_unique_id = ssa.student_reference.student_unique_id\n        and school_attendance.school_reference.school_id = ssa.school_reference.school_id\n        and (\n            ssa.school_year_type_reference.school_year is null\n            OR \n            school_attendance.session_reference.school_year = ssa.school_year_type_reference.school_year\n        )\n        and school_attendance.event_date = calendar_dates.date\n    -- section attendance\n    left join`gcp-project`.`dev_staging`.`stg_edfi_student_section_attendance_events` section_attendance\n        on ssa.school_year = section_attendance.school_year\n        and section_attendance.student_reference.student_unique_id = ssa.student_reference.student_unique_id\n        and section_attendance.section_reference.school_id = ssa.school_reference.school_id\n        and section_attendance.event_date = calendar_dates.date\n        and (\n            ssa.school_year_type_reference.school_year is null\n            OR \n            section_attendance.section_reference.school_year = ssa.school_year_type_reference.school_year\n        )\n    left join `gcp-project`.`dev_staging`.`stg_edfi_student_section_associations` student_section_associations\n        on section_attendance.school_year = student_section_associations.school_year\n        and student_section_associations.student_reference.student_unique_id = section_attendance.student_reference.student_unique_id\n        and student_section_associations.section_reference.local_course_code = section_attendance.section_reference.local_course_code\n        and student_section_associations.section_reference.school_id = section_attendance.section_reference.school_id\n        and student_section_associations.section_reference.school_year = section_attendance.section_reference.school_year\n        and student_section_associations.section_reference.section_identifier = section_attendance.section_reference.section_identifier\n        and student_section_associations.section_reference.session_name = section_attendance.section_reference.session_name\n    where\n        calendar_dates.date < current_date\n        and calendar_events.calendar_event_descriptor = 'Instructional day'\n    group by\n        ssa.student_reference.student_unique_id,\n        schools.local_education_agency_id,\n        ssa.school_reference.school_id,\n        ssa.school_year_type_reference.school_year,\n        calendar_dates.date,\n        school_attendance.event_duration\n\n)\n\nselect\n    local_education_agency_key,\n    school_key,\n    student_key,\n    school_year,\n    date,\n    school_attendance_event_category_descriptor,\n    event_duration,\n    reported_as_present_at_school,\n    reported_as_absent_from_school,\n    reported_as_present_at_home_room,\n    reported_as_absent_from_home_room,\n    if(sum_event_duration_thus_far >= 15, 1, 0)                                                                    as is_chronically_absent,\n    if((number_days_enrolled_thus_far - sum_event_duration_thus_far) / number_days_enrolled_thus_far < 0.92, 1, 0) as is_on_the_verge -- early warning indicator\nfrom student_attendance", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_attendance`.`fct_student_attendance`"}, "model.project.rls_user_student_data_authorization": {"raw_sql": "with associations as (\n\n    -- if staff and actively assigned to school with\n    -- staff classification of Superintendent, School Administrator, or Principal,\n    -- associate staff with all students with any enrollment at school\n    select distinct\n        fct_staff_school.school_year    as school_year,\n        dim_staff.email                 as user_email,\n        dim_student.student_unique_id   as student_unique_id\n    from {{ ref('fct_staff_school') }} fct_staff_school\n    left join {{ ref('dim_staff') }} dim_staff\n        on fct_staff_school.staff_key = dim_staff.staff_key\n    left join {{ ref('fct_student_school') }} fct_student_school\n        on fct_staff_school.school_key = fct_student_school.school_key\n    left join {{ ref('dim_student') }} dim_student\n        on fct_student_school.student_key = dim_student.student_key\n    where\n        fct_staff_school.is_actively_assigned_to_school = 1\n        and fct_staff_school.staff_classification in (\n            'Superintendent',\n            'School Administrator',\n            'Principal')\n\n\n    union all\n\n\n    select  \n        fct_student_section.school_year     as school_year,\n        dim_staff.email                     as user_email,\n        dim_student.student_unique_id       as student_unique_id\n    from {{ ref('fct_student_section') }} fct_student_section\n    left join {{ ref('dim_student') }} dim_student\n        on fct_student_section.student_key = dim_student.student_key\n    left join {{ ref('bridge_staff_group') }} bridge_staff_group\n        on fct_student_section.staff_group_key = bridge_staff_group.staff_group_key\n    left join {{ ref('dim_staff') }} dim_staff\n        on bridge_staff_group.staff_key = dim_staff.staff_key\n\n\n    union all\n\n\n    select\n        school_year         as school_year,\n        email               as user_email,\n        student_unique_id   as student_unique_id\n    from {{ ref('dim_student') }} dim_student\n\n),\n\ndistinct_values as (\n\n    select distinct\n        school_year,\n        student_unique_id,\n        user_email,\n    from associations\n    where user_email is not null\n\n)\n\n\nselect\n    {{ dbt_utils.surrogate_key([\n            'student_unique_id',\n            'school_year'\n    ]) }}                                   as student_key,\n    ARRAY_AGG(user_email)                   as authorized_emails\nfrom distinct_values\ngroup by 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.project.fct_staff_school", "model.project.dim_staff", "model.project.fct_student_school", "model.project.dim_student", "model.project.fct_student_section", "model.project.dim_student", "model.project.bridge_staff_group", "model.project.dim_staff", "model.project.dim_student"]}, "config": {"enabled": true, "alias": null, "schema": "row_level_security", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_row_level_security", "fqn": ["project", "marts", "row_level_security", "rls_user_student_data_authorization"], "unique_id": "model.project.rls_user_student_data_authorization", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "marts/row_level_security/rls_user_student_data_authorization.sql", "original_file_path": "models/marts/row_level_security/rls_user_student_data_authorization.sql", "name": "rls_user_student_data_authorization", "alias": "rls_user_student_data_authorization", "checksum": {"name": "sha256", "checksum": "88839d3b1763b08a159635a0c198b7702a60139a6165c315c0c13aa8d0c8b805"}, "tags": ["edfi"], "refs": [["fct_staff_school"], ["dim_staff"], ["fct_student_school"], ["dim_student"], ["fct_student_section"], ["dim_student"], ["bridge_staff_group"], ["dim_staff"], ["dim_student"]], "sources": [], "description": "# User student data authorization\n\nThis row-level security (RLS) table has a grain size of one row per student key. `authorized_emails` is a repeated field containing all user emails who are allowed access to the respective student's data.\n\nIf a staff member is actively assigned to a school with a classification of Superintendent, School Administrator, or Principal, they are given access.\n\nIf a staff member is actively assigned to a class section where the student has an association, they are given access.\n\nFinally, each student will have their email included for their respective `student_key` record.", "columns": {"student_key": {"name": "student_key", "description": "Foreign key to `dim_student`", "meta": {}, "data_type": null, "quote": null, "tags": []}, "authorized_emails": {"name": "authorized_emails", "description": "Repeated field containing all user emails who should have access to the respective student's data", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/marts/row_level_security/row_level_security.yml", "compiled_path": "target/compiled/project/models/marts/row_level_security/rls_user_student_data_authorization.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "row_level_security", "tags": "edfi"}, "created_at": 1650510022.139209, "compiled_sql": "with associations as (\n\n    -- if staff and actively assigned to school with\n    -- staff classification of Superintendent, School Administrator, or Principal,\n    -- associate staff with all students with any enrollment at school\n    select distinct\n        fct_staff_school.school_year    as school_year,\n        dim_staff.email                 as user_email,\n        dim_student.student_unique_id   as student_unique_id\n    from `gcp-project`.`dev_core`.`fct_staff_school` fct_staff_school\n    left join `gcp-project`.`dev_core`.`dim_staff` dim_staff\n        on fct_staff_school.staff_key = dim_staff.staff_key\n    left join `gcp-project`.`dev_core`.`fct_student_school` fct_student_school\n        on fct_staff_school.school_key = fct_student_school.school_key\n    left join `gcp-project`.`dev_core`.`dim_student` dim_student\n        on fct_student_school.student_key = dim_student.student_key\n    where\n        fct_staff_school.is_actively_assigned_to_school = 1\n        and fct_staff_school.staff_classification in (\n            'Superintendent',\n            'School Administrator',\n            'Principal')\n\n\n    union all\n\n\n    select  \n        fct_student_section.school_year     as school_year,\n        dim_staff.email                     as user_email,\n        dim_student.student_unique_id       as student_unique_id\n    from `gcp-project`.`dev_core`.`fct_student_section` fct_student_section\n    left join `gcp-project`.`dev_core`.`dim_student` dim_student\n        on fct_student_section.student_key = dim_student.student_key\n    left join `gcp-project`.`dev_core`.`bridge_staff_group` bridge_staff_group\n        on fct_student_section.staff_group_key = bridge_staff_group.staff_group_key\n    left join `gcp-project`.`dev_core`.`dim_staff` dim_staff\n        on bridge_staff_group.staff_key = dim_staff.staff_key\n\n\n    union all\n\n\n    select\n        school_year         as school_year,\n        email               as user_email,\n        student_unique_id   as student_unique_id\n    from `gcp-project`.`dev_core`.`dim_student` dim_student\n\n),\n\ndistinct_values as (\n\n    select distinct\n        school_year,\n        student_unique_id,\n        user_email,\n    from associations\n    where user_email is not null\n\n)\n\n\nselect\n    to_hex(md5(cast(coalesce(cast(student_unique_id as \n    string\n), '') || '-' || coalesce(cast(school_year as \n    string\n), '') as \n    string\n)))                                   as student_key,\n    ARRAY_AGG(user_email)                   as authorized_emails\nfrom distinct_values\ngroup by 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_row_level_security`.`rls_user_student_data_authorization`"}, "model.project.fct_student_school": {"raw_sql": "select\n    {{ dbt_utils.surrogate_key([\n            'ssa.student_reference.student_unique_id',\n            'ssa.school_year_type_reference.school_year'\n    ]) }}                                                           as student_key,\n    {{ dbt_utils.surrogate_key([\n        'schools.local_education_agency_id',\n        'ssa.school_year_type_reference.school_year'\n    ]) }}                                                           as local_education_agency_key,\n    {{ dbt_utils.surrogate_key([\n        'ssa.school_reference.school_id',\n        'ssa.school_year_type_reference.school_year'\n    ]) }}                                                           as school_key,\n    ssa.school_year_type_reference.school_year                      as school_year,\n    {{ convert_grade_level_to_short_label('ssa.entry_grade_level_descriptor') }}     as grade_level,\n    {{ convert_grade_level_to_id('ssa.entry_grade_level_descriptor') }}              as grade_level_id,\n    ssa.entry_date                                                  as enrollment_date,\n    ssa.entry_type_descriptor                                       as enrollment_type,\n    ssa.exit_withdraw_date                                          as exit_date,\n    ssa.exit_withdraw_type_descriptor                               as exit_type,\n    ssa.primary_school                                              as is_primary_school,\n    COUNT(calendar_dates.date)                                      as count_days_enrolled,\n    if(\n        ssa.exit_withdraw_date is null\n        OR (\n            current_date >= ssa.entry_date\n            and current_date < ssa.exit_withdraw_date\n        ),\n        1, 0)                                                       as is_actively_enrolled_in_school\nfrom {{ ref('stg_edfi_student_school_associations') }} ssa\nleft join {{ ref('stg_edfi_schools') }} schools\n    on ssa.school_reference.school_id = schools.school_id\n    and ssa.school_year_type_reference.school_year = schools.school_year\nleft join {{ ref('stg_edfi_calendar_dates') }} calendar_dates\n    on ssa.school_year = calendar_dates.school_year\n    and ssa.school_reference.school_id = calendar_dates.calendar_reference.school_id\n    and ssa.entry_date <= calendar_dates.date\n    and (\n        ssa.exit_withdraw_date is null\n        OR ssa.exit_withdraw_date > calendar_dates.date\n    )\ncross join unnest(calendar_dates.calendar_events) as calendar_events\nwhere\n    calendar_dates.date < current_date\n    and calendar_events.calendar_event_descriptor = 'Instructional day'\ngroup by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.project.convert_grade_level_to_short_label", "macro.project.convert_grade_level_to_id"], "nodes": ["model.project.stg_edfi_student_school_associations", "model.project.stg_edfi_schools", "model.project.stg_edfi_calendar_dates"]}, "config": {"enabled": true, "alias": null, "schema": "core", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_core", "fqn": ["project", "marts", "core", "fct_student_school"], "unique_id": "model.project.fct_student_school", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "marts/core/fct_student_school.sql", "original_file_path": "models/marts/core/fct_student_school.sql", "name": "fct_student_school", "alias": "fct_student_school", "checksum": {"name": "sha256", "checksum": "6c54a776c740340ff6c64582ae853228ad62637adf118fdf5625d269d62d729e"}, "tags": ["edfi"], "refs": [["stg_edfi_student_school_associations"], ["stg_edfi_schools"], ["stg_edfi_calendar_dates"]], "sources": [], "description": "", "columns": {"student_key": {"name": "student_key", "description": "Foreign key to `dim_student`", "meta": {}, "data_type": null, "quote": null, "tags": []}, "local_education_agency_key": {"name": "local_education_agency_key", "description": "Foreign key to `dim_local_education_agency`", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_key": {"name": "school_key", "description": "Foreign key to `dim_school`", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/marts/core/core.yml", "compiled_path": "target/compiled/project/models/marts/core/fct_student_school.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "core", "tags": "edfi"}, "created_at": 1650510021.9649312, "compiled_sql": "select\n    to_hex(md5(cast(coalesce(cast(ssa.student_reference.student_unique_id as \n    string\n), '') || '-' || coalesce(cast(ssa.school_year_type_reference.school_year as \n    string\n), '') as \n    string\n)))                                                           as student_key,\n    to_hex(md5(cast(coalesce(cast(schools.local_education_agency_id as \n    string\n), '') || '-' || coalesce(cast(ssa.school_year_type_reference.school_year as \n    string\n), '') as \n    string\n)))                                                           as local_education_agency_key,\n    to_hex(md5(cast(coalesce(cast(ssa.school_reference.school_id as \n    string\n), '') || '-' || coalesce(cast(ssa.school_year_type_reference.school_year as \n    string\n), '') as \n    string\n)))                                                           as school_key,\n    ssa.school_year_type_reference.school_year                      as school_year,\n    \n    case ssa.entry_grade_level_descriptor\n        when 'Infant/toddler'            then 'Infant'\n        when 'Preschool/Prekindergarten' then 'PreK'\n        when 'Transitional Kindergarten' then 'TK'\n        when 'Kindergarten'              then 'K'\n        when 'First grade'               then '1'\n        when 'Second grade'              then '2'\n        when 'Third grade'               then '3'\n        when 'Fourth grade'              then '4'\n        when 'Fifth grade'               then '5'\n        when 'Sixth grade'               then '6'\n        when 'Seventh grade'             then '7'\n        when 'Eighth grade'              then '8'\n        when 'Ninth grade'               then '9'\n        when 'Tenth grade'               then '10'\n        when 'Eleventh grade'            then '11'\n        when 'Twelfth grade'             then '12'\n        else '999999999'\n    end\n     as grade_level,\n    \n    case ssa.entry_grade_level_descriptor\n        when 'Infant/toddler'            then -3\n        when 'Preschool/Prekindergarten' then -2\n        when 'Transitional Kindergarten' then -1\n        when 'Kindergarten'              then 1\n        when 'First grade'               then 2\n        when 'Second grade'              then 3\n        when 'Third grade'               then 4\n        when 'Fourth grade'              then 5\n        when 'Fifth grade'               then 6\n        when 'Sixth grade'               then 7\n        when 'Seventh grade'             then 8\n        when 'Eighth grade'              then 9\n        when 'Ninth grade'               then 10\n        when 'Tenth grade'               then 11\n        when 'Eleventh grade'            then 12\n        when 'Twelfth grade'             then 13\n        else 999999999\n    end\n              as grade_level_id,\n    ssa.entry_date                                                  as enrollment_date,\n    ssa.entry_type_descriptor                                       as enrollment_type,\n    ssa.exit_withdraw_date                                          as exit_date,\n    ssa.exit_withdraw_type_descriptor                               as exit_type,\n    ssa.primary_school                                              as is_primary_school,\n    COUNT(calendar_dates.date)                                      as count_days_enrolled,\n    if(\n        ssa.exit_withdraw_date is null\n        OR (\n            current_date >= ssa.entry_date\n            and current_date < ssa.exit_withdraw_date\n        ),\n        1, 0)                                                       as is_actively_enrolled_in_school\nfrom `gcp-project`.`dev_staging`.`stg_edfi_student_school_associations` ssa\nleft join `gcp-project`.`dev_staging`.`stg_edfi_schools` schools\n    on ssa.school_reference.school_id = schools.school_id\n    and ssa.school_year_type_reference.school_year = schools.school_year\nleft join `gcp-project`.`dev_staging`.`stg_edfi_calendar_dates` calendar_dates\n    on ssa.school_year = calendar_dates.school_year\n    and ssa.school_reference.school_id = calendar_dates.calendar_reference.school_id\n    and ssa.entry_date <= calendar_dates.date\n    and (\n        ssa.exit_withdraw_date is null\n        OR ssa.exit_withdraw_date > calendar_dates.date\n    )\ncross join unnest(calendar_dates.calendar_events) as calendar_events\nwhere\n    calendar_dates.date < current_date\n    and calendar_events.calendar_event_descriptor = 'Instructional day'\ngroup by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_core`.`fct_student_school`"}, "model.project.stg_edfi_calendar_dates": {"raw_sql": "{{ retrieve_edfi_records_from_data_lake('base_edfi_calendar_dates') }}\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    parse_date('%Y-%m-%d', json_value(data, '$.date')) as date,\n    array(\n        select as struct \n            split(json_value(calendar_events, \"$.calendarEventDescriptor\"), '#')[OFFSET(1)] as calendar_event_descriptor\n        from unnest(json_query_array(data, \"$.calendarEvents\")) calendar_events \n    ) as calendar_events,\n    struct(\n        json_value(data, '$.calendarReference.calendarCode') as calendar_code,\n        json_value(data, '$.calendarReference.schoolId') as school_id,\n        cast(json_value(data, '$.calendarReference.schoolYear') as int64) as school_year\n    ) as calendar_reference\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_calendar_dates", "source.project.staging.base_edfi_calendar_dates"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_calendar_dates"], "unique_id": "model.project.stg_edfi_calendar_dates", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "staging/edfi/stg_edfi_calendar_dates.sql", "original_file_path": "models/staging/edfi/stg_edfi_calendar_dates.sql", "name": "stg_edfi_calendar_dates", "alias": "stg_edfi_calendar_dates", "checksum": {"name": "sha256", "checksum": "25ad3c6842032b46e3a280ae27f23d81091a836d1499b1b7fccfdf625eca448f"}, "tags": ["edfi"], "refs": [], "sources": [["staging", "base_edfi_calendar_dates"], ["staging", "base_edfi_calendar_dates"]], "description": "The type of scheduled or unscheduled event for the day.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/staging/edfi/stg_edfi.yml", "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_calendar_dates.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "labels": {"edfi_version": "5_3"}}, "created_at": 1650510022.127961, "compiled_sql": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `gcp-project`.`dev_staging`.`base_edfi_calendar_dates`\n    where is_complete_extract IS TRUE\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `gcp-project`.`dev_staging`.`base_edfi_calendar_dates` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            OR base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    parse_date('%Y-%m-%d', json_value(data, '$.date')) as date,\n    array(\n        select as struct \n            split(json_value(calendar_events, \"$.calendarEventDescriptor\"), '#')[OFFSET(1)] as calendar_event_descriptor\n        from unnest(json_query_array(data, \"$.calendarEvents\")) calendar_events \n    ) as calendar_events,\n    struct(\n        json_value(data, '$.calendarReference.calendarCode') as calendar_code,\n        json_value(data, '$.calendarReference.schoolId') as school_id,\n        cast(json_value(data, '$.calendarReference.schoolYear') as int64) as school_year\n    ) as calendar_reference\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_staging`.`stg_edfi_calendar_dates`"}, "model.project.stg_edfi_calendars": {"raw_sql": "{{ retrieve_edfi_records_from_data_lake('base_edfi_calendars') }}\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    json_value(data, '$.calendarCode') as calendar_code,\n    struct(\n        json_value(data, '$.schoolReference.schoolId') as school_id\n    ) as school_reference,\n    struct(\n        cast(json_value(data, '$.schoolYearTypeReference.schoolYear') as int64) as school_year\n    ) as school_year_type_reference,\n    split(json_value(data, \"$.calendarTypeDescriptor\"), '#')[OFFSET(1)] as calendar_type_descriptor,\n    array(\n        select as struct \n            split(json_value(grade_levels, \"$.gradeLevelDescriptor\"), '#')[OFFSET(1)] as grade_level_descriptor\n        from unnest(json_query_array(data, \"$.gradeLevels\")) grade_levels \n    ) as grade_levels\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_calendars", "source.project.staging.base_edfi_calendars"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_calendars"], "unique_id": "model.project.stg_edfi_calendars", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "staging/edfi/stg_edfi_calendars.sql", "original_file_path": "models/staging/edfi/stg_edfi_calendars.sql", "name": "stg_edfi_calendars", "alias": "stg_edfi_calendars", "checksum": {"name": "sha256", "checksum": "20d60542c7e13b606baf2988757d0bf96ff12dffa5ddf6c5ea6cac669e185e49"}, "tags": ["edfi"], "refs": [], "sources": [["staging", "base_edfi_calendars"], ["staging", "base_edfi_calendars"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_calendars.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "labels": {"edfi_version": "5_3"}}, "created_at": 1650510021.6479077, "compiled_sql": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `gcp-project`.`dev_staging`.`base_edfi_calendars`\n    where is_complete_extract IS TRUE\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `gcp-project`.`dev_staging`.`base_edfi_calendars` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            OR base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    json_value(data, '$.calendarCode') as calendar_code,\n    struct(\n        json_value(data, '$.schoolReference.schoolId') as school_id\n    ) as school_reference,\n    struct(\n        cast(json_value(data, '$.schoolYearTypeReference.schoolYear') as int64) as school_year\n    ) as school_year_type_reference,\n    split(json_value(data, \"$.calendarTypeDescriptor\"), '#')[OFFSET(1)] as calendar_type_descriptor,\n    array(\n        select as struct \n            split(json_value(grade_levels, \"$.gradeLevelDescriptor\"), '#')[OFFSET(1)] as grade_level_descriptor\n        from unnest(json_query_array(data, \"$.gradeLevels\")) grade_levels \n    ) as grade_levels\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_staging`.`stg_edfi_calendars`"}, "model.project.bridge_staff_group": {"raw_sql": "select\n    {{ dbt_utils.surrogate_key([\n        'staff_section_associations.section_reference.school_id',\n        'staff_section_associations.section_reference.school_year',\n        'staff_section_associations.section_reference.session_name',\n        'staff_section_associations.section_reference.local_course_code',\n        'staff_section_associations.section_reference.section_identifier'\n    ]) }}                                                                       as staff_group_key,\n    {{ dbt_utils.surrogate_key([\n        'staff_section_associations.staff_reference.staff_unique_id',\n        'staff_section_associations.section_reference.school_year'\n    ]) }}                                                                       as staff_key,\n    staff_section_associations.classroom_position_descriptor                    as classroom_position,\n    staff_section_associations.highly_qualified_teacher                         as highly_qualified_teacher,\n    staff_section_associations.percentage_contribution                          as percentage_contribution\nfrom {{ ref('stg_edfi_staff_section_associations') }} staff_section_associations\nleft join {{ ref('stg_edfi_sections') }} sections\n    on staff_section_associations.section_reference.local_course_code = sections.course_offering_reference.local_course_code\n    and staff_section_associations.section_reference.school_id = sections.course_offering_reference.school_id\n    and staff_section_associations.section_reference.school_year = sections.course_offering_reference.school_year\n    and staff_section_associations.section_reference.section_identifier = sections.section_identifier\n    and staff_section_associations.section_reference.session_name = sections.course_offering_reference.session_name\nleft join {{ ref('stg_edfi_course_offerings') }} course_offerings\n    on sections.course_offering_reference.local_course_code = course_offerings.local_course_code\n    and sections.course_offering_reference.school_id = course_offerings.school_reference.school_id\n    and sections.course_offering_reference.school_year = course_offerings.session_reference.school_year\n    and sections.course_offering_reference.session_name = course_offerings.session_reference.session_name\nleft join {{ ref('stg_edfi_sessions') }} sessions\n    on course_offerings.school_reference.school_id = sessions.school_reference.school_id\n    and course_offerings.session_reference.school_year = sessions.school_year_type_reference.school_year\n    and course_offerings.session_reference.session_name = sessions.session_name\nwhere\n    current_date BETWEEN staff_section_associations.begin_date and staff_section_associations.end_date\n    OR staff_section_associations.end_date = sessions.end_date", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.project.stg_edfi_staff_section_associations", "model.project.stg_edfi_sections", "model.project.stg_edfi_course_offerings", "model.project.stg_edfi_sessions"]}, "config": {"enabled": true, "alias": null, "schema": "core", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_core", "fqn": ["project", "marts", "core", "bridge_staff_group"], "unique_id": "model.project.bridge_staff_group", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "marts/core/bridge_staff_group.sql", "original_file_path": "models/marts/core/bridge_staff_group.sql", "name": "bridge_staff_group", "alias": "bridge_staff_group", "checksum": {"name": "sha256", "checksum": "3d98537de1470ac885a0a265df13ef695cc85eb722813ec81e34a92bb8955723"}, "tags": ["edfi"], "refs": [["stg_edfi_staff_section_associations"], ["stg_edfi_sections"], ["stg_edfi_course_offerings"], ["stg_edfi_sessions"]], "sources": [], "description": "Bridge table connecting teachers to student section fact tables", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/marts/core/core.yml", "compiled_path": "target/compiled/project/models/marts/core/bridge_staff_group.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "core", "tags": "edfi"}, "created_at": 1650510021.9654021, "compiled_sql": "select\n    to_hex(md5(cast(coalesce(cast(staff_section_associations.section_reference.school_id as \n    string\n), '') || '-' || coalesce(cast(staff_section_associations.section_reference.school_year as \n    string\n), '') || '-' || coalesce(cast(staff_section_associations.section_reference.session_name as \n    string\n), '') || '-' || coalesce(cast(staff_section_associations.section_reference.local_course_code as \n    string\n), '') || '-' || coalesce(cast(staff_section_associations.section_reference.section_identifier as \n    string\n), '') as \n    string\n)))                                                                       as staff_group_key,\n    to_hex(md5(cast(coalesce(cast(staff_section_associations.staff_reference.staff_unique_id as \n    string\n), '') || '-' || coalesce(cast(staff_section_associations.section_reference.school_year as \n    string\n), '') as \n    string\n)))                                                                       as staff_key,\n    staff_section_associations.classroom_position_descriptor                    as classroom_position,\n    staff_section_associations.highly_qualified_teacher                         as highly_qualified_teacher,\n    staff_section_associations.percentage_contribution                          as percentage_contribution\nfrom `gcp-project`.`dev_staging`.`stg_edfi_staff_section_associations` staff_section_associations\nleft join `gcp-project`.`dev_staging`.`stg_edfi_sections` sections\n    on staff_section_associations.section_reference.local_course_code = sections.course_offering_reference.local_course_code\n    and staff_section_associations.section_reference.school_id = sections.course_offering_reference.school_id\n    and staff_section_associations.section_reference.school_year = sections.course_offering_reference.school_year\n    and staff_section_associations.section_reference.section_identifier = sections.section_identifier\n    and staff_section_associations.section_reference.session_name = sections.course_offering_reference.session_name\nleft join `gcp-project`.`dev_staging`.`stg_edfi_course_offerings` course_offerings\n    on sections.course_offering_reference.local_course_code = course_offerings.local_course_code\n    and sections.course_offering_reference.school_id = course_offerings.school_reference.school_id\n    and sections.course_offering_reference.school_year = course_offerings.session_reference.school_year\n    and sections.course_offering_reference.session_name = course_offerings.session_reference.session_name\nleft join `gcp-project`.`dev_staging`.`stg_edfi_sessions` sessions\n    on course_offerings.school_reference.school_id = sessions.school_reference.school_id\n    and course_offerings.session_reference.school_year = sessions.school_year_type_reference.school_year\n    and course_offerings.session_reference.session_name = sessions.session_name\nwhere\n    current_date BETWEEN staff_section_associations.begin_date and staff_section_associations.end_date\n    OR staff_section_associations.end_date = sessions.end_date", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_core`.`bridge_staff_group`"}, "model.project.dim_section": {"raw_sql": "select distinct\n    {{ dbt_utils.surrogate_key([\n        'sections.course_offering_reference.school_id',\n        'sections.course_offering_reference.school_year',\n        'sections.course_offering_reference.session_name',\n        'sections.course_offering_reference.local_course_code',\n        'sections.section_identifier'\n    ]) }}                                                       as section_key,\n    {{ dbt_utils.surrogate_key([\n        'stg_edfi_schools.local_education_agency_id',\n        'sections.course_offering_reference.school_year'\n    ]) }}                                                       as local_education_agency_key,\n    {{ dbt_utils.surrogate_key([\n        'sections.course_offering_reference.school_id',\n        'sections.course_offering_reference.school_year'\n    ]) }}                                                       as school_key,\n    {{ dbt_utils.surrogate_key([\n        'sections.course_offering_reference.school_id',\n        'sections.course_offering_reference.school_year',\n        'sections.course_offering_reference.session_name'\n    ]) }}                                                       as session_key,\n    course_offerings.session_reference.school_year              as school_year,\n    sections.section_identifier                                 as section_identifier,\n    COALESCE(\n        sections.section_name,\n        CONCAT(\n            course_offering_reference.local_course_code, '-',\n            sessions.session_name\n        )\n    )                                                           as section_name,\n    course_offering_reference.local_course_code                 as local_course_code,\n    courses.course_title                                        as course_title,\n    courses.academic_subject_descriptor                         as course_academic_subject,\n    courses.course_gpa_applicability_descriptor                 as course_gpa_applicability,\n    sections.available_credits                                  as available_credits\nfrom {{ ref('stg_edfi_sections') }} sections\ncross join unnest(sections.class_periods) as class_period\nleft join {{ ref('stg_edfi_schools') }} stg_edfi_schools\n    on sections.course_offering_reference.school_id = stg_edfi_schools.school_id\nleft join {{ ref('stg_edfi_course_offerings') }} course_offerings\n    on sections.school_year = course_offerings.school_year\n    and course_offerings.local_course_code = sections.course_offering_reference.local_course_code\n    and course_offerings.school_reference.school_id = sections.course_offering_reference.school_id\n    and course_offerings.session_reference.school_year = sections.course_offering_reference.school_year\n    and course_offerings.session_reference.session_name = sections.course_offering_reference.session_name\nleft join {{ ref('stg_edfi_courses') }} courses\n    on course_offerings.school_year = courses.school_year\n    and courses.course_code = course_offerings.course_reference.course_code\n    and courses.education_organization_reference.education_organization_id = course_offerings.course_reference.education_organization_id\nleft join {{ ref('stg_edfi_sessions') }} sessions\n    on course_offerings.session_reference.school_id = sessions.school_reference.school_id\n    and course_offerings.session_reference.school_year = sessions.school_year_type_reference.school_year\n    and course_offerings.session_reference.session_name = sessions.session_name", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.project.stg_edfi_sections", "model.project.stg_edfi_schools", "model.project.stg_edfi_course_offerings", "model.project.stg_edfi_courses", "model.project.stg_edfi_sessions"]}, "config": {"enabled": true, "alias": null, "schema": "core", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_core", "fqn": ["project", "marts", "core", "dim_section"], "unique_id": "model.project.dim_section", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "marts/core/dim_section.sql", "original_file_path": "models/marts/core/dim_section.sql", "name": "dim_section", "alias": "dim_section", "checksum": {"name": "sha256", "checksum": "53139efdf026e7ae151d3b86b20025b67e8cf141e6661caefbe7985eb9554cd4"}, "tags": ["edfi"], "refs": [["stg_edfi_sections"], ["stg_edfi_schools"], ["stg_edfi_course_offerings"], ["stg_edfi_courses"], ["stg_edfi_sessions"]], "sources": [], "description": "# Section dim\n\nGrain: one row per section per school", "columns": {"section_key": {"name": "section_key", "description": "Primary key for dimension table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "local_education_agency_key": {"name": "local_education_agency_key", "description": "Foreign key to `dim_local_education_agency`", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_key": {"name": "school_key", "description": "Foreign key to `dim_school`", "meta": {}, "data_type": null, "quote": null, "tags": []}, "session_key": {"name": "session_key", "description": "Foreign key to `dim_session`", "meta": {}, "data_type": null, "quote": null, "tags": []}, "section_identifier": {"name": "section_identifier", "description": "Section unique identifier", "meta": {}, "data_type": null, "quote": null, "tags": []}, "section_name": {"name": "section_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "session_name": {"name": "session_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "local_course_code": {"name": "local_course_code", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "course_title": {"name": "course_title", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_year": {"name": "school_year", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/marts/core/core.yml", "compiled_path": "target/compiled/project/models/marts/core/dim_section.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "core", "tags": "edfi"}, "created_at": 1650510021.9689043, "compiled_sql": "select distinct\n    to_hex(md5(cast(coalesce(cast(sections.course_offering_reference.school_id as \n    string\n), '') || '-' || coalesce(cast(sections.course_offering_reference.school_year as \n    string\n), '') || '-' || coalesce(cast(sections.course_offering_reference.session_name as \n    string\n), '') || '-' || coalesce(cast(sections.course_offering_reference.local_course_code as \n    string\n), '') || '-' || coalesce(cast(sections.section_identifier as \n    string\n), '') as \n    string\n)))                                                       as section_key,\n    to_hex(md5(cast(coalesce(cast(stg_edfi_schools.local_education_agency_id as \n    string\n), '') || '-' || coalesce(cast(sections.course_offering_reference.school_year as \n    string\n), '') as \n    string\n)))                                                       as local_education_agency_key,\n    to_hex(md5(cast(coalesce(cast(sections.course_offering_reference.school_id as \n    string\n), '') || '-' || coalesce(cast(sections.course_offering_reference.school_year as \n    string\n), '') as \n    string\n)))                                                       as school_key,\n    to_hex(md5(cast(coalesce(cast(sections.course_offering_reference.school_id as \n    string\n), '') || '-' || coalesce(cast(sections.course_offering_reference.school_year as \n    string\n), '') || '-' || coalesce(cast(sections.course_offering_reference.session_name as \n    string\n), '') as \n    string\n)))                                                       as session_key,\n    course_offerings.session_reference.school_year              as school_year,\n    sections.section_identifier                                 as section_identifier,\n    COALESCE(\n        sections.section_name,\n        CONCAT(\n            course_offering_reference.local_course_code, '-',\n            sessions.session_name\n        )\n    )                                                           as section_name,\n    course_offering_reference.local_course_code                 as local_course_code,\n    courses.course_title                                        as course_title,\n    courses.academic_subject_descriptor                         as course_academic_subject,\n    courses.course_gpa_applicability_descriptor                 as course_gpa_applicability,\n    sections.available_credits                                  as available_credits\nfrom `gcp-project`.`dev_staging`.`stg_edfi_sections` sections\ncross join unnest(sections.class_periods) as class_period\nleft join `gcp-project`.`dev_staging`.`stg_edfi_schools` stg_edfi_schools\n    on sections.course_offering_reference.school_id = stg_edfi_schools.school_id\nleft join `gcp-project`.`dev_staging`.`stg_edfi_course_offerings` course_offerings\n    on sections.school_year = course_offerings.school_year\n    and course_offerings.local_course_code = sections.course_offering_reference.local_course_code\n    and course_offerings.school_reference.school_id = sections.course_offering_reference.school_id\n    and course_offerings.session_reference.school_year = sections.course_offering_reference.school_year\n    and course_offerings.session_reference.session_name = sections.course_offering_reference.session_name\nleft join `gcp-project`.`dev_staging`.`stg_edfi_courses` courses\n    on course_offerings.school_year = courses.school_year\n    and courses.course_code = course_offerings.course_reference.course_code\n    and courses.education_organization_reference.education_organization_id = course_offerings.course_reference.education_organization_id\nleft join `gcp-project`.`dev_staging`.`stg_edfi_sessions` sessions\n    on course_offerings.session_reference.school_id = sessions.school_reference.school_id\n    and course_offerings.session_reference.school_year = sessions.school_year_type_reference.school_year\n    and course_offerings.session_reference.session_name = sessions.session_name", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_core`.`dim_section`"}, "model.project.fct_student_section": {"raw_sql": "select\n    {{ dbt_utils.surrogate_key([\n        'ssa.section_reference.school_id',\n        'ssa.section_reference.school_year'\n    ]) }}                                               as school_key,\n    {{ dbt_utils.surrogate_key([\n        'course_offerings.session_reference.school_id',\n        'course_offerings.session_reference.school_year',\n        'course_offerings.session_reference.session_name'\n    ]) }}                                               as session_key,\n    {{ dbt_utils.surrogate_key([\n        'ssa.section_reference.school_id',\n        'ssa.section_reference.school_year',\n        'ssa.section_reference.session_name',\n        'ssa.section_reference.local_course_code',\n        'ssa.section_reference.section_identifier'\n    ]) }}                                               as section_key,\n    {{ dbt_utils.surrogate_key([\n        'ssa.section_reference.school_id',\n        'ssa.section_reference.school_year',\n        'ssa.section_reference.session_name',\n        'ssa.section_reference.local_course_code',\n        'ssa.section_reference.section_identifier'\n    ]) }}                                               as staff_group_key,\n    {{ dbt_utils.surrogate_key([\n        'ssa.student_reference.student_unique_id',\n        'ssa.section_reference.school_year'\n     ]) }}                                              as student_key,\n    section_reference.school_year                       as school_year,\n    ssa.homeroom_indicator                              as homeroom_indicator,\n    ssa.begin_date                                      as start_date,\n    ssa.end_date                                        as end_date,\n    if(\n        ssa.begin_date is null\n        OR (\n            current_date >= ssa.begin_date\n            and current_date < ssa.end_date\n        ),\n        1, 0)                                           as is_actively_enrolled_in_section\nfrom {{ ref('stg_edfi_student_section_associations') }} ssa\nleft join {{ ref('stg_edfi_course_offerings') }} course_offerings\n    on ssa.school_year = course_offerings.school_year\n    and course_offerings.local_course_code = ssa.section_reference.local_course_code\n    and course_offerings.school_reference.school_id = ssa.section_reference.school_id\n    and course_offerings.session_reference.school_year = ssa.section_reference.school_year\n    and course_offerings.session_reference.session_name = ssa.section_reference.session_name", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.project.stg_edfi_student_section_associations", "model.project.stg_edfi_course_offerings"]}, "config": {"enabled": true, "alias": null, "schema": "core", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_core", "fqn": ["project", "marts", "core", "fct_student_section"], "unique_id": "model.project.fct_student_section", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "marts/core/fct_student_section.sql", "original_file_path": "models/marts/core/fct_student_section.sql", "name": "fct_student_section", "alias": "fct_student_section", "checksum": {"name": "sha256", "checksum": "2c87891e3feaed7ae7996ee313fc48e43c5155b6cd911139d17a69a176c99027"}, "tags": ["edfi"], "refs": [["stg_edfi_student_section_associations"], ["stg_edfi_course_offerings"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/fct_student_section.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "core", "tags": "edfi"}, "created_at": 1650510021.6696641, "compiled_sql": "select\n    to_hex(md5(cast(coalesce(cast(ssa.section_reference.school_id as \n    string\n), '') || '-' || coalesce(cast(ssa.section_reference.school_year as \n    string\n), '') as \n    string\n)))                                               as school_key,\n    to_hex(md5(cast(coalesce(cast(course_offerings.session_reference.school_id as \n    string\n), '') || '-' || coalesce(cast(course_offerings.session_reference.school_year as \n    string\n), '') || '-' || coalesce(cast(course_offerings.session_reference.session_name as \n    string\n), '') as \n    string\n)))                                               as session_key,\n    to_hex(md5(cast(coalesce(cast(ssa.section_reference.school_id as \n    string\n), '') || '-' || coalesce(cast(ssa.section_reference.school_year as \n    string\n), '') || '-' || coalesce(cast(ssa.section_reference.session_name as \n    string\n), '') || '-' || coalesce(cast(ssa.section_reference.local_course_code as \n    string\n), '') || '-' || coalesce(cast(ssa.section_reference.section_identifier as \n    string\n), '') as \n    string\n)))                                               as section_key,\n    to_hex(md5(cast(coalesce(cast(ssa.section_reference.school_id as \n    string\n), '') || '-' || coalesce(cast(ssa.section_reference.school_year as \n    string\n), '') || '-' || coalesce(cast(ssa.section_reference.session_name as \n    string\n), '') || '-' || coalesce(cast(ssa.section_reference.local_course_code as \n    string\n), '') || '-' || coalesce(cast(ssa.section_reference.section_identifier as \n    string\n), '') as \n    string\n)))                                               as staff_group_key,\n    to_hex(md5(cast(coalesce(cast(ssa.student_reference.student_unique_id as \n    string\n), '') || '-' || coalesce(cast(ssa.section_reference.school_year as \n    string\n), '') as \n    string\n)))                                              as student_key,\n    section_reference.school_year                       as school_year,\n    ssa.homeroom_indicator                              as homeroom_indicator,\n    ssa.begin_date                                      as start_date,\n    ssa.end_date                                        as end_date,\n    if(\n        ssa.begin_date is null\n        OR (\n            current_date >= ssa.begin_date\n            and current_date < ssa.end_date\n        ),\n        1, 0)                                           as is_actively_enrolled_in_section\nfrom `gcp-project`.`dev_staging`.`stg_edfi_student_section_associations` ssa\nleft join `gcp-project`.`dev_staging`.`stg_edfi_course_offerings` course_offerings\n    on ssa.school_year = course_offerings.school_year\n    and course_offerings.local_course_code = ssa.section_reference.local_course_code\n    and course_offerings.school_reference.school_id = ssa.section_reference.school_id\n    and course_offerings.session_reference.school_year = ssa.section_reference.school_year\n    and course_offerings.session_reference.session_name = ssa.section_reference.session_name", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_core`.`fct_student_section`"}, "model.project.stg_edfi_course_offerings": {"raw_sql": "{{ retrieve_edfi_records_from_data_lake('base_edfi_course_offerings') }}\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    json_value(data, '$.id') as id,\n    json_value(data, '$.localCourseCode') as local_course_code,\n    json_value(data, '$.localCourseTitle') as local_course_title,\n    struct(\n        json_value(data, '$.courseReference.courseCode') as course_code,\n        json_value(data, '$.courseReference.educationOrganizationId') as education_organization_id\n    ) as course_reference,\n    struct(\n        json_value(data, '$.schoolReference.schoolId') as school_id\n    ) as school_reference,\n    struct(\n        json_value(data, '$.sessionReference.schoolId') as school_id,\n        cast(json_value(data, '$.sessionReference.schoolYear') as int64) as school_year,\n        json_value(data, '$.sessionReference.sessionName') as session_name\n    ) as session_reference,\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_course_offerings", "source.project.staging.base_edfi_course_offerings"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_course_offerings"], "unique_id": "model.project.stg_edfi_course_offerings", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "staging/edfi/stg_edfi_course_offerings.sql", "original_file_path": "models/staging/edfi/stg_edfi_course_offerings.sql", "name": "stg_edfi_course_offerings", "alias": "stg_edfi_course_offerings", "checksum": {"name": "sha256", "checksum": "ff8746ed529f1f7934d0a62da8257445051324da8708a779278fd2958b98db1a"}, "tags": ["edfi"], "refs": [], "sources": [["staging", "base_edfi_course_offerings"], ["staging", "base_edfi_course_offerings"]], "description": "This entity represents an entry in the course catalog of available courses offered by the school during a session.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/staging/edfi/stg_edfi.yml", "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_course_offerings.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "labels": {"edfi_version": "5_3"}}, "created_at": 1650510022.1283617, "compiled_sql": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `gcp-project`.`dev_staging`.`base_edfi_course_offerings`\n    where is_complete_extract IS TRUE\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `gcp-project`.`dev_staging`.`base_edfi_course_offerings` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            OR base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    json_value(data, '$.id') as id,\n    json_value(data, '$.localCourseCode') as local_course_code,\n    json_value(data, '$.localCourseTitle') as local_course_title,\n    struct(\n        json_value(data, '$.courseReference.courseCode') as course_code,\n        json_value(data, '$.courseReference.educationOrganizationId') as education_organization_id\n    ) as course_reference,\n    struct(\n        json_value(data, '$.schoolReference.schoolId') as school_id\n    ) as school_reference,\n    struct(\n        json_value(data, '$.sessionReference.schoolId') as school_id,\n        cast(json_value(data, '$.sessionReference.schoolYear') as int64) as school_year,\n        json_value(data, '$.sessionReference.sessionName') as session_name\n    ) as session_reference,\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_staging`.`stg_edfi_course_offerings`"}, "model.project.stg_edfi_courses": {"raw_sql": "{{ retrieve_edfi_records_from_data_lake('base_edfi_courses') }}\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    json_value(data, '$.courseCode') as course_code,\n    json_value(data, '$.courseTitle') as course_title,\n    json_value(data, '$.courseDescription') as course_description,\n    split(json_value(data, \"$.academicSubjectDescriptor\"), '#')[OFFSET(1)] as academic_subject_descriptor,\n    split(json_value(data, \"$.careerPathwayDescriptor\"), '#')[OFFSET(1)] as career_pathway_descriptor,\n    split(json_value(data, \"$.courseDefinedByDescriptor\"), '#')[OFFSET(1)] as course_defined_by_descriptor,\n    split(json_value(data, \"$.courseGPAApplicabilityDescriptor\"), '#')[OFFSET(1)] as course_gpa_applicability_descriptor,\n    parse_date('%Y-%m-%d', json_value(data, \"$.dateCourseAdopted\")) as date_course_adopted,\n    cast(json_value(data, \"$.highSchoolCourseRequirement\") as BOOL) as high_school_course_requirement,\n    cast(json_value(data, \"$.maxCompletionsForCredit\") as float64) as max_completions_for_credit,\n    cast(json_value(data, \"$.maximumAvailableCreditConversion\") as float64) as maximum_available_credit_conversion,\n    cast(json_value(data, \"$.maximumAvailableCredits\") as float64) as maximum_available_credits,\n    cast(json_value(data, \"$.minimumAvailableCreditConversion\") as float64) as minimum_available_credit_conversion,\n    cast(json_value(data, \"$.minimumAvailableCredits\") as float64) as minimum_available_credits,\n    cast(json_value(data, \"$.numberOfParts\") as int64) as number_of_parts,\n    struct(\n        json_value(data, '$.educationOrganizationReference.educationOrganizationId') as education_organization_id\n    ) as education_organization_reference,\n    array(\n        select as struct \n            split(json_value(levels, \"$.competencyLevelDescriptor\"), '#')[OFFSET(1)] as competency_level_descriptor,\n        from unnest(json_query_array(data, \"$.competencyLevels\")) levels \n    ) as competency_levels,\n    array(\n        select as struct \n            split(json_value(codes, \"$.identificationCodes.courseIdentificationSystemDescriptor\"), '#')[OFFSET(1)] as course_identification_system_descriptor,\n            split(json_value(codes, \"$.identificationCodes.assigningOrganizationIdentificationCode\"), '#')[OFFSET(1)] as assigning_organization_identification_code,\n            json_value(codes, \"$.identificationCodes.courseCatalogURL\") as course_catalog_url,\n            json_value(codes, \"$.identificationCodes.identificationCode\") as identification_code\n        from unnest(json_query_array(data, \"$.identificationCodes\")) codes \n    ) as identification_codes\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_courses", "source.project.staging.base_edfi_courses"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_courses"], "unique_id": "model.project.stg_edfi_courses", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "staging/edfi/stg_edfi_courses.sql", "original_file_path": "models/staging/edfi/stg_edfi_courses.sql", "name": "stg_edfi_courses", "alias": "stg_edfi_courses", "checksum": {"name": "sha256", "checksum": "4a360ca41327771d67005fc3af8f6ca63f4de57008d2542b591f71abafb5d8ad"}, "tags": ["edfi"], "refs": [], "sources": [["staging", "base_edfi_courses"], ["staging", "base_edfi_courses"]], "description": "This educational entity represents the organization of subject matter and related learning experiences provided for the instruction of students on a regular or systematic basis.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/staging/edfi/stg_edfi.yml", "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_courses.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "labels": {"edfi_version": "5_3"}}, "created_at": 1650510022.1287446, "compiled_sql": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `gcp-project`.`dev_staging`.`base_edfi_courses`\n    where is_complete_extract IS TRUE\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `gcp-project`.`dev_staging`.`base_edfi_courses` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            OR base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    json_value(data, '$.courseCode') as course_code,\n    json_value(data, '$.courseTitle') as course_title,\n    json_value(data, '$.courseDescription') as course_description,\n    split(json_value(data, \"$.academicSubjectDescriptor\"), '#')[OFFSET(1)] as academic_subject_descriptor,\n    split(json_value(data, \"$.careerPathwayDescriptor\"), '#')[OFFSET(1)] as career_pathway_descriptor,\n    split(json_value(data, \"$.courseDefinedByDescriptor\"), '#')[OFFSET(1)] as course_defined_by_descriptor,\n    split(json_value(data, \"$.courseGPAApplicabilityDescriptor\"), '#')[OFFSET(1)] as course_gpa_applicability_descriptor,\n    parse_date('%Y-%m-%d', json_value(data, \"$.dateCourseAdopted\")) as date_course_adopted,\n    cast(json_value(data, \"$.highSchoolCourseRequirement\") as BOOL) as high_school_course_requirement,\n    cast(json_value(data, \"$.maxCompletionsForCredit\") as float64) as max_completions_for_credit,\n    cast(json_value(data, \"$.maximumAvailableCreditConversion\") as float64) as maximum_available_credit_conversion,\n    cast(json_value(data, \"$.maximumAvailableCredits\") as float64) as maximum_available_credits,\n    cast(json_value(data, \"$.minimumAvailableCreditConversion\") as float64) as minimum_available_credit_conversion,\n    cast(json_value(data, \"$.minimumAvailableCredits\") as float64) as minimum_available_credits,\n    cast(json_value(data, \"$.numberOfParts\") as int64) as number_of_parts,\n    struct(\n        json_value(data, '$.educationOrganizationReference.educationOrganizationId') as education_organization_id\n    ) as education_organization_reference,\n    array(\n        select as struct \n            split(json_value(levels, \"$.competencyLevelDescriptor\"), '#')[OFFSET(1)] as competency_level_descriptor,\n        from unnest(json_query_array(data, \"$.competencyLevels\")) levels \n    ) as competency_levels,\n    array(\n        select as struct \n            split(json_value(codes, \"$.identificationCodes.courseIdentificationSystemDescriptor\"), '#')[OFFSET(1)] as course_identification_system_descriptor,\n            split(json_value(codes, \"$.identificationCodes.assigningOrganizationIdentificationCode\"), '#')[OFFSET(1)] as assigning_organization_identification_code,\n            json_value(codes, \"$.identificationCodes.courseCatalogURL\") as course_catalog_url,\n            json_value(codes, \"$.identificationCodes.identificationCode\") as identification_code\n        from unnest(json_query_array(data, \"$.identificationCodes\")) codes \n    ) as identification_codes\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_staging`.`stg_edfi_courses`"}, "model.project.stg_edfi_descriptors": {"raw_sql": "{{ retrieve_edfi_records_from_data_lake('base_edfi_descriptors') }}\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    json_value(data, '$.codeValue') as code_value,\n    json_value(data, '$.description') as description,\n    json_value(data, '$.namespace') as namespace,\n    json_value(data, '$.shortDescription') as short_description\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_descriptors", "source.project.staging.base_edfi_descriptors"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_descriptors"], "unique_id": "model.project.stg_edfi_descriptors", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "staging/edfi/stg_edfi_descriptors.sql", "original_file_path": "models/staging/edfi/stg_edfi_descriptors.sql", "name": "stg_edfi_descriptors", "alias": "stg_edfi_descriptors", "checksum": {"name": "sha256", "checksum": "fde33e8ef23854144bde1a01192797d12271d60064cd8e8bdf492a4d48700506"}, "tags": ["edfi"], "refs": [], "sources": [["staging", "base_edfi_descriptors"], ["staging", "base_edfi_descriptors"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_descriptors.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "labels": {"edfi_version": "5_3"}}, "created_at": 1650510021.6891515, "compiled_sql": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `gcp-project`.`dev_staging`.`base_edfi_descriptors`\n    where is_complete_extract IS TRUE\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `gcp-project`.`dev_staging`.`base_edfi_descriptors` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            OR base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    json_value(data, '$.codeValue') as code_value,\n    json_value(data, '$.description') as description,\n    json_value(data, '$.namespace') as namespace,\n    json_value(data, '$.shortDescription') as short_description\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_staging`.`stg_edfi_descriptors`"}, "model.project.stg_edfi_discipline_incidents": {"raw_sql": "{{ retrieve_edfi_records_from_data_lake('base_edfi_discipline_incidents') }}\n\nselect\n    date_extracted                                                              as date_extracted,\n    school_year                                                                 as school_year,\n    id                                                                          as id,\n    json_value(data, '$.incidentIdentifier')                                    as incident_identifier,\n    json_value(data, '$.caseNumber')                                            as case_number,\n    cast(json_value(data, '$.incidentCost') as float64)                         as incident_cost,\n    parse_date('%Y-%m-%d', json_value(data, '$.incidentDate'))                  as incident_date,\n    json_value(data, '$.incidentDescription')                                   as incident_description,\n    split(json_value(data, '$.incidentLocationDescriptor'), '#')[OFFSET(1)]     as incident_location_descriptor,\n    json_value(data, '$.incidentTime')                                          as incident_time,\n    cast(json_value(data, '$.reportedToLawEnforcement') as BOOL)                as reported_to_law_enforcement,\n    split(json_value(data, '$.reporterDescriptionDescriptor'), '#')[OFFSET(1)]  as reporter_description_descriptor,\n    json_value(data, '$.reporterName')                                          as reporter_name,\n    struct(\n        json_value(data, '$.schoolReference.schoolId') as school_id\n    )                                                                           as school_reference,\n    struct(\n        json_value(data, '$.staffReference.staffUniqueId') as staff_unique_id\n    )                                                                           as staff_reference,\n    array(\n        select as struct \n            split(json_value(behaviors, '$.behaviorDescriptor'), '#')[OFFSET(1)] as behavior_descriptor,\n            json_value(behaviors, \"$.behaviorDetailedDescription\") as behavior_detailed_description\n        from unnest(json_query_array(data, \"$.behaviors\")) behaviors \n    )                                                                           as behaviors,\n    array(\n        select as struct \n            split(json_value(external_participants, '$.disciplineIncidentParticipationCodeDescriptor'), '#')[OFFSET(1)] as discipline_incident_participation_code_descriptor,\n            json_value(external_participants, \"$.firstName\") as first_name,\n            json_value(external_participants, \"$.lastSurname\") as last_surname\n        from unnest(json_query_array(data, \"$.externalParticipants\")) external_participants \n    )                                                                           as external_participants,\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_discipline_incidents", "source.project.staging.base_edfi_discipline_incidents"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_discipline_incidents"], "unique_id": "model.project.stg_edfi_discipline_incidents", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "staging/edfi/stg_edfi_discipline_incidents.sql", "original_file_path": "models/staging/edfi/stg_edfi_discipline_incidents.sql", "name": "stg_edfi_discipline_incidents", "alias": "stg_edfi_discipline_incidents", "checksum": {"name": "sha256", "checksum": "e7d7c23051a07ac756cc0db06f2d980fe337cc7dbb7a977d3ef33de6bee7090f"}, "tags": ["edfi"], "refs": [], "sources": [["staging", "base_edfi_discipline_incidents"], ["staging", "base_edfi_discipline_incidents"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_discipline_incidents.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "labels": {"edfi_version": "5_3"}}, "created_at": 1650510021.6931973, "compiled_sql": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `gcp-project`.`dev_staging`.`base_edfi_discipline_incidents`\n    where is_complete_extract IS TRUE\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `gcp-project`.`dev_staging`.`base_edfi_discipline_incidents` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            OR base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect\n    date_extracted                                                              as date_extracted,\n    school_year                                                                 as school_year,\n    id                                                                          as id,\n    json_value(data, '$.incidentIdentifier')                                    as incident_identifier,\n    json_value(data, '$.caseNumber')                                            as case_number,\n    cast(json_value(data, '$.incidentCost') as float64)                         as incident_cost,\n    parse_date('%Y-%m-%d', json_value(data, '$.incidentDate'))                  as incident_date,\n    json_value(data, '$.incidentDescription')                                   as incident_description,\n    split(json_value(data, '$.incidentLocationDescriptor'), '#')[OFFSET(1)]     as incident_location_descriptor,\n    json_value(data, '$.incidentTime')                                          as incident_time,\n    cast(json_value(data, '$.reportedToLawEnforcement') as BOOL)                as reported_to_law_enforcement,\n    split(json_value(data, '$.reporterDescriptionDescriptor'), '#')[OFFSET(1)]  as reporter_description_descriptor,\n    json_value(data, '$.reporterName')                                          as reporter_name,\n    struct(\n        json_value(data, '$.schoolReference.schoolId') as school_id\n    )                                                                           as school_reference,\n    struct(\n        json_value(data, '$.staffReference.staffUniqueId') as staff_unique_id\n    )                                                                           as staff_reference,\n    array(\n        select as struct \n            split(json_value(behaviors, '$.behaviorDescriptor'), '#')[OFFSET(1)] as behavior_descriptor,\n            json_value(behaviors, \"$.behaviorDetailedDescription\") as behavior_detailed_description\n        from unnest(json_query_array(data, \"$.behaviors\")) behaviors \n    )                                                                           as behaviors,\n    array(\n        select as struct \n            split(json_value(external_participants, '$.disciplineIncidentParticipationCodeDescriptor'), '#')[OFFSET(1)] as discipline_incident_participation_code_descriptor,\n            json_value(external_participants, \"$.firstName\") as first_name,\n            json_value(external_participants, \"$.lastSurname\") as last_surname\n        from unnest(json_query_array(data, \"$.externalParticipants\")) external_participants \n    )                                                                           as external_participants,\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_staging`.`stg_edfi_discipline_incidents`"}, "model.project.dim_grading_period": {"raw_sql": "with unique_records as (\n    select distinct\n        student_section_association_reference.session_name,\n        grading_period_reference.school_id,\n        grading_period_reference.school_year,\n        grading_period_reference.grading_period_descriptor,\n        grading_period_reference.period_sequence\n    from {{ ref('stg_edfi_grades') }} grades\n\n),\n\ngrades_grading_periods_unioned as (\n\n    select\n        {{ dbt_utils.surrogate_key([\n            'unique_records.school_id',\n            'unique_records.school_year',\n            'unique_records.session_name',\n            'unique_records.grading_period_descriptor',\n            'unique_records.period_sequence'\n        ]) }}                                               as grading_period_key,\n        {{ dbt_utils.surrogate_key([\n            'unique_records.school_id',\n            'unique_records.school_year',\n            'unique_records.session_name'\n        ]) }}                                               as session_key,\n        {{ dbt_utils.surrogate_key([\n            'unique_records.school_id',\n            'unique_records.school_year'\n        ]) }}                                               as school_key,\n        unique_records.school_year                          as school_year,\n        grading_periods.grading_period_descriptor           as grading_period_name,\n        grading_periods.period_sequence                     as period_sequence,\n        grading_periods.begin_date                          as grading_period_begin_date,\n        grading_periods.end_date                            as grading_period_end_date,\n        grading_periods.total_instructional_days            as total_instructional_days\n    from unique_records\n    left join {{ ref('stg_edfi_grading_periods') }} grading_periods\n        on unique_records.school_id = grading_periods.school_reference.school_id\n        and unique_records.school_year = grading_periods.school_year_type_reference.school_year\n        and unique_records.grading_period_descriptor = grading_periods.grading_period_descriptor\n        and unique_records.period_sequence = grading_periods.period_sequence\n\n\n    union all\n\n\n    select\n        {{ dbt_utils.surrogate_key([\n            'grading_periods.school_reference.school_id',\n            'grading_periods.school_year_type_reference.school_year',\n            'sessions.session_name',\n            'grading_periods.grading_period_descriptor',\n            'grading_periods.period_sequence'\n        ]) }}                                                                                   as grading_period_key,\n        {{ dbt_utils.surrogate_key([\n            'sessions.school_reference.school_id',\n            'sessions.school_year_type_reference.school_year',\n            'sessions.session_name'\n        ]) }}                                                                                   as session_key,\n        {{ dbt_utils.surrogate_key([\n            'sessions.school_reference.school_id',\n            'sessions.school_year_type_reference.school_year'\n        ]) }}                                                                                   as school_key,\n        sessions.school_year_type_reference.school_year                                         as school_year,\n        grading_periods.grading_period_descriptor                                               as grading_period_name,\n        grading_periods.period_sequence                                                         as period_sequence,\n        grading_periods.begin_date                                                              as grading_period_begin_date,\n        grading_periods.end_date                                                                as grading_period_end_date,\n        grading_periods.total_instructional_days                                                as total_instructional_day,\n    from {{ ref('stg_edfi_sessions') }} sessions\n    left join unnest(sessions.grading_periods) sessions_grading_periods\n    left join {{ ref('stg_edfi_school_year_types') }} school_year_types\n        on sessions.school_year_type_reference.school_year = school_year_types.school_year\n    left join {{ ref('stg_edfi_grading_periods') }} grading_periods\n        on sessions.school_year_type_reference.school_year = grading_periods.school_year\n        and sessions_grading_periods.grading_period_reference.grading_period_descriptor = grading_periods.grading_period_descriptor\n        and sessions_grading_periods.grading_period_reference.period_sequence = grading_periods.period_sequence\n        and sessions_grading_periods.grading_period_reference.school_id = grading_periods.school_reference.school_id\n    where sessions_grading_periods.grading_period_reference.grading_period_descriptor != ''\n\n)\n\nselect distinct\n    grading_period_key,\n    session_key,\n    school_key,\n    school_year,\n    grading_period_name,\n    period_sequence,\n    grading_period_begin_date,\n    grading_period_end_date,\n    total_instructional_days,\n    if(\n        current_date BETWEEN grading_period_begin_date and grading_period_end_date,\n        TRUE,\n        FALSE\n    )                                                                 as is_current_grading_period\nfrom grades_grading_periods_unioned", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.project.stg_edfi_grades", "model.project.stg_edfi_grading_periods", "model.project.stg_edfi_sessions", "model.project.stg_edfi_school_year_types", "model.project.stg_edfi_grading_periods"]}, "config": {"enabled": true, "alias": null, "schema": "core", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_core", "fqn": ["project", "marts", "core", "dim_grading_period"], "unique_id": "model.project.dim_grading_period", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "marts/core/dim_grading_period.sql", "original_file_path": "models/marts/core/dim_grading_period.sql", "name": "dim_grading_period", "alias": "dim_grading_period", "checksum": {"name": "sha256", "checksum": "d1fa7f99dad50d48f5d8de6646269e91df148ebbd7e842eafb48d8ccdb6c866b"}, "tags": ["edfi"], "refs": [["stg_edfi_grades"], ["stg_edfi_grading_periods"], ["stg_edfi_sessions"], ["stg_edfi_school_year_types"], ["stg_edfi_grading_periods"]], "sources": [], "description": "# Grading period dim\n\nGrain: one row per school per grading period", "columns": {"grading_period_key": {"name": "grading_period_key", "description": "Primary key for dimension table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_key": {"name": "school_key", "description": "Foreign key to `dim_school`", "meta": {}, "data_type": null, "quote": null, "tags": []}, "grading_period_description": {"name": "grading_period_description", "description": "Grading period descriptor code value", "meta": {}, "data_type": null, "quote": null, "tags": []}, "period_sequence": {"name": "period_sequence", "description": "The sequential order of this period relative to other periods", "meta": {}, "data_type": null, "quote": null, "tags": []}, "grading_period_begin_date_key": {"name": "grading_period_begin_date_key", "description": "Month, day, and year of the first day of the grading period", "meta": {}, "data_type": null, "quote": null, "tags": []}, "grading_period_end_date_key": {"name": "grading_period_end_date_key", "description": "Month, day, and year of the last day of the grading period", "meta": {}, "data_type": null, "quote": null, "tags": []}, "number_of_days": {"name": "number_of_days", "description": "Total days available for educational instruction during the grading period", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/marts/core/core.yml", "compiled_path": "target/compiled/project/models/marts/core/dim_grading_period.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "core", "tags": "edfi"}, "created_at": 1650510021.9714754, "compiled_sql": "with unique_records as (\n    select distinct\n        student_section_association_reference.session_name,\n        grading_period_reference.school_id,\n        grading_period_reference.school_year,\n        grading_period_reference.grading_period_descriptor,\n        grading_period_reference.period_sequence\n    from `gcp-project`.`dev_staging`.`stg_edfi_grades` grades\n\n),\n\ngrades_grading_periods_unioned as (\n\n    select\n        to_hex(md5(cast(coalesce(cast(unique_records.school_id as \n    string\n), '') || '-' || coalesce(cast(unique_records.school_year as \n    string\n), '') || '-' || coalesce(cast(unique_records.session_name as \n    string\n), '') || '-' || coalesce(cast(unique_records.grading_period_descriptor as \n    string\n), '') || '-' || coalesce(cast(unique_records.period_sequence as \n    string\n), '') as \n    string\n)))                                               as grading_period_key,\n        to_hex(md5(cast(coalesce(cast(unique_records.school_id as \n    string\n), '') || '-' || coalesce(cast(unique_records.school_year as \n    string\n), '') || '-' || coalesce(cast(unique_records.session_name as \n    string\n), '') as \n    string\n)))                                               as session_key,\n        to_hex(md5(cast(coalesce(cast(unique_records.school_id as \n    string\n), '') || '-' || coalesce(cast(unique_records.school_year as \n    string\n), '') as \n    string\n)))                                               as school_key,\n        unique_records.school_year                          as school_year,\n        grading_periods.grading_period_descriptor           as grading_period_name,\n        grading_periods.period_sequence                     as period_sequence,\n        grading_periods.begin_date                          as grading_period_begin_date,\n        grading_periods.end_date                            as grading_period_end_date,\n        grading_periods.total_instructional_days            as total_instructional_days\n    from unique_records\n    left join `gcp-project`.`dev_staging`.`stg_edfi_grading_periods` grading_periods\n        on unique_records.school_id = grading_periods.school_reference.school_id\n        and unique_records.school_year = grading_periods.school_year_type_reference.school_year\n        and unique_records.grading_period_descriptor = grading_periods.grading_period_descriptor\n        and unique_records.period_sequence = grading_periods.period_sequence\n\n\n    union all\n\n\n    select\n        to_hex(md5(cast(coalesce(cast(grading_periods.school_reference.school_id as \n    string\n), '') || '-' || coalesce(cast(grading_periods.school_year_type_reference.school_year as \n    string\n), '') || '-' || coalesce(cast(sessions.session_name as \n    string\n), '') || '-' || coalesce(cast(grading_periods.grading_period_descriptor as \n    string\n), '') || '-' || coalesce(cast(grading_periods.period_sequence as \n    string\n), '') as \n    string\n)))                                                                                   as grading_period_key,\n        to_hex(md5(cast(coalesce(cast(sessions.school_reference.school_id as \n    string\n), '') || '-' || coalesce(cast(sessions.school_year_type_reference.school_year as \n    string\n), '') || '-' || coalesce(cast(sessions.session_name as \n    string\n), '') as \n    string\n)))                                                                                   as session_key,\n        to_hex(md5(cast(coalesce(cast(sessions.school_reference.school_id as \n    string\n), '') || '-' || coalesce(cast(sessions.school_year_type_reference.school_year as \n    string\n), '') as \n    string\n)))                                                                                   as school_key,\n        sessions.school_year_type_reference.school_year                                         as school_year,\n        grading_periods.grading_period_descriptor                                               as grading_period_name,\n        grading_periods.period_sequence                                                         as period_sequence,\n        grading_periods.begin_date                                                              as grading_period_begin_date,\n        grading_periods.end_date                                                                as grading_period_end_date,\n        grading_periods.total_instructional_days                                                as total_instructional_day,\n    from `gcp-project`.`dev_staging`.`stg_edfi_sessions` sessions\n    left join unnest(sessions.grading_periods) sessions_grading_periods\n    left join `gcp-project`.`dev_staging`.`stg_edfi_school_year_types` school_year_types\n        on sessions.school_year_type_reference.school_year = school_year_types.school_year\n    left join `gcp-project`.`dev_staging`.`stg_edfi_grading_periods` grading_periods\n        on sessions.school_year_type_reference.school_year = grading_periods.school_year\n        and sessions_grading_periods.grading_period_reference.grading_period_descriptor = grading_periods.grading_period_descriptor\n        and sessions_grading_periods.grading_period_reference.period_sequence = grading_periods.period_sequence\n        and sessions_grading_periods.grading_period_reference.school_id = grading_periods.school_reference.school_id\n    where sessions_grading_periods.grading_period_reference.grading_period_descriptor != ''\n\n)\n\nselect distinct\n    grading_period_key,\n    session_key,\n    school_key,\n    school_year,\n    grading_period_name,\n    period_sequence,\n    grading_period_begin_date,\n    grading_period_end_date,\n    total_instructional_days,\n    if(\n        current_date BETWEEN grading_period_begin_date and grading_period_end_date,\n        TRUE,\n        FALSE\n    )                                                                 as is_current_grading_period\nfrom grades_grading_periods_unioned", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_core`.`dim_grading_period`"}, "model.project.fct_student_section_grade": {"raw_sql": "select\n    {{ dbt_utils.surrogate_key([\n        'grades.student_section_association_reference.school_id',\n        'grades.grading_period_reference.school_year'\n    ]) }}                                                                   as school_key,\n    {{ dbt_utils.surrogate_key([\n        'grades.student_section_association_reference.student_unique_id',\n        'grades.grading_period_reference.school_year'\n    ]) }}                                                                   as student_key,\n    {{ dbt_utils.surrogate_key([\n        'grades.grading_period_reference.school_id',\n        'grades.grading_period_reference.school_year',\n        'student_section_association_reference.session_name',\n        'grades.grading_period_reference.grading_period_descriptor',\n        'grades.grading_period_reference.period_sequence'\n    ]) }}                                                                   as grading_period_key,\n    {{ dbt_utils.surrogate_key([\n        'student_section_association_reference.school_id',\n        'student_section_association_reference.school_year',\n        'student_section_association_reference.session_name',\n        'student_section_association_reference.local_course_code',\n        'student_section_association_reference.section_identifier'\n    ]) }}                                                                   as section_key,\n    {{ dbt_utils.surrogate_key([\n        'student_section_association_reference.school_id',\n        'student_section_association_reference.school_year',\n        'student_section_association_reference.session_name',\n        'student_section_association_reference.local_course_code',\n        'student_section_association_reference.section_identifier'\n    ]) }}                                                                   as staff_group_key,\n    grading_period_reference.school_year                                    as school_year,\n    numeric_grade_earned                                                    as numeric_grade_earned,\n    letter_grade_earned                                                     as letter_grade_earned,\n    grade_type_descriptor                                                   as grade_type,\n    if(current_date BETWEEN ssa.begin_date and ssa.end_date, 1, 0)          as is_actively_enrolled_in_section\nfrom {{ ref('stg_edfi_grades') }} grades\nleft join {{ ref('stg_edfi_student_section_associations') }} ssa\n    on grades.school_year = ssa.school_year\n    and grades.student_section_association_reference.student_unique_id = ssa.student_reference.student_unique_id\n    and grades.student_section_association_reference.begin_date = ssa.begin_date\n    and grades.student_section_association_reference.local_course_code = ssa.section_reference.local_course_code\n    and grades.student_section_association_reference.school_id = ssa.section_reference.school_id\n    and grades.student_section_association_reference.school_year = ssa.section_reference.school_year\n    and grades.student_section_association_reference.session_name = ssa.section_reference.session_name", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.project.stg_edfi_grades", "model.project.stg_edfi_student_section_associations"]}, "config": {"enabled": true, "alias": null, "schema": "grades", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_grades", "fqn": ["project", "marts", "grades", "fct_student_section_grade"], "unique_id": "model.project.fct_student_section_grade", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "marts/grades/fct_student_section_grade.sql", "original_file_path": "models/marts/grades/fct_student_section_grade.sql", "name": "fct_student_section_grade", "alias": "fct_student_section_grade", "checksum": {"name": "sha256", "checksum": "59a6e9ef7ea824e7616e61fff56026e41e316f56ab1d3ab744097acad9468c92"}, "tags": ["edfi"], "refs": [["stg_edfi_grades"], ["stg_edfi_student_section_associations"]], "sources": [], "description": "# Student section grades fact\n\nThis fact table can be found in Ed-Fi's Early Warning System collection. Here it is included in the grades data mart due to student grades being valuable in other places in addition to early warning systems.\n\nThis table contains a row per student per section per grading period per grade type.", "columns": {"student_key": {"name": "student_key", "description": "Unique student identifier", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_key": {"name": "school_key", "description": "Unique school identifier", "meta": {}, "data_type": null, "quote": null, "tags": []}, "grading_period_key": {"name": "grading_period_key", "description": "Concatenation of grading period descriptor code value, school id, and grading period begin date", "meta": {}, "data_type": null, "quote": null, "tags": []}, "section_key": {"name": "section_key", "description": "Concatenation of section information to uniquely identifier a section", "meta": {}, "data_type": null, "quote": null, "tags": []}, "numeric_grade_earned": {"name": "numeric_grade_earned", "description": "Numeric grade reflecting student performance in a class as submitted by the instructor", "meta": {}, "data_type": null, "quote": null, "tags": []}, "letter_grade_earned": {"name": "letter_grade_earned", "description": "Letter grade reflecting student performance in a class as submitted by the instructor", "meta": {}, "data_type": null, "quote": null, "tags": []}, "grade_type": {"name": "grade_type", "description": "The type of grade reported (e.g., Exam, Final, Grading Period)", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/marts/grades/grades.yml", "compiled_path": "target/compiled/project/models/marts/grades/fct_student_section_grade.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "grades", "tags": "edfi"}, "created_at": 1650510022.1462557, "compiled_sql": "select\n    to_hex(md5(cast(coalesce(cast(grades.student_section_association_reference.school_id as \n    string\n), '') || '-' || coalesce(cast(grades.grading_period_reference.school_year as \n    string\n), '') as \n    string\n)))                                                                   as school_key,\n    to_hex(md5(cast(coalesce(cast(grades.student_section_association_reference.student_unique_id as \n    string\n), '') || '-' || coalesce(cast(grades.grading_period_reference.school_year as \n    string\n), '') as \n    string\n)))                                                                   as student_key,\n    to_hex(md5(cast(coalesce(cast(grades.grading_period_reference.school_id as \n    string\n), '') || '-' || coalesce(cast(grades.grading_period_reference.school_year as \n    string\n), '') || '-' || coalesce(cast(student_section_association_reference.session_name as \n    string\n), '') || '-' || coalesce(cast(grades.grading_period_reference.grading_period_descriptor as \n    string\n), '') || '-' || coalesce(cast(grades.grading_period_reference.period_sequence as \n    string\n), '') as \n    string\n)))                                                                   as grading_period_key,\n    to_hex(md5(cast(coalesce(cast(student_section_association_reference.school_id as \n    string\n), '') || '-' || coalesce(cast(student_section_association_reference.school_year as \n    string\n), '') || '-' || coalesce(cast(student_section_association_reference.session_name as \n    string\n), '') || '-' || coalesce(cast(student_section_association_reference.local_course_code as \n    string\n), '') || '-' || coalesce(cast(student_section_association_reference.section_identifier as \n    string\n), '') as \n    string\n)))                                                                   as section_key,\n    to_hex(md5(cast(coalesce(cast(student_section_association_reference.school_id as \n    string\n), '') || '-' || coalesce(cast(student_section_association_reference.school_year as \n    string\n), '') || '-' || coalesce(cast(student_section_association_reference.session_name as \n    string\n), '') || '-' || coalesce(cast(student_section_association_reference.local_course_code as \n    string\n), '') || '-' || coalesce(cast(student_section_association_reference.section_identifier as \n    string\n), '') as \n    string\n)))                                                                   as staff_group_key,\n    grading_period_reference.school_year                                    as school_year,\n    numeric_grade_earned                                                    as numeric_grade_earned,\n    letter_grade_earned                                                     as letter_grade_earned,\n    grade_type_descriptor                                                   as grade_type,\n    if(current_date BETWEEN ssa.begin_date and ssa.end_date, 1, 0)          as is_actively_enrolled_in_section\nfrom `gcp-project`.`dev_staging`.`stg_edfi_grades` grades\nleft join `gcp-project`.`dev_staging`.`stg_edfi_student_section_associations` ssa\n    on grades.school_year = ssa.school_year\n    and grades.student_section_association_reference.student_unique_id = ssa.student_reference.student_unique_id\n    and grades.student_section_association_reference.begin_date = ssa.begin_date\n    and grades.student_section_association_reference.local_course_code = ssa.section_reference.local_course_code\n    and grades.student_section_association_reference.school_id = ssa.section_reference.school_id\n    and grades.student_section_association_reference.school_year = ssa.section_reference.school_year\n    and grades.student_section_association_reference.session_name = ssa.section_reference.session_name", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_grades`.`fct_student_section_grade`"}, "model.project.stg_edfi_grades": {"raw_sql": "{{ retrieve_edfi_records_from_data_lake('base_edfi_grades') }}\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    cast(json_value(data, '$.numericGradeEarned') as float64) as numeric_grade_earned,\n    json_value(data, '$.letterGradeEarned') as letter_grade_earned,\n    split(json_value(data, '$.performanceBaseConversionDescriptor'), '#')[OFFSET(1)] as performance_base_conversion_descriptor, \n    split(json_value(data, '$.gradeTypeDescriptor'), '#')[OFFSET(1)] as grade_type_descriptor, \n    json_value(data, '$.diagnosticStatement') as diagnostic_statement,\n    struct(\n        split(json_value(data, '$.gradingPeriodReference.gradingPeriodDescriptor'), '#')[OFFSET(1)] as grading_period_descriptor,\n        cast(json_value(data, '$.gradingPeriodReference.periodSequence') as int64) as period_sequence,\n        json_value(data, '$.gradingPeriodReference.schoolId') as school_id,\n        cast(json_value(data, '$.gradingPeriodReference.schoolYear') as int64) as school_year\n    ) as grading_period_reference,\n    struct(\n        EXTRACT(DATE from PARSE_TIMESTAMP('%Y-%m-%dT%TZ', json_value(data, '$.studentSectionAssociationReference.beginDate'))) as begin_date,\n        json_value(data, '$.studentSectionAssociationReference.localCourseCode') as local_course_code,\n        json_value(data, '$.studentSectionAssociationReference.schoolId') as school_id,\n        cast(json_value(data, '$.studentSectionAssociationReference.schoolYear') as int64) as school_year,\n        json_value(data, '$.studentSectionAssociationReference.sectionIdentifier') as section_identifier,\n        json_value(data, '$.studentSectionAssociationReference.sessionName') as session_name,\n        json_value(data, '$.studentSectionAssociationReference.studentUniqueId') as student_unique_id\n    ) as student_section_association_reference\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_grades", "source.project.staging.base_edfi_grades"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_grades"], "unique_id": "model.project.stg_edfi_grades", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "staging/edfi/stg_edfi_grades.sql", "original_file_path": "models/staging/edfi/stg_edfi_grades.sql", "name": "stg_edfi_grades", "alias": "stg_edfi_grades", "checksum": {"name": "sha256", "checksum": "3c47e5b22b14b84eb9e053d5f7da481478c3f2636d7b2bfb12cfedbd084f5f39"}, "tags": ["edfi"], "refs": [], "sources": [["staging", "base_edfi_grades"], ["staging", "base_edfi_grades"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_grades.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "labels": {"edfi_version": "5_3"}}, "created_at": 1650510021.7220662, "compiled_sql": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `gcp-project`.`dev_staging`.`base_edfi_grades`\n    where is_complete_extract IS TRUE\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `gcp-project`.`dev_staging`.`base_edfi_grades` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            OR base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    cast(json_value(data, '$.numericGradeEarned') as float64) as numeric_grade_earned,\n    json_value(data, '$.letterGradeEarned') as letter_grade_earned,\n    split(json_value(data, '$.performanceBaseConversionDescriptor'), '#')[OFFSET(1)] as performance_base_conversion_descriptor, \n    split(json_value(data, '$.gradeTypeDescriptor'), '#')[OFFSET(1)] as grade_type_descriptor, \n    json_value(data, '$.diagnosticStatement') as diagnostic_statement,\n    struct(\n        split(json_value(data, '$.gradingPeriodReference.gradingPeriodDescriptor'), '#')[OFFSET(1)] as grading_period_descriptor,\n        cast(json_value(data, '$.gradingPeriodReference.periodSequence') as int64) as period_sequence,\n        json_value(data, '$.gradingPeriodReference.schoolId') as school_id,\n        cast(json_value(data, '$.gradingPeriodReference.schoolYear') as int64) as school_year\n    ) as grading_period_reference,\n    struct(\n        EXTRACT(DATE from PARSE_TIMESTAMP('%Y-%m-%dT%TZ', json_value(data, '$.studentSectionAssociationReference.beginDate'))) as begin_date,\n        json_value(data, '$.studentSectionAssociationReference.localCourseCode') as local_course_code,\n        json_value(data, '$.studentSectionAssociationReference.schoolId') as school_id,\n        cast(json_value(data, '$.studentSectionAssociationReference.schoolYear') as int64) as school_year,\n        json_value(data, '$.studentSectionAssociationReference.sectionIdentifier') as section_identifier,\n        json_value(data, '$.studentSectionAssociationReference.sessionName') as session_name,\n        json_value(data, '$.studentSectionAssociationReference.studentUniqueId') as student_unique_id\n    ) as student_section_association_reference\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_staging`.`stg_edfi_grades`"}, "model.project.stg_edfi_grading_periods": {"raw_sql": "{{ retrieve_edfi_records_from_data_lake('base_edfi_grading_periods') }}\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    split(json_value(data, \"$.gradingPeriodDescriptor\"), '#')[OFFSET(1)] as grading_period_descriptor,\n    cast(json_value(data, \"$.periodSequence\") as int64) as period_sequence,\n    struct(\n        json_value(data, '$.schoolReference.schoolId') as school_id\n    ) as school_reference,\n    struct(\n        cast(json_value(data, '$.schoolYearTypeReference.schoolYear') as int64) as school_year\n    ) as school_year_type_reference,\n    parse_date('%Y-%m-%d', json_value(data, \"$.beginDate\")) as begin_date,\n    parse_date('%Y-%m-%d', json_value(data, \"$.endDate\")) as end_date,\n    cast(json_value(data, \"$.totalInstructionalDays\") as int64) as total_instructional_days\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_grading_periods", "source.project.staging.base_edfi_grading_periods"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_grading_periods"], "unique_id": "model.project.stg_edfi_grading_periods", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "staging/edfi/stg_edfi_grading_periods.sql", "original_file_path": "models/staging/edfi/stg_edfi_grading_periods.sql", "name": "stg_edfi_grading_periods", "alias": "stg_edfi_grading_periods", "checksum": {"name": "sha256", "checksum": "5c4ba15040b621ba04f2856d3d72ce380980afcba46711ef09dd6274d7fe6b69"}, "tags": ["edfi"], "refs": [], "sources": [["staging", "base_edfi_grading_periods"], ["staging", "base_edfi_grading_periods"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_grading_periods.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "labels": {"edfi_version": "5_3"}}, "created_at": 1650510021.727283, "compiled_sql": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `gcp-project`.`dev_staging`.`base_edfi_grading_periods`\n    where is_complete_extract IS TRUE\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `gcp-project`.`dev_staging`.`base_edfi_grading_periods` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            OR base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    split(json_value(data, \"$.gradingPeriodDescriptor\"), '#')[OFFSET(1)] as grading_period_descriptor,\n    cast(json_value(data, \"$.periodSequence\") as int64) as period_sequence,\n    struct(\n        json_value(data, '$.schoolReference.schoolId') as school_id\n    ) as school_reference,\n    struct(\n        cast(json_value(data, '$.schoolYearTypeReference.schoolYear') as int64) as school_year\n    ) as school_year_type_reference,\n    parse_date('%Y-%m-%d', json_value(data, \"$.beginDate\")) as begin_date,\n    parse_date('%Y-%m-%d', json_value(data, \"$.endDate\")) as end_date,\n    cast(json_value(data, \"$.totalInstructionalDays\") as int64) as total_instructional_days\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_staging`.`stg_edfi_grading_periods`"}, "model.project.dim_local_education_agency": {"raw_sql": "select\n    {{ dbt_utils.surrogate_key([\n        'local_education_agency_id',\n        'school_year'\n    ]) }}                               as local_education_agency_key,\n    school_year                         as school_year,\n    local_education_agency_id           as local_education_agency_id,\n    name_of_institution                 as local_education_agency_name\nfrom {{ ref('stg_edfi_local_education_agencies') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.project.stg_edfi_local_education_agencies"]}, "config": {"enabled": true, "alias": null, "schema": "core", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_core", "fqn": ["project", "marts", "core", "dim_local_education_agency"], "unique_id": "model.project.dim_local_education_agency", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "marts/core/dim_local_education_agency.sql", "original_file_path": "models/marts/core/dim_local_education_agency.sql", "name": "dim_local_education_agency", "alias": "dim_local_education_agency", "checksum": {"name": "sha256", "checksum": "bd3a2a4400a5a39bf35189133589064b2aa7924f4682e0eb1de9a1e53e24ef49"}, "tags": ["edfi"], "refs": [["stg_edfi_local_education_agencies"]], "sources": [], "description": "# Local education agency dim\n\nGrain: one row per local education agency", "columns": {"local_education_agency_key": {"name": "local_education_agency_key", "description": "Primary key for dimension table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "local_education_agency_id": {"name": "local_education_agency_id", "description": "Unique identifier for local education agency", "meta": {}, "data_type": null, "quote": null, "tags": []}, "local_education_agency_name": {"name": "local_education_agency_name", "description": "The name assigned to a local education agency.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/marts/core/core.yml", "compiled_path": "target/compiled/project/models/marts/core/dim_local_education_agency.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "core", "tags": "edfi"}, "created_at": 1650510021.9729419, "compiled_sql": "select\n    to_hex(md5(cast(coalesce(cast(local_education_agency_id as \n    string\n), '') || '-' || coalesce(cast(school_year as \n    string\n), '') as \n    string\n)))                               as local_education_agency_key,\n    school_year                         as school_year,\n    local_education_agency_id           as local_education_agency_id,\n    name_of_institution                 as local_education_agency_name\nfrom `gcp-project`.`dev_staging`.`stg_edfi_local_education_agencies`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_core`.`dim_local_education_agency`"}, "model.project.dim_school": {"raw_sql": "select\n    {{ dbt_utils.surrogate_key([\n        'schools.school_id',\n        'schools.school_year'\n    ]) }}                                   as school_key,\n    {{ dbt_utils.surrogate_key([\n        'leas.local_education_agency_id',\n        'leas.school_year'\n    ]) }}                                   as local_education_agency_key,\n    schools.school_year                     as school_year,\n    schools.school_id                       as school_id,\n    schools.name_of_institution             as school_name,\n    schools.school_type_descriptor          as school_type,\n    leas.name_of_institution                as local_education_agency_name\nfrom {{ ref('stg_edfi_schools') }} schools\nleft join {{ ref('stg_edfi_local_education_agencies') }} leas\n    on schools.school_year = leas.school_year\n    and leas.local_education_agency_id = schools.local_education_agency_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.project.stg_edfi_schools", "model.project.stg_edfi_local_education_agencies"]}, "config": {"enabled": true, "alias": null, "schema": "core", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_core", "fqn": ["project", "marts", "core", "dim_school"], "unique_id": "model.project.dim_school", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "marts/core/dim_school.sql", "original_file_path": "models/marts/core/dim_school.sql", "name": "dim_school", "alias": "dim_school", "checksum": {"name": "sha256", "checksum": "c45c9ec52201705dec0bcf47e6009dfef0c501b8313d797ba4aeaa69d1f5205e"}, "tags": ["edfi"], "refs": [["stg_edfi_schools"], ["stg_edfi_local_education_agencies"]], "sources": [], "description": "# School dim\n\nGrain: one row per school per school year", "columns": {"school_key": {"name": "school_key", "description": "Primary key for dimension table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "local_education_agency_key": {"name": "local_education_agency_key", "description": "Foreign key to `dim_local_education_agency`", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_id": {"name": "school_id", "description": "School unique identifier", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_name": {"name": "school_name", "description": "The name assigned to a school.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_type": {"name": "school_type", "description": "The type of education institution as classified by its primary focus.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "local_education_agency_name": {"name": "local_education_agency_name", "description": "The name assigned to a local education agency.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/marts/core/core.yml", "compiled_path": "target/compiled/project/models/marts/core/dim_school.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "core", "tags": "edfi"}, "created_at": 1650510021.9753082, "compiled_sql": "select\n    to_hex(md5(cast(coalesce(cast(schools.school_id as \n    string\n), '') || '-' || coalesce(cast(schools.school_year as \n    string\n), '') as \n    string\n)))                                   as school_key,\n    to_hex(md5(cast(coalesce(cast(leas.local_education_agency_id as \n    string\n), '') || '-' || coalesce(cast(leas.school_year as \n    string\n), '') as \n    string\n)))                                   as local_education_agency_key,\n    schools.school_year                     as school_year,\n    schools.school_id                       as school_id,\n    schools.name_of_institution             as school_name,\n    schools.school_type_descriptor          as school_type,\n    leas.name_of_institution                as local_education_agency_name\nfrom `gcp-project`.`dev_staging`.`stg_edfi_schools` schools\nleft join `gcp-project`.`dev_staging`.`stg_edfi_local_education_agencies` leas\n    on schools.school_year = leas.school_year\n    and leas.local_education_agency_id = schools.local_education_agency_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_core`.`dim_school`"}, "model.project.stg_edfi_local_education_agencies": {"raw_sql": "{{ retrieve_edfi_records_from_data_lake('base_edfi_local_education_agencies') }}\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    json_value(data, '$.localEducationAgencyId') as local_education_agency_id,\n    json_value(data, '$.nameOfInstitution') as name_of_institution\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_local_education_agencies", "source.project.staging.base_edfi_local_education_agencies"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_local_education_agencies"], "unique_id": "model.project.stg_edfi_local_education_agencies", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "staging/edfi/stg_edfi_local_education_agencies.sql", "original_file_path": "models/staging/edfi/stg_edfi_local_education_agencies.sql", "name": "stg_edfi_local_education_agencies", "alias": "stg_edfi_local_education_agencies", "checksum": {"name": "sha256", "checksum": "399614a611cd65dfe3a2b286134c353144cef65ed2c1644c5163e3d928d97cd7"}, "tags": ["edfi"], "refs": [], "sources": [["staging", "base_edfi_local_education_agencies"], ["staging", "base_edfi_local_education_agencies"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/staging/edfi/stg_edfi.yml", "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_local_education_agencies.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "labels": {"edfi_version": "5_3"}}, "created_at": 1650510022.1291628, "compiled_sql": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `gcp-project`.`dev_staging`.`base_edfi_local_education_agencies`\n    where is_complete_extract IS TRUE\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `gcp-project`.`dev_staging`.`base_edfi_local_education_agencies` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            OR base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    json_value(data, '$.localEducationAgencyId') as local_education_agency_id,\n    json_value(data, '$.nameOfInstitution') as name_of_institution\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_staging`.`stg_edfi_local_education_agencies`"}, "model.project.stg_edfi_objective_assessments": {"raw_sql": "{{ retrieve_edfi_records_from_data_lake('base_edfi_objective_assessments') }}\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    json_value(data, '$.identificationCode') as identification_code,\n    split(json_value(data, \"$.academicSubjectDescriptor\"), '#')[OFFSET(1)] as academic_subject_descriptor,\n    json_value(data, '$.description') as description,\n    cast(json_value(data, '$.maxRawScore') as float64) as max_raw_score,\n    cast(json_value(data, '$.percentOfAssessment') as float64) as percent_of_assessment,\n    json_value(data, '$.nomenclature') as nomenclature,\n    struct(\n        json_value(data, '$.assessmentReference.assessmentIdentifier') as assessment_identifier,\n        json_value(data, '$.assessmentReference.namespace') as namespace\n    ) as assessment_reference,\n    struct(\n        json_value(data, '$.parentObjectiveAssessmentReference.assessmentIdentifier') as assessment_identifier,\n        json_value(data, '$.parentObjectiveAssessmentReference.identificationCode') as identification_code,\n        json_value(data, '$.parentObjectiveAssessmentReference.namespace') as namespace\n    ) as parent_objective_assessment_reference,\n    array(\n        select as struct \n            json_value(assessment_items, '$.assessmentItemReference.assessmentIdentifier') as assessment_identifier,\n            json_value(assessment_items, '$.assessmentItemReference.identificationCode') as identification_code,\n            json_value(assessment_items, '$.assessmentItemReference.namespace') as namespace\n        from unnest(json_query_array(data, \"$.assessmentItems\")) assessment_items \n    ) as assessment_items,\n    array(\n        select as struct\n            struct(\n                json_value(learning_objectives, '$.learningObjectiveReference.learningObjectiveId') as learning_objective_id,\n                json_value(learning_objectives, '$.learningObjectiveReference.namespace') as namespace\n            ) as learning_objective_reference\n        from unnest(json_query_array(data, \"$.learningObjectives\")) learning_objectives \n    ) as learning_objectives,\n    array(\n        select as struct\n            struct(\n                json_value(learning_standards, '$.learningStandardReference.learningStandardId') as learning_standard_id\n            ) as learning_standard_reference \n        from unnest(json_query_array(data, \"$.learningStandards\")) learning_standards\n    ) as learning_standards,\n    array(\n        select as struct \n            split(json_value(performance_levels, \"$.assessmentReportingMethodDescriptor\"), '#')[OFFSET(1)] as assessment_reporting_method_descriptor,\n            split(json_value(performance_levels, \"$.performanceLevelDescriptor\"), '#')[OFFSET(1)] as performance_level_descriptor,\n            split(json_value(performance_levels, \"$.resultDatatypeTypeDescriptor\"), '#')[OFFSET(1)] as result_datatype_type_descriptor,\n            json_value(performance_levels, \"$.maximumScore\") as maximum_score,\n            json_value(performance_levels, \"$.minimumScore\") as minimum_score\n        from unnest(json_query_array(data, \"$.performanceLevels\")) performance_levels \n    ) as performance_levels,\n    array(\n        select as struct \n            split(json_value(scores, \"$.assessmentReportingMethodDescriptor\"), '#')[OFFSET(1)] as assessment_reporting_method_descriptor,\n            split(json_value(scores, \"$.resultDatatypeTypeDescriptor\"), '#')[OFFSET(1)] as result_datatype_type_descriptor,\n            json_value(scores, \"$.maximumScore\") as maximum_score,\n            json_value(scores, \"$.minimumScore\") as minimum_score\n        from unnest(json_query_array(data, \"$.scores\")) scores \n    ) as scores\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_objective_assessments", "source.project.staging.base_edfi_objective_assessments"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_objective_assessments"], "unique_id": "model.project.stg_edfi_objective_assessments", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "staging/edfi/stg_edfi_objective_assessments.sql", "original_file_path": "models/staging/edfi/stg_edfi_objective_assessments.sql", "name": "stg_edfi_objective_assessments", "alias": "stg_edfi_objective_assessments", "checksum": {"name": "sha256", "checksum": "819ed393dcf2c56fcb28a2d27234e21e61eddb6c0de22d0cf1f3f8ecf881a9da"}, "tags": ["edfi"], "refs": [], "sources": [["staging", "base_edfi_objective_assessments"], ["staging", "base_edfi_objective_assessments"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_objective_assessments.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "labels": {"edfi_version": "5_3"}}, "created_at": 1650510021.7509909, "compiled_sql": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `gcp-project`.`dev_staging`.`base_edfi_objective_assessments`\n    where is_complete_extract IS TRUE\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `gcp-project`.`dev_staging`.`base_edfi_objective_assessments` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            OR base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    json_value(data, '$.identificationCode') as identification_code,\n    split(json_value(data, \"$.academicSubjectDescriptor\"), '#')[OFFSET(1)] as academic_subject_descriptor,\n    json_value(data, '$.description') as description,\n    cast(json_value(data, '$.maxRawScore') as float64) as max_raw_score,\n    cast(json_value(data, '$.percentOfAssessment') as float64) as percent_of_assessment,\n    json_value(data, '$.nomenclature') as nomenclature,\n    struct(\n        json_value(data, '$.assessmentReference.assessmentIdentifier') as assessment_identifier,\n        json_value(data, '$.assessmentReference.namespace') as namespace\n    ) as assessment_reference,\n    struct(\n        json_value(data, '$.parentObjectiveAssessmentReference.assessmentIdentifier') as assessment_identifier,\n        json_value(data, '$.parentObjectiveAssessmentReference.identificationCode') as identification_code,\n        json_value(data, '$.parentObjectiveAssessmentReference.namespace') as namespace\n    ) as parent_objective_assessment_reference,\n    array(\n        select as struct \n            json_value(assessment_items, '$.assessmentItemReference.assessmentIdentifier') as assessment_identifier,\n            json_value(assessment_items, '$.assessmentItemReference.identificationCode') as identification_code,\n            json_value(assessment_items, '$.assessmentItemReference.namespace') as namespace\n        from unnest(json_query_array(data, \"$.assessmentItems\")) assessment_items \n    ) as assessment_items,\n    array(\n        select as struct\n            struct(\n                json_value(learning_objectives, '$.learningObjectiveReference.learningObjectiveId') as learning_objective_id,\n                json_value(learning_objectives, '$.learningObjectiveReference.namespace') as namespace\n            ) as learning_objective_reference\n        from unnest(json_query_array(data, \"$.learningObjectives\")) learning_objectives \n    ) as learning_objectives,\n    array(\n        select as struct\n            struct(\n                json_value(learning_standards, '$.learningStandardReference.learningStandardId') as learning_standard_id\n            ) as learning_standard_reference \n        from unnest(json_query_array(data, \"$.learningStandards\")) learning_standards\n    ) as learning_standards,\n    array(\n        select as struct \n            split(json_value(performance_levels, \"$.assessmentReportingMethodDescriptor\"), '#')[OFFSET(1)] as assessment_reporting_method_descriptor,\n            split(json_value(performance_levels, \"$.performanceLevelDescriptor\"), '#')[OFFSET(1)] as performance_level_descriptor,\n            split(json_value(performance_levels, \"$.resultDatatypeTypeDescriptor\"), '#')[OFFSET(1)] as result_datatype_type_descriptor,\n            json_value(performance_levels, \"$.maximumScore\") as maximum_score,\n            json_value(performance_levels, \"$.minimumScore\") as minimum_score\n        from unnest(json_query_array(data, \"$.performanceLevels\")) performance_levels \n    ) as performance_levels,\n    array(\n        select as struct \n            split(json_value(scores, \"$.assessmentReportingMethodDescriptor\"), '#')[OFFSET(1)] as assessment_reporting_method_descriptor,\n            split(json_value(scores, \"$.resultDatatypeTypeDescriptor\"), '#')[OFFSET(1)] as result_datatype_type_descriptor,\n            json_value(scores, \"$.maximumScore\") as maximum_score,\n            json_value(scores, \"$.minimumScore\") as minimum_score\n        from unnest(json_query_array(data, \"$.scores\")) scores \n    ) as scores\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_staging`.`stg_edfi_objective_assessments`"}, "model.project.stg_edfi_parents": {"raw_sql": "{{ retrieve_edfi_records_from_data_lake('base_edfi_parents') }}\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    json_value(data, '$.parentUniqueId') as parent_unique_id,\n    json_value(data, '$.lastSurname') as last_surname,\n    json_value(data, '$.middleName') as middle_name,\n    json_value(data, '$.firstName') as first_name,\n    struct(\n        json_value(data, '$.personReference.personId') as person_id,\n        split(json_value(data, \"$.personReference.sourceSystemDescriptor\"), '#')[OFFSET(1)] as source_system_descriptor\n    ) as person_reference,\n    json_value(data, '$.generationCodeSuffix') as generation_code_suffix,\n    array(\n        select as struct \n            split(json_value(electronic_mails, '$.electronicMailTypeDescriptor'), '#')[OFFSET(1)] as electronic_mail_type_descriptor,\n            json_value(electronic_mails, \"$.electronicMailAddress\") as electronic_mail_address,\n            cast(json_value(electronic_mails, \"$.doNotPublishIndicator\") as BOOL) as do_not_publish_indicator\n        from unnest(json_query_array(data, \"$.electronicMails\")) electronic_mails \n    ) as electronic_mails,\n    array(\n        select as struct \n            split(json_value(addresses, '$.addressTypeDescriptor'), '#')[OFFSET(1)] as address_type_descriptor,\n            split(json_value(addresses, '$.stateAbbreviationDescriptor'), '#')[OFFSET(1)] as state_abbreviation_descriptor,\n            json_value(addresses, \"$.city\") as city,\n            json_value(addresses, \"$.postalCode\") as postal_code,\n            json_value(addresses, \"$.streetNumberName\") as street_number_name,\n            split(json_value(addresses, '$.localeDescriptor'), '#')[OFFSET(1)] as locale_descriptor,\n            json_value(addresses, \"$.apartmentRoomSuiteNumber\") as apartment_room_suite_number,\n            json_value(addresses, \"$.buildingSiteNumber\") as building_site_number,\n            json_value(addresses, \"$.congressionalDistrict\") as congressional_district,\n            json_value(addresses, \"$.countyFIPSCode\") as county_fips_code,\n            cast(json_value(addresses, \"$.doNotPublishIndicator\") as BOOL) as do_not_publish_indicator,\n            json_value(addresses, \"$.latitude\") as latitude,\n            json_value(addresses, \"$.longitude\") as longitude,\n            json_value(addresses, \"$.nameOfCounty\") as name_of_county,\n        from unnest(json_query_array(data, \"$.addresses\")) addresses \n    ) as addresses,\n    array(\n        select as struct \n            split(json_value(telephones, '$.telephoneNumberTypeDescriptor'), '#')[OFFSET(1)] as telephone_number_type_descriptor,\n            json_value(telephones, \"$.telephoneNumber\") as telephone_number,\n            cast(json_value(telephones, \"$.doNotPublishIndicator\") as BOOL) as do_not_publish_indicator,\n            cast(json_value(telephones, \"$.orderOfPriority\") as int64) as order_of_priority,\n            cast(json_value(telephones, \"$.textMessageCapabilityIndicator\") as BOOL) as text_message_capability_indicator\n        from unnest(json_query_array(data, \"$.telephones\")) telephones \n    ) as telephones,\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_parents", "source.project.staging.base_edfi_parents"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_parents"], "unique_id": "model.project.stg_edfi_parents", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "staging/edfi/stg_edfi_parents.sql", "original_file_path": "models/staging/edfi/stg_edfi_parents.sql", "name": "stg_edfi_parents", "alias": "stg_edfi_parents", "checksum": {"name": "sha256", "checksum": "d50ee59490f5121a3638ea4c8342d9a31b79362131b7b95a97bd3097fcb624f7"}, "tags": ["edfi"], "refs": [], "sources": [["staging", "base_edfi_parents"], ["staging", "base_edfi_parents"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_parents.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "labels": {"edfi_version": "5_3"}}, "created_at": 1650510021.755351, "compiled_sql": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `gcp-project`.`dev_staging`.`base_edfi_parents`\n    where is_complete_extract IS TRUE\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `gcp-project`.`dev_staging`.`base_edfi_parents` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            OR base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    json_value(data, '$.parentUniqueId') as parent_unique_id,\n    json_value(data, '$.lastSurname') as last_surname,\n    json_value(data, '$.middleName') as middle_name,\n    json_value(data, '$.firstName') as first_name,\n    struct(\n        json_value(data, '$.personReference.personId') as person_id,\n        split(json_value(data, \"$.personReference.sourceSystemDescriptor\"), '#')[OFFSET(1)] as source_system_descriptor\n    ) as person_reference,\n    json_value(data, '$.generationCodeSuffix') as generation_code_suffix,\n    array(\n        select as struct \n            split(json_value(electronic_mails, '$.electronicMailTypeDescriptor'), '#')[OFFSET(1)] as electronic_mail_type_descriptor,\n            json_value(electronic_mails, \"$.electronicMailAddress\") as electronic_mail_address,\n            cast(json_value(electronic_mails, \"$.doNotPublishIndicator\") as BOOL) as do_not_publish_indicator\n        from unnest(json_query_array(data, \"$.electronicMails\")) electronic_mails \n    ) as electronic_mails,\n    array(\n        select as struct \n            split(json_value(addresses, '$.addressTypeDescriptor'), '#')[OFFSET(1)] as address_type_descriptor,\n            split(json_value(addresses, '$.stateAbbreviationDescriptor'), '#')[OFFSET(1)] as state_abbreviation_descriptor,\n            json_value(addresses, \"$.city\") as city,\n            json_value(addresses, \"$.postalCode\") as postal_code,\n            json_value(addresses, \"$.streetNumberName\") as street_number_name,\n            split(json_value(addresses, '$.localeDescriptor'), '#')[OFFSET(1)] as locale_descriptor,\n            json_value(addresses, \"$.apartmentRoomSuiteNumber\") as apartment_room_suite_number,\n            json_value(addresses, \"$.buildingSiteNumber\") as building_site_number,\n            json_value(addresses, \"$.congressionalDistrict\") as congressional_district,\n            json_value(addresses, \"$.countyFIPSCode\") as county_fips_code,\n            cast(json_value(addresses, \"$.doNotPublishIndicator\") as BOOL) as do_not_publish_indicator,\n            json_value(addresses, \"$.latitude\") as latitude,\n            json_value(addresses, \"$.longitude\") as longitude,\n            json_value(addresses, \"$.nameOfCounty\") as name_of_county,\n        from unnest(json_query_array(data, \"$.addresses\")) addresses \n    ) as addresses,\n    array(\n        select as struct \n            split(json_value(telephones, '$.telephoneNumberTypeDescriptor'), '#')[OFFSET(1)] as telephone_number_type_descriptor,\n            json_value(telephones, \"$.telephoneNumber\") as telephone_number,\n            cast(json_value(telephones, \"$.doNotPublishIndicator\") as BOOL) as do_not_publish_indicator,\n            cast(json_value(telephones, \"$.orderOfPriority\") as int64) as order_of_priority,\n            cast(json_value(telephones, \"$.textMessageCapabilityIndicator\") as BOOL) as text_message_capability_indicator\n        from unnest(json_query_array(data, \"$.telephones\")) telephones \n    ) as telephones,\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_staging`.`stg_edfi_parents`"}, "model.project.stg_edfi_programs": {"raw_sql": "{{ retrieve_edfi_records_from_data_lake('base_edfi_programs') }}\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    json_value(data, '$.programName') as program_name,\n    json_value(data, '$.programId') as program_id,\n    split(json_value(data, '$.programTypeDescriptor'), '#')[OFFSET(1)] as program_type_descriptor,\n    struct(\n        json_value(data, '$.educationOrganizationReference.educationOrganizationId') as education_organization_id\n    ) as education_organization_reference,\n    array(\n        select as struct \n            split(json_value(services, \"$.serviceDescriptor\"), '#')[OFFSET(1)] as service_descriptor,\n        from unnest(json_query_array(data, \"$.services\")) services \n    ) as services,\n    array(\n        select as struct \n            split(json_value(sponsors, \"$.programSponsorDescriptor\"), '#')[OFFSET(1)] as program_sponsor_descriptor,\n        from unnest(json_query_array(data, \"$.sponsors\")) sponsors \n    ) as sponsors,\n    array(\n        select as struct \n            split(json_value(characteristics, \"$.programCharacteristicDescriptor\"), '#')[OFFSET(1)] as program_characteristic_descriptor,\n        from unnest(json_query_array(data, \"$.characteristics\")) characteristics \n    ) as characteristics,\n    array(\n        select as struct\n            struct(\n                json_value(learning_objectives, '$.learningObjectiveReference.learningObjectiveId') as learning_objective_id,\n                json_value(learning_objectives, '$.learningObjectiveReference.namespace') as namespace\n            ) as learning_objective_reference\n        from unnest(json_query_array(data, \"$.learningObjectives\")) learning_objectives \n    ) as learning_objectives,\n    array(\n            select as struct\n                struct(\n                    json_value(learning_standards, '$.learningStandardReference.learningStandardId') as learning_standard_id\n                ) as learning_standard_reference\n            from unnest(json_query_array(data, \"$.learningStandards\")) learning_standards\n    ) as learning_standards,\n    json_value(data, '$.schoolId') as school_id,\n    json_value(data, '$.nameOfInstitution') as name_of_institution,\n    split(json_value(data, '$.schoolTypeDescriptor'), '#')[OFFSET(1)] as school_type_descriptor,\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_programs", "source.project.staging.base_edfi_programs"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_programs"], "unique_id": "model.project.stg_edfi_programs", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "staging/edfi/stg_edfi_programs.sql", "original_file_path": "models/staging/edfi/stg_edfi_programs.sql", "name": "stg_edfi_programs", "alias": "stg_edfi_programs", "checksum": {"name": "sha256", "checksum": "66a653fa8d1aa1cb7d5cbcdee1aaabed20ee76b9d739c73b75ada93588da662a"}, "tags": ["edfi"], "refs": [], "sources": [["staging", "base_edfi_programs"], ["staging", "base_edfi_programs"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_programs.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "labels": {"edfi_version": "5_3"}}, "created_at": 1650510021.76005, "compiled_sql": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `gcp-project`.`dev_staging`.`base_edfi_programs`\n    where is_complete_extract IS TRUE\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `gcp-project`.`dev_staging`.`base_edfi_programs` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            OR base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    json_value(data, '$.programName') as program_name,\n    json_value(data, '$.programId') as program_id,\n    split(json_value(data, '$.programTypeDescriptor'), '#')[OFFSET(1)] as program_type_descriptor,\n    struct(\n        json_value(data, '$.educationOrganizationReference.educationOrganizationId') as education_organization_id\n    ) as education_organization_reference,\n    array(\n        select as struct \n            split(json_value(services, \"$.serviceDescriptor\"), '#')[OFFSET(1)] as service_descriptor,\n        from unnest(json_query_array(data, \"$.services\")) services \n    ) as services,\n    array(\n        select as struct \n            split(json_value(sponsors, \"$.programSponsorDescriptor\"), '#')[OFFSET(1)] as program_sponsor_descriptor,\n        from unnest(json_query_array(data, \"$.sponsors\")) sponsors \n    ) as sponsors,\n    array(\n        select as struct \n            split(json_value(characteristics, \"$.programCharacteristicDescriptor\"), '#')[OFFSET(1)] as program_characteristic_descriptor,\n        from unnest(json_query_array(data, \"$.characteristics\")) characteristics \n    ) as characteristics,\n    array(\n        select as struct\n            struct(\n                json_value(learning_objectives, '$.learningObjectiveReference.learningObjectiveId') as learning_objective_id,\n                json_value(learning_objectives, '$.learningObjectiveReference.namespace') as namespace\n            ) as learning_objective_reference\n        from unnest(json_query_array(data, \"$.learningObjectives\")) learning_objectives \n    ) as learning_objectives,\n    array(\n            select as struct\n                struct(\n                    json_value(learning_standards, '$.learningStandardReference.learningStandardId') as learning_standard_id\n                ) as learning_standard_reference\n            from unnest(json_query_array(data, \"$.learningStandards\")) learning_standards\n    ) as learning_standards,\n    json_value(data, '$.schoolId') as school_id,\n    json_value(data, '$.nameOfInstitution') as name_of_institution,\n    split(json_value(data, '$.schoolTypeDescriptor'), '#')[OFFSET(1)] as school_type_descriptor,\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_staging`.`stg_edfi_programs`"}, "model.project.stg_edfi_schools": {"raw_sql": "{{ retrieve_edfi_records_from_data_lake('base_edfi_schools') }}\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    json_value(data, '$.localEducationAgencyReference.localEducationAgencyId') as local_education_agency_id,\n    json_value(data, '$.schoolId')          as school_id,\n    json_value(data, '$.nameOfInstitution') as name_of_institution,\n    split(json_value(data, '$.schoolTypeDescriptor'), '#')[OFFSET(1)] as school_type_descriptor,\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_schools", "source.project.staging.base_edfi_schools"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_schools"], "unique_id": "model.project.stg_edfi_schools", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "staging/edfi/stg_edfi_schools.sql", "original_file_path": "models/staging/edfi/stg_edfi_schools.sql", "name": "stg_edfi_schools", "alias": "stg_edfi_schools", "checksum": {"name": "sha256", "checksum": "0a8da7ce0cad6a5ca991ab6840420e8d0b7d33a6f4bd48a29e81365aa21baf7e"}, "tags": ["edfi"], "refs": [], "sources": [["staging", "base_edfi_schools"], ["staging", "base_edfi_schools"]], "description": "", "columns": {"school_id": {"name": "school_id", "description": "Unique school identifier", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/staging/edfi/stg_edfi.yml", "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_schools.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "labels": {"edfi_version": "5_3"}}, "created_at": 1650510022.129909, "compiled_sql": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `gcp-project`.`dev_staging`.`base_edfi_schools`\n    where is_complete_extract IS TRUE\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `gcp-project`.`dev_staging`.`base_edfi_schools` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            OR base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    json_value(data, '$.localEducationAgencyReference.localEducationAgencyId') as local_education_agency_id,\n    json_value(data, '$.schoolId')          as school_id,\n    json_value(data, '$.nameOfInstitution') as name_of_institution,\n    split(json_value(data, '$.schoolTypeDescriptor'), '#')[OFFSET(1)] as school_type_descriptor,\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_staging`.`stg_edfi_schools`"}, "model.project.stg_edfi_sections": {"raw_sql": "{{ retrieve_edfi_records_from_data_lake('base_edfi_sections') }}\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    json_value(data, '$.sectionIdentifier') as section_identifier,\n    json_value(data, '$.sectionName') as section_name,\n    struct(\n        json_value(data, '$.courseOfferingReference.localCourseCode') as local_course_code,\n        json_value(data, '$.courseOfferingReference.schoolId') as school_id,\n        cast(json_value(data, '$.courseOfferingReference.schoolYear') as int64) as school_year,\n        json_value(data, '$.courseOfferingReference.sessionName') as session_name\n    ) as course_offering_reference,\n    cast(json_value(data, '$.availableCreditConversion') as float64) as available_credit_conversion,\n    cast(json_value(data, '$.availableCredits') as float64) as available_credits,\n    split(json_value(data, '$.availableCreditTypeDescriptor'), '#')[OFFSET(1)] as available_credit_type_descriptor,\n    split(json_value(data, '$.educationalEnvironmentDescriptor'), '#')[OFFSET(1)] as educational_environment_descriptor,\n    struct(\n        json_value(data, '$.locationReference.classroomIdentificationCode') as classroom_identification_code,\n        json_value(data, '$.locationReference.schoolId') as school_id\n    ) as location_reference,\n    struct(\n        json_value(data, '$.locationSchoolReference.schoolId') as school_id\n    ) as location_school_reference,\n    array(\n        select as struct \n            struct(\n                json_value(class_periods, \"$.classPeriodReference.classPeriodName\") as class_period_name,\n                json_value(class_periods, '$.classPeriodReference.schoolId') as school_id\n            ) as class_period_reference\n        from unnest(json_query_array(data, \"$.classPeriods\")) class_periods \n    ) as class_periods,\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_sections", "source.project.staging.base_edfi_sections"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_sections"], "unique_id": "model.project.stg_edfi_sections", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "staging/edfi/stg_edfi_sections.sql", "original_file_path": "models/staging/edfi/stg_edfi_sections.sql", "name": "stg_edfi_sections", "alias": "stg_edfi_sections", "checksum": {"name": "sha256", "checksum": "51fd63f7c59ed6b997e70a3ca608c9c587ef1994ed8aece1380dfeb3334ce5f3"}, "tags": ["edfi"], "refs": [], "sources": [["staging", "base_edfi_sections"], ["staging", "base_edfi_sections"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_sections.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "labels": {"edfi_version": "5_3"}}, "created_at": 1650510021.769925, "compiled_sql": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `gcp-project`.`dev_staging`.`base_edfi_sections`\n    where is_complete_extract IS TRUE\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `gcp-project`.`dev_staging`.`base_edfi_sections` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            OR base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    json_value(data, '$.sectionIdentifier') as section_identifier,\n    json_value(data, '$.sectionName') as section_name,\n    struct(\n        json_value(data, '$.courseOfferingReference.localCourseCode') as local_course_code,\n        json_value(data, '$.courseOfferingReference.schoolId') as school_id,\n        cast(json_value(data, '$.courseOfferingReference.schoolYear') as int64) as school_year,\n        json_value(data, '$.courseOfferingReference.sessionName') as session_name\n    ) as course_offering_reference,\n    cast(json_value(data, '$.availableCreditConversion') as float64) as available_credit_conversion,\n    cast(json_value(data, '$.availableCredits') as float64) as available_credits,\n    split(json_value(data, '$.availableCreditTypeDescriptor'), '#')[OFFSET(1)] as available_credit_type_descriptor,\n    split(json_value(data, '$.educationalEnvironmentDescriptor'), '#')[OFFSET(1)] as educational_environment_descriptor,\n    struct(\n        json_value(data, '$.locationReference.classroomIdentificationCode') as classroom_identification_code,\n        json_value(data, '$.locationReference.schoolId') as school_id\n    ) as location_reference,\n    struct(\n        json_value(data, '$.locationSchoolReference.schoolId') as school_id\n    ) as location_school_reference,\n    array(\n        select as struct \n            struct(\n                json_value(class_periods, \"$.classPeriodReference.classPeriodName\") as class_period_name,\n                json_value(class_periods, '$.classPeriodReference.schoolId') as school_id\n            ) as class_period_reference\n        from unnest(json_query_array(data, \"$.classPeriods\")) class_periods \n    ) as class_periods,\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_staging`.`stg_edfi_sections`"}, "model.project.dim_session": {"raw_sql": "select\n    {{ dbt_utils.surrogate_key([\n        'sessions.school_reference.school_id',\n        'sessions.school_year_type_reference.school_year',\n        'sessions.session_name'\n    ]) }}                                                                                   as session_key,\n    {{ dbt_utils.surrogate_key([\n        'sessions.school_reference.school_id',\n        'sessions.school_year_type_reference.school_year'\n    ]) }}                                                                                   as school_key,\n    sessions.school_year_type_reference.school_year                                         as school_year,\n    school_year_types.school_year_description                                               as school_year_name,\n    sessions.session_name                                                                   as session_name,\n    sessions.term_descriptor                                                                as term_name,\n    sessions.total_instructional_days                                                       as total_instructional_days,\n    sessions.begin_date                                                                     as session_begin_date,\n    sessions.end_date                                                                       as session_end_date\nfrom {{ ref('stg_edfi_sessions') }} sessions\nleft join {{ ref('stg_edfi_school_year_types') }} school_year_types\n    on sessions.school_year_type_reference.school_year = school_year_types.school_year", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.project.stg_edfi_sessions", "model.project.stg_edfi_school_year_types"]}, "config": {"enabled": true, "alias": null, "schema": "core", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_core", "fqn": ["project", "marts", "core", "dim_session"], "unique_id": "model.project.dim_session", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "marts/core/dim_session.sql", "original_file_path": "models/marts/core/dim_session.sql", "name": "dim_session", "alias": "dim_session", "checksum": {"name": "sha256", "checksum": "2396cbf208e27f309eb41a39b34df52d0bd34af813e001a460f2c43d900f5a2f"}, "tags": ["edfi"], "refs": [["stg_edfi_sessions"], ["stg_edfi_school_year_types"]], "sources": [], "description": "# Session dim\n\nGrain: one row per school per session", "columns": {"session_key": {"name": "session_key", "description": "Primary key for dimension table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_key": {"name": "school_key", "description": "Foreign key to `dim_school`", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_year": {"name": "school_year", "description": "Four-digit school year", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_year_name": {"name": "school_year_name", "description": "School year name (ie. 2021-2022)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "session_name": {"name": "session_name", "description": "Session name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "term_name": {"name": "term_name", "description": "Ed-Fi term descriptor", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_instructional_days": {"name": "total_instructional_days", "description": "Number of instructional days for the sesssion", "meta": {}, "data_type": null, "quote": null, "tags": []}, "session_begin_date": {"name": "session_begin_date", "description": "Session begin date", "meta": {}, "data_type": null, "quote": null, "tags": []}, "session_end_date": {"name": "session_end_date", "description": "Session end date", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/marts/core/core.yml", "compiled_path": "target/compiled/project/models/marts/core/dim_session.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "core", "tags": "edfi"}, "created_at": 1650510021.9789472, "compiled_sql": "select\n    to_hex(md5(cast(coalesce(cast(sessions.school_reference.school_id as \n    string\n), '') || '-' || coalesce(cast(sessions.school_year_type_reference.school_year as \n    string\n), '') || '-' || coalesce(cast(sessions.session_name as \n    string\n), '') as \n    string\n)))                                                                                   as session_key,\n    to_hex(md5(cast(coalesce(cast(sessions.school_reference.school_id as \n    string\n), '') || '-' || coalesce(cast(sessions.school_year_type_reference.school_year as \n    string\n), '') as \n    string\n)))                                                                                   as school_key,\n    sessions.school_year_type_reference.school_year                                         as school_year,\n    school_year_types.school_year_description                                               as school_year_name,\n    sessions.session_name                                                                   as session_name,\n    sessions.term_descriptor                                                                as term_name,\n    sessions.total_instructional_days                                                       as total_instructional_days,\n    sessions.begin_date                                                                     as session_begin_date,\n    sessions.end_date                                                                       as session_end_date\nfrom `gcp-project`.`dev_staging`.`stg_edfi_sessions` sessions\nleft join `gcp-project`.`dev_staging`.`stg_edfi_school_year_types` school_year_types\n    on sessions.school_year_type_reference.school_year = school_year_types.school_year", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_core`.`dim_session`"}, "model.project.stg_edfi_sessions": {"raw_sql": "{{ retrieve_edfi_records_from_data_lake('base_edfi_sessions') }}\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    json_value(data, '$.sessionName') as session_name,\n    struct(\n        json_value(data, '$.schoolReference.schoolId') as school_id\n    ) as school_reference,\n    struct(\n        cast(json_value(data, '$.schoolYearTypeReference.schoolYear') as int64) as school_year\n    ) as school_year_type_reference,\n    split(json_value(data, \"$.termDescriptor\"), '#')[OFFSET(1)] as term_descriptor,\n    cast(json_value(data, \"$.totalInstructionalDays\") as int64) as total_instructional_days,\n    parse_date('%Y-%m-%d', json_value(data, \"$.beginDate\")) as begin_date,\n    parse_date('%Y-%m-%d', json_value(data, \"$.endDate\")) as end_date,\n    array(\n        select as struct\n            struct(\n                split(json_value(grading_periods, '$.gradingPeriodReference.gradingPeriodDescriptor'), '#')[OFFSET(1)] as grading_period_descriptor,\n                cast(json_value(grading_periods, \"$.gradingPeriodReference.periodSequence\") as int64) as period_sequence,\n                json_value(grading_periods, \"$.gradingPeriodReference.schoolId\") as school_id,\n                json_value(grading_periods, \"$.gradingPeriodReference.schoolYear\") as school_year\n            ) as grading_period_reference\n        from unnest(json_query_array(data, \"$.gradingPeriods\")) grading_periods \n    ) as grading_periods\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_sessions", "source.project.staging.base_edfi_sessions"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_sessions"], "unique_id": "model.project.stg_edfi_sessions", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "staging/edfi/stg_edfi_sessions.sql", "original_file_path": "models/staging/edfi/stg_edfi_sessions.sql", "name": "stg_edfi_sessions", "alias": "stg_edfi_sessions", "checksum": {"name": "sha256", "checksum": "c90c2f4ddaa2602bef9b1938191010fadbf4140603e754242bea0c32f81f6e78"}, "tags": ["edfi"], "refs": [], "sources": [["staging", "base_edfi_sessions"], ["staging", "base_edfi_sessions"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_sessions.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "labels": {"edfi_version": "5_3"}}, "created_at": 1650510021.781588, "compiled_sql": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `gcp-project`.`dev_staging`.`base_edfi_sessions`\n    where is_complete_extract IS TRUE\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `gcp-project`.`dev_staging`.`base_edfi_sessions` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            OR base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    json_value(data, '$.sessionName') as session_name,\n    struct(\n        json_value(data, '$.schoolReference.schoolId') as school_id\n    ) as school_reference,\n    struct(\n        cast(json_value(data, '$.schoolYearTypeReference.schoolYear') as int64) as school_year\n    ) as school_year_type_reference,\n    split(json_value(data, \"$.termDescriptor\"), '#')[OFFSET(1)] as term_descriptor,\n    cast(json_value(data, \"$.totalInstructionalDays\") as int64) as total_instructional_days,\n    parse_date('%Y-%m-%d', json_value(data, \"$.beginDate\")) as begin_date,\n    parse_date('%Y-%m-%d', json_value(data, \"$.endDate\")) as end_date,\n    array(\n        select as struct\n            struct(\n                split(json_value(grading_periods, '$.gradingPeriodReference.gradingPeriodDescriptor'), '#')[OFFSET(1)] as grading_period_descriptor,\n                cast(json_value(grading_periods, \"$.gradingPeriodReference.periodSequence\") as int64) as period_sequence,\n                json_value(grading_periods, \"$.gradingPeriodReference.schoolId\") as school_id,\n                json_value(grading_periods, \"$.gradingPeriodReference.schoolYear\") as school_year\n            ) as grading_period_reference\n        from unnest(json_query_array(data, \"$.gradingPeriods\")) grading_periods \n    ) as grading_periods\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_staging`.`stg_edfi_sessions`"}, "model.project.stg_edfi_staff_education_organization_assignment_associations": {"raw_sql": "{{ retrieve_edfi_records_from_data_lake('base_edfi_staff_education_organization_assignment_associations') }}\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    struct(\n        json_value(data, '$.staffReference.staffUniqueId') as staff_unique_id\n    ) as staff_reference,\n    split(json_value(data, \"$.staffClassificationDescriptor\"), '#')[OFFSET(1)] as staff_classification_descriptor,\n    struct(\n        json_value(data, '$.educationOrganizationReference.educationOrganizationId') as education_organization_id\n    ) as education_organization_reference,\n    parse_date('%Y-%m-%d', json_value(data, '$.beginDate')) as begin_date,\n    parse_date('%Y-%m-%d', json_value(data, '$.endDate')) as end_date\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_staff_education_organization_assignment_associations", "source.project.staging.base_edfi_staff_education_organization_assignment_associations"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_staff_education_organization_assignment_associations"], "unique_id": "model.project.stg_edfi_staff_education_organization_assignment_associations", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "staging/edfi/stg_edfi_staff_education_organization_assignment_associations.sql", "original_file_path": "models/staging/edfi/stg_edfi_staff_education_organization_assignment_associations.sql", "name": "stg_edfi_staff_education_organization_assignment_associations", "alias": "stg_edfi_staff_education_organization_assignment_associations", "checksum": {"name": "sha256", "checksum": "90e457282be02e06c9d2f9c6449b90f4c97ca80e66128b33c26dc7e39b9ae771"}, "tags": ["edfi"], "refs": [], "sources": [["staging", "base_edfi_staff_education_organization_assignment_associations"], ["staging", "base_edfi_staff_education_organization_assignment_associations"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_staff_education_organization_assignment_associations.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "labels": {"edfi_version": "5_3"}}, "created_at": 1650510021.7861855, "compiled_sql": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `gcp-project`.`dev_staging`.`base_edfi_staff_education_organization_assignment_associations`\n    where is_complete_extract IS TRUE\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `gcp-project`.`dev_staging`.`base_edfi_staff_education_organization_assignment_associations` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            OR base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    struct(\n        json_value(data, '$.staffReference.staffUniqueId') as staff_unique_id\n    ) as staff_reference,\n    split(json_value(data, \"$.staffClassificationDescriptor\"), '#')[OFFSET(1)] as staff_classification_descriptor,\n    struct(\n        json_value(data, '$.educationOrganizationReference.educationOrganizationId') as education_organization_id\n    ) as education_organization_reference,\n    parse_date('%Y-%m-%d', json_value(data, '$.beginDate')) as begin_date,\n    parse_date('%Y-%m-%d', json_value(data, '$.endDate')) as end_date\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_staging`.`stg_edfi_staff_education_organization_assignment_associations`"}, "model.project.stg_edfi_staff_school_associations": {"raw_sql": "{{ retrieve_edfi_records_from_data_lake('base_edfi_staff_school_associations') }}\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    struct(\n        json_value(data, '$.staffReference.staffUniqueId') as staff_unique_id\n    ) as staff_reference,\n    struct(\n        json_value(data, '$.schoolReference.schoolId') as school_id\n    ) as school_reference,\n    struct(\n        cast(json_value(data, '$.schoolYearTypeReference.schoolYear') as int64) as school_year\n    ) as school_year_type_reference,\n    struct(\n        json_value(data, '$.calendarReference.calendarCode') as calendar_code,\n        json_value(data, '$.calendarReference.schoolId') as school_id,\n        cast(json_value(data, '$.calendarReference.schoolYear') as int64) as school_year\n    ) as calendar_reference,\n    split(json_value(data, \"$.programAssignmentDescriptor\"), '#')[OFFSET(1)] as program_assignment_descriptor,\n    array(\n        select as struct \n            split(json_value(academic_subjects, \"$.academicSubjectDescriptor\"), '#')[OFFSET(1)] as academic_subject_descriptor,\n        from unnest(json_query_array(data, \"$.academicSubjects\")) academic_subjects \n    ) as academic_subjects,\n    array(\n        select as struct \n            split(json_value(grade_levels, \"$.gradeLevelDescriptor\"), '#')[OFFSET(1)] as grade_level_descriptor,\n        from unnest(json_query_array(data, \"$.gradeLevels\")) grade_levels \n    ) as grade_levels,\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_staff_school_associations", "source.project.staging.base_edfi_staff_school_associations"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_staff_school_associations"], "unique_id": "model.project.stg_edfi_staff_school_associations", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "staging/edfi/stg_edfi_staff_school_associations.sql", "original_file_path": "models/staging/edfi/stg_edfi_staff_school_associations.sql", "name": "stg_edfi_staff_school_associations", "alias": "stg_edfi_staff_school_associations", "checksum": {"name": "sha256", "checksum": "d877e1b339a3a5dffccfe65852ea5a849560d0040847fd0b6697442cbf3d91a9"}, "tags": ["edfi"], "refs": [], "sources": [["staging", "base_edfi_staff_school_associations"], ["staging", "base_edfi_staff_school_associations"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_staff_school_associations.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "labels": {"edfi_version": "5_3"}}, "created_at": 1650510021.7906678, "compiled_sql": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `gcp-project`.`dev_staging`.`base_edfi_staff_school_associations`\n    where is_complete_extract IS TRUE\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `gcp-project`.`dev_staging`.`base_edfi_staff_school_associations` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            OR base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    struct(\n        json_value(data, '$.staffReference.staffUniqueId') as staff_unique_id\n    ) as staff_reference,\n    struct(\n        json_value(data, '$.schoolReference.schoolId') as school_id\n    ) as school_reference,\n    struct(\n        cast(json_value(data, '$.schoolYearTypeReference.schoolYear') as int64) as school_year\n    ) as school_year_type_reference,\n    struct(\n        json_value(data, '$.calendarReference.calendarCode') as calendar_code,\n        json_value(data, '$.calendarReference.schoolId') as school_id,\n        cast(json_value(data, '$.calendarReference.schoolYear') as int64) as school_year\n    ) as calendar_reference,\n    split(json_value(data, \"$.programAssignmentDescriptor\"), '#')[OFFSET(1)] as program_assignment_descriptor,\n    array(\n        select as struct \n            split(json_value(academic_subjects, \"$.academicSubjectDescriptor\"), '#')[OFFSET(1)] as academic_subject_descriptor,\n        from unnest(json_query_array(data, \"$.academicSubjects\")) academic_subjects \n    ) as academic_subjects,\n    array(\n        select as struct \n            split(json_value(grade_levels, \"$.gradeLevelDescriptor\"), '#')[OFFSET(1)] as grade_level_descriptor,\n        from unnest(json_query_array(data, \"$.gradeLevels\")) grade_levels \n    ) as grade_levels,\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_staging`.`stg_edfi_staff_school_associations`"}, "model.project.stg_edfi_staff_section_associations": {"raw_sql": "{{ retrieve_edfi_records_from_data_lake('base_edfi_staff_section_associations') }}\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    struct(\n        json_value(data, '$.staffReference.staffUniqueId') as staff_unique_id\n    ) as staff_reference,\n    struct(\n        json_value(data, '$.sectionReference.localCourseCode') as local_course_code,\n        json_value(data, '$.sectionReference.schoolId') as school_id,\n        cast(json_value(data, '$.sectionReference.schoolYear') as int64) as school_year,\n        json_value(data, '$.sectionReference.sectionIdentifier') as section_identifier,\n        json_value(data, '$.sectionReference.sessionName') as session_name\n    ) as section_reference,\n    parse_date('%Y-%m-%d', json_value(data, \"$.beginDate\")) as begin_date,\n    parse_date('%Y-%m-%d', json_value(data, \"$.endDate\")) as end_date,\n    split(json_value(data, \"$.classroomPositionDescriptor\"), '#')[OFFSET(1)] as classroom_position_descriptor,\n    cast(json_value(data, '$.highlyQualifiedTeacher') as BOOL) as highly_qualified_teacher,\n    json_value(data, '$.percentageContribution') as percentage_contribution\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_staff_section_associations", "source.project.staging.base_edfi_staff_section_associations"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_staff_section_associations"], "unique_id": "model.project.stg_edfi_staff_section_associations", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "staging/edfi/stg_edfi_staff_section_associations.sql", "original_file_path": "models/staging/edfi/stg_edfi_staff_section_associations.sql", "name": "stg_edfi_staff_section_associations", "alias": "stg_edfi_staff_section_associations", "checksum": {"name": "sha256", "checksum": "3effd7d78ae55e2765622cf0dc0490ffd4a8629cf7647312e4c51392cdc91350"}, "tags": ["edfi"], "refs": [], "sources": [["staging", "base_edfi_staff_section_associations"], ["staging", "base_edfi_staff_section_associations"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_staff_section_associations.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "labels": {"edfi_version": "5_3"}}, "created_at": 1650510021.7955716, "compiled_sql": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `gcp-project`.`dev_staging`.`base_edfi_staff_section_associations`\n    where is_complete_extract IS TRUE\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `gcp-project`.`dev_staging`.`base_edfi_staff_section_associations` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            OR base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    struct(\n        json_value(data, '$.staffReference.staffUniqueId') as staff_unique_id\n    ) as staff_reference,\n    struct(\n        json_value(data, '$.sectionReference.localCourseCode') as local_course_code,\n        json_value(data, '$.sectionReference.schoolId') as school_id,\n        cast(json_value(data, '$.sectionReference.schoolYear') as int64) as school_year,\n        json_value(data, '$.sectionReference.sectionIdentifier') as section_identifier,\n        json_value(data, '$.sectionReference.sessionName') as session_name\n    ) as section_reference,\n    parse_date('%Y-%m-%d', json_value(data, \"$.beginDate\")) as begin_date,\n    parse_date('%Y-%m-%d', json_value(data, \"$.endDate\")) as end_date,\n    split(json_value(data, \"$.classroomPositionDescriptor\"), '#')[OFFSET(1)] as classroom_position_descriptor,\n    cast(json_value(data, '$.highlyQualifiedTeacher') as BOOL) as highly_qualified_teacher,\n    json_value(data, '$.percentageContribution') as percentage_contribution\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_staging`.`stg_edfi_staff_section_associations`"}, "model.project.dim_staff": {"raw_sql": "select\n    {{ dbt_utils.surrogate_key([\n            'staff_unique_id',\n            'school_year'\n    ]) }}                               as staff_key,\n    school_year                         as school_year,\n    staff_unique_id                     as staff_unique_id,\n    last_surname                        as staff_last_surname,\n    middle_name                         as staff_middle_name,\n    first_name                          as staff_first_name,\n    CONCAT(\n        last_surname, ', ',\n        first_name, ' ',\n        COALESCE(LEFT(middle_name, 1), '')\n    )                                          as staff_display_name,\n    if(\n        hispanic_latino_ethnicity IS TRUE,\n        'Yes',\n        'No')                                  as is_hispanic,\n    LOWER(email.electronic_mail_address)       as email\nfrom {{ ref('stg_edfi_staffs') }}\nleft join unnest(electronic_mails) email\n    on email.electronic_mail_type_descriptor = 'Work'", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.project.stg_edfi_staffs"]}, "config": {"enabled": true, "alias": null, "schema": "core", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_core", "fqn": ["project", "marts", "core", "dim_staff"], "unique_id": "model.project.dim_staff", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "marts/core/dim_staff.sql", "original_file_path": "models/marts/core/dim_staff.sql", "name": "dim_staff", "alias": "dim_staff", "checksum": {"name": "sha256", "checksum": "940b02c4e7e4ba6571a36fecb27dc936ac448758d6687bfa2235944c273e51d1"}, "tags": ["edfi"], "refs": [["stg_edfi_staffs"]], "sources": [], "description": "# Staff dim\n\nGrain: one row per staff member per school year", "columns": {"student_key": {"name": "student_key", "description": "Primary key for dimension table. This surrogate key is based on the student's unique id", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/marts/core/core.yml", "compiled_path": "target/compiled/project/models/marts/core/dim_staff.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "core", "tags": "edfi"}, "created_at": 1650510021.9796917, "compiled_sql": "select\n    to_hex(md5(cast(coalesce(cast(staff_unique_id as \n    string\n), '') || '-' || coalesce(cast(school_year as \n    string\n), '') as \n    string\n)))                               as staff_key,\n    school_year                         as school_year,\n    staff_unique_id                     as staff_unique_id,\n    last_surname                        as staff_last_surname,\n    middle_name                         as staff_middle_name,\n    first_name                          as staff_first_name,\n    CONCAT(\n        last_surname, ', ',\n        first_name, ' ',\n        COALESCE(LEFT(middle_name, 1), '')\n    )                                          as staff_display_name,\n    if(\n        hispanic_latino_ethnicity IS TRUE,\n        'Yes',\n        'No')                                  as is_hispanic,\n    LOWER(email.electronic_mail_address)       as email\nfrom `gcp-project`.`dev_staging`.`stg_edfi_staffs`\nleft join unnest(electronic_mails) email\n    on email.electronic_mail_type_descriptor = 'Work'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_core`.`dim_staff`"}, "model.project.stg_edfi_staffs": {"raw_sql": "{{ retrieve_edfi_records_from_data_lake('base_edfi_staffs') }}\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    json_value(data, '$.staffUniqueId') as staff_unique_id,\n    json_value(data, '$.lastSurname') as last_surname,\n    json_value(data, '$.middleName') as middle_name,\n    json_value(data, '$.firstName') as first_name,\n    struct(\n        json_value(data, '$.personReference.personId') as person_id,\n        split(json_value(data, \"$.personReference.sourceSystemDescriptor\"), '#')[OFFSET(1)] as source_system_descriptor\n    ) as person_reference,\n    json_value(data, '$.generationCodeSuffix') as generation_code_suffix,\n    json_value(data, '$.loginId') as login_id,\n    parse_date('%Y-%m-%d', json_value(data, '$.birthDate')) as birth_date,\n    split(json_value(data, \"$.citizenshipStatusDescriptor\"), '#')[OFFSET(1)] as citizenship_status_descriptor,\n    split(json_value(data, \"$.highestCompletedLevelOfEducationDescriptor\"), '#')[OFFSET(1)] as highest_completed_level_of_education_descriptor,\n    cast(json_value(data, \"$.highlyQualifiedTeacher\") as BOOL) as highly_qualified_teacher,\n    cast(json_value(data, \"$.hispanicLatinoEthnicity\") as BOOL) as hispanic_latino_ethnicity,\n    array(\n        select as struct \n            split(json_value(electronic_mails, '$.electronicMailTypeDescriptor'), '#')[OFFSET(1)] as electronic_mail_type_descriptor,\n            json_value(electronic_mails, \"$.electronicMailAddress\") as electronic_mail_address,\n            cast(json_value(electronic_mails, \"$.doNotPublishIndicator\") as BOOL) as do_not_publish_indicator\n        from unnest(json_query_array(data, \"$.electronicMails\")) electronic_mails \n    ) as electronic_mails,\n    array(\n        select as struct \n            split(json_value(codes, '$.staffIdentificationSystemDescriptor'), '#')[OFFSET(1)] as staff_identification_system_descriptor,\n            json_value(codes, \"$.assigningOrganizationIdentificationCode\") as assigning_organization_identification_code,\n            json_value(codes, \"$.identificationCode\") as identification_code\n        from unnest(json_query_array(data, \"$.identificationCodes\")) codes \n    ) as identification_codes,\n    array(\n        select as struct \n            split(json_value(descriptors, '$.ancestryEthnicOriginDescriptor'), '#')[OFFSET(1)] as ancestry_ethnic_origin_descriptor,\n        from unnest(json_query_array(data, \"$.ancestry_ethnic_origins\")) descriptors \n    ) as ancestry_ethnic_origins,\n    array(\n        select as struct \n            split(json_value(races, '$.raceDescriptor'), '#')[OFFSET(1)] as race_descriptor,\n        from unnest(json_query_array(data, \"$.races\")) races \n    ) as races\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_staffs", "source.project.staging.base_edfi_staffs"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_staffs"], "unique_id": "model.project.stg_edfi_staffs", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "staging/edfi/stg_edfi_staffs.sql", "original_file_path": "models/staging/edfi/stg_edfi_staffs.sql", "name": "stg_edfi_staffs", "alias": "stg_edfi_staffs", "checksum": {"name": "sha256", "checksum": "c22e7ea1ef0c92b1eda921ea4fd17ac78f098eb026d616229efbadc62152d2c2"}, "tags": ["edfi"], "refs": [], "sources": [["staging", "base_edfi_staffs"], ["staging", "base_edfi_staffs"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_staffs.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "labels": {"edfi_version": "5_3"}}, "created_at": 1650510021.8060083, "compiled_sql": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `gcp-project`.`dev_staging`.`base_edfi_staffs`\n    where is_complete_extract IS TRUE\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `gcp-project`.`dev_staging`.`base_edfi_staffs` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            OR base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    json_value(data, '$.staffUniqueId') as staff_unique_id,\n    json_value(data, '$.lastSurname') as last_surname,\n    json_value(data, '$.middleName') as middle_name,\n    json_value(data, '$.firstName') as first_name,\n    struct(\n        json_value(data, '$.personReference.personId') as person_id,\n        split(json_value(data, \"$.personReference.sourceSystemDescriptor\"), '#')[OFFSET(1)] as source_system_descriptor\n    ) as person_reference,\n    json_value(data, '$.generationCodeSuffix') as generation_code_suffix,\n    json_value(data, '$.loginId') as login_id,\n    parse_date('%Y-%m-%d', json_value(data, '$.birthDate')) as birth_date,\n    split(json_value(data, \"$.citizenshipStatusDescriptor\"), '#')[OFFSET(1)] as citizenship_status_descriptor,\n    split(json_value(data, \"$.highestCompletedLevelOfEducationDescriptor\"), '#')[OFFSET(1)] as highest_completed_level_of_education_descriptor,\n    cast(json_value(data, \"$.highlyQualifiedTeacher\") as BOOL) as highly_qualified_teacher,\n    cast(json_value(data, \"$.hispanicLatinoEthnicity\") as BOOL) as hispanic_latino_ethnicity,\n    array(\n        select as struct \n            split(json_value(electronic_mails, '$.electronicMailTypeDescriptor'), '#')[OFFSET(1)] as electronic_mail_type_descriptor,\n            json_value(electronic_mails, \"$.electronicMailAddress\") as electronic_mail_address,\n            cast(json_value(electronic_mails, \"$.doNotPublishIndicator\") as BOOL) as do_not_publish_indicator\n        from unnest(json_query_array(data, \"$.electronicMails\")) electronic_mails \n    ) as electronic_mails,\n    array(\n        select as struct \n            split(json_value(codes, '$.staffIdentificationSystemDescriptor'), '#')[OFFSET(1)] as staff_identification_system_descriptor,\n            json_value(codes, \"$.assigningOrganizationIdentificationCode\") as assigning_organization_identification_code,\n            json_value(codes, \"$.identificationCode\") as identification_code\n        from unnest(json_query_array(data, \"$.identificationCodes\")) codes \n    ) as identification_codes,\n    array(\n        select as struct \n            split(json_value(descriptors, '$.ancestryEthnicOriginDescriptor'), '#')[OFFSET(1)] as ancestry_ethnic_origin_descriptor,\n        from unnest(json_query_array(data, \"$.ancestry_ethnic_origins\")) descriptors \n    ) as ancestry_ethnic_origins,\n    array(\n        select as struct \n            split(json_value(races, '$.raceDescriptor'), '#')[OFFSET(1)] as race_descriptor,\n        from unnest(json_query_array(data, \"$.races\")) races \n    ) as races\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_staging`.`stg_edfi_staffs`"}, "model.project.fct_student_assessment": {"raw_sql": "-- student assessment score results\nselect distinct\n    {{ dbt_utils.surrogate_key([\n        'student_assessments.assessment_reference.assessment_identifier',\n        'student_assessments.assessment_reference.namespace'\n    ]) }}                                                                           as assessment_key,\n    {{ dbt_utils.surrogate_key([\n        'student_assessments.student_reference.student_unique_id',\n        'student_assessments.school_year'\n    ]) }}                                                                           as student_key,\n    {{ dbt_utils.surrogate_key([\n        'student_school_associations.school_reference.school_id',\n        'student_assessments.school_year'\n    ]) }}                                                                           as school_key,\n    student_assessments.school_year                                                 as school_year,\n    student_assessments.student_assessment_identifier                               as student_assessment_identifier,\n    student_assessments.administration_date                                         as administration_date,\n    student_assessments.when_assessed_grade_level_descriptor                        as assessed_grade_level,\n    score_results.assessment_reporting_method_descriptor                            as reporting_method,\n    score_results.result_datatype_type_descriptor                                   as student_result_data_type,\n    score_results.result                                                            as student_result\nfrom {{ ref('stg_edfi_student_assessments') }} student_assessments\nleft join unnest(student_assessments.score_results) as score_results\nleft join unnest(student_assessments.performance_levels) as performance_levels\nleft join {{ ref('stg_edfi_student_school_associations') }} student_school_associations\n    on student_assessments.school_year = student_school_associations.school_year\n    and student_assessments.student_reference.student_unique_id = student_school_associations.student_reference.student_unique_id\n    and student_assessments.administration_date >= student_school_associations.entry_date\n    and (\n        student_assessments.administration_date <= student_school_associations.exit_withdraw_date\n        OR student_school_associations.exit_withdraw_date is null\n    )\n\n\nunion all\n\n\n--student assessment performance levels\nselect distinct\n    {{ dbt_utils.surrogate_key([\n        'student_assessments.assessment_reference.assessment_identifier',\n        'student_assessments.assessment_reference.namespace'\n    ]) }}                                                                           as assessment_key,\n    {{ dbt_utils.surrogate_key([\n        'student_assessments.student_reference.student_unique_id',\n        'student_assessments.school_year'\n    ]) }}                                                                           as student_key,\n    {{ dbt_utils.surrogate_key([\n        'student_school_associations.school_reference.school_id',\n        'student_assessments.school_year'\n    ]) }}                                                                           as school_key,\n    student_assessments.school_year                                                 as school_year,\n    student_assessments.student_assessment_identifier                               as student_assessment_identifier,\n    student_assessments.administration_date                                         as administration_date,\n    student_assessments.when_assessed_grade_level_descriptor                        as assessed_grade_level,\n    performance_levels.assessment_reporting_method_descriptor                       as reporting_method,\n    'Performance Level'                                                             as student_result_data_type,\n    performance_levels.performance_level_descriptor                                 as student_result\nfrom {{ ref('stg_edfi_student_assessments') }} student_assessments\nleft join unnest(student_assessments.performance_levels) as performance_levels\nleft join {{ ref('stg_edfi_student_school_associations') }} student_school_associations\n    on student_assessments.school_year = student_school_associations.school_year\n    and student_assessments.student_reference.student_unique_id = student_school_associations.student_reference.student_unique_id\n    and student_assessments.administration_date >= student_school_associations.entry_date\n    and (\n        student_assessments.administration_date <= student_school_associations.exit_withdraw_date\n        OR student_school_associations.exit_withdraw_date is null\n    )\n\n\nunion all\n\n\n-- student objective assessment score results\nselect distinct\n    {{ dbt_utils.surrogate_key([\n        'student_assessments.assessment_reference.assessment_identifier',\n        'student_assessments.assessment_reference.namespace',\n        'student_objective_assessments.objective_assessment_reference.identification_code'\n    ]) }}                                                                                as assessment_key,\n    {{ dbt_utils.surrogate_key([\n        'student_assessments.student_reference.student_unique_id',\n        'student_assessments.school_year'\n    ]) }}                                                                                as student_key,\n    {{ dbt_utils.surrogate_key([\n        'student_school_associations.school_reference.school_id',\n        'student_assessments.school_year'\n    ]) }}                                                                                as school_key,\n    student_assessments.school_year                                                      as school_year,\n    student_assessments.student_assessment_identifier                                    as student_assessment_identifier,\n    student_assessments.administration_date                                              as administration_date,\n    student_assessments.when_assessed_grade_level_descriptor                             as assessed_grade_level,\n    student_objective_assessments_score_results.assessment_reporting_method_descriptor   as reporting_method,\n    student_objective_assessments_score_results.result_datatype_type_descriptor          as student_result_data_type,\n    student_objective_assessments_score_results.result                                   as student_result\nfrom {{ ref('stg_edfi_student_assessments') }} student_assessments\nleft join unnest(student_assessments.student_objective_assessments) as student_objective_assessments\nleft join unnest(student_objective_assessments.score_results) as student_objective_assessments_score_results\nleft join {{ ref('stg_edfi_student_school_associations') }} student_school_associations\n    on student_assessments.school_year = student_school_associations.school_year\n    and student_assessments.student_reference.student_unique_id = student_school_associations.student_reference.student_unique_id\n    and student_assessments.administration_date >= student_school_associations.entry_date\n    and (\n        student_assessments.administration_date <= student_school_associations.exit_withdraw_date\n        OR student_school_associations.exit_withdraw_date is null\n    )\n\n\nunion all\n\n\n-- student objective assessment performance levels\nselect distinct\n    {{ dbt_utils.surrogate_key([\n        'student_assessments.assessment_reference.assessment_identifier',\n        'student_assessments.assessment_reference.namespace',\n        'student_objective_assessments.objective_assessment_reference.identification_code'\n    ]) }}                                                                                     as assessment_key,\n    {{ dbt_utils.surrogate_key([\n        'student_assessments.student_reference.student_unique_id',\n        'student_assessments.school_year'\n    ]) }}                                                                                     as student_key,\n    {{ dbt_utils.surrogate_key([\n        'student_school_associations.school_reference.school_id',\n        'student_assessments.school_year'\n    ]) }}                                                                                     as school_key,\n    student_assessments.school_year                                                           as school_year,\n    student_assessments.student_assessment_identifier                                         as student_assessment_identifier,\n    student_assessments.administration_date                                                   as administration_date,\n    student_assessments.when_assessed_grade_level_descriptor                                  as assessed_grade_level,\n    student_objective_assessments_performance_levels.assessment_reporting_method_descriptor   as reporting_method,\n    'Performance Level'                                                                       as student_result_data_type,\n    student_objective_assessments_performance_levels.performance_level_descriptor             as student_result\nfrom {{ ref('stg_edfi_student_assessments') }} student_assessments\nleft join unnest(student_assessments.student_objective_assessments) as student_objective_assessments\nleft join unnest(student_objective_assessments.performance_levels) as student_objective_assessments_performance_levels\nleft join {{ ref('stg_edfi_student_school_associations') }} student_school_associations\n    on student_assessments.school_year = student_school_associations.school_year\n    and student_assessments.student_reference.student_unique_id = student_school_associations.student_reference.student_unique_id\n    and student_assessments.administration_date >= student_school_associations.entry_date\n    and (\n        student_assessments.administration_date <= student_school_associations.exit_withdraw_date\n        OR student_school_associations.exit_withdraw_date is null\n    )", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.project.stg_edfi_student_assessments", "model.project.stg_edfi_student_school_associations", "model.project.stg_edfi_student_assessments", "model.project.stg_edfi_student_school_associations", "model.project.stg_edfi_student_assessments", "model.project.stg_edfi_student_school_associations", "model.project.stg_edfi_student_assessments", "model.project.stg_edfi_student_school_associations"]}, "config": {"enabled": true, "alias": null, "schema": "assessments", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_assessments", "fqn": ["project", "marts", "assessments", "fct_student_assessment"], "unique_id": "model.project.fct_student_assessment", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "marts/assessments/fct_student_assessment.sql", "original_file_path": "models/marts/assessments/fct_student_assessment.sql", "name": "fct_student_assessment", "alias": "fct_student_assessment", "checksum": {"name": "sha256", "checksum": "b5b1e4d9a2419374db571368513c3ff7227bc036d21e264491fc09e0c4a311af"}, "tags": ["edfi"], "refs": [["stg_edfi_student_assessments"], ["stg_edfi_student_school_associations"], ["stg_edfi_student_assessments"], ["stg_edfi_student_school_associations"], ["stg_edfi_student_assessments"], ["stg_edfi_student_school_associations"], ["stg_edfi_student_assessments"], ["stg_edfi_student_school_associations"]], "sources": [], "description": "# Student assessments fact\n\nGrain size: one row per assessment measure per student assessment", "columns": {"assessment_key": {"name": "assessment_key", "description": "Foreign key to `dim_assessment`", "meta": {}, "data_type": null, "quote": null, "tags": []}, "objective_assessment_key": {"name": "objective_assessment_key", "description": "Foreign key to `dim_objective_assessment`", "meta": {}, "data_type": null, "quote": null, "tags": []}, "student_key": {"name": "student_key", "description": "Foreign key to `dim_student`", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_key": {"name": "school_key", "description": "Foreign key to `dim_school`", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_year": {"name": "school_year", "description": "School year", "meta": {}, "data_type": null, "quote": null, "tags": []}, "student_assessment_identifier": {"name": "student_assessment_identifier", "description": "Unique identifier for student assessment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "administration_date": {"name": "administration_date", "description": "Date the assessment was administered", "meta": {}, "data_type": null, "quote": null, "tags": []}, "assessed_grade_level": {"name": "assessed_grade_level", "description": "Grade level of student when assessment was administered", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reporting_method": {"name": "reporting_method", "description": "Describes how the results of the assessment are reported.  This will create multiple records if there are multiple reporting methods associated with the assessment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "student_result_data_type": {"name": "student_result_data_type", "description": "Describes what format the results for the assessment are reported", "meta": {}, "data_type": null, "quote": null, "tags": []}, "student_result": {"name": "student_result", "description": "The documented score for the student for the corresponding assessment or objective assessment", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/marts/assessments/assessments.yml", "compiled_path": "target/compiled/project/models/marts/assessments/fct_student_assessment.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "assessments", "tags": "edfi"}, "created_at": 1650510022.1021585, "compiled_sql": "-- student assessment score results\nselect distinct\n    to_hex(md5(cast(coalesce(cast(student_assessments.assessment_reference.assessment_identifier as \n    string\n), '') || '-' || coalesce(cast(student_assessments.assessment_reference.namespace as \n    string\n), '') as \n    string\n)))                                                                           as assessment_key,\n    to_hex(md5(cast(coalesce(cast(student_assessments.student_reference.student_unique_id as \n    string\n), '') || '-' || coalesce(cast(student_assessments.school_year as \n    string\n), '') as \n    string\n)))                                                                           as student_key,\n    to_hex(md5(cast(coalesce(cast(student_school_associations.school_reference.school_id as \n    string\n), '') || '-' || coalesce(cast(student_assessments.school_year as \n    string\n), '') as \n    string\n)))                                                                           as school_key,\n    student_assessments.school_year                                                 as school_year,\n    student_assessments.student_assessment_identifier                               as student_assessment_identifier,\n    student_assessments.administration_date                                         as administration_date,\n    student_assessments.when_assessed_grade_level_descriptor                        as assessed_grade_level,\n    score_results.assessment_reporting_method_descriptor                            as reporting_method,\n    score_results.result_datatype_type_descriptor                                   as student_result_data_type,\n    score_results.result                                                            as student_result\nfrom `gcp-project`.`dev_staging`.`stg_edfi_student_assessments` student_assessments\nleft join unnest(student_assessments.score_results) as score_results\nleft join unnest(student_assessments.performance_levels) as performance_levels\nleft join `gcp-project`.`dev_staging`.`stg_edfi_student_school_associations` student_school_associations\n    on student_assessments.school_year = student_school_associations.school_year\n    and student_assessments.student_reference.student_unique_id = student_school_associations.student_reference.student_unique_id\n    and student_assessments.administration_date >= student_school_associations.entry_date\n    and (\n        student_assessments.administration_date <= student_school_associations.exit_withdraw_date\n        OR student_school_associations.exit_withdraw_date is null\n    )\n\n\nunion all\n\n\n--student assessment performance levels\nselect distinct\n    to_hex(md5(cast(coalesce(cast(student_assessments.assessment_reference.assessment_identifier as \n    string\n), '') || '-' || coalesce(cast(student_assessments.assessment_reference.namespace as \n    string\n), '') as \n    string\n)))                                                                           as assessment_key,\n    to_hex(md5(cast(coalesce(cast(student_assessments.student_reference.student_unique_id as \n    string\n), '') || '-' || coalesce(cast(student_assessments.school_year as \n    string\n), '') as \n    string\n)))                                                                           as student_key,\n    to_hex(md5(cast(coalesce(cast(student_school_associations.school_reference.school_id as \n    string\n), '') || '-' || coalesce(cast(student_assessments.school_year as \n    string\n), '') as \n    string\n)))                                                                           as school_key,\n    student_assessments.school_year                                                 as school_year,\n    student_assessments.student_assessment_identifier                               as student_assessment_identifier,\n    student_assessments.administration_date                                         as administration_date,\n    student_assessments.when_assessed_grade_level_descriptor                        as assessed_grade_level,\n    performance_levels.assessment_reporting_method_descriptor                       as reporting_method,\n    'Performance Level'                                                             as student_result_data_type,\n    performance_levels.performance_level_descriptor                                 as student_result\nfrom `gcp-project`.`dev_staging`.`stg_edfi_student_assessments` student_assessments\nleft join unnest(student_assessments.performance_levels) as performance_levels\nleft join `gcp-project`.`dev_staging`.`stg_edfi_student_school_associations` student_school_associations\n    on student_assessments.school_year = student_school_associations.school_year\n    and student_assessments.student_reference.student_unique_id = student_school_associations.student_reference.student_unique_id\n    and student_assessments.administration_date >= student_school_associations.entry_date\n    and (\n        student_assessments.administration_date <= student_school_associations.exit_withdraw_date\n        OR student_school_associations.exit_withdraw_date is null\n    )\n\n\nunion all\n\n\n-- student objective assessment score results\nselect distinct\n    to_hex(md5(cast(coalesce(cast(student_assessments.assessment_reference.assessment_identifier as \n    string\n), '') || '-' || coalesce(cast(student_assessments.assessment_reference.namespace as \n    string\n), '') || '-' || coalesce(cast(student_objective_assessments.objective_assessment_reference.identification_code as \n    string\n), '') as \n    string\n)))                                                                                as assessment_key,\n    to_hex(md5(cast(coalesce(cast(student_assessments.student_reference.student_unique_id as \n    string\n), '') || '-' || coalesce(cast(student_assessments.school_year as \n    string\n), '') as \n    string\n)))                                                                                as student_key,\n    to_hex(md5(cast(coalesce(cast(student_school_associations.school_reference.school_id as \n    string\n), '') || '-' || coalesce(cast(student_assessments.school_year as \n    string\n), '') as \n    string\n)))                                                                                as school_key,\n    student_assessments.school_year                                                      as school_year,\n    student_assessments.student_assessment_identifier                                    as student_assessment_identifier,\n    student_assessments.administration_date                                              as administration_date,\n    student_assessments.when_assessed_grade_level_descriptor                             as assessed_grade_level,\n    student_objective_assessments_score_results.assessment_reporting_method_descriptor   as reporting_method,\n    student_objective_assessments_score_results.result_datatype_type_descriptor          as student_result_data_type,\n    student_objective_assessments_score_results.result                                   as student_result\nfrom `gcp-project`.`dev_staging`.`stg_edfi_student_assessments` student_assessments\nleft join unnest(student_assessments.student_objective_assessments) as student_objective_assessments\nleft join unnest(student_objective_assessments.score_results) as student_objective_assessments_score_results\nleft join `gcp-project`.`dev_staging`.`stg_edfi_student_school_associations` student_school_associations\n    on student_assessments.school_year = student_school_associations.school_year\n    and student_assessments.student_reference.student_unique_id = student_school_associations.student_reference.student_unique_id\n    and student_assessments.administration_date >= student_school_associations.entry_date\n    and (\n        student_assessments.administration_date <= student_school_associations.exit_withdraw_date\n        OR student_school_associations.exit_withdraw_date is null\n    )\n\n\nunion all\n\n\n-- student objective assessment performance levels\nselect distinct\n    to_hex(md5(cast(coalesce(cast(student_assessments.assessment_reference.assessment_identifier as \n    string\n), '') || '-' || coalesce(cast(student_assessments.assessment_reference.namespace as \n    string\n), '') || '-' || coalesce(cast(student_objective_assessments.objective_assessment_reference.identification_code as \n    string\n), '') as \n    string\n)))                                                                                     as assessment_key,\n    to_hex(md5(cast(coalesce(cast(student_assessments.student_reference.student_unique_id as \n    string\n), '') || '-' || coalesce(cast(student_assessments.school_year as \n    string\n), '') as \n    string\n)))                                                                                     as student_key,\n    to_hex(md5(cast(coalesce(cast(student_school_associations.school_reference.school_id as \n    string\n), '') || '-' || coalesce(cast(student_assessments.school_year as \n    string\n), '') as \n    string\n)))                                                                                     as school_key,\n    student_assessments.school_year                                                           as school_year,\n    student_assessments.student_assessment_identifier                                         as student_assessment_identifier,\n    student_assessments.administration_date                                                   as administration_date,\n    student_assessments.when_assessed_grade_level_descriptor                                  as assessed_grade_level,\n    student_objective_assessments_performance_levels.assessment_reporting_method_descriptor   as reporting_method,\n    'Performance Level'                                                                       as student_result_data_type,\n    student_objective_assessments_performance_levels.performance_level_descriptor             as student_result\nfrom `gcp-project`.`dev_staging`.`stg_edfi_student_assessments` student_assessments\nleft join unnest(student_assessments.student_objective_assessments) as student_objective_assessments\nleft join unnest(student_objective_assessments.performance_levels) as student_objective_assessments_performance_levels\nleft join `gcp-project`.`dev_staging`.`stg_edfi_student_school_associations` student_school_associations\n    on student_assessments.school_year = student_school_associations.school_year\n    and student_assessments.student_reference.student_unique_id = student_school_associations.student_reference.student_unique_id\n    and student_assessments.administration_date >= student_school_associations.entry_date\n    and (\n        student_assessments.administration_date <= student_school_associations.exit_withdraw_date\n        OR student_school_associations.exit_withdraw_date is null\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_assessments`.`fct_student_assessment`"}, "model.project.stg_edfi_student_assessments": {"raw_sql": "{{ retrieve_edfi_records_from_data_lake('base_edfi_student_assessments') }}\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    json_value(data, '$.studentAssessmentIdentifier') as student_assessment_identifier,\n    EXTRACT(DATE from PARSE_TIMESTAMP('%Y-%m-%dT%TZ', json_value(data, '$.administrationDate'))) as administration_date,\n    -- administrationEndDate\n    split(json_value(data, \"$.administrationEnvironmentDescriptor\"), '#')[OFFSET(1)] as administration_environment_descriptor,\n    split(json_value(data, \"$.administrationLanguageDescriptor\"), '#')[OFFSET(1)] as administration_language_descriptor,\n    split(json_value(data, \"$.eventCircumstanceDescriptor\"), '#')[OFFSET(1)] as event_circumstance_descriptor,\n    split(json_value(data, \"$.platformTypeDescriptor\"), '#')[OFFSET(1)] as platform_type_descriptor,\n    split(json_value(data, \"$.reasonNotTestedDescriptor\"), '#')[OFFSET(1)] as reason_not_tested_descriptor,\n    split(json_value(data, \"$.retestIndicatorDescriptor\"), '#')[OFFSET(1)] as retest_indicator_descriptor,\n    split(json_value(data, \"$.whenAssessedGradeLevelDescriptor\"), '#')[OFFSET(1)] as when_assessed_grade_level_descriptor,\n    json_value(data, '$.eventDescription') as event_description,\n    json_value(data, '$.serialNumber') as serial_number,\n    struct(\n        json_value(data, '$.assessmentReference.assessmentIdentifier') as assessment_identifier,\n        json_value(data, '$.assessmentReference.namespace') as namespace\n    ) as assessment_reference,\n    struct(\n        cast(json_value(data, '$.schoolYearTypeReference.schoolYear') as int64) as school_year\n    ) as school_year_type_reference,\n    struct(\n        json_value(data, '$.studentReference.studentUniqueId') as student_unique_id\n    ) as student_reference,\n    array(\n        select as struct \n            split(json_value(score_results, \"$.assessmentReportingMethodDescriptor\"), '#')[OFFSET(1)] as assessment_reporting_method_descriptor,\n            split(json_value(score_results, \"$.resultDatatypeTypeDescriptor\"), '#')[OFFSET(1)] as result_datatype_type_descriptor,\n            json_value(score_results, '$.result') as result\n        from unnest(json_query_array(data, \"$.scoreResults\")) score_results \n    ) as score_results,\n    array(\n        select as struct \n            split(json_value(accommodations, \"$.accommodationDescriptor\"), '#')[OFFSET(1)] as accommodation_descriptor,\n        from unnest(json_query_array(data, \"$.accommodations\")) accommodations \n    ) as accommodations,\n    array(\n        select as struct \n            split(json_value(items, \"$.assessmentItemResultDescriptor\"), '#')[OFFSET(1)] as assessment_item_result_descriptor,\n            split(json_value(items, \"$.responseIndicatorDescriptor\"), '#')[OFFSET(1)] as response_indicator_descriptor,\n            json_value(items, '$.assessmentResponse') as assessment_response,\n            json_value(items, '$.descriptiveFeedback') as descriptive_feedback,\n            cast(json_value(items, '$.rawScoreResult') as float64) as raw_score_result,\n            json_value(items, '$.timeAssessed') as time_assessed\n        from unnest(json_query_array(data, \"$.items\")) items \n    ) as items,\n    array(\n        select as struct \n            split(json_value(performance_levels, \"$.assessmentReportingMethodDescriptor\"), '#')[OFFSET(1)] as assessment_reporting_method_descriptor,\n            split(json_value(performance_levels, \"$.performanceLevelDescriptor\"), '#')[OFFSET(1)] as performance_level_descriptor,\n            cast(json_value(performance_levels, \"$.performanceLevelMet\") as BOOL) as performance_level_met\n        from unnest(json_query_array(data, \"$.performanceLevels\")) performance_levels \n    ) as performance_levels,\n    array(\n            select as struct\n                struct(\n                        json_value(assessments, '$.objectiveAssessmentReference.assessmentIdentifier') as assessment_identifier,\n                        json_value(assessments, '$.objectiveAssessmentReference.identificationCode') as identification_code,\n                        json_value(assessments, '$.objectiveAssessmentReference.namespace') as namespace\n                ) as objective_assessment_reference,\n                array(\n                    select as struct \n                        split(json_value(performance_levels, \"$.assessmentReportingMethodDescriptor\"), '#')[OFFSET(1)] as assessment_reporting_method_descriptor,\n                        split(json_value(performance_levels, \"$.performanceLevelDescriptor\"), '#')[OFFSET(1)] as performance_level_descriptor,\n                        cast(json_value(performance_levels, \"$.performanceLevelMet\") as BOOL) as performance_level_met\n                    from unnest(json_query_array(assessments, \"$.performanceLevels\")) performance_levels \n                ) as performance_levels,\n                array(\n                    select as struct \n                        split(json_value(score_results, \"$.assessmentReportingMethodDescriptor\"), '#')[OFFSET(1)] as assessment_reporting_method_descriptor,\n                        split(json_value(score_results, \"$.resultDatatypeTypeDescriptor\"), '#')[OFFSET(1)] as result_datatype_type_descriptor,\n                        json_value(score_results, '$.result') as result\n                    from unnest(json_query_array(assessments, \"$.scoreResults\")) score_results \n                ) as score_results\n            from unnest(json_query_array(data, \"$.studentObjectiveAssessments\")) assessments\n    ) as student_objective_assessments,\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_student_assessments", "source.project.staging.base_edfi_student_assessments"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_student_assessments"], "unique_id": "model.project.stg_edfi_student_assessments", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "staging/edfi/stg_edfi_student_assessments.sql", "original_file_path": "models/staging/edfi/stg_edfi_student_assessments.sql", "name": "stg_edfi_student_assessments", "alias": "stg_edfi_student_assessments", "checksum": {"name": "sha256", "checksum": "7f615111d1241fb586ba3781f790a5862f163ecf764f21668128e49534e5b4b9"}, "tags": ["edfi"], "refs": [], "sources": [["staging", "base_edfi_student_assessments"], ["staging", "base_edfi_student_assessments"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_student_assessments.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "labels": {"edfi_version": "5_3"}}, "created_at": 1650510021.831335, "compiled_sql": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `gcp-project`.`dev_staging`.`base_edfi_student_assessments`\n    where is_complete_extract IS TRUE\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `gcp-project`.`dev_staging`.`base_edfi_student_assessments` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            OR base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    json_value(data, '$.studentAssessmentIdentifier') as student_assessment_identifier,\n    EXTRACT(DATE from PARSE_TIMESTAMP('%Y-%m-%dT%TZ', json_value(data, '$.administrationDate'))) as administration_date,\n    -- administrationEndDate\n    split(json_value(data, \"$.administrationEnvironmentDescriptor\"), '#')[OFFSET(1)] as administration_environment_descriptor,\n    split(json_value(data, \"$.administrationLanguageDescriptor\"), '#')[OFFSET(1)] as administration_language_descriptor,\n    split(json_value(data, \"$.eventCircumstanceDescriptor\"), '#')[OFFSET(1)] as event_circumstance_descriptor,\n    split(json_value(data, \"$.platformTypeDescriptor\"), '#')[OFFSET(1)] as platform_type_descriptor,\n    split(json_value(data, \"$.reasonNotTestedDescriptor\"), '#')[OFFSET(1)] as reason_not_tested_descriptor,\n    split(json_value(data, \"$.retestIndicatorDescriptor\"), '#')[OFFSET(1)] as retest_indicator_descriptor,\n    split(json_value(data, \"$.whenAssessedGradeLevelDescriptor\"), '#')[OFFSET(1)] as when_assessed_grade_level_descriptor,\n    json_value(data, '$.eventDescription') as event_description,\n    json_value(data, '$.serialNumber') as serial_number,\n    struct(\n        json_value(data, '$.assessmentReference.assessmentIdentifier') as assessment_identifier,\n        json_value(data, '$.assessmentReference.namespace') as namespace\n    ) as assessment_reference,\n    struct(\n        cast(json_value(data, '$.schoolYearTypeReference.schoolYear') as int64) as school_year\n    ) as school_year_type_reference,\n    struct(\n        json_value(data, '$.studentReference.studentUniqueId') as student_unique_id\n    ) as student_reference,\n    array(\n        select as struct \n            split(json_value(score_results, \"$.assessmentReportingMethodDescriptor\"), '#')[OFFSET(1)] as assessment_reporting_method_descriptor,\n            split(json_value(score_results, \"$.resultDatatypeTypeDescriptor\"), '#')[OFFSET(1)] as result_datatype_type_descriptor,\n            json_value(score_results, '$.result') as result\n        from unnest(json_query_array(data, \"$.scoreResults\")) score_results \n    ) as score_results,\n    array(\n        select as struct \n            split(json_value(accommodations, \"$.accommodationDescriptor\"), '#')[OFFSET(1)] as accommodation_descriptor,\n        from unnest(json_query_array(data, \"$.accommodations\")) accommodations \n    ) as accommodations,\n    array(\n        select as struct \n            split(json_value(items, \"$.assessmentItemResultDescriptor\"), '#')[OFFSET(1)] as assessment_item_result_descriptor,\n            split(json_value(items, \"$.responseIndicatorDescriptor\"), '#')[OFFSET(1)] as response_indicator_descriptor,\n            json_value(items, '$.assessmentResponse') as assessment_response,\n            json_value(items, '$.descriptiveFeedback') as descriptive_feedback,\n            cast(json_value(items, '$.rawScoreResult') as float64) as raw_score_result,\n            json_value(items, '$.timeAssessed') as time_assessed\n        from unnest(json_query_array(data, \"$.items\")) items \n    ) as items,\n    array(\n        select as struct \n            split(json_value(performance_levels, \"$.assessmentReportingMethodDescriptor\"), '#')[OFFSET(1)] as assessment_reporting_method_descriptor,\n            split(json_value(performance_levels, \"$.performanceLevelDescriptor\"), '#')[OFFSET(1)] as performance_level_descriptor,\n            cast(json_value(performance_levels, \"$.performanceLevelMet\") as BOOL) as performance_level_met\n        from unnest(json_query_array(data, \"$.performanceLevels\")) performance_levels \n    ) as performance_levels,\n    array(\n            select as struct\n                struct(\n                        json_value(assessments, '$.objectiveAssessmentReference.assessmentIdentifier') as assessment_identifier,\n                        json_value(assessments, '$.objectiveAssessmentReference.identificationCode') as identification_code,\n                        json_value(assessments, '$.objectiveAssessmentReference.namespace') as namespace\n                ) as objective_assessment_reference,\n                array(\n                    select as struct \n                        split(json_value(performance_levels, \"$.assessmentReportingMethodDescriptor\"), '#')[OFFSET(1)] as assessment_reporting_method_descriptor,\n                        split(json_value(performance_levels, \"$.performanceLevelDescriptor\"), '#')[OFFSET(1)] as performance_level_descriptor,\n                        cast(json_value(performance_levels, \"$.performanceLevelMet\") as BOOL) as performance_level_met\n                    from unnest(json_query_array(assessments, \"$.performanceLevels\")) performance_levels \n                ) as performance_levels,\n                array(\n                    select as struct \n                        split(json_value(score_results, \"$.assessmentReportingMethodDescriptor\"), '#')[OFFSET(1)] as assessment_reporting_method_descriptor,\n                        split(json_value(score_results, \"$.resultDatatypeTypeDescriptor\"), '#')[OFFSET(1)] as result_datatype_type_descriptor,\n                        json_value(score_results, '$.result') as result\n                    from unnest(json_query_array(assessments, \"$.scoreResults\")) score_results \n                ) as score_results\n            from unnest(json_query_array(data, \"$.studentObjectiveAssessments\")) assessments\n    ) as student_objective_assessments,\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_staging`.`stg_edfi_student_assessments`"}, "model.project.stg_edfi_student_discipline_incident_associations": {"raw_sql": "{{ retrieve_edfi_records_from_data_lake('base_edfi_student_discipline_incident_associations') }}\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    struct(\n        json_value(data, '$.disciplineIncidentReference.incidentIdentifier') as incident_identifier,\n        json_value(data, '$.disciplineIncidentReference.schoolId') as school_id\n    ) as discipline_incident_reference,\n    split(json_value(data, '$.studentParticipationCodeDescriptor'), '#')[OFFSET(1)] as student_participation_code_descriptor,\n    struct(\n        json_value(data, '$.studentReference.studentUniqueId') as student_unique_id\n    ) as student_reference,\n    array(\n        select as struct \n            split(json_value(behaviors, '$.behaviorDescriptor'), '#')[OFFSET(1)] as behavior_descriptor,\n            json_value(behaviors, \"$.behaviorDetailedDescription\") as behavior_detailed_description\n        from unnest(json_query_array(data, \"$.behaviors\")) behaviors \n    ) as behaviors\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_student_discipline_incident_associations", "source.project.staging.base_edfi_student_discipline_incident_associations"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_student_discipline_incident_associations"], "unique_id": "model.project.stg_edfi_student_discipline_incident_associations", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "staging/edfi/stg_edfi_student_discipline_incident_associations.sql", "original_file_path": "models/staging/edfi/stg_edfi_student_discipline_incident_associations.sql", "name": "stg_edfi_student_discipline_incident_associations", "alias": "stg_edfi_student_discipline_incident_associations", "checksum": {"name": "sha256", "checksum": "e9b4057314286e316bd39a229657544af60d5c137f7f59157468ec276b2fcef5"}, "tags": ["edfi"], "refs": [], "sources": [["staging", "base_edfi_student_discipline_incident_associations"], ["staging", "base_edfi_student_discipline_incident_associations"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_student_discipline_incident_associations.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "labels": {"edfi_version": "5_3"}}, "created_at": 1650510021.836474, "compiled_sql": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `gcp-project`.`dev_staging`.`base_edfi_student_discipline_incident_associations`\n    where is_complete_extract IS TRUE\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `gcp-project`.`dev_staging`.`base_edfi_student_discipline_incident_associations` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            OR base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    struct(\n        json_value(data, '$.disciplineIncidentReference.incidentIdentifier') as incident_identifier,\n        json_value(data, '$.disciplineIncidentReference.schoolId') as school_id\n    ) as discipline_incident_reference,\n    split(json_value(data, '$.studentParticipationCodeDescriptor'), '#')[OFFSET(1)] as student_participation_code_descriptor,\n    struct(\n        json_value(data, '$.studentReference.studentUniqueId') as student_unique_id\n    ) as student_reference,\n    array(\n        select as struct \n            split(json_value(behaviors, '$.behaviorDescriptor'), '#')[OFFSET(1)] as behavior_descriptor,\n            json_value(behaviors, \"$.behaviorDetailedDescription\") as behavior_detailed_description\n        from unnest(json_query_array(data, \"$.behaviors\")) behaviors \n    ) as behaviors\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_staging`.`stg_edfi_student_discipline_incident_associations`"}, "model.project.stg_edfi_student_education_organization_associations": {"raw_sql": "{{ retrieve_edfi_records_from_data_lake('base_edfi_student_education_organization_associations') }}\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    struct(\n        json_value(data, '$.educationOrganizationReference.educationOrganizationId') as education_organization_id\n    ) as education_organization_reference,\n    struct(\n        json_value(data, '$.studentReference.studentUniqueId') as student_unique_id\n    ) as student_reference,\n    array(\n        select as struct \n            LOWER(json_value(email, \"$.electronicMailAddress\")) as address,\n            split(json_value(email, \"$.electronicMailTypeDescriptor\"), '#')[OFFSET(1)] as type_descriptor,\n        from unnest(json_query_array(data, \"$.electronicMails\")) email \n    ) as electronic_mail,\n    split(json_value(data, '$.limitedEnglishProficiencyDescriptor'), '#')[OFFSET(1)] as limited_english_proficiency_descriptor,\n    cast(json_value(data, '$.hispanicLatinoEthnicity') as BOOL) as hispanic_latino_ethnicity,\n    split(json_value(data, '$.sexDescriptor'), '#')[OFFSET(1)] as sex_descriptor,\n    array(\n        select as struct \n            json_value(student_indicators, \"$.indicatorName\") as name,\n            json_value(student_indicators, \"$.designatedBy\") as designated_by,\n            json_value(student_indicators, \"$.indicator\") as indicator,\n            json_value(student_indicators, \"$.indicatorGroup\") as indicator_group,\n        from unnest(json_query_array(data, \"$.studentIndicators\")) student_indicators \n    ) as student_indicators,\n    array(\n        select as struct \n            split(json_value(cohort_years, '$.cohortYearTypeDescriptor'), '#')[OFFSET(1)] as cohort_type_descriptor,\n            split(json_value(cohort_years, '$.termDescriptor'), '#')[OFFSET(1)] as term_descriptor,\n            json_value(cohort_years, \"$.schoolYearTypeReference.schoolYear\") as school_year,\n        from unnest(json_query_array(data, \"$.cohortYears\")) cohort_years \n    ) as cohort_years,\n    array(\n        select as struct \n            split(json_value(disabilities, '$.disabilityDescriptor'), '#')[OFFSET(1)] as disability_descriptor,\n            split(json_value(disabilities, '$.disabilityDeterminationSourceTypeDescriptor'), '#')[OFFSET(1)] as disability_determination_source_type_descriptor,\n            json_value(disabilities, \"$.disabilityDiagnosis\") as disability_diagnosis,\n        from unnest(json_query_array(data, \"$.disabilities\")) disabilities \n    ) as disabilities,\n    array(\n        select as struct \n            split(json_value(languages, '$.languageDescriptor'), '#')[OFFSET(1)] as language_descriptor,\n            array(\n                select as struct \n                    split(json_value(uses, '$.languageUseDescriptor'), '#')[OFFSET(1)] as language_use_descriptor\n                from unnest(json_query_array(languages, '$.uses')) as uses\n            ) as uses\n        from unnest(json_query_array(data, \"$.languages\")) languages \n    ) as languages,\n    array(\n        select as struct \n            split(json_value(races, \"$.raceDescriptor\"), '#')[OFFSET(1)] as race_descriptor\n        from unnest(json_query_array(data, \"$.races\")) races \n    ) as races,\n    array(\n        select as struct\n            json_value(student_identification_codes, \"$.assigningOrganizationIdentificationCode\") as assigning_organization_identification_code,\n            json_value(student_identification_codes, \"$.identificationCode\") as identification_code,\n            split(json_value(student_identification_codes, \"$.studentIdentificationSystemDescriptor\"), '#')[OFFSET(1)] as student_identification_system_descriptor\n        from unnest(json_query_array(data, \"$.studentIdentificationCodes\")) student_identification_codes \n    ) as student_identification_codes\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_student_education_organization_associations", "source.project.staging.base_edfi_student_education_organization_associations"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_student_education_organization_associations"], "unique_id": "model.project.stg_edfi_student_education_organization_associations", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "staging/edfi/stg_edfi_student_education_organization_associations.sql", "original_file_path": "models/staging/edfi/stg_edfi_student_education_organization_associations.sql", "name": "stg_edfi_student_education_organization_associations", "alias": "stg_edfi_student_education_organization_associations", "checksum": {"name": "sha256", "checksum": "11a2e7f9b2c731521a58a4d5079e5aa432c2ba89fcb3d6b17fd2aab4de284b0e"}, "tags": ["edfi"], "refs": [], "sources": [["staging", "base_edfi_student_education_organization_associations"], ["staging", "base_edfi_student_education_organization_associations"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_student_education_organization_associations.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "labels": {"edfi_version": "5_3"}}, "created_at": 1650510021.8408175, "compiled_sql": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `gcp-project`.`dev_staging`.`base_edfi_student_education_organization_associations`\n    where is_complete_extract IS TRUE\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `gcp-project`.`dev_staging`.`base_edfi_student_education_organization_associations` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            OR base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    struct(\n        json_value(data, '$.educationOrganizationReference.educationOrganizationId') as education_organization_id\n    ) as education_organization_reference,\n    struct(\n        json_value(data, '$.studentReference.studentUniqueId') as student_unique_id\n    ) as student_reference,\n    array(\n        select as struct \n            LOWER(json_value(email, \"$.electronicMailAddress\")) as address,\n            split(json_value(email, \"$.electronicMailTypeDescriptor\"), '#')[OFFSET(1)] as type_descriptor,\n        from unnest(json_query_array(data, \"$.electronicMails\")) email \n    ) as electronic_mail,\n    split(json_value(data, '$.limitedEnglishProficiencyDescriptor'), '#')[OFFSET(1)] as limited_english_proficiency_descriptor,\n    cast(json_value(data, '$.hispanicLatinoEthnicity') as BOOL) as hispanic_latino_ethnicity,\n    split(json_value(data, '$.sexDescriptor'), '#')[OFFSET(1)] as sex_descriptor,\n    array(\n        select as struct \n            json_value(student_indicators, \"$.indicatorName\") as name,\n            json_value(student_indicators, \"$.designatedBy\") as designated_by,\n            json_value(student_indicators, \"$.indicator\") as indicator,\n            json_value(student_indicators, \"$.indicatorGroup\") as indicator_group,\n        from unnest(json_query_array(data, \"$.studentIndicators\")) student_indicators \n    ) as student_indicators,\n    array(\n        select as struct \n            split(json_value(cohort_years, '$.cohortYearTypeDescriptor'), '#')[OFFSET(1)] as cohort_type_descriptor,\n            split(json_value(cohort_years, '$.termDescriptor'), '#')[OFFSET(1)] as term_descriptor,\n            json_value(cohort_years, \"$.schoolYearTypeReference.schoolYear\") as school_year,\n        from unnest(json_query_array(data, \"$.cohortYears\")) cohort_years \n    ) as cohort_years,\n    array(\n        select as struct \n            split(json_value(disabilities, '$.disabilityDescriptor'), '#')[OFFSET(1)] as disability_descriptor,\n            split(json_value(disabilities, '$.disabilityDeterminationSourceTypeDescriptor'), '#')[OFFSET(1)] as disability_determination_source_type_descriptor,\n            json_value(disabilities, \"$.disabilityDiagnosis\") as disability_diagnosis,\n        from unnest(json_query_array(data, \"$.disabilities\")) disabilities \n    ) as disabilities,\n    array(\n        select as struct \n            split(json_value(languages, '$.languageDescriptor'), '#')[OFFSET(1)] as language_descriptor,\n            array(\n                select as struct \n                    split(json_value(uses, '$.languageUseDescriptor'), '#')[OFFSET(1)] as language_use_descriptor\n                from unnest(json_query_array(languages, '$.uses')) as uses\n            ) as uses\n        from unnest(json_query_array(data, \"$.languages\")) languages \n    ) as languages,\n    array(\n        select as struct \n            split(json_value(races, \"$.raceDescriptor\"), '#')[OFFSET(1)] as race_descriptor\n        from unnest(json_query_array(data, \"$.races\")) races \n    ) as races,\n    array(\n        select as struct\n            json_value(student_identification_codes, \"$.assigningOrganizationIdentificationCode\") as assigning_organization_identification_code,\n            json_value(student_identification_codes, \"$.identificationCode\") as identification_code,\n            split(json_value(student_identification_codes, \"$.studentIdentificationSystemDescriptor\"), '#')[OFFSET(1)] as student_identification_system_descriptor\n        from unnest(json_query_array(data, \"$.studentIdentificationCodes\")) student_identification_codes \n    ) as student_identification_codes\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_staging`.`stg_edfi_student_education_organization_associations`"}, "model.project.stg_edfi_student_parent_associations": {"raw_sql": "{{ retrieve_edfi_records_from_data_lake('base_edfi_student_parent_associations') }}\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    struct(\n        json_value(data, '$.parentReference.parentUniqueId') as parent_unique_id\n    ) as parent_reference,\n    struct(\n        json_value(data, '$.studentReference.studentUniqueId') as student_unique_id\n    ) as student_reference,\n    cast(json_value(data, '$.contactPriority') as int64) as contact_priority,\n    json_value(data, '$.contactRestrictions') as contact_restrictions,\n    cast(json_value(data, '$.emergencyContactStatus') as BOOL) as emergency_contact_status,\n    cast(json_value(data, '$.legalGuardian') as BOOL) as legal_guardian,\n    cast(json_value(data, '$.livesWith') as BOOL) as lives_with,\n    cast(json_value(data, '$.primaryContactStatus') as BOOL) as primary_contact_status,\n    split(json_value(data, '$.relationDescriptor'), '#')[OFFSET(1)] as relation_descriptor\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_student_parent_associations", "source.project.staging.base_edfi_student_parent_associations"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_student_parent_associations"], "unique_id": "model.project.stg_edfi_student_parent_associations", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "staging/edfi/stg_edfi_student_parent_associations.sql", "original_file_path": "models/staging/edfi/stg_edfi_student_parent_associations.sql", "name": "stg_edfi_student_parent_associations", "alias": "stg_edfi_student_parent_associations", "checksum": {"name": "sha256", "checksum": "2c045c345e95f1b1f11583b1bcfcacbd1f1594c63c0863a379d75e1d138ae47c"}, "tags": ["edfi"], "refs": [], "sources": [["staging", "base_edfi_student_parent_associations"], ["staging", "base_edfi_student_parent_associations"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_student_parent_associations.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "labels": {"edfi_version": "5_3"}}, "created_at": 1650510021.8464935, "compiled_sql": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `gcp-project`.`dev_staging`.`base_edfi_student_parent_associations`\n    where is_complete_extract IS TRUE\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `gcp-project`.`dev_staging`.`base_edfi_student_parent_associations` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            OR base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    struct(\n        json_value(data, '$.parentReference.parentUniqueId') as parent_unique_id\n    ) as parent_reference,\n    struct(\n        json_value(data, '$.studentReference.studentUniqueId') as student_unique_id\n    ) as student_reference,\n    cast(json_value(data, '$.contactPriority') as int64) as contact_priority,\n    json_value(data, '$.contactRestrictions') as contact_restrictions,\n    cast(json_value(data, '$.emergencyContactStatus') as BOOL) as emergency_contact_status,\n    cast(json_value(data, '$.legalGuardian') as BOOL) as legal_guardian,\n    cast(json_value(data, '$.livesWith') as BOOL) as lives_with,\n    cast(json_value(data, '$.primaryContactStatus') as BOOL) as primary_contact_status,\n    split(json_value(data, '$.relationDescriptor'), '#')[OFFSET(1)] as relation_descriptor\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_staging`.`stg_edfi_student_parent_associations`"}, "model.project.stg_edfi_student_program_associations": {"raw_sql": "{{ retrieve_edfi_records_from_data_lake('base_edfi_student_program_associations') }}\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    parse_date('%Y-%m-%d', json_value(data, \"$.beginDate\")) as begin_date,\n    parse_date('%Y-%m-%d', json_value(data, \"$.endDate\")) as end_date,\n    struct(\n        json_value(data, '$.educationOrganizationReference.educationOrganizationId') as education_organization_id\n    ) as education_organization_reference,\n    split(json_value(data, \"$.reasonExitedDescriptor\"), '#')[OFFSET(1)] as reason_exited_descriptor,\n    cast(json_value(data, '$.servedOutsideOfRegularSession') as BOOL) served_outside_of_regular_session,\n    struct(\n        json_value(data, '$.programReference.educationOrganizationId') as education_organization_id,\n        json_value(data, '$.programReference.programName') as program_name,\n        split(json_value(data, \"$.programReference.programTypeDescriptor\"), '#')[OFFSET(1)] as program_type_descriptor\n    ) as program_reference,\n    struct(\n        json_value(data, '$.studentReference.studentUniqueId') as student_unique_id\n    ) as student_reference,\n    struct(\n        split(json_value(data, \"$.participationStatus.participationStatusDescriptor\"), '#')[OFFSET(1)] as participation_status_descriptor,\n        json_value(data, '$.participationStatus.designatedBy') as designated_by,\n        parse_date('%Y-%m-%d', json_value(data, \"$.participationStatus.statusBeginDate\")) as status_begin_date,\n        parse_date('%Y-%m-%d', json_value(data, \"$.participationStatus.statusEndDate\")) as status_end_date\n    ) as participation_status,\n    array(\n        select as struct \n            split(json_value(statuses, \"$.participationStatusDescriptor\"), '#')[OFFSET(1)] as participation_status_descriptor,\n            json_value(statuses, '$.designatedBy') as designated_by,\n            parse_date('%Y-%m-%d', json_value(statuses, \"$.statusBeginDate\")) as status_begin_date,\n            parse_date('%Y-%m-%d', json_value(statuses, \"$.statusEndDate\")) as status_end_date\n        from unnest(json_query_array(data, \"$.programParticipationStatuses\")) statuses \n    ) as program_participation_statuses,\n    array(\n        select as struct \n            split(json_value(services, \"$.serviceDescriptor\"), '#')[OFFSET(1)] as service_descriptor,\n            cast(json_value(services, '$.primaryIndicator') as BOOL) primary_indicator,\n            parse_date('%Y-%m-%d', json_value(services, \"$.statusBeginDate\")) as status_begin_date,\n            parse_date('%Y-%m-%d', json_value(services, \"$.statusEndDate\")) as status_end_date\n        from unnest(json_query_array(data, \"$.services\")) services \n    ) as services\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_student_program_associations", "source.project.staging.base_edfi_student_program_associations"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_student_program_associations"], "unique_id": "model.project.stg_edfi_student_program_associations", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "staging/edfi/stg_edfi_student_program_associations.sql", "original_file_path": "models/staging/edfi/stg_edfi_student_program_associations.sql", "name": "stg_edfi_student_program_associations", "alias": "stg_edfi_student_program_associations", "checksum": {"name": "sha256", "checksum": "0510232613335f391d1ba5ae0625c52ce24da1ef07e3a7eb456df383553b3b4a"}, "tags": ["edfi"], "refs": [], "sources": [["staging", "base_edfi_student_program_associations"], ["staging", "base_edfi_student_program_associations"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_student_program_associations.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "labels": {"edfi_version": "5_3"}}, "created_at": 1650510021.8510492, "compiled_sql": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `gcp-project`.`dev_staging`.`base_edfi_student_program_associations`\n    where is_complete_extract IS TRUE\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `gcp-project`.`dev_staging`.`base_edfi_student_program_associations` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            OR base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    parse_date('%Y-%m-%d', json_value(data, \"$.beginDate\")) as begin_date,\n    parse_date('%Y-%m-%d', json_value(data, \"$.endDate\")) as end_date,\n    struct(\n        json_value(data, '$.educationOrganizationReference.educationOrganizationId') as education_organization_id\n    ) as education_organization_reference,\n    split(json_value(data, \"$.reasonExitedDescriptor\"), '#')[OFFSET(1)] as reason_exited_descriptor,\n    cast(json_value(data, '$.servedOutsideOfRegularSession') as BOOL) served_outside_of_regular_session,\n    struct(\n        json_value(data, '$.programReference.educationOrganizationId') as education_organization_id,\n        json_value(data, '$.programReference.programName') as program_name,\n        split(json_value(data, \"$.programReference.programTypeDescriptor\"), '#')[OFFSET(1)] as program_type_descriptor\n    ) as program_reference,\n    struct(\n        json_value(data, '$.studentReference.studentUniqueId') as student_unique_id\n    ) as student_reference,\n    struct(\n        split(json_value(data, \"$.participationStatus.participationStatusDescriptor\"), '#')[OFFSET(1)] as participation_status_descriptor,\n        json_value(data, '$.participationStatus.designatedBy') as designated_by,\n        parse_date('%Y-%m-%d', json_value(data, \"$.participationStatus.statusBeginDate\")) as status_begin_date,\n        parse_date('%Y-%m-%d', json_value(data, \"$.participationStatus.statusEndDate\")) as status_end_date\n    ) as participation_status,\n    array(\n        select as struct \n            split(json_value(statuses, \"$.participationStatusDescriptor\"), '#')[OFFSET(1)] as participation_status_descriptor,\n            json_value(statuses, '$.designatedBy') as designated_by,\n            parse_date('%Y-%m-%d', json_value(statuses, \"$.statusBeginDate\")) as status_begin_date,\n            parse_date('%Y-%m-%d', json_value(statuses, \"$.statusEndDate\")) as status_end_date\n        from unnest(json_query_array(data, \"$.programParticipationStatuses\")) statuses \n    ) as program_participation_statuses,\n    array(\n        select as struct \n            split(json_value(services, \"$.serviceDescriptor\"), '#')[OFFSET(1)] as service_descriptor,\n            cast(json_value(services, '$.primaryIndicator') as BOOL) primary_indicator,\n            parse_date('%Y-%m-%d', json_value(services, \"$.statusBeginDate\")) as status_begin_date,\n            parse_date('%Y-%m-%d', json_value(services, \"$.statusEndDate\")) as status_end_date\n        from unnest(json_query_array(data, \"$.services\")) services \n    ) as services\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_staging`.`stg_edfi_student_program_associations`"}, "model.project.stg_edfi_student_school_associations": {"raw_sql": "{{ retrieve_edfi_records_from_data_lake('base_edfi_student_school_associations') }}\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    json_value(data, '$.id') as id,\n    struct(\n        json_value(data, '$.schoolReference.schoolId') as school_id\n    ) as school_reference,\n    struct(\n        json_value(data, '$.studentReference.studentUniqueId') as student_unique_id\n    ) as student_reference,\n    struct(\n        cast(json_value(data, '$.schoolYearTypeReference.schoolYear') as int64) as school_year\n    ) as school_year_type_reference,\n    split(json_value(data, '$.entryTypeDescriptor'), '#')[OFFSET(1)] as entry_type_descriptor,\n    split(json_value(data, '$.entryGradeLevelDescriptor'), '#')[OFFSET(1)] as entry_grade_level_descriptor,\n    parse_date('%Y-%m-%d', json_value(data, '$.entryDate')) as entry_date,\n    parse_date('%Y-%m-%d', json_value(data, '$.exitWithdrawDate')) as exit_withdraw_date,\n    split(json_value(data, '$.exitWithdrawTypeDescriptor'), '#')[OFFSET(1)] as exit_withdraw_type_descriptor,\n    cast(json_value(data, '$.fullTimeEquivalency') as int64) as full_time_equivalency,\n    cast(json_value(data, '$.primarySchool') as BOOL) as primary_school,\n    cast(json_value(data, '$.repeatGradeIndicator') as BOOL) as repeat_grade_indicator,\n    cast(json_value(data, '$.schoolChoiceTransfer') as BOOL) as school_choice_transfer,\n    cast(json_value(data, '$.termCompletionIndicator') as BOOL) as term_completion_indicator\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_student_school_associations", "source.project.staging.base_edfi_student_school_associations"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_student_school_associations"], "unique_id": "model.project.stg_edfi_student_school_associations", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "staging/edfi/stg_edfi_student_school_associations.sql", "original_file_path": "models/staging/edfi/stg_edfi_student_school_associations.sql", "name": "stg_edfi_student_school_associations", "alias": "stg_edfi_student_school_associations", "checksum": {"name": "sha256", "checksum": "b0718d97ed5154b1afdbd3c03c28dcfb23c8c8098b5f2e974a453418b9b529e2"}, "tags": ["edfi"], "refs": [], "sources": [["staging", "base_edfi_student_school_associations"], ["staging", "base_edfi_student_school_associations"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_student_school_associations.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "labels": {"edfi_version": "5_3"}}, "created_at": 1650510021.8553922, "compiled_sql": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `gcp-project`.`dev_staging`.`base_edfi_student_school_associations`\n    where is_complete_extract IS TRUE\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `gcp-project`.`dev_staging`.`base_edfi_student_school_associations` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            OR base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    json_value(data, '$.id') as id,\n    struct(\n        json_value(data, '$.schoolReference.schoolId') as school_id\n    ) as school_reference,\n    struct(\n        json_value(data, '$.studentReference.studentUniqueId') as student_unique_id\n    ) as student_reference,\n    struct(\n        cast(json_value(data, '$.schoolYearTypeReference.schoolYear') as int64) as school_year\n    ) as school_year_type_reference,\n    split(json_value(data, '$.entryTypeDescriptor'), '#')[OFFSET(1)] as entry_type_descriptor,\n    split(json_value(data, '$.entryGradeLevelDescriptor'), '#')[OFFSET(1)] as entry_grade_level_descriptor,\n    parse_date('%Y-%m-%d', json_value(data, '$.entryDate')) as entry_date,\n    parse_date('%Y-%m-%d', json_value(data, '$.exitWithdrawDate')) as exit_withdraw_date,\n    split(json_value(data, '$.exitWithdrawTypeDescriptor'), '#')[OFFSET(1)] as exit_withdraw_type_descriptor,\n    cast(json_value(data, '$.fullTimeEquivalency') as int64) as full_time_equivalency,\n    cast(json_value(data, '$.primarySchool') as BOOL) as primary_school,\n    cast(json_value(data, '$.repeatGradeIndicator') as BOOL) as repeat_grade_indicator,\n    cast(json_value(data, '$.schoolChoiceTransfer') as BOOL) as school_choice_transfer,\n    cast(json_value(data, '$.termCompletionIndicator') as BOOL) as term_completion_indicator\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_staging`.`stg_edfi_student_school_associations`"}, "model.project.stg_edfi_student_school_attendance_events": {"raw_sql": "{{ retrieve_edfi_records_from_data_lake('base_edfi_student_school_attendance_events') }}\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    struct(\n        json_value(data, '$.studentReference.studentUniqueId') as student_unique_id\n    ) as student_reference,\n    parse_date('%Y-%m-%d', json_value(data, '$.eventDate')) as event_date,\n    struct(\n        json_value(data, '$.schoolReference.schoolId') as school_id\n    ) as school_reference,\n    struct(\n        json_value(data, '$.sessionReference.schoolId') as school_id,\n        cast(json_value(data, '$.sessionReference.schoolYear') as int64) as school_year,\n        json_value(data, '$.sessionReference.sessionName') as session_name\n    ) as session_reference,\n    json_value(data, '$.arrivalTime') as arrival_time,\n    json_value(data, '$.attendanceEventReason') as attendance_event_reason,\n    json_value(data, '$.departureTime') as departure_time,\n    cast(json_value(data, '$.eventDuration') as float64) as event_duration,\n    cast(json_value(data, '$.schoolAttendanceDuration') as float64) as school_attendance_duration,\n    split(json_value(data, '$.attendanceEventCategoryDescriptor'), '#')[OFFSET(1)] as attendance_event_category_descriptor,\n    split(json_value(data, '$.educationalEnvironmentDescriptor'), '#')[OFFSET(1)] as educational_environment_descriptor,\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_student_school_attendance_events", "source.project.staging.base_edfi_student_school_attendance_events"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_student_school_attendance_events"], "unique_id": "model.project.stg_edfi_student_school_attendance_events", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "staging/edfi/stg_edfi_student_school_attendance_events.sql", "original_file_path": "models/staging/edfi/stg_edfi_student_school_attendance_events.sql", "name": "stg_edfi_student_school_attendance_events", "alias": "stg_edfi_student_school_attendance_events", "checksum": {"name": "sha256", "checksum": "c6155d3cfc627425a9f3a586c63e33df4ebe24fcc90c9e7eb1a3ac7555664619"}, "tags": ["edfi"], "refs": [], "sources": [["staging", "base_edfi_student_school_attendance_events"], ["staging", "base_edfi_student_school_attendance_events"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_student_school_attendance_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "labels": {"edfi_version": "5_3"}}, "created_at": 1650510021.8601854, "compiled_sql": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `gcp-project`.`dev_staging`.`base_edfi_student_school_attendance_events`\n    where is_complete_extract IS TRUE\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `gcp-project`.`dev_staging`.`base_edfi_student_school_attendance_events` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            OR base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    struct(\n        json_value(data, '$.studentReference.studentUniqueId') as student_unique_id\n    ) as student_reference,\n    parse_date('%Y-%m-%d', json_value(data, '$.eventDate')) as event_date,\n    struct(\n        json_value(data, '$.schoolReference.schoolId') as school_id\n    ) as school_reference,\n    struct(\n        json_value(data, '$.sessionReference.schoolId') as school_id,\n        cast(json_value(data, '$.sessionReference.schoolYear') as int64) as school_year,\n        json_value(data, '$.sessionReference.sessionName') as session_name\n    ) as session_reference,\n    json_value(data, '$.arrivalTime') as arrival_time,\n    json_value(data, '$.attendanceEventReason') as attendance_event_reason,\n    json_value(data, '$.departureTime') as departure_time,\n    cast(json_value(data, '$.eventDuration') as float64) as event_duration,\n    cast(json_value(data, '$.schoolAttendanceDuration') as float64) as school_attendance_duration,\n    split(json_value(data, '$.attendanceEventCategoryDescriptor'), '#')[OFFSET(1)] as attendance_event_category_descriptor,\n    split(json_value(data, '$.educationalEnvironmentDescriptor'), '#')[OFFSET(1)] as educational_environment_descriptor,\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_staging`.`stg_edfi_student_school_attendance_events`"}, "model.project.stg_edfi_student_section_associations": {"raw_sql": "{{ retrieve_edfi_records_from_data_lake('base_edfi_student_section_associations') }}\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    struct(\n        json_value(data, '$.studentReference.studentUniqueId') as student_unique_id\n    ) as student_reference,\n    struct(\n        json_value(data, '$.sectionReference.localCourseCode') as local_course_code,\n        json_value(data, '$.sectionReference.schoolId') as school_id,\n        cast(json_value(data, '$.sectionReference.schoolYear') as int64) as school_year,\n        json_value(data, '$.sectionReference.sectionIdentifier') as section_identifier,\n        json_value(data, '$.sectionReference.sessionName') as session_name\n    ) as section_reference,\n    parse_date('%Y-%m-%d', json_value(data, \"$.beginDate\")) as begin_date,\n    parse_date('%Y-%m-%d', json_value(data, \"$.endDate\")) as end_date,\n    split(json_value(data, \"$.attemptStatusDescriptor\"), '#')[OFFSET(1)] as attempt_status_descriptor,\n    cast(json_value(data, '$.homeroomIndicator') as BOOL) as homeroom_indicator,\n    split(json_value(data, \"$.repeatIdentifierDescriptor\"), '#')[OFFSET(1)] as repeat_identifier_descriptor,\n    cast(json_value(data, '$.teacherStudentDataLinkExclusion') as BOOL) as teacher_student_data_link_exclusion\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_student_section_associations", "source.project.staging.base_edfi_student_section_associations"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_student_section_associations"], "unique_id": "model.project.stg_edfi_student_section_associations", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "staging/edfi/stg_edfi_student_section_associations.sql", "original_file_path": "models/staging/edfi/stg_edfi_student_section_associations.sql", "name": "stg_edfi_student_section_associations", "alias": "stg_edfi_student_section_associations", "checksum": {"name": "sha256", "checksum": "c952e5173f000f946c0ab8a278b83027d176a5449696d6ee8e81e03c22ac81a4"}, "tags": ["edfi"], "refs": [], "sources": [["staging", "base_edfi_student_section_associations"], ["staging", "base_edfi_student_section_associations"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_student_section_associations.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "labels": {"edfi_version": "5_3"}}, "created_at": 1650510021.8647523, "compiled_sql": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `gcp-project`.`dev_staging`.`base_edfi_student_section_associations`\n    where is_complete_extract IS TRUE\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `gcp-project`.`dev_staging`.`base_edfi_student_section_associations` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            OR base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    struct(\n        json_value(data, '$.studentReference.studentUniqueId') as student_unique_id\n    ) as student_reference,\n    struct(\n        json_value(data, '$.sectionReference.localCourseCode') as local_course_code,\n        json_value(data, '$.sectionReference.schoolId') as school_id,\n        cast(json_value(data, '$.sectionReference.schoolYear') as int64) as school_year,\n        json_value(data, '$.sectionReference.sectionIdentifier') as section_identifier,\n        json_value(data, '$.sectionReference.sessionName') as session_name\n    ) as section_reference,\n    parse_date('%Y-%m-%d', json_value(data, \"$.beginDate\")) as begin_date,\n    parse_date('%Y-%m-%d', json_value(data, \"$.endDate\")) as end_date,\n    split(json_value(data, \"$.attemptStatusDescriptor\"), '#')[OFFSET(1)] as attempt_status_descriptor,\n    cast(json_value(data, '$.homeroomIndicator') as BOOL) as homeroom_indicator,\n    split(json_value(data, \"$.repeatIdentifierDescriptor\"), '#')[OFFSET(1)] as repeat_identifier_descriptor,\n    cast(json_value(data, '$.teacherStudentDataLinkExclusion') as BOOL) as teacher_student_data_link_exclusion\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_staging`.`stg_edfi_student_section_associations`"}, "model.project.stg_edfi_student_section_attendance_events": {"raw_sql": "{{ retrieve_edfi_records_from_data_lake('base_edfi_student_section_attendance_events') }}\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    struct(\n        json_value(data, '$.studentReference.studentUniqueId') as student_unique_id\n    ) as student_reference,\n    parse_date('%Y-%m-%d', json_value(data, '$.eventDate')) as event_date,\n    struct(\n        json_value(data, '$.sectionReference.localCourseCode') as local_course_code,\n        json_value(data, '$.sectionReference.schoolId') as school_id,\n        cast(json_value(data, '$.sectionReference.schoolYear') as int64) as school_year,\n        json_value(data, '$.sectionReference.sectionIdentifier') as section_identifier,\n        json_value(data, '$.sectionReference.sessionName') as session_name\n    ) as section_reference,\n    array(\n        select as struct \n            struct(\n                json_value(class_periods, \"$.classPeriodReference.classPeriodName\") as class_period_name,\n                json_value(class_periods, '$.classPeriodReference.schoolId') as school_id\n            ) as class_period_reference\n        from unnest(json_query_array(data, \"$.classPeriods\")) class_periods \n    ) as class_periods,\n    json_value(data, '$.arrivalTime') as arrival_time,\n    json_value(data, '$.departureTime') as departure_time,\n    json_value(data, '$.attendanceEventReason') as attendance_event_reason,\n    cast(json_value(data, '$.eventDuration') as float64) as event_duration,\n    cast(json_value(data, '$.sectionAttendanceDuration') as float64) as section_attendance_duration,\n    split(json_value(data, '$.attendanceEventCategoryDescriptor'), '#')[OFFSET(1)] as attendance_event_category_descriptor,\n    split(json_value(data, '$.educationalEnvironmentDescriptor'), '#')[OFFSET(1)] as educational_environment_descriptor,\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_student_section_attendance_events", "source.project.staging.base_edfi_student_section_attendance_events"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_student_section_attendance_events"], "unique_id": "model.project.stg_edfi_student_section_attendance_events", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "staging/edfi/stg_edfi_student_section_attendance_events.sql", "original_file_path": "models/staging/edfi/stg_edfi_student_section_attendance_events.sql", "name": "stg_edfi_student_section_attendance_events", "alias": "stg_edfi_student_section_attendance_events", "checksum": {"name": "sha256", "checksum": "e7afbb788901f3100cf64b02cfa22b6f10a8d763c897a8b66654f01fea31cc74"}, "tags": ["edfi"], "refs": [], "sources": [["staging", "base_edfi_student_section_attendance_events"], ["staging", "base_edfi_student_section_attendance_events"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_student_section_attendance_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "labels": {"edfi_version": "5_3"}}, "created_at": 1650510021.869112, "compiled_sql": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `gcp-project`.`dev_staging`.`base_edfi_student_section_attendance_events`\n    where is_complete_extract IS TRUE\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `gcp-project`.`dev_staging`.`base_edfi_student_section_attendance_events` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            OR base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    struct(\n        json_value(data, '$.studentReference.studentUniqueId') as student_unique_id\n    ) as student_reference,\n    parse_date('%Y-%m-%d', json_value(data, '$.eventDate')) as event_date,\n    struct(\n        json_value(data, '$.sectionReference.localCourseCode') as local_course_code,\n        json_value(data, '$.sectionReference.schoolId') as school_id,\n        cast(json_value(data, '$.sectionReference.schoolYear') as int64) as school_year,\n        json_value(data, '$.sectionReference.sectionIdentifier') as section_identifier,\n        json_value(data, '$.sectionReference.sessionName') as session_name\n    ) as section_reference,\n    array(\n        select as struct \n            struct(\n                json_value(class_periods, \"$.classPeriodReference.classPeriodName\") as class_period_name,\n                json_value(class_periods, '$.classPeriodReference.schoolId') as school_id\n            ) as class_period_reference\n        from unnest(json_query_array(data, \"$.classPeriods\")) class_periods \n    ) as class_periods,\n    json_value(data, '$.arrivalTime') as arrival_time,\n    json_value(data, '$.departureTime') as departure_time,\n    json_value(data, '$.attendanceEventReason') as attendance_event_reason,\n    cast(json_value(data, '$.eventDuration') as float64) as event_duration,\n    cast(json_value(data, '$.sectionAttendanceDuration') as float64) as section_attendance_duration,\n    split(json_value(data, '$.attendanceEventCategoryDescriptor'), '#')[OFFSET(1)] as attendance_event_category_descriptor,\n    split(json_value(data, '$.educationalEnvironmentDescriptor'), '#')[OFFSET(1)] as educational_environment_descriptor,\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_staging`.`stg_edfi_student_section_attendance_events`"}, "model.project.stg_edfi_student_special_education_program_associations": {"raw_sql": "{{ retrieve_edfi_records_from_data_lake('base_edfi_student_special_education_program_associations') }}\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    parse_date('%Y-%m-%d', json_value(data, \"$.beginDate\")) as begin_date,\n    parse_date('%Y-%m-%d', json_value(data, \"$.endDate\")) as end_date,\n    parse_date('%Y-%m-%d', json_value(data, \"$.iepBeginDate\")) as iep_begin_date,\n    parse_date('%Y-%m-%d', json_value(data, \"$.iepEndDate\")) as iep_end_date,\n    parse_date('%Y-%m-%d', json_value(data, \"$.iepReviewDate\")) as iep_review_date,\n    parse_date('%Y-%m-%d', json_value(data, \"$.lastEvaluationDate\")) as last_evaluation_date,\n    cast(json_value(data, '$.ideaEligibility') as BOOL) idea_eligibility,\n    cast(json_value(data, '$.medicallyFragile') as BOOL) medically_fragile,\n    cast(json_value(data, '$.multiplyDisabled') as BOOL) multiply_disabled,\n    cast(json_value(data, '$.servedOutsideOfRegularSession') as BOOL) served_outside_of_regular_session,\n    split(json_value(data, \"$.reasonExitedDescriptor\"), '#')[OFFSET(1)] as reason_exited_descriptor,\n    split(json_value(data, \"$.specialEducationSettingDescriptor\"), '#')[OFFSET(1)] as special_education_setting_descriptor,\n    cast(json_value(data, '$.schoolHoursPerWeek') as float64) as school_hours_per_week,\n    cast(json_value(data, '$.specialEducationHoursPerWeek') as float64) as special_education_hours_per_week,\n    struct(\n        json_value(data, '$.educationOrganizationReference.educationOrganizationId') as education_organization_id\n    ) as education_organization_reference,\n    struct(\n        json_value(data, '$.programReference.educationOrganizationId') as education_organization_id,\n        json_value(data, '$.programReference.programName') as program_name,\n        split(json_value(data, \"$.programReference.programTypeDescriptor\"), '#')[OFFSET(1)] as program_type_descriptor\n    ) as program_reference,\n    struct(\n        json_value(data, '$.studentReference.studentUniqueId') as student_unique_id\n    ) as student_reference,\n    array(\n        select as struct \n            split(json_value(disabilities, \"$.disabilityDescriptor\"), '#')[OFFSET(1)] as disability_descriptor,\n            split(json_value(disabilities, \"$.disabilityDeterminationSourceTypeDescriptor\"), '#')[OFFSET(1)] as disability_determination_source_type_descriptor,\n            json_value(disabilities, '$.disabilityDiagnosis') as disability_diagnosis,\n            cast(json_value(disabilities, '$.orderOfDisability') as int64) as order_of_disability\n            -- designations array\n        from unnest(json_query_array(data, \"$.disabilities\")) disabilities \n    ) as disabilities,\n    struct(\n        split(json_value(data, \"$.participationStatusDescriptor\"), '#')[OFFSET(1)] as participation_status_descriptor,\n        json_value(data, '$.designatedBy') as designated_by,\n        parse_date('%Y-%m-%d', json_value(data, \"$.statusBeginDate\")) as status_begin_date,\n        parse_date('%Y-%m-%d', json_value(data, \"$.statusEndDate\")) as status_end_date\n    ) as participation_status,\n    array(\n        select as struct \n            split(json_value(statuses, \"$.participationStatusDescriptor\"), '#')[OFFSET(1)] as participation_status_descriptor,\n            json_value(statuses, '$.designatedBy') as designated_by,\n            parse_date('%Y-%m-%d', json_value(statuses, \"$.statusBeginDate\")) as status_begin_date,\n            parse_date('%Y-%m-%d', json_value(statuses, \"$.statusEndDate\")) as status_end_date\n        from unnest(json_query_array(data, \"$.programParticipationStatuses\")) statuses \n    ) as program_participation_statuses,\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_student_special_education_program_associations", "source.project.staging.base_edfi_student_special_education_program_associations"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_student_special_education_program_associations"], "unique_id": "model.project.stg_edfi_student_special_education_program_associations", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "staging/edfi/stg_edfi_student_special_education_program_associations.sql", "original_file_path": "models/staging/edfi/stg_edfi_student_special_education_program_associations.sql", "name": "stg_edfi_student_special_education_program_associations", "alias": "stg_edfi_student_special_education_program_associations", "checksum": {"name": "sha256", "checksum": "7769da1cc82981a1f050a09a325139f2e7eab0d70debb2158c62e44d7cf347a1"}, "tags": ["edfi"], "refs": [], "sources": [["staging", "base_edfi_student_special_education_program_associations"], ["staging", "base_edfi_student_special_education_program_associations"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_student_special_education_program_associations.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "labels": {"edfi_version": "5_3"}}, "created_at": 1650510021.8744204, "compiled_sql": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `gcp-project`.`dev_staging`.`base_edfi_student_special_education_program_associations`\n    where is_complete_extract IS TRUE\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `gcp-project`.`dev_staging`.`base_edfi_student_special_education_program_associations` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            OR base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    parse_date('%Y-%m-%d', json_value(data, \"$.beginDate\")) as begin_date,\n    parse_date('%Y-%m-%d', json_value(data, \"$.endDate\")) as end_date,\n    parse_date('%Y-%m-%d', json_value(data, \"$.iepBeginDate\")) as iep_begin_date,\n    parse_date('%Y-%m-%d', json_value(data, \"$.iepEndDate\")) as iep_end_date,\n    parse_date('%Y-%m-%d', json_value(data, \"$.iepReviewDate\")) as iep_review_date,\n    parse_date('%Y-%m-%d', json_value(data, \"$.lastEvaluationDate\")) as last_evaluation_date,\n    cast(json_value(data, '$.ideaEligibility') as BOOL) idea_eligibility,\n    cast(json_value(data, '$.medicallyFragile') as BOOL) medically_fragile,\n    cast(json_value(data, '$.multiplyDisabled') as BOOL) multiply_disabled,\n    cast(json_value(data, '$.servedOutsideOfRegularSession') as BOOL) served_outside_of_regular_session,\n    split(json_value(data, \"$.reasonExitedDescriptor\"), '#')[OFFSET(1)] as reason_exited_descriptor,\n    split(json_value(data, \"$.specialEducationSettingDescriptor\"), '#')[OFFSET(1)] as special_education_setting_descriptor,\n    cast(json_value(data, '$.schoolHoursPerWeek') as float64) as school_hours_per_week,\n    cast(json_value(data, '$.specialEducationHoursPerWeek') as float64) as special_education_hours_per_week,\n    struct(\n        json_value(data, '$.educationOrganizationReference.educationOrganizationId') as education_organization_id\n    ) as education_organization_reference,\n    struct(\n        json_value(data, '$.programReference.educationOrganizationId') as education_organization_id,\n        json_value(data, '$.programReference.programName') as program_name,\n        split(json_value(data, \"$.programReference.programTypeDescriptor\"), '#')[OFFSET(1)] as program_type_descriptor\n    ) as program_reference,\n    struct(\n        json_value(data, '$.studentReference.studentUniqueId') as student_unique_id\n    ) as student_reference,\n    array(\n        select as struct \n            split(json_value(disabilities, \"$.disabilityDescriptor\"), '#')[OFFSET(1)] as disability_descriptor,\n            split(json_value(disabilities, \"$.disabilityDeterminationSourceTypeDescriptor\"), '#')[OFFSET(1)] as disability_determination_source_type_descriptor,\n            json_value(disabilities, '$.disabilityDiagnosis') as disability_diagnosis,\n            cast(json_value(disabilities, '$.orderOfDisability') as int64) as order_of_disability\n            -- designations array\n        from unnest(json_query_array(data, \"$.disabilities\")) disabilities \n    ) as disabilities,\n    struct(\n        split(json_value(data, \"$.participationStatusDescriptor\"), '#')[OFFSET(1)] as participation_status_descriptor,\n        json_value(data, '$.designatedBy') as designated_by,\n        parse_date('%Y-%m-%d', json_value(data, \"$.statusBeginDate\")) as status_begin_date,\n        parse_date('%Y-%m-%d', json_value(data, \"$.statusEndDate\")) as status_end_date\n    ) as participation_status,\n    array(\n        select as struct \n            split(json_value(statuses, \"$.participationStatusDescriptor\"), '#')[OFFSET(1)] as participation_status_descriptor,\n            json_value(statuses, '$.designatedBy') as designated_by,\n            parse_date('%Y-%m-%d', json_value(statuses, \"$.statusBeginDate\")) as status_begin_date,\n            parse_date('%Y-%m-%d', json_value(statuses, \"$.statusEndDate\")) as status_end_date\n        from unnest(json_query_array(data, \"$.programParticipationStatuses\")) statuses \n    ) as program_participation_statuses,\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_staging`.`stg_edfi_student_special_education_program_associations`"}, "model.project.stg_edfi_students": {"raw_sql": "{{ retrieve_edfi_records_from_data_lake('base_edfi_students') }}\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    json_value(data, '$.studentUniqueId') as student_unique_id,\n    json_value(data, '$.lastSurname') as last_surname,\n    json_value(data, '$.middleName') as middle_name,\n    json_value(data, '$.firstName') as first_name,\n    json_value(data, '$.generationCodeSuffix') as generation_code_suffix,\n    parse_date('%Y-%m-%d', json_value(data, '$.birthDate')) as birth_date,\n    json_value(data, '$.birthCity') as birth_city,\n    split(json_value(data, \"$.birthCountryDescriptor\"), '#')[OFFSET(1)] as birth_country_descriptor,\n    json_value(data, '$.birthInternationalProvince') as birth_international_province,\n    struct(\n        json_value(data, '$.personReference.personId') as person_id,\n        split(json_value(data, \"$.personReference.sourceSystemDescriptor\"), '#')[OFFSET(1)] as source_system_descriptor\n    ) as person_reference,\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_students", "source.project.staging.base_edfi_students"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_students"], "unique_id": "model.project.stg_edfi_students", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "staging/edfi/stg_edfi_students.sql", "original_file_path": "models/staging/edfi/stg_edfi_students.sql", "name": "stg_edfi_students", "alias": "stg_edfi_students", "checksum": {"name": "sha256", "checksum": "38e322dada3789164714ce78b8f2507ee2fb9c4574b87899c908856ea36b8126"}, "tags": ["edfi"], "refs": [], "sources": [["staging", "base_edfi_students"], ["staging", "base_edfi_students"]], "description": "This entity represents an individual for whom instruction, services, and/or care are provided in an early childhood, elementary, or secondary educational program under the jurisdiction of a school, education agency or other institution or program. A student is a person who has been enrolled in a school or other educational institution.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/staging/edfi/stg_edfi.yml", "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_students.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "labels": {"edfi_version": "5_3"}}, "created_at": 1650510022.13038, "compiled_sql": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `gcp-project`.`dev_staging`.`base_edfi_students`\n    where is_complete_extract IS TRUE\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `gcp-project`.`dev_staging`.`base_edfi_students` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            OR base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    json_value(data, '$.studentUniqueId') as student_unique_id,\n    json_value(data, '$.lastSurname') as last_surname,\n    json_value(data, '$.middleName') as middle_name,\n    json_value(data, '$.firstName') as first_name,\n    json_value(data, '$.generationCodeSuffix') as generation_code_suffix,\n    parse_date('%Y-%m-%d', json_value(data, '$.birthDate')) as birth_date,\n    json_value(data, '$.birthCity') as birth_city,\n    split(json_value(data, \"$.birthCountryDescriptor\"), '#')[OFFSET(1)] as birth_country_descriptor,\n    json_value(data, '$.birthInternationalProvince') as birth_international_province,\n    struct(\n        json_value(data, '$.personReference.personId') as person_id,\n        split(json_value(data, \"$.personReference.sourceSystemDescriptor\"), '#')[OFFSET(1)] as source_system_descriptor\n    ) as person_reference,\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_staging`.`stg_edfi_students`"}, "model.project.stg_edfi_survey_question_responses": {"raw_sql": "select NULL as column1\n{# \nwith parsed_data as (\n\n    select\n        date_extracted                          as date_extracted,\n        school_year                             as school_year,\n        json_value(data, '$.id') as id,\n        struct(\n            json_value(data, '$.surveyQuestionReference.namespace') as namespace,\n            json_value(data, '$.surveyQuestionReference.questionCode') as question_code,\n            json_value(data, '$.surveyQuestionReference.surveyIdentifier') as survey_identifier\n        ) as survey_question_reference,\n        struct(\n            json_value(data, '$.surveyResponseReference.namespace') as namespace,\n            json_value(data, '$.surveyResponseReference.surveyIdentifier') as survey_identifier,\n            json_value(data, '$.surveyResponseReference.surveyResponseIdentifier') as survey_response_identifier\n        ) as survey_response_reference,\n        json_value(data, '$.comment') as comment,\n        cast(json_value(data, '$.noResponse') as BOOL) as no_response,\n        array(\n            select as struct\n                json_value(matrix_response, '$.matrixElement') as matrix_element,\n                json_value(matrix_response, '$.textResponse') as text_response,\n                cast(json_value(matrix_response, '$.minNumericResponse') as int64) as min_numeric_response,\n                cast(json_value(matrix_response, '$.maxNumericResponse') as int64) as max_numeric_response,\n                cast(json_value(matrix_response, '$.numericResponse') as int64) as numeric_response,\n                cast(json_value(matrix_response, '$.noResponse') as BOOL) as no_response\n            from unnest(json_query_array(data, \"$.surveyQuestionMatrixElementResponses\")) matrix_response \n        ) as survey_question_matrix_element_responses,\n        array(\n            select as struct\n                json_value(value, '$.surveyQuestionResponseValueIdentifier') as survey_question_response_value_identifier,\n                cast(json_value(value, '$.numericResponse') as int64) as numeric_response,\n                json_value(value, '$.textResponse') as text_response\n            from unnest(json_query_array(data, \"$.values\")) value \n        ) as values\n    from {{ source('staging', 'base_edfi_survey_question_responses') }}\n    where date_extracted >= (\n        select max(date_extracted) as date_extracted\n        from {{ source('staging', 'base_edfi_survey_question_responses') }}\n        where is_complete_extract IS TRUE)\n    qualify row_number() over (\n            partition by id\n            order by date_extracted DESC) = 1\n\n)\n\n\nselect *\nfrom parsed_data\nwhere\n    id not in (\n        select id from {{ ref('stg_edfi_deletes') }} edfi_deletes\n        where parsed_data.school_year = edfi_deletes.school_year) #}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_survey_question_responses"], "unique_id": "model.project.stg_edfi_survey_question_responses", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "staging/edfi/stg_edfi_survey_question_responses.sql", "original_file_path": "models/staging/edfi/stg_edfi_survey_question_responses.sql", "name": "stg_edfi_survey_question_responses", "alias": "stg_edfi_survey_question_responses", "checksum": {"name": "sha256", "checksum": "4db5980cfc8311a86ff5e4ce23e0c65a11a58232b7dc2d005c732d512598a881"}, "tags": ["edfi"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_survey_question_responses.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "labels": {"edfi_version": "5_3"}}, "created_at": 1650510021.883431, "compiled_sql": "select NULL as column1\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_staging`.`stg_edfi_survey_question_responses`"}, "model.project.google_forms_edfi_survey_questions": {"raw_sql": "select\n    question_id                             as questionCode,\n    struct(\n        'uri://forms.google.com' as namespace,\n        form_id                  as surveyIdentifier\n    )                                       as surveyReference,\n    question_title                          as questionText,\n    case question_type\n        when \"RADIO\"    then \"uri://ed-fi.org/QuestionFormDescriptor#Radio box\"\n        when \"CHECKBOX\" then \"uri://ed-fi.org/QuestionFormDescriptor#Checkbox\"\n        when \"TEXTBOX\" then \"uri://ed-fi.org/QuestionFormDescriptor#Textbox\"\n    end                                     as questionFormDescriptor,\n    array(\n        select as struct\n            index + 1       as sortOrder,\n            ''              as numericValue,\n            values          as textValue\n        from unnest(question_values) as values with OFFSET as index\n        where values != ''\n    )                                       as response_choice\nfrom {{ ref('stg_google_forms_questions') }}\nwhere question_type != 'LINEARSCALE'\n\nunion all\n\nselect\n    question_id                             as questionCode,\n    struct(\n        'uri://forms.google.com' as namespace,\n        form_id                  as surveyIdentifier\n    )                                       as surveyReference,\n    question_title                          as questionText,\n    'uri://forms.google.com/QuestionFormDescriptor#Linear Scale' as questionFormDescriptor,\n    array(\n        select as struct\n            index + 1       as sortOrder,\n            values          as numericValue,\n            ''              as textValue\n        from unnest(question_values) as values with OFFSET as index\n    )                                       as response_choice\nfrom {{ ref('stg_google_forms_questions') }}\nwhere question_type = 'LINEARSCALE'", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.project.stg_google_forms_questions", "model.project.stg_google_forms_questions"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_staging", "fqn": ["project", "staging", "google_forms", "google_forms_edfi_survey_questions"], "unique_id": "model.project.google_forms_edfi_survey_questions", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "staging/google_forms/google_forms_edfi_survey_questions.sql", "original_file_path": "models/staging/google_forms/google_forms_edfi_survey_questions.sql", "name": "google_forms_edfi_survey_questions", "alias": "google_forms_edfi_survey_questions", "checksum": {"name": "sha256", "checksum": "e2a291d372a1941034533941d5fd080f65de4fca3d9876c21d27e00437b79076"}, "tags": [], "refs": [["stg_google_forms_questions"], ["stg_google_forms_questions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/google_forms/google_forms_edfi_survey_questions.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging"}, "created_at": 1650510021.8853414, "compiled_sql": "select\n    question_id                             as questionCode,\n    struct(\n        'uri://forms.google.com' as namespace,\n        form_id                  as surveyIdentifier\n    )                                       as surveyReference,\n    question_title                          as questionText,\n    case question_type\n        when \"RADIO\"    then \"uri://ed-fi.org/QuestionFormDescriptor#Radio box\"\n        when \"CHECKBOX\" then \"uri://ed-fi.org/QuestionFormDescriptor#Checkbox\"\n        when \"TEXTBOX\" then \"uri://ed-fi.org/QuestionFormDescriptor#Textbox\"\n    end                                     as questionFormDescriptor,\n    array(\n        select as struct\n            index + 1       as sortOrder,\n            ''              as numericValue,\n            values          as textValue\n        from unnest(question_values) as values with OFFSET as index\n        where values != ''\n    )                                       as response_choice\nfrom `gcp-project`.`dev_staging`.`stg_google_forms_questions`\nwhere question_type != 'LINEARSCALE'\n\nunion all\n\nselect\n    question_id                             as questionCode,\n    struct(\n        'uri://forms.google.com' as namespace,\n        form_id                  as surveyIdentifier\n    )                                       as surveyReference,\n    question_title                          as questionText,\n    'uri://forms.google.com/QuestionFormDescriptor#Linear Scale' as questionFormDescriptor,\n    array(\n        select as struct\n            index + 1       as sortOrder,\n            values          as numericValue,\n            ''              as textValue\n        from unnest(question_values) as values with OFFSET as index\n    )                                       as response_choice\nfrom `gcp-project`.`dev_staging`.`stg_google_forms_questions`\nwhere question_type = 'LINEARSCALE'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_staging`.`google_forms_edfi_survey_questions`"}, "model.project.stg_google_forms_questions": {"raw_sql": "with forms as (\n\n    select\n        json_value(data, '$.formId')                as form_id,\n        struct(\n            json_value(data, '$.info.documentTitle') as document_title\n        )                                           as info,\n        json_value(data, '$.info.documentTitle')    as form_title,\n        json_value(data, '$.revisionId')            as revision_id,\n        json_query_array(data, '$.items') as items\n    from {{ source('staging', 'base_google_forms_questions') }}\n\n),\n\nforms_questions as (\n\n    select \n        form_id,\n        json_value(items, '$.title') as question_title,\n        JSON_QUERY(items, '$.questionItem') as question_items,\n    from forms\n    cross join unnest(forms.items) as items\n    where JSON_QUERY(items, '$.questionItem') is not null\n\n),\n\nquestions_with_values as (\n\n    select\n        form_id,\n        question_title,\n        json_value(question_items, '$.question.choiceQuestion.type') as question_type,\n        json_value(question_items, '$.question.questionId')          as question_id,\n        json_value(question_values, '$.value')                       as question_value\n    from forms_questions\n    cross join unnest(json_query_array(question_items, '$.question.choiceQuestion.options')) question_values\n\n    union all\n\n    select\n        form_id,\n        question_title,\n        'TEXTBOX'                                                   as question_type,\n        json_value(question_items, '$.question.questionId')         as question_id,\n        ''                                                          as question_value\n    from forms_questions\n    where REGEXP_CONTAINS(question_items, '\"textQuestion\"')\n\n    union all \n\n    select\n        form_id,\n        question_title,\n        'LINEARSCALE' as question_type,\n        json_value(question_items, '$.question.questionId') as question_id,\n        cast(question_value as STRING) as question_value\n    from forms_questions\n    cross join unnest(\n        GENERATE_ARRAY(\n            cast(json_value(question_items, '$.question.scaleQuestion.low') as int64),\n            cast(json_value(question_items, '$.question.scaleQuestion.high') as int64)\n        )\n    ) as question_value\n    where REGEXP_CONTAINS(question_items, '\"scaleQuestion\"')\n\n)\n\nselect\n    form_id,\n    question_id,\n    question_title,\n    question_type,\n    ARRAY_AGG(question_value) as question_values\nfrom questions_with_values\ngroup by\n    form_id,\n    question_id,\n    question_title,\n    question_type", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.project.staging.base_google_forms_questions"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_staging", "fqn": ["project", "staging", "google_forms", "stg_google_forms_questions"], "unique_id": "model.project.stg_google_forms_questions", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "staging/google_forms/stg_google_forms_questions.sql", "original_file_path": "models/staging/google_forms/stg_google_forms_questions.sql", "name": "stg_google_forms_questions", "alias": "stg_google_forms_questions", "checksum": {"name": "sha256", "checksum": "9810121920270abbbbf657d1fc0cad3bd9c86216ea84c374d65dc541de4386e7"}, "tags": [], "refs": [], "sources": [["staging", "base_google_forms_questions"]], "description": "One row per Google Form per question", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/staging/google_forms/stg_google_forms.yml", "compiled_path": "target/compiled/project/models/staging/google_forms/stg_google_forms_questions.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging"}, "created_at": 1650510022.0902553, "compiled_sql": "with forms as (\n\n    select\n        json_value(data, '$.formId')                as form_id,\n        struct(\n            json_value(data, '$.info.documentTitle') as document_title\n        )                                           as info,\n        json_value(data, '$.info.documentTitle')    as form_title,\n        json_value(data, '$.revisionId')            as revision_id,\n        json_query_array(data, '$.items') as items\n    from `gcp-project`.`dev_staging`.`base_google_forms_questions`\n\n),\n\nforms_questions as (\n\n    select \n        form_id,\n        json_value(items, '$.title') as question_title,\n        JSON_QUERY(items, '$.questionItem') as question_items,\n    from forms\n    cross join unnest(forms.items) as items\n    where JSON_QUERY(items, '$.questionItem') is not null\n\n),\n\nquestions_with_values as (\n\n    select\n        form_id,\n        question_title,\n        json_value(question_items, '$.question.choiceQuestion.type') as question_type,\n        json_value(question_items, '$.question.questionId')          as question_id,\n        json_value(question_values, '$.value')                       as question_value\n    from forms_questions\n    cross join unnest(json_query_array(question_items, '$.question.choiceQuestion.options')) question_values\n\n    union all\n\n    select\n        form_id,\n        question_title,\n        'TEXTBOX'                                                   as question_type,\n        json_value(question_items, '$.question.questionId')         as question_id,\n        ''                                                          as question_value\n    from forms_questions\n    where REGEXP_CONTAINS(question_items, '\"textQuestion\"')\n\n    union all \n\n    select\n        form_id,\n        question_title,\n        'LINEARSCALE' as question_type,\n        json_value(question_items, '$.question.questionId') as question_id,\n        cast(question_value as STRING) as question_value\n    from forms_questions\n    cross join unnest(\n        GENERATE_ARRAY(\n            cast(json_value(question_items, '$.question.scaleQuestion.low') as int64),\n            cast(json_value(question_items, '$.question.scaleQuestion.high') as int64)\n        )\n    ) as question_value\n    where REGEXP_CONTAINS(question_items, '\"scaleQuestion\"')\n\n)\n\nselect\n    form_id,\n    question_id,\n    question_title,\n    question_type,\n    ARRAY_AGG(question_value) as question_values\nfrom questions_with_values\ngroup by\n    form_id,\n    question_id,\n    question_title,\n    question_type", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_staging`.`stg_google_forms_questions`"}, "model.project.nwea_map_edfi_assessments": {"raw_sql": "with assessments as (\n    -- ie. Survey With Goals, Fall, Reading, Growth: Reading 6+ CCSS 2010 V4 (No TTS)\n    select distinct\n        test_type,\n        term_name,\n        course,\n        test_name\n    from {{ ref('stg_nwea_map_assessment_results') }}\n    where test_type = \"Survey With Goals\"\n\n),\n\nperformance_levels as (\n    -- retrieve performance level metadata seen in assessment results file\n    select distinct\n        PerformanceLevels.AssessmentReportingMethodDescriptor,\n        PerformanceLevels.PerformanceLevelDescriptor\n    from {{ ref('nwea_map_edfi_student_assessments') }}\n    cross join unnest(PerformanceLevels) PerformanceLevels\n\n),\n\nperformance_levels_array as (\n\n    select\n        ARRAY_AGG(\n            struct(\n                AssessmentReportingMethodDescriptor,\n                PerformanceLevelDescriptor\n            )\n        ) as PerformanceLevels\n    from performance_levels\n\n),\n\nscore_results as (\n    -- retrieve score metadata seen in assessment results file\n    select distinct\n        ScoreResults.AssessmentReportingMethodDescriptor,\n        ScoreResults.ResultDatatypeTypeDescriptor,\n    from {{ ref('nwea_map_edfi_student_assessments') }}\n    cross join unnest(ScoreResults) ScoreResults\n\n),\n\nscore_results_array as (\n\n    select\n        ARRAY_AGG(\n            struct(\n                AssessmentReportingMethodDescriptor,\n                ResultDatatypeTypeDescriptor\n            )\n        ) as ScoreResults\n    from score_results\n\n)\n\n\nselect\n    CONCAT(\n        test_type, \"-\",\n        term_name, \"-\",\n        course\n    )                                                                   as AssessmentIdentifier,\n    \"NWEA MAP Growth\"                                                   as AssessmentFamily,\n    test_name                                                           as AssessmentTitle,\n    \"uri://nwea.org\"                                                    as Namespace,\n    TRUE                                                                as AdaptiveAssessment,\n    struct(\n        case term_name\n            when \"Fall\" then \"uri://ed-fi.org/AssessmentPeriodDescriptor#BOY\"\n            when \"Winter\" then \"uri://ed-fi.org/AssessmentPeriodDescriptor#MOY\"\n            when \"Spring\" then \"uri://ed-fi.org/AssessmentPeriodDescriptor#EOY\"\n        end as AssessmentPeriodDescriptor\n    )                                                                   as Period,\n    array(\n        select as struct \n            CONCAT(\n                \"uri://ed-fi.org/AcademicSubjectDescriptor#\",\n                course\n            ) as AcademicSubjectDescriptor\n    )                                                                   as AcademicSubjects,\n    performance_levels_array.PerformanceLevels                          as PerformanceLevels,\n    score_results_array.ScoreResults                                    as Scores\nfrom assessments\ncross join performance_levels_array\ncross join score_results_array", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.project.stg_nwea_map_assessment_results", "model.project.nwea_map_edfi_student_assessments", "model.project.nwea_map_edfi_student_assessments"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_staging", "fqn": ["project", "staging", "nwea_map", "nwea_map_edfi_assessments"], "unique_id": "model.project.nwea_map_edfi_assessments", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "staging/nwea_map/nwea_map_edfi_assessments.sql", "original_file_path": "models/staging/nwea_map/nwea_map_edfi_assessments.sql", "name": "nwea_map_edfi_assessments", "alias": "nwea_map_edfi_assessments", "checksum": {"name": "sha256", "checksum": "74e3d376196e0b7f74b071ace4bf85e09d2208217ceba50dfdce6ab7ed0c6de7"}, "tags": [], "refs": [["stg_nwea_map_assessment_results"], ["nwea_map_edfi_student_assessments"], ["nwea_map_edfi_student_assessments"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/staging/nwea_map/stg_nwea_map.yml", "compiled_path": "target/compiled/project/models/staging/nwea_map/nwea_map_edfi_assessments.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging"}, "created_at": 1650510021.9533634, "compiled_sql": "with assessments as (\n    -- ie. Survey With Goals, Fall, Reading, Growth: Reading 6+ CCSS 2010 V4 (No TTS)\n    select distinct\n        test_type,\n        term_name,\n        course,\n        test_name\n    from `gcp-project`.`dev_staging`.`stg_nwea_map_assessment_results`\n    where test_type = \"Survey With Goals\"\n\n),\n\nperformance_levels as (\n    -- retrieve performance level metadata seen in assessment results file\n    select distinct\n        PerformanceLevels.AssessmentReportingMethodDescriptor,\n        PerformanceLevels.PerformanceLevelDescriptor\n    from `gcp-project`.`dev_staging`.`nwea_map_edfi_student_assessments`\n    cross join unnest(PerformanceLevels) PerformanceLevels\n\n),\n\nperformance_levels_array as (\n\n    select\n        ARRAY_AGG(\n            struct(\n                AssessmentReportingMethodDescriptor,\n                PerformanceLevelDescriptor\n            )\n        ) as PerformanceLevels\n    from performance_levels\n\n),\n\nscore_results as (\n    -- retrieve score metadata seen in assessment results file\n    select distinct\n        ScoreResults.AssessmentReportingMethodDescriptor,\n        ScoreResults.ResultDatatypeTypeDescriptor,\n    from `gcp-project`.`dev_staging`.`nwea_map_edfi_student_assessments`\n    cross join unnest(ScoreResults) ScoreResults\n\n),\n\nscore_results_array as (\n\n    select\n        ARRAY_AGG(\n            struct(\n                AssessmentReportingMethodDescriptor,\n                ResultDatatypeTypeDescriptor\n            )\n        ) as ScoreResults\n    from score_results\n\n)\n\n\nselect\n    CONCAT(\n        test_type, \"-\",\n        term_name, \"-\",\n        course\n    )                                                                   as AssessmentIdentifier,\n    \"NWEA MAP Growth\"                                                   as AssessmentFamily,\n    test_name                                                           as AssessmentTitle,\n    \"uri://nwea.org\"                                                    as Namespace,\n    TRUE                                                                as AdaptiveAssessment,\n    struct(\n        case term_name\n            when \"Fall\" then \"uri://ed-fi.org/AssessmentPeriodDescriptor#BOY\"\n            when \"Winter\" then \"uri://ed-fi.org/AssessmentPeriodDescriptor#MOY\"\n            when \"Spring\" then \"uri://ed-fi.org/AssessmentPeriodDescriptor#EOY\"\n        end as AssessmentPeriodDescriptor\n    )                                                                   as Period,\n    array(\n        select as struct \n            CONCAT(\n                \"uri://ed-fi.org/AcademicSubjectDescriptor#\",\n                course\n            ) as AcademicSubjectDescriptor\n    )                                                                   as AcademicSubjects,\n    performance_levels_array.PerformanceLevels                          as PerformanceLevels,\n    score_results_array.ScoreResults                                    as Scores\nfrom assessments\ncross join performance_levels_array\ncross join score_results_array", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_staging`.`nwea_map_edfi_assessments`"}, "model.project.stg_edfi_surveys": {"raw_sql": "select NULL as column1\n{# \nwith parsed_data as (\n\n    select\n        date_extracted                          as date_extracted,\n        school_year                             as school_year,\n        json_value(data, '$.id') as id,\n        json_value(data, '$.namespace') as namespace,\n        json_value(data, '$.surveyIdentifier') as survey_identifier,\n        json_value(data, '$.surveyTitle') as survey_title,\n        struct(\n            json_value(data, '$.educationOrganizationReference.educationOrganizationId') as education_organization_id\n        ) as education_organization_reference,\n        struct(\n            cast(json_value(data, '$.schoolYearTypeReference.schoolYear') as int64) as school_year\n        ) as school_year_type_reference,\n        struct(\n            json_value(data, '$.sessionReference.schoolId') as school_id,\n            cast(json_value(data, '$.sessionReference.schoolYear') as int64) as school_year,\n            json_value(data, '$.sessionReference.sessionName') as session_name\n        ) as session_reference,\n        cast(json_value(data, '$.numberAdministered') as int64) number_administered,\n        split(json_value(data, '$.surveyCategoryDescriptor'), '#')[OFFSET(1)] as survey_category_descriptor\n    from {{ source('staging', 'base_edfi_surveys') }}\n    where date_extracted >= (\n        select max(date_extracted) as date_extracted\n        from {{ source('staging', 'base_edfi_surveys') }}\n        where is_complete_extract IS TRUE)\n    qualify row_number() over (\n            partition by id\n            order by date_extracted DESC) = 1\n\n)\n\n\nselect *\nfrom parsed_data\nwhere\n    id not in (\n        select id from {{ ref('stg_edfi_deletes') }} edfi_deletes\n        where parsed_data.school_year = edfi_deletes.school_year) #}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_surveys"], "unique_id": "model.project.stg_edfi_surveys", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "staging/edfi/stg_edfi_surveys.sql", "original_file_path": "models/staging/edfi/stg_edfi_surveys.sql", "name": "stg_edfi_surveys", "alias": "stg_edfi_surveys", "checksum": {"name": "sha256", "checksum": "ffb2ad2948b38b756bb62ad10eeedaced3508ef7df7dae8290237c2bae7d5862"}, "tags": ["edfi"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_surveys.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "labels": {"edfi_version": "5_3"}}, "created_at": 1650510021.8923683, "compiled_sql": "select NULL as column1\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_staging`.`stg_edfi_surveys`"}, "model.project.stg_edfi_survey_questions": {"raw_sql": "select NULL as column1\n{# \nwith parsed_data as (\n\n    select\n        date_extracted                          as date_extracted,\n        school_year                             as school_year,\n        json_value(data, '$.id') as id,\n        json_value(data, '$.questionCode') as question_code,\n        json_value(data, '$.questionText') as question_text,\n        split(json_value(data, '$.questionFormDescriptor'), '#')[OFFSET(1)] as question_form_descriptor,\n        array(\n            select as struct \n                json_value(response_choices, \"$.textValue\") as text_value,\n                cast(json_value(response_choices, \"$.sortOrder\") as int64) as sort_order,\n                cast(json_value(response_choices, \"$.numericValue\") as int64) as numeric_value\n            from unnest(json_query_array(data, \"$.responseChoices\")) response_choices \n        ) as response_choices,\n        struct(\n            json_value(data, '$.surveyReference.namespace') as namespace,\n            json_value(data, '$.surveyReference.surveyIdentifier') as survey_identifier\n        ) as survey_reference,\n        struct(\n            json_value(data, '$.surveySectionReference.namespace') as namespace,\n            json_value(data, '$.surveySectionReference.surveyIdentifier') as survey_identifier,\n            json_value(data, '$.surveySectionReference.surveySectionTitle') as survey_section_title\n        ) as survey_section_reference,\n        array(\n            select as struct \n                json_value(matrices, \"$.matrixElement\") as matrix_element,\n                cast(json_value(matrices, \"$.minRawScore\") as int64) as min_raw_score,\n                cast(json_value(matrices, \"$.maxRawScore\") as int64) as max_raw_score\n            from unnest(json_query_array(data, \"$.matrices\")) matrices \n        ) as matrices\n    from {{ source('staging', 'base_edfi_survey_questions') }}\n    where date_extracted >= (\n        select max(date_extracted) as date_extracted\n        from {{ source('staging', 'base_edfi_survey_questions') }}\n        where is_complete_extract IS TRUE)\n    qualify row_number() over (\n            partition by id\n            order by date_extracted DESC) = 1\n\n)\n\n\nselect *\nfrom parsed_data\nwhere\n    id not in (\n        select id from {{ ref('stg_edfi_deletes') }} edfi_deletes\n        where parsed_data.school_year = edfi_deletes.school_year) #}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_survey_questions"], "unique_id": "model.project.stg_edfi_survey_questions", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "staging/edfi/stg_edfi_survey_questions.sql", "original_file_path": "models/staging/edfi/stg_edfi_survey_questions.sql", "name": "stg_edfi_survey_questions", "alias": "stg_edfi_survey_questions", "checksum": {"name": "sha256", "checksum": "9dcce42a21d0981237d775050b37aca901077f3bb5b40eb1afcdc01a5bced454"}, "tags": ["edfi"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_survey_questions.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "labels": {"edfi_version": "5_3"}}, "created_at": 1650510021.8942978, "compiled_sql": "select NULL as column1\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_staging`.`stg_edfi_survey_questions`"}, "model.project.stg_edfi_survey_responses": {"raw_sql": "select NULL as column1\n{# \nwith parsed_data as (\n\n    select\n        date_extracted                          as date_extracted,\n        school_year                             as school_year,\n        json_value(data, '$.id') as id,\n        json_value(data, '$.surveyResponseIdentifier') as survey_response_identifier,\n        struct(\n            json_value(data, '$.parentReference.parentUniqueId') as parent_unique_id\n        ) as parent_reference,\n        struct(\n            json_value(data, '$.staffReference.staffUniqueId') as staff_unique_id\n        ) as staff_reference,\n        struct(\n            json_value(data, '$.studentReference.studentUniqueId') as student_unique_id\n        ) as student_reference,\n        struct(\n            json_value(data, '$.surveyReference.namespace') as namespace,\n            json_value(data, '$.surveyReference.surveyIdentifier') as survey_identifier\n        ) as survey_reference,\n        json_value(data, '$.electronicMailAddress') as electronic_mail_address,\n        json_value(data, '$.fullName') as full_name,\n        json_value(data, '$.location') as location,\n        parse_date('%Y-%m-%d', json_value(data, \"$.responseDate\")) as response_date,\n        cast(json_value(data, \"$.responseTime\") as int64) as response_time,\n        array(\n            select as struct \n                split(json_value(survey_levels, '$.surveyLevelDescriptor'), '#')[OFFSET(1)] as survey_level_descriptor\n            from unnest(json_query_array(data, \"$.surveyLevels\")) survey_levels \n        ) as survey_levels\n    from {{ source('staging', 'base_edfi_survey_responses') }}\n    where date_extracted >= (\n        select max(date_extracted) as date_extracted\n        from {{ source('staging', 'base_edfi_survey_responses') }}\n        where is_complete_extract IS TRUE)\n    qualify row_number() over (\n            partition by id\n            order by date_extracted DESC) = 1\n\n)\n\n\nselect *\nfrom parsed_data\nwhere\n    id not in (\n        select id from {{ ref('stg_edfi_deletes') }} edfi_deletes\n        where parsed_data.school_year = edfi_deletes.school_year) #}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-project", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_survey_responses"], "unique_id": "model.project.stg_edfi_survey_responses", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "staging/edfi/stg_edfi_survey_responses.sql", "original_file_path": "models/staging/edfi/stg_edfi_survey_responses.sql", "name": "stg_edfi_survey_responses", "alias": "stg_edfi_survey_responses", "checksum": {"name": "sha256", "checksum": "881e3e87f30fcae2b0f24b80eab7dc2cf0c9005a055dd9b204417d2355612936"}, "tags": ["edfi"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_survey_responses.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "labels": {"edfi_version": "5_3"}}, "created_at": 1650510021.8961086, "compiled_sql": "select NULL as column1\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-project`.`dev_staging`.`stg_edfi_survey_responses`"}, "test.project.relationships_fct_student_attendance_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.1058409cf0": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_student_atte_ea95d16954be969d7d4d1cb3ebf85315\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_local_education_agency')", "field": "local_education_agency_key", "column_name": "local_education_agency_key", "model": "{{ get_where_subquery(ref('fct_student_attendance')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_local_education_agency", "model.project.fct_student_attendance"]}, "config": {"enabled": true, "alias": "relationships_fct_student_atte_ea95d16954be969d7d4d1cb3ebf85315", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "attendance", "relationships_fct_student_attendance_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_"], "unique_id": "test.project.relationships_fct_student_attendance_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.1058409cf0", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "relationships_fct_student_atte_ea95d16954be969d7d4d1cb3ebf85315.sql", "original_file_path": "models/marts/attendance/attendance.yml", "name": "relationships_fct_student_attendance_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_", "alias": "relationships_fct_student_atte_ea95d16954be969d7d4d1cb3ebf85315", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_local_education_agency"], ["fct_student_attendance"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/attendance/attendance.yml/relationships_fct_student_atte_ea95d16954be969d7d4d1cb3ebf85315.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fct_student_atte_ea95d16954be969d7d4d1cb3ebf85315"}, "created_at": 1650510021.919041, "compiled_sql": "\n    \n    \n\nwith child as (\n    select local_education_agency_key as from_field\n    from `gcp-project`.`dev_attendance`.`fct_student_attendance`\n    where local_education_agency_key is not null\n),\n\nparent as (\n    select local_education_agency_key as to_field\n    from `gcp-project`.`dev_core`.`dim_local_education_agency`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "local_education_agency_key", "file_key_name": "models.fct_student_attendance"}, "test.project.relationships_fct_student_attendance_school_key__school_key__ref_dim_school_.a425d4b0e7": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_student_atte_89f0134bdd72be3d225343748fa5e823\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_school')", "field": "school_key", "column_name": "school_key", "model": "{{ get_where_subquery(ref('fct_student_attendance')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_school", "model.project.fct_student_attendance"]}, "config": {"enabled": true, "alias": "relationships_fct_student_atte_89f0134bdd72be3d225343748fa5e823", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "attendance", "relationships_fct_student_attendance_school_key__school_key__ref_dim_school_"], "unique_id": "test.project.relationships_fct_student_attendance_school_key__school_key__ref_dim_school_.a425d4b0e7", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "relationships_fct_student_atte_89f0134bdd72be3d225343748fa5e823.sql", "original_file_path": "models/marts/attendance/attendance.yml", "name": "relationships_fct_student_attendance_school_key__school_key__ref_dim_school_", "alias": "relationships_fct_student_atte_89f0134bdd72be3d225343748fa5e823", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_school"], ["fct_student_attendance"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/attendance/attendance.yml/relationships_fct_student_atte_89f0134bdd72be3d225343748fa5e823.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fct_student_atte_89f0134bdd72be3d225343748fa5e823"}, "created_at": 1650510021.9303117, "compiled_sql": "\n    \n    \n\nwith child as (\n    select school_key as from_field\n    from `gcp-project`.`dev_attendance`.`fct_student_attendance`\n    where school_key is not null\n),\n\nparent as (\n    select school_key as to_field\n    from `gcp-project`.`dev_core`.`dim_school`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "school_key", "file_key_name": "models.fct_student_attendance"}, "test.project.relationships_fct_student_attendance_student_key__student_key__ref_dim_student_.902b20eb5a": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_student_atte_97f050ce2f6cd6a21383bb14e9543885\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_student')", "field": "student_key", "column_name": "student_key", "model": "{{ get_where_subquery(ref('fct_student_attendance')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_student", "model.project.fct_student_attendance"]}, "config": {"enabled": true, "alias": "relationships_fct_student_atte_97f050ce2f6cd6a21383bb14e9543885", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "attendance", "relationships_fct_student_attendance_student_key__student_key__ref_dim_student_"], "unique_id": "test.project.relationships_fct_student_attendance_student_key__student_key__ref_dim_student_.902b20eb5a", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "relationships_fct_student_atte_97f050ce2f6cd6a21383bb14e9543885.sql", "original_file_path": "models/marts/attendance/attendance.yml", "name": "relationships_fct_student_attendance_student_key__student_key__ref_dim_student_", "alias": "relationships_fct_student_atte_97f050ce2f6cd6a21383bb14e9543885", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_student"], ["fct_student_attendance"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/attendance/attendance.yml/relationships_fct_student_atte_97f050ce2f6cd6a21383bb14e9543885.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fct_student_atte_97f050ce2f6cd6a21383bb14e9543885"}, "created_at": 1650510021.9346228, "compiled_sql": "\n    \n    \n\nwith child as (\n    select student_key as from_field\n    from `gcp-project`.`dev_attendance`.`fct_student_attendance`\n    where student_key is not null\n),\n\nparent as (\n    select student_key as to_field\n    from `gcp-project`.`dev_core`.`dim_student`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "student_key", "file_key_name": "models.fct_student_attendance"}, "test.project.not_null_fct_student_attendance_school_year.c69c139be1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "school_year", "model": "{{ get_where_subquery(ref('fct_student_attendance')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.fct_student_attendance"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "attendance", "not_null_fct_student_attendance_school_year"], "unique_id": "test.project.not_null_fct_student_attendance_school_year.c69c139be1", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "not_null_fct_student_attendance_school_year.sql", "original_file_path": "models/marts/attendance/attendance.yml", "name": "not_null_fct_student_attendance_school_year", "alias": "not_null_fct_student_attendance_school_year", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_student_attendance"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/attendance/attendance.yml/not_null_fct_student_attendance_school_year.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650510021.9389493, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-project`.`dev_attendance`.`fct_student_attendance`\nwhere school_year is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "school_year", "file_key_name": "models.fct_student_attendance"}, "test.project.not_null_fct_student_attendance_date.1c7057eb63": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('fct_student_attendance')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.fct_student_attendance"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "attendance", "not_null_fct_student_attendance_date"], "unique_id": "test.project.not_null_fct_student_attendance_date.1c7057eb63", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "not_null_fct_student_attendance_date.sql", "original_file_path": "models/marts/attendance/attendance.yml", "name": "not_null_fct_student_attendance_date", "alias": "not_null_fct_student_attendance_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_student_attendance"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/attendance/attendance.yml/not_null_fct_student_attendance_date.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650510021.9406528, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-project`.`dev_attendance`.`fct_student_attendance`\nwhere date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date", "file_key_name": "models.fct_student_attendance"}, "test.project.not_null_fct_student_attendance_school_attendance_event_category_descriptor.be3ab06fa8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_fct_student_attendanc_d9a013f35bc62a03a0069287b90a3061\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "school_attendance_event_category_descriptor", "model": "{{ get_where_subquery(ref('fct_student_attendance')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.fct_student_attendance"]}, "config": {"enabled": true, "alias": "not_null_fct_student_attendanc_d9a013f35bc62a03a0069287b90a3061", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "attendance", "not_null_fct_student_attendance_school_attendance_event_category_descriptor"], "unique_id": "test.project.not_null_fct_student_attendance_school_attendance_event_category_descriptor.be3ab06fa8", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "not_null_fct_student_attendanc_d9a013f35bc62a03a0069287b90a3061.sql", "original_file_path": "models/marts/attendance/attendance.yml", "name": "not_null_fct_student_attendance_school_attendance_event_category_descriptor", "alias": "not_null_fct_student_attendanc_d9a013f35bc62a03a0069287b90a3061", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_student_attendance"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/attendance/attendance.yml/not_null_fct_student_attendanc_d9a013f35bc62a03a0069287b90a3061.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_fct_student_attendanc_d9a013f35bc62a03a0069287b90a3061"}, "created_at": 1650510021.9421616, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-project`.`dev_attendance`.`fct_student_attendance`\nwhere school_attendance_event_category_descriptor is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "school_attendance_event_category_descriptor", "file_key_name": "models.fct_student_attendance"}, "test.project.not_null_fct_student_attendance_event_duration.7405fc5f51": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_duration", "model": "{{ get_where_subquery(ref('fct_student_attendance')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.fct_student_attendance"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "attendance", "not_null_fct_student_attendance_event_duration"], "unique_id": "test.project.not_null_fct_student_attendance_event_duration.7405fc5f51", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "not_null_fct_student_attendance_event_duration.sql", "original_file_path": "models/marts/attendance/attendance.yml", "name": "not_null_fct_student_attendance_event_duration", "alias": "not_null_fct_student_attendance_event_duration", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_student_attendance"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/attendance/attendance.yml/not_null_fct_student_attendance_event_duration.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650510021.9447083, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-project`.`dev_attendance`.`fct_student_attendance`\nwhere event_duration is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_duration", "file_key_name": "models.fct_student_attendance"}, "test.project.unique_dim_date_date.dd069a8d31": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('dim_date')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_date"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "unique_dim_date_date"], "unique_id": "test.project.unique_dim_date_date.dd069a8d31", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "unique_dim_date_date.sql", "original_file_path": "models/marts/core/core.yml", "name": "unique_dim_date_date", "alias": "unique_dim_date_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_date"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/unique_dim_date_date.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650510021.9805474, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select date as unique_field\n  from `gcp-project`.`dev_core`.`dim_date`\n  where date is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date", "file_key_name": "models.dim_date"}, "test.project.not_null_dim_date_date.78f11e7735": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('dim_date')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_date"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "not_null_dim_date_date"], "unique_id": "test.project.not_null_dim_date_date.78f11e7735", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "not_null_dim_date_date.sql", "original_file_path": "models/marts/core/core.yml", "name": "not_null_dim_date_date", "alias": "not_null_dim_date_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_date"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_date_date.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650510021.9821417, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-project`.`dev_core`.`dim_date`\nwhere date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date", "file_key_name": "models.dim_date"}, "test.project.unique_dim_student_student_key.45ef646b54": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "student_key", "model": "{{ get_where_subquery(ref('dim_student')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_student"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "unique_dim_student_student_key"], "unique_id": "test.project.unique_dim_student_student_key.45ef646b54", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "unique_dim_student_student_key.sql", "original_file_path": "models/marts/core/core.yml", "name": "unique_dim_student_student_key", "alias": "unique_dim_student_student_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_student"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/unique_dim_student_student_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650510021.9840624, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select student_key as unique_field\n  from `gcp-project`.`dev_core`.`dim_student`\n  where student_key is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "student_key", "file_key_name": "models.dim_student"}, "test.project.not_null_dim_student_student_key.67ab09a6e6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "student_key", "model": "{{ get_where_subquery(ref('dim_student')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_student"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "not_null_dim_student_student_key"], "unique_id": "test.project.not_null_dim_student_student_key.67ab09a6e6", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "not_null_dim_student_student_key.sql", "original_file_path": "models/marts/core/core.yml", "name": "not_null_dim_student_student_key", "alias": "not_null_dim_student_student_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_student"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_student_student_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650510021.9855335, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-project`.`dev_core`.`dim_student`\nwhere student_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "student_key", "file_key_name": "models.dim_student"}, "test.project.relationships_dim_student_school_key__school_key__ref_dim_school_.ea466bff27": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_dim_student_d2b064d07aa0d13899b13658fb3cab33\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_school')", "field": "school_key", "column_name": "school_key", "model": "{{ get_where_subquery(ref('dim_student')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_school", "model.project.dim_student"]}, "config": {"enabled": true, "alias": "relationships_dim_student_d2b064d07aa0d13899b13658fb3cab33", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "relationships_dim_student_school_key__school_key__ref_dim_school_"], "unique_id": "test.project.relationships_dim_student_school_key__school_key__ref_dim_school_.ea466bff27", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "relationships_dim_student_d2b064d07aa0d13899b13658fb3cab33.sql", "original_file_path": "models/marts/core/core.yml", "name": "relationships_dim_student_school_key__school_key__ref_dim_school_", "alias": "relationships_dim_student_d2b064d07aa0d13899b13658fb3cab33", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_school"], ["dim_student"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/relationships_dim_student_d2b064d07aa0d13899b13658fb3cab33.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_dim_student_d2b064d07aa0d13899b13658fb3cab33"}, "created_at": 1650510021.986979, "compiled_sql": "\n    \n    \n\nwith child as (\n    select school_key as from_field\n    from `gcp-project`.`dev_core`.`dim_student`\n    where school_key is not null\n),\n\nparent as (\n    select school_key as to_field\n    from `gcp-project`.`dev_core`.`dim_school`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "school_key", "file_key_name": "models.dim_student"}, "test.project.not_null_dim_student_school_year.cb1c50e460": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "school_year", "model": "{{ get_where_subquery(ref('dim_student')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_student"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "not_null_dim_student_school_year"], "unique_id": "test.project.not_null_dim_student_school_year.cb1c50e460", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "not_null_dim_student_school_year.sql", "original_file_path": "models/marts/core/core.yml", "name": "not_null_dim_student_school_year", "alias": "not_null_dim_student_school_year", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_student"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_student_school_year.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650510021.99166, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-project`.`dev_core`.`dim_student`\nwhere school_year is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "school_year", "file_key_name": "models.dim_student"}, "test.project.not_null_dim_student_student_unique_id.8a392fc4ab": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "student_unique_id", "model": "{{ get_where_subquery(ref('dim_student')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_student"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "not_null_dim_student_student_unique_id"], "unique_id": "test.project.not_null_dim_student_student_unique_id.8a392fc4ab", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "not_null_dim_student_student_unique_id.sql", "original_file_path": "models/marts/core/core.yml", "name": "not_null_dim_student_student_unique_id", "alias": "not_null_dim_student_student_unique_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_student"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_student_student_unique_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650510021.993462, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-project`.`dev_core`.`dim_student`\nwhere student_unique_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "student_unique_id", "file_key_name": "models.dim_student"}, "test.project.not_null_dim_student_student_last_surname.329ae57d5b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "student_last_surname", "model": "{{ get_where_subquery(ref('dim_student')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_student"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "not_null_dim_student_student_last_surname"], "unique_id": "test.project.not_null_dim_student_student_last_surname.329ae57d5b", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "not_null_dim_student_student_last_surname.sql", "original_file_path": "models/marts/core/core.yml", "name": "not_null_dim_student_student_last_surname", "alias": "not_null_dim_student_student_last_surname", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_student"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_student_student_last_surname.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650510021.9953368, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-project`.`dev_core`.`dim_student`\nwhere student_last_surname is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "student_last_surname", "file_key_name": "models.dim_student"}, "test.project.not_null_dim_student_student_first_name.f007907dff": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "student_first_name", "model": "{{ get_where_subquery(ref('dim_student')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_student"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "not_null_dim_student_student_first_name"], "unique_id": "test.project.not_null_dim_student_student_first_name.f007907dff", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "not_null_dim_student_student_first_name.sql", "original_file_path": "models/marts/core/core.yml", "name": "not_null_dim_student_student_first_name", "alias": "not_null_dim_student_student_first_name", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_student"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_student_student_first_name.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650510021.996803, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-project`.`dev_core`.`dim_student`\nwhere student_first_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "student_first_name", "file_key_name": "models.dim_student"}, "test.project.not_null_dim_student_is_english_language_learner.55a5cd929d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_english_language_learner", "model": "{{ get_where_subquery(ref('dim_student')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_student"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "not_null_dim_student_is_english_language_learner"], "unique_id": "test.project.not_null_dim_student_is_english_language_learner.55a5cd929d", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "not_null_dim_student_is_english_language_learner.sql", "original_file_path": "models/marts/core/core.yml", "name": "not_null_dim_student_is_english_language_learner", "alias": "not_null_dim_student_is_english_language_learner", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_student"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_student_is_english_language_learner.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650510021.9982343, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-project`.`dev_core`.`dim_student`\nwhere is_english_language_learner is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "is_english_language_learner", "file_key_name": "models.dim_student"}, "test.project.accepted_values_dim_student_is_english_language_learner__Yes__No.d5a7434ec1": {"raw_sql": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_dim_student_d65f910897a9da528bf85f0612b68a4c\") }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Yes", "No"], "column_name": "is_english_language_learner", "model": "{{ get_where_subquery(ref('dim_student')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_student"]}, "config": {"enabled": true, "alias": "accepted_values_dim_student_d65f910897a9da528bf85f0612b68a4c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "accepted_values_dim_student_is_english_language_learner__Yes__No"], "unique_id": "test.project.accepted_values_dim_student_is_english_language_learner__Yes__No.d5a7434ec1", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "accepted_values_dim_student_d65f910897a9da528bf85f0612b68a4c.sql", "original_file_path": "models/marts/core/core.yml", "name": "accepted_values_dim_student_is_english_language_learner__Yes__No", "alias": "accepted_values_dim_student_d65f910897a9da528bf85f0612b68a4c", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_student"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/accepted_values_dim_student_d65f910897a9da528bf85f0612b68a4c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_dim_student_d65f910897a9da528bf85f0612b68a4c"}, "created_at": 1650510022.0000172, "compiled_sql": "\n    \n    \n\nwith all_values as (\n\n    select\n        is_english_language_learner as value_field,\n        count(*) as n_records\n\n    from `gcp-project`.`dev_core`.`dim_student`\n    group by is_english_language_learner\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Yes','No'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "is_english_language_learner", "file_key_name": "models.dim_student"}, "test.project.not_null_dim_student_in_special_education_program.f8695e7bf3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "in_special_education_program", "model": "{{ get_where_subquery(ref('dim_student')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_student"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "not_null_dim_student_in_special_education_program"], "unique_id": "test.project.not_null_dim_student_in_special_education_program.f8695e7bf3", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "not_null_dim_student_in_special_education_program.sql", "original_file_path": "models/marts/core/core.yml", "name": "not_null_dim_student_in_special_education_program", "alias": "not_null_dim_student_in_special_education_program", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_student"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_student_in_special_education_program.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650510022.0081162, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-project`.`dev_core`.`dim_student`\nwhere in_special_education_program is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "in_special_education_program", "file_key_name": "models.dim_student"}, "test.project.accepted_values_dim_student_in_special_education_program__Yes__No.7a967caab1": {"raw_sql": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_dim_student_d099d9227794d242725afeb04495f96c\") }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Yes", "No"], "column_name": "in_special_education_program", "model": "{{ get_where_subquery(ref('dim_student')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_student"]}, "config": {"enabled": true, "alias": "accepted_values_dim_student_d099d9227794d242725afeb04495f96c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "accepted_values_dim_student_in_special_education_program__Yes__No"], "unique_id": "test.project.accepted_values_dim_student_in_special_education_program__Yes__No.7a967caab1", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "accepted_values_dim_student_d099d9227794d242725afeb04495f96c.sql", "original_file_path": "models/marts/core/core.yml", "name": "accepted_values_dim_student_in_special_education_program__Yes__No", "alias": "accepted_values_dim_student_d099d9227794d242725afeb04495f96c", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_student"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/accepted_values_dim_student_d099d9227794d242725afeb04495f96c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_dim_student_d099d9227794d242725afeb04495f96c"}, "created_at": 1650510022.0098953, "compiled_sql": "\n    \n    \n\nwith all_values as (\n\n    select\n        in_special_education_program as value_field,\n        count(*) as n_records\n\n    from `gcp-project`.`dev_core`.`dim_student`\n    group by in_special_education_program\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Yes','No'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "in_special_education_program", "file_key_name": "models.dim_student"}, "test.project.not_null_dim_student_is_hispanic.2f36046142": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_hispanic", "model": "{{ get_where_subquery(ref('dim_student')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_student"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "not_null_dim_student_is_hispanic"], "unique_id": "test.project.not_null_dim_student_is_hispanic.2f36046142", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "not_null_dim_student_is_hispanic.sql", "original_file_path": "models/marts/core/core.yml", "name": "not_null_dim_student_is_hispanic", "alias": "not_null_dim_student_is_hispanic", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_student"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_student_is_hispanic.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650510022.01478, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-project`.`dev_core`.`dim_student`\nwhere is_hispanic is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "is_hispanic", "file_key_name": "models.dim_student"}, "test.project.accepted_values_dim_student_is_hispanic__Yes__No.28cf24b221": {"raw_sql": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Yes", "No"], "column_name": "is_hispanic", "model": "{{ get_where_subquery(ref('dim_student')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_student"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "accepted_values_dim_student_is_hispanic__Yes__No"], "unique_id": "test.project.accepted_values_dim_student_is_hispanic__Yes__No.28cf24b221", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "accepted_values_dim_student_is_hispanic__Yes__No.sql", "original_file_path": "models/marts/core/core.yml", "name": "accepted_values_dim_student_is_hispanic__Yes__No", "alias": "accepted_values_dim_student_is_hispanic__Yes__No", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_student"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/accepted_values_dim_student_is_hispanic__Yes__No.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650510022.0163364, "compiled_sql": "\n    \n    \n\nwith all_values as (\n\n    select\n        is_hispanic as value_field,\n        count(*) as n_records\n\n    from `gcp-project`.`dev_core`.`dim_student`\n    group by is_hispanic\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Yes','No'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "is_hispanic", "file_key_name": "models.dim_student"}, "test.project.relationships_fct_student_school_student_key__student_key__ref_dim_student_.ce63ab9df5": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_student_scho_9205f868dbd4bb0a6c9f832723697eee\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_student')", "field": "student_key", "column_name": "student_key", "model": "{{ get_where_subquery(ref('fct_student_school')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_student", "model.project.fct_student_school"]}, "config": {"enabled": true, "alias": "relationships_fct_student_scho_9205f868dbd4bb0a6c9f832723697eee", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "relationships_fct_student_school_student_key__student_key__ref_dim_student_"], "unique_id": "test.project.relationships_fct_student_school_student_key__student_key__ref_dim_student_.ce63ab9df5", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "relationships_fct_student_scho_9205f868dbd4bb0a6c9f832723697eee.sql", "original_file_path": "models/marts/core/core.yml", "name": "relationships_fct_student_school_student_key__student_key__ref_dim_student_", "alias": "relationships_fct_student_scho_9205f868dbd4bb0a6c9f832723697eee", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_student"], ["fct_student_school"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/relationships_fct_student_scho_9205f868dbd4bb0a6c9f832723697eee.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fct_student_scho_9205f868dbd4bb0a6c9f832723697eee"}, "created_at": 1650510022.0200388, "compiled_sql": "\n    \n    \n\nwith child as (\n    select student_key as from_field\n    from `gcp-project`.`dev_core`.`fct_student_school`\n    where student_key is not null\n),\n\nparent as (\n    select student_key as to_field\n    from `gcp-project`.`dev_core`.`dim_student`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "student_key", "file_key_name": "models.fct_student_school"}, "test.project.relationships_fct_student_school_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.bdd6a57ac4": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_student_scho_441bae172a53ed8d01418f52d72d6788\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_local_education_agency')", "field": "local_education_agency_key", "column_name": "local_education_agency_key", "model": "{{ get_where_subquery(ref('fct_student_school')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_local_education_agency", "model.project.fct_student_school"]}, "config": {"enabled": true, "alias": "relationships_fct_student_scho_441bae172a53ed8d01418f52d72d6788", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "relationships_fct_student_school_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_"], "unique_id": "test.project.relationships_fct_student_school_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.bdd6a57ac4", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "relationships_fct_student_scho_441bae172a53ed8d01418f52d72d6788.sql", "original_file_path": "models/marts/core/core.yml", "name": "relationships_fct_student_school_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_", "alias": "relationships_fct_student_scho_441bae172a53ed8d01418f52d72d6788", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_local_education_agency"], ["fct_student_school"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/relationships_fct_student_scho_441bae172a53ed8d01418f52d72d6788.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fct_student_scho_441bae172a53ed8d01418f52d72d6788"}, "created_at": 1650510022.0245895, "compiled_sql": "\n    \n    \n\nwith child as (\n    select local_education_agency_key as from_field\n    from `gcp-project`.`dev_core`.`fct_student_school`\n    where local_education_agency_key is not null\n),\n\nparent as (\n    select local_education_agency_key as to_field\n    from `gcp-project`.`dev_core`.`dim_local_education_agency`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "local_education_agency_key", "file_key_name": "models.fct_student_school"}, "test.project.relationships_fct_student_school_school_key__school_key__ref_dim_school_.7a675bb6ae": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_student_scho_a506ff10ff57a9f497f3d8065cbd010f\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_school')", "field": "school_key", "column_name": "school_key", "model": "{{ get_where_subquery(ref('fct_student_school')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_school", "model.project.fct_student_school"]}, "config": {"enabled": true, "alias": "relationships_fct_student_scho_a506ff10ff57a9f497f3d8065cbd010f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "relationships_fct_student_school_school_key__school_key__ref_dim_school_"], "unique_id": "test.project.relationships_fct_student_school_school_key__school_key__ref_dim_school_.7a675bb6ae", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "relationships_fct_student_scho_a506ff10ff57a9f497f3d8065cbd010f.sql", "original_file_path": "models/marts/core/core.yml", "name": "relationships_fct_student_school_school_key__school_key__ref_dim_school_", "alias": "relationships_fct_student_scho_a506ff10ff57a9f497f3d8065cbd010f", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_school"], ["fct_student_school"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/relationships_fct_student_scho_a506ff10ff57a9f497f3d8065cbd010f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fct_student_scho_a506ff10ff57a9f497f3d8065cbd010f"}, "created_at": 1650510022.029664, "compiled_sql": "\n    \n    \n\nwith child as (\n    select school_key as from_field\n    from `gcp-project`.`dev_core`.`fct_student_school`\n    where school_key is not null\n),\n\nparent as (\n    select school_key as to_field\n    from `gcp-project`.`dev_core`.`dim_school`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "school_key", "file_key_name": "models.fct_student_school"}, "test.project.unique_bridge_staff_group_staff_group_key_staff_key.71682839f2": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "staff_group_key || '-' || staff_key", "model": "{{ get_where_subquery(ref('bridge_staff_group')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.project.bridge_staff_group"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "unique_bridge_staff_group_staff_group_key_staff_key"], "unique_id": "test.project.unique_bridge_staff_group_staff_group_key_staff_key.71682839f2", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "unique_bridge_staff_group_staff_group_key_staff_key.sql", "original_file_path": "models/marts/core/core.yml", "name": "unique_bridge_staff_group_staff_group_key_staff_key", "alias": "unique_bridge_staff_group_staff_group_key_staff_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["bridge_staff_group"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/unique_bridge_staff_group_staff_group_key_staff_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650510022.0338924, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select staff_group_key || '-' || staff_key as unique_field\n  from `gcp-project`.`dev_core`.`bridge_staff_group`\n  where staff_group_key || '-' || staff_key is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.bridge_staff_group"}, "test.project.unique_dim_section_section_key.4b442b173b": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "section_key", "model": "{{ get_where_subquery(ref('dim_section')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_section"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "unique_dim_section_section_key"], "unique_id": "test.project.unique_dim_section_section_key.4b442b173b", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "unique_dim_section_section_key.sql", "original_file_path": "models/marts/core/core.yml", "name": "unique_dim_section_section_key", "alias": "unique_dim_section_section_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_section"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/unique_dim_section_section_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650510022.0353363, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select section_key as unique_field\n  from `gcp-project`.`dev_core`.`dim_section`\n  where section_key is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "section_key", "file_key_name": "models.dim_section"}, "test.project.not_null_dim_section_section_key.d763cc8042": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "section_key", "model": "{{ get_where_subquery(ref('dim_section')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_section"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "not_null_dim_section_section_key"], "unique_id": "test.project.not_null_dim_section_section_key.d763cc8042", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "not_null_dim_section_section_key.sql", "original_file_path": "models/marts/core/core.yml", "name": "not_null_dim_section_section_key", "alias": "not_null_dim_section_section_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_section"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_section_section_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650510022.0367777, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-project`.`dev_core`.`dim_section`\nwhere section_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "section_key", "file_key_name": "models.dim_section"}, "test.project.relationships_dim_section_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.1c63a4fa13": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_dim_section_bc94c2ac1074fa89eff47b0d3840ae83\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_local_education_agency')", "field": "local_education_agency_key", "column_name": "local_education_agency_key", "model": "{{ get_where_subquery(ref('dim_section')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_local_education_agency", "model.project.dim_section"]}, "config": {"enabled": true, "alias": "relationships_dim_section_bc94c2ac1074fa89eff47b0d3840ae83", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "relationships_dim_section_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_"], "unique_id": "test.project.relationships_dim_section_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.1c63a4fa13", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "relationships_dim_section_bc94c2ac1074fa89eff47b0d3840ae83.sql", "original_file_path": "models/marts/core/core.yml", "name": "relationships_dim_section_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_", "alias": "relationships_dim_section_bc94c2ac1074fa89eff47b0d3840ae83", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_local_education_agency"], ["dim_section"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/relationships_dim_section_bc94c2ac1074fa89eff47b0d3840ae83.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_dim_section_bc94c2ac1074fa89eff47b0d3840ae83"}, "created_at": 1650510022.0384057, "compiled_sql": "\n    \n    \n\nwith child as (\n    select local_education_agency_key as from_field\n    from `gcp-project`.`dev_core`.`dim_section`\n    where local_education_agency_key is not null\n),\n\nparent as (\n    select local_education_agency_key as to_field\n    from `gcp-project`.`dev_core`.`dim_local_education_agency`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "local_education_agency_key", "file_key_name": "models.dim_section"}, "test.project.relationships_dim_section_school_key__school_key__ref_dim_school_.b29c32ae93": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_dim_section_2e38f2c339276c08217f35f5dfd68b0e\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_school')", "field": "school_key", "column_name": "school_key", "model": "{{ get_where_subquery(ref('dim_section')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_school", "model.project.dim_section"]}, "config": {"enabled": true, "alias": "relationships_dim_section_2e38f2c339276c08217f35f5dfd68b0e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "relationships_dim_section_school_key__school_key__ref_dim_school_"], "unique_id": "test.project.relationships_dim_section_school_key__school_key__ref_dim_school_.b29c32ae93", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "relationships_dim_section_2e38f2c339276c08217f35f5dfd68b0e.sql", "original_file_path": "models/marts/core/core.yml", "name": "relationships_dim_section_school_key__school_key__ref_dim_school_", "alias": "relationships_dim_section_2e38f2c339276c08217f35f5dfd68b0e", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_school"], ["dim_section"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/relationships_dim_section_2e38f2c339276c08217f35f5dfd68b0e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_dim_section_2e38f2c339276c08217f35f5dfd68b0e"}, "created_at": 1650510022.0434442, "compiled_sql": "\n    \n    \n\nwith child as (\n    select school_key as from_field\n    from `gcp-project`.`dev_core`.`dim_section`\n    where school_key is not null\n),\n\nparent as (\n    select school_key as to_field\n    from `gcp-project`.`dev_core`.`dim_school`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "school_key", "file_key_name": "models.dim_section"}, "test.project.relationships_dim_section_session_key__session_key__ref_dim_session_.5fcf678cd6": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_dim_section_b5e3052d7db4e357d68d10109fcc302a\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_session')", "field": "session_key", "column_name": "session_key", "model": "{{ get_where_subquery(ref('dim_section')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_session", "model.project.dim_section"]}, "config": {"enabled": true, "alias": "relationships_dim_section_b5e3052d7db4e357d68d10109fcc302a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "relationships_dim_section_session_key__session_key__ref_dim_session_"], "unique_id": "test.project.relationships_dim_section_session_key__session_key__ref_dim_session_.5fcf678cd6", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "relationships_dim_section_b5e3052d7db4e357d68d10109fcc302a.sql", "original_file_path": "models/marts/core/core.yml", "name": "relationships_dim_section_session_key__session_key__ref_dim_session_", "alias": "relationships_dim_section_b5e3052d7db4e357d68d10109fcc302a", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_session"], ["dim_section"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/relationships_dim_section_b5e3052d7db4e357d68d10109fcc302a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_dim_section_b5e3052d7db4e357d68d10109fcc302a"}, "created_at": 1650510022.0480442, "compiled_sql": "\n    \n    \n\nwith child as (\n    select session_key as from_field\n    from `gcp-project`.`dev_core`.`dim_section`\n    where session_key is not null\n),\n\nparent as (\n    select session_key as to_field\n    from `gcp-project`.`dev_core`.`dim_session`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "session_key", "file_key_name": "models.dim_section"}, "test.project.not_null_dim_section_section_identifier.5aa4059a37": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "section_identifier", "model": "{{ get_where_subquery(ref('dim_section')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_section"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "not_null_dim_section_section_identifier"], "unique_id": "test.project.not_null_dim_section_section_identifier.5aa4059a37", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "not_null_dim_section_section_identifier.sql", "original_file_path": "models/marts/core/core.yml", "name": "not_null_dim_section_section_identifier", "alias": "not_null_dim_section_section_identifier", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_section"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_section_section_identifier.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650510022.0526023, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-project`.`dev_core`.`dim_section`\nwhere section_identifier is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "section_identifier", "file_key_name": "models.dim_section"}, "test.project.unique_dim_grading_period_grading_period_key.2c941ffbec": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "grading_period_key", "model": "{{ get_where_subquery(ref('dim_grading_period')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_grading_period"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "unique_dim_grading_period_grading_period_key"], "unique_id": "test.project.unique_dim_grading_period_grading_period_key.2c941ffbec", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "unique_dim_grading_period_grading_period_key.sql", "original_file_path": "models/marts/core/core.yml", "name": "unique_dim_grading_period_grading_period_key", "alias": "unique_dim_grading_period_grading_period_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_grading_period"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/unique_dim_grading_period_grading_period_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650510022.0540605, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select grading_period_key as unique_field\n  from `gcp-project`.`dev_core`.`dim_grading_period`\n  where grading_period_key is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "grading_period_key", "file_key_name": "models.dim_grading_period"}, "test.project.not_null_dim_grading_period_grading_period_key.a9c6847f9d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "grading_period_key", "model": "{{ get_where_subquery(ref('dim_grading_period')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_grading_period"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "not_null_dim_grading_period_grading_period_key"], "unique_id": "test.project.not_null_dim_grading_period_grading_period_key.a9c6847f9d", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "not_null_dim_grading_period_grading_period_key.sql", "original_file_path": "models/marts/core/core.yml", "name": "not_null_dim_grading_period_grading_period_key", "alias": "not_null_dim_grading_period_grading_period_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_grading_period"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_grading_period_grading_period_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650510022.0557096, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-project`.`dev_core`.`dim_grading_period`\nwhere grading_period_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "grading_period_key", "file_key_name": "models.dim_grading_period"}, "test.project.relationships_dim_grading_period_school_key__school_key__ref_dim_school_.fff5503f34": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_dim_grading_peri_bf5f9244b2f4169cae483073263d2681\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_school')", "field": "school_key", "column_name": "school_key", "model": "{{ get_where_subquery(ref('dim_grading_period')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_school", "model.project.dim_grading_period"]}, "config": {"enabled": true, "alias": "relationships_dim_grading_peri_bf5f9244b2f4169cae483073263d2681", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "relationships_dim_grading_period_school_key__school_key__ref_dim_school_"], "unique_id": "test.project.relationships_dim_grading_period_school_key__school_key__ref_dim_school_.fff5503f34", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "relationships_dim_grading_peri_bf5f9244b2f4169cae483073263d2681.sql", "original_file_path": "models/marts/core/core.yml", "name": "relationships_dim_grading_period_school_key__school_key__ref_dim_school_", "alias": "relationships_dim_grading_peri_bf5f9244b2f4169cae483073263d2681", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_school"], ["dim_grading_period"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/relationships_dim_grading_peri_bf5f9244b2f4169cae483073263d2681.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_dim_grading_peri_bf5f9244b2f4169cae483073263d2681"}, "created_at": 1650510022.057536, "compiled_sql": "\n    \n    \n\nwith child as (\n    select school_key as from_field\n    from `gcp-project`.`dev_core`.`dim_grading_period`\n    where school_key is not null\n),\n\nparent as (\n    select school_key as to_field\n    from `gcp-project`.`dev_core`.`dim_school`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "school_key", "file_key_name": "models.dim_grading_period"}, "test.project.unique_dim_local_education_agency_local_education_agency_key.2cf2d58a69": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "local_education_agency_key", "model": "{{ get_where_subquery(ref('dim_local_education_agency')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_local_education_agency"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "unique_dim_local_education_agency_local_education_agency_key"], "unique_id": "test.project.unique_dim_local_education_agency_local_education_agency_key.2cf2d58a69", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "unique_dim_local_education_agency_local_education_agency_key.sql", "original_file_path": "models/marts/core/core.yml", "name": "unique_dim_local_education_agency_local_education_agency_key", "alias": "unique_dim_local_education_agency_local_education_agency_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_local_education_agency"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/unique_dim_local_education_agency_local_education_agency_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650510022.0619547, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select local_education_agency_key as unique_field\n  from `gcp-project`.`dev_core`.`dim_local_education_agency`\n  where local_education_agency_key is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "local_education_agency_key", "file_key_name": "models.dim_local_education_agency"}, "test.project.not_null_dim_local_education_agency_local_education_agency_key.3f6251750d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "local_education_agency_key", "model": "{{ get_where_subquery(ref('dim_local_education_agency')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_local_education_agency"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "not_null_dim_local_education_agency_local_education_agency_key"], "unique_id": "test.project.not_null_dim_local_education_agency_local_education_agency_key.3f6251750d", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "not_null_dim_local_education_agency_local_education_agency_key.sql", "original_file_path": "models/marts/core/core.yml", "name": "not_null_dim_local_education_agency_local_education_agency_key", "alias": "not_null_dim_local_education_agency_local_education_agency_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_local_education_agency"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_local_education_agency_local_education_agency_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650510022.0634332, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-project`.`dev_core`.`dim_local_education_agency`\nwhere local_education_agency_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "local_education_agency_key", "file_key_name": "models.dim_local_education_agency"}, "test.project.unique_dim_local_education_agency_local_education_agency_id.1a30878627": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "local_education_agency_id", "model": "{{ get_where_subquery(ref('dim_local_education_agency')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_local_education_agency"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "unique_dim_local_education_agency_local_education_agency_id"], "unique_id": "test.project.unique_dim_local_education_agency_local_education_agency_id.1a30878627", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "unique_dim_local_education_agency_local_education_agency_id.sql", "original_file_path": "models/marts/core/core.yml", "name": "unique_dim_local_education_agency_local_education_agency_id", "alias": "unique_dim_local_education_agency_local_education_agency_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_local_education_agency"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/unique_dim_local_education_agency_local_education_agency_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650510022.0648582, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select local_education_agency_id as unique_field\n  from `gcp-project`.`dev_core`.`dim_local_education_agency`\n  where local_education_agency_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "local_education_agency_id", "file_key_name": "models.dim_local_education_agency"}, "test.project.not_null_dim_local_education_agency_local_education_agency_id.6ba737bcd9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "local_education_agency_id", "model": "{{ get_where_subquery(ref('dim_local_education_agency')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_local_education_agency"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "not_null_dim_local_education_agency_local_education_agency_id"], "unique_id": "test.project.not_null_dim_local_education_agency_local_education_agency_id.6ba737bcd9", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "not_null_dim_local_education_agency_local_education_agency_id.sql", "original_file_path": "models/marts/core/core.yml", "name": "not_null_dim_local_education_agency_local_education_agency_id", "alias": "not_null_dim_local_education_agency_local_education_agency_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_local_education_agency"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_local_education_agency_local_education_agency_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650510022.0664513, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-project`.`dev_core`.`dim_local_education_agency`\nwhere local_education_agency_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "local_education_agency_id", "file_key_name": "models.dim_local_education_agency"}, "test.project.unique_dim_school_school_key.64ec309207": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "school_key", "model": "{{ get_where_subquery(ref('dim_school')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_school"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "unique_dim_school_school_key"], "unique_id": "test.project.unique_dim_school_school_key.64ec309207", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "unique_dim_school_school_key.sql", "original_file_path": "models/marts/core/core.yml", "name": "unique_dim_school_school_key", "alias": "unique_dim_school_school_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_school"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/unique_dim_school_school_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650510022.0678942, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select school_key as unique_field\n  from `gcp-project`.`dev_core`.`dim_school`\n  where school_key is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "school_key", "file_key_name": "models.dim_school"}, "test.project.not_null_dim_school_school_key.209ee6078e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "school_key", "model": "{{ get_where_subquery(ref('dim_school')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_school"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "not_null_dim_school_school_key"], "unique_id": "test.project.not_null_dim_school_school_key.209ee6078e", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "not_null_dim_school_school_key.sql", "original_file_path": "models/marts/core/core.yml", "name": "not_null_dim_school_school_key", "alias": "not_null_dim_school_school_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_school"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_school_school_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650510022.069377, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-project`.`dev_core`.`dim_school`\nwhere school_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "school_key", "file_key_name": "models.dim_school"}, "test.project.relationships_dim_school_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.c40f28107b": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_dim_school_16176f352783ef9dbd2a61f8b08f167c\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_local_education_agency')", "field": "local_education_agency_key", "column_name": "local_education_agency_key", "model": "{{ get_where_subquery(ref('dim_school')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_local_education_agency", "model.project.dim_school"]}, "config": {"enabled": true, "alias": "relationships_dim_school_16176f352783ef9dbd2a61f8b08f167c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "relationships_dim_school_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_"], "unique_id": "test.project.relationships_dim_school_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.c40f28107b", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "relationships_dim_school_16176f352783ef9dbd2a61f8b08f167c.sql", "original_file_path": "models/marts/core/core.yml", "name": "relationships_dim_school_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_", "alias": "relationships_dim_school_16176f352783ef9dbd2a61f8b08f167c", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_local_education_agency"], ["dim_school"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/relationships_dim_school_16176f352783ef9dbd2a61f8b08f167c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_dim_school_16176f352783ef9dbd2a61f8b08f167c"}, "created_at": 1650510022.0710073, "compiled_sql": "\n    \n    \n\nwith child as (\n    select local_education_agency_key as from_field\n    from `gcp-project`.`dev_core`.`dim_school`\n    where local_education_agency_key is not null\n),\n\nparent as (\n    select local_education_agency_key as to_field\n    from `gcp-project`.`dev_core`.`dim_local_education_agency`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "local_education_agency_key", "file_key_name": "models.dim_school"}, "test.project.unique_dim_school_school_id.d10cafcd76": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "school_id", "model": "{{ get_where_subquery(ref('dim_school')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_school"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "unique_dim_school_school_id"], "unique_id": "test.project.unique_dim_school_school_id.d10cafcd76", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "unique_dim_school_school_id.sql", "original_file_path": "models/marts/core/core.yml", "name": "unique_dim_school_school_id", "alias": "unique_dim_school_school_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_school"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/unique_dim_school_school_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650510022.0753982, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select school_id as unique_field\n  from `gcp-project`.`dev_core`.`dim_school`\n  where school_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "school_id", "file_key_name": "models.dim_school"}, "test.project.not_null_dim_school_school_id.36d55ce30b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "school_id", "model": "{{ get_where_subquery(ref('dim_school')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_school"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "not_null_dim_school_school_id"], "unique_id": "test.project.not_null_dim_school_school_id.36d55ce30b", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "not_null_dim_school_school_id.sql", "original_file_path": "models/marts/core/core.yml", "name": "not_null_dim_school_school_id", "alias": "not_null_dim_school_school_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_school"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_school_school_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650510022.0776224, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-project`.`dev_core`.`dim_school`\nwhere school_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "school_id", "file_key_name": "models.dim_school"}, "test.project.unique_dim_session_session_key.b5230e3fd3": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "session_key", "model": "{{ get_where_subquery(ref('dim_session')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_session"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "unique_dim_session_session_key"], "unique_id": "test.project.unique_dim_session_session_key.b5230e3fd3", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "unique_dim_session_session_key.sql", "original_file_path": "models/marts/core/core.yml", "name": "unique_dim_session_session_key", "alias": "unique_dim_session_session_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_session"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/unique_dim_session_session_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650510022.0791264, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select session_key as unique_field\n  from `gcp-project`.`dev_core`.`dim_session`\n  where session_key is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "session_key", "file_key_name": "models.dim_session"}, "test.project.not_null_dim_session_session_key.2c2f8e6dac": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "session_key", "model": "{{ get_where_subquery(ref('dim_session')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_session"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "not_null_dim_session_session_key"], "unique_id": "test.project.not_null_dim_session_session_key.2c2f8e6dac", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "not_null_dim_session_session_key.sql", "original_file_path": "models/marts/core/core.yml", "name": "not_null_dim_session_session_key", "alias": "not_null_dim_session_session_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_session"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_session_session_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650510022.0806217, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-project`.`dev_core`.`dim_session`\nwhere session_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "session_key", "file_key_name": "models.dim_session"}, "test.project.relationships_dim_session_school_key__school_key__ref_dim_school_.d4064049b7": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_dim_session_3e72575c9101ef44f48695ee6d2b0040\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_school')", "field": "school_key", "column_name": "school_key", "model": "{{ get_where_subquery(ref('dim_session')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_school", "model.project.dim_session"]}, "config": {"enabled": true, "alias": "relationships_dim_session_3e72575c9101ef44f48695ee6d2b0040", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "relationships_dim_session_school_key__school_key__ref_dim_school_"], "unique_id": "test.project.relationships_dim_session_school_key__school_key__ref_dim_school_.d4064049b7", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "relationships_dim_session_3e72575c9101ef44f48695ee6d2b0040.sql", "original_file_path": "models/marts/core/core.yml", "name": "relationships_dim_session_school_key__school_key__ref_dim_school_", "alias": "relationships_dim_session_3e72575c9101ef44f48695ee6d2b0040", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_school"], ["dim_session"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/relationships_dim_session_3e72575c9101ef44f48695ee6d2b0040.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_dim_session_3e72575c9101ef44f48695ee6d2b0040"}, "created_at": 1650510022.082239, "compiled_sql": "\n    \n    \n\nwith child as (\n    select school_key as from_field\n    from `gcp-project`.`dev_core`.`dim_session`\n    where school_key is not null\n),\n\nparent as (\n    select school_key as to_field\n    from `gcp-project`.`dev_core`.`dim_school`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "school_key", "file_key_name": "models.dim_session"}, "test.project.unique_dim_staff_student_key.57b69ecc98": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "student_key", "model": "{{ get_where_subquery(ref('dim_staff')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_staff"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "unique_dim_staff_student_key"], "unique_id": "test.project.unique_dim_staff_student_key.57b69ecc98", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "unique_dim_staff_student_key.sql", "original_file_path": "models/marts/core/core.yml", "name": "unique_dim_staff_student_key", "alias": "unique_dim_staff_student_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_staff"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/unique_dim_staff_student_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650510022.0865872, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select student_key as unique_field\n  from `gcp-project`.`dev_core`.`dim_staff`\n  where student_key is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "student_key", "file_key_name": "models.dim_staff"}, "test.project.not_null_dim_staff_student_key.8f46632ad4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "student_key", "model": "{{ get_where_subquery(ref('dim_staff')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_staff"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "not_null_dim_staff_student_key"], "unique_id": "test.project.not_null_dim_staff_student_key.8f46632ad4", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "not_null_dim_staff_student_key.sql", "original_file_path": "models/marts/core/core.yml", "name": "not_null_dim_staff_student_key", "alias": "not_null_dim_staff_student_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_staff"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_staff_student_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650510022.0882215, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-project`.`dev_core`.`dim_staff`\nwhere student_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "student_key", "file_key_name": "models.dim_staff"}, "test.project.unique_stg_google_forms_responses_form_id_response_id.735779ab54": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "form_id || '-' || response_id", "model": "{{ get_where_subquery(ref('stg_google_forms_responses')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.project.stg_google_forms_responses"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "staging", "google_forms", "unique_stg_google_forms_responses_form_id_response_id"], "unique_id": "test.project.unique_stg_google_forms_responses_form_id_response_id.735779ab54", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "unique_stg_google_forms_responses_form_id_response_id.sql", "original_file_path": "models/staging/google_forms/stg_google_forms.yml", "name": "unique_stg_google_forms_responses_form_id_response_id", "alias": "unique_stg_google_forms_responses_form_id_response_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_google_forms_responses"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/google_forms/stg_google_forms.yml/unique_stg_google_forms_responses_form_id_response_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650510022.0910215, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select form_id || '-' || response_id as unique_field\n  from `gcp-project`.`dev_staging`.`stg_google_forms_responses`\n  where form_id || '-' || response_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_google_forms_responses"}, "test.project.unique_stg_google_forms_questions_form_id_question_id.21c31ca063": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "form_id || '-' || question_id", "model": "{{ get_where_subquery(ref('stg_google_forms_questions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.project.stg_google_forms_questions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "staging", "google_forms", "unique_stg_google_forms_questions_form_id_question_id"], "unique_id": "test.project.unique_stg_google_forms_questions_form_id_question_id.21c31ca063", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "unique_stg_google_forms_questions_form_id_question_id.sql", "original_file_path": "models/staging/google_forms/stg_google_forms.yml", "name": "unique_stg_google_forms_questions_form_id_question_id", "alias": "unique_stg_google_forms_questions_form_id_question_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_google_forms_questions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/google_forms/stg_google_forms.yml/unique_stg_google_forms_questions_form_id_question_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650510022.092617, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select form_id || '-' || question_id as unique_field\n  from `gcp-project`.`dev_staging`.`stg_google_forms_questions`\n  where form_id || '-' || question_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_google_forms_questions"}, "test.project.unique_dim_assessment_assessment_key.d45cb819a0": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "assessment_key", "model": "{{ get_where_subquery(ref('dim_assessment')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_assessment"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "assessments", "unique_dim_assessment_assessment_key"], "unique_id": "test.project.unique_dim_assessment_assessment_key.d45cb819a0", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "unique_dim_assessment_assessment_key.sql", "original_file_path": "models/marts/assessments/assessments.yml", "name": "unique_dim_assessment_assessment_key", "alias": "unique_dim_assessment_assessment_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_assessment"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/assessments/assessments.yml/unique_dim_assessment_assessment_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650510022.1028934, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select assessment_key as unique_field\n  from `gcp-project`.`dev_assessments`.`dim_assessment`\n  where assessment_key is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "assessment_key", "file_key_name": "models.dim_assessment"}, "test.project.not_null_dim_assessment_assessment_key.1ee4792dcf": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "assessment_key", "model": "{{ get_where_subquery(ref('dim_assessment')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_assessment"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "assessments", "not_null_dim_assessment_assessment_key"], "unique_id": "test.project.not_null_dim_assessment_assessment_key.1ee4792dcf", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "not_null_dim_assessment_assessment_key.sql", "original_file_path": "models/marts/assessments/assessments.yml", "name": "not_null_dim_assessment_assessment_key", "alias": "not_null_dim_assessment_assessment_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_assessment"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/assessments/assessments.yml/not_null_dim_assessment_assessment_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650510022.1043928, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-project`.`dev_assessments`.`dim_assessment`\nwhere assessment_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "assessment_key", "file_key_name": "models.dim_assessment"}, "test.project.not_null_dim_assessment_education_organization_key.e46eded9e2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "education_organization_key", "model": "{{ get_where_subquery(ref('dim_assessment')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_assessment"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "assessments", "not_null_dim_assessment_education_organization_key"], "unique_id": "test.project.not_null_dim_assessment_education_organization_key.e46eded9e2", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "not_null_dim_assessment_education_organization_key.sql", "original_file_path": "models/marts/assessments/assessments.yml", "name": "not_null_dim_assessment_education_organization_key", "alias": "not_null_dim_assessment_education_organization_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_assessment"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/assessments/assessments.yml/not_null_dim_assessment_education_organization_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650510022.106108, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-project`.`dev_assessments`.`dim_assessment`\nwhere education_organization_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "education_organization_key", "file_key_name": "models.dim_assessment"}, "test.project.not_null_dim_assessment_school_year.6f50975711": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "school_year", "model": "{{ get_where_subquery(ref('dim_assessment')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_assessment"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "assessments", "not_null_dim_assessment_school_year"], "unique_id": "test.project.not_null_dim_assessment_school_year.6f50975711", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "not_null_dim_assessment_school_year.sql", "original_file_path": "models/marts/assessments/assessments.yml", "name": "not_null_dim_assessment_school_year", "alias": "not_null_dim_assessment_school_year", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_assessment"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/assessments/assessments.yml/not_null_dim_assessment_school_year.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650510022.1076226, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-project`.`dev_assessments`.`dim_assessment`\nwhere school_year is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "school_year", "file_key_name": "models.dim_assessment"}, "test.project.not_null_dim_assessment_assessment_identifier.b01a1c84ef": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "assessment_identifier", "model": "{{ get_where_subquery(ref('dim_assessment')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_assessment"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "assessments", "not_null_dim_assessment_assessment_identifier"], "unique_id": "test.project.not_null_dim_assessment_assessment_identifier.b01a1c84ef", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "not_null_dim_assessment_assessment_identifier.sql", "original_file_path": "models/marts/assessments/assessments.yml", "name": "not_null_dim_assessment_assessment_identifier", "alias": "not_null_dim_assessment_assessment_identifier", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_assessment"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/assessments/assessments.yml/not_null_dim_assessment_assessment_identifier.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650510022.1091955, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-project`.`dev_assessments`.`dim_assessment`\nwhere assessment_identifier is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "assessment_identifier", "file_key_name": "models.dim_assessment"}, "test.project.relationships_fct_student_assessment_assessment_key__assessment_key__ref_dim_assessment_.fb7625afbd": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_student_asse_c16262d75cc7e4af113f86e2ae48fff6\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_assessment')", "field": "assessment_key", "column_name": "assessment_key", "model": "{{ get_where_subquery(ref('fct_student_assessment')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_assessment", "model.project.fct_student_assessment"]}, "config": {"enabled": true, "alias": "relationships_fct_student_asse_c16262d75cc7e4af113f86e2ae48fff6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "assessments", "relationships_fct_student_assessment_assessment_key__assessment_key__ref_dim_assessment_"], "unique_id": "test.project.relationships_fct_student_assessment_assessment_key__assessment_key__ref_dim_assessment_.fb7625afbd", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "relationships_fct_student_asse_c16262d75cc7e4af113f86e2ae48fff6.sql", "original_file_path": "models/marts/assessments/assessments.yml", "name": "relationships_fct_student_assessment_assessment_key__assessment_key__ref_dim_assessment_", "alias": "relationships_fct_student_asse_c16262d75cc7e4af113f86e2ae48fff6", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_assessment"], ["fct_student_assessment"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/assessments/assessments.yml/relationships_fct_student_asse_c16262d75cc7e4af113f86e2ae48fff6.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fct_student_asse_c16262d75cc7e4af113f86e2ae48fff6"}, "created_at": 1650510022.1114874, "compiled_sql": "\n    \n    \n\nwith child as (\n    select assessment_key as from_field\n    from `gcp-project`.`dev_assessments`.`fct_student_assessment`\n    where assessment_key is not null\n),\n\nparent as (\n    select assessment_key as to_field\n    from `gcp-project`.`dev_assessments`.`dim_assessment`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "assessment_key", "file_key_name": "models.fct_student_assessment"}, "test.project.relationships_fct_student_assessment_student_key__student_key__ref_dim_student_.505c0cae72": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_student_asse_5f28d9db6a23ff4d20abda5e94c218b1\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_student')", "field": "student_key", "column_name": "student_key", "model": "{{ get_where_subquery(ref('fct_student_assessment')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_student", "model.project.fct_student_assessment"]}, "config": {"enabled": true, "alias": "relationships_fct_student_asse_5f28d9db6a23ff4d20abda5e94c218b1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "assessments", "relationships_fct_student_assessment_student_key__student_key__ref_dim_student_"], "unique_id": "test.project.relationships_fct_student_assessment_student_key__student_key__ref_dim_student_.505c0cae72", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "relationships_fct_student_asse_5f28d9db6a23ff4d20abda5e94c218b1.sql", "original_file_path": "models/marts/assessments/assessments.yml", "name": "relationships_fct_student_assessment_student_key__student_key__ref_dim_student_", "alias": "relationships_fct_student_asse_5f28d9db6a23ff4d20abda5e94c218b1", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_student"], ["fct_student_assessment"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/assessments/assessments.yml/relationships_fct_student_asse_5f28d9db6a23ff4d20abda5e94c218b1.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fct_student_asse_5f28d9db6a23ff4d20abda5e94c218b1"}, "created_at": 1650510022.1158361, "compiled_sql": "\n    \n    \n\nwith child as (\n    select student_key as from_field\n    from `gcp-project`.`dev_assessments`.`fct_student_assessment`\n    where student_key is not null\n),\n\nparent as (\n    select student_key as to_field\n    from `gcp-project`.`dev_core`.`dim_student`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "student_key", "file_key_name": "models.fct_student_assessment"}, "test.project.relationships_fct_student_assessment_school_key__school_key__ref_dim_school_.6d4121ee49": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_student_asse_d76a607ab7d091529cb39a304297bf1c\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_school')", "field": "school_key", "column_name": "school_key", "model": "{{ get_where_subquery(ref('fct_student_assessment')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_school", "model.project.fct_student_assessment"]}, "config": {"enabled": true, "alias": "relationships_fct_student_asse_d76a607ab7d091529cb39a304297bf1c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "assessments", "relationships_fct_student_assessment_school_key__school_key__ref_dim_school_"], "unique_id": "test.project.relationships_fct_student_assessment_school_key__school_key__ref_dim_school_.6d4121ee49", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "relationships_fct_student_asse_d76a607ab7d091529cb39a304297bf1c.sql", "original_file_path": "models/marts/assessments/assessments.yml", "name": "relationships_fct_student_assessment_school_key__school_key__ref_dim_school_", "alias": "relationships_fct_student_asse_d76a607ab7d091529cb39a304297bf1c", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_school"], ["fct_student_assessment"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/assessments/assessments.yml/relationships_fct_student_asse_d76a607ab7d091529cb39a304297bf1c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fct_student_asse_d76a607ab7d091529cb39a304297bf1c"}, "created_at": 1650510022.120235, "compiled_sql": "\n    \n    \n\nwith child as (\n    select school_key as from_field\n    from `gcp-project`.`dev_assessments`.`fct_student_assessment`\n    where school_key is not null\n),\n\nparent as (\n    select school_key as to_field\n    from `gcp-project`.`dev_core`.`dim_school`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "school_key", "file_key_name": "models.fct_student_assessment"}, "test.project.not_null_fct_student_assessment_school_year.d353cc4178": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "school_year", "model": "{{ get_where_subquery(ref('fct_student_assessment')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.fct_student_assessment"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "assessments", "not_null_fct_student_assessment_school_year"], "unique_id": "test.project.not_null_fct_student_assessment_school_year.d353cc4178", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "not_null_fct_student_assessment_school_year.sql", "original_file_path": "models/marts/assessments/assessments.yml", "name": "not_null_fct_student_assessment_school_year", "alias": "not_null_fct_student_assessment_school_year", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_student_assessment"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/assessments/assessments.yml/not_null_fct_student_assessment_school_year.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650510022.124737, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-project`.`dev_assessments`.`fct_student_assessment`\nwhere school_year is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "school_year", "file_key_name": "models.fct_student_assessment"}, "test.project.not_null_fct_student_assessment_student_assessment_identifier.bf72913748": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "student_assessment_identifier", "model": "{{ get_where_subquery(ref('fct_student_assessment')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.fct_student_assessment"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "assessments", "not_null_fct_student_assessment_student_assessment_identifier"], "unique_id": "test.project.not_null_fct_student_assessment_student_assessment_identifier.bf72913748", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "not_null_fct_student_assessment_student_assessment_identifier.sql", "original_file_path": "models/marts/assessments/assessments.yml", "name": "not_null_fct_student_assessment_student_assessment_identifier", "alias": "not_null_fct_student_assessment_student_assessment_identifier", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_student_assessment"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/assessments/assessments.yml/not_null_fct_student_assessment_student_assessment_identifier.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650510022.1263871, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-project`.`dev_assessments`.`fct_student_assessment`\nwhere student_assessment_identifier is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "student_assessment_identifier", "file_key_name": "models.fct_student_assessment"}, "test.project.unique_stg_edfi_local_education_agencies_CONCAT_school_year_local_education_agency_id_.68cfccff4d": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_stg_edfi_local_educatio_906b570608ceb8bb5b16cef42ff38670\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "CONCAT(school_year, '-', local_education_agency_id)", "model": "{{ get_where_subquery(ref('stg_edfi_local_education_agencies')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.project.stg_edfi_local_education_agencies"]}, "config": {"enabled": true, "alias": "unique_stg_edfi_local_educatio_906b570608ceb8bb5b16cef42ff38670", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "staging", "edfi", "unique_stg_edfi_local_education_agencies_CONCAT_school_year_local_education_agency_id_"], "unique_id": "test.project.unique_stg_edfi_local_education_agencies_CONCAT_school_year_local_education_agency_id_.68cfccff4d", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "unique_stg_edfi_local_educatio_906b570608ceb8bb5b16cef42ff38670.sql", "original_file_path": "models/staging/edfi/stg_edfi.yml", "name": "unique_stg_edfi_local_education_agencies_CONCAT_school_year_local_education_agency_id_", "alias": "unique_stg_edfi_local_educatio_906b570608ceb8bb5b16cef42ff38670", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_edfi_local_education_agencies"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi.yml/unique_stg_edfi_local_educatio_906b570608ceb8bb5b16cef42ff38670.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_stg_edfi_local_educatio_906b570608ceb8bb5b16cef42ff38670"}, "created_at": 1650510022.1310794, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select CONCAT(school_year, '-', local_education_agency_id) as unique_field\n  from `gcp-project`.`dev_staging`.`stg_edfi_local_education_agencies`\n  where CONCAT(school_year, '-', local_education_agency_id) is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_edfi_local_education_agencies"}, "test.project.relationships_stg_edfi_schools_school_id__school_reference_school_id__ref_stg_edfi_sessions_.621576b37d": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_edfi_schools_645314044c3e64b6ef667c07a9323a4b\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_edfi_sessions')", "field": "school_reference.school_id", "column_name": "school_id", "model": "{{ get_where_subquery(ref('stg_edfi_schools')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.project.stg_edfi_sessions", "model.project.stg_edfi_schools"]}, "config": {"enabled": true, "alias": "relationships_stg_edfi_schools_645314044c3e64b6ef667c07a9323a4b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "staging", "edfi", "relationships_stg_edfi_schools_school_id__school_reference_school_id__ref_stg_edfi_sessions_"], "unique_id": "test.project.relationships_stg_edfi_schools_school_id__school_reference_school_id__ref_stg_edfi_sessions_.621576b37d", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "relationships_stg_edfi_schools_645314044c3e64b6ef667c07a9323a4b.sql", "original_file_path": "models/staging/edfi/stg_edfi.yml", "name": "relationships_stg_edfi_schools_school_id__school_reference_school_id__ref_stg_edfi_sessions_", "alias": "relationships_stg_edfi_schools_645314044c3e64b6ef667c07a9323a4b", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_edfi_sessions"], ["stg_edfi_schools"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi.yml/relationships_stg_edfi_schools_645314044c3e64b6ef667c07a9323a4b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_stg_edfi_schools_645314044c3e64b6ef667c07a9323a4b"}, "created_at": 1650510022.133055, "compiled_sql": "\n    \n    \n\nwith child as (\n    select school_id as from_field\n    from `gcp-project`.`dev_staging`.`stg_edfi_schools`\n    where school_id is not null\n),\n\nparent as (\n    select school_reference.school_id as to_field\n    from `gcp-project`.`dev_staging`.`stg_edfi_sessions`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "school_id", "file_key_name": "models.stg_edfi_schools"}, "test.project.unique_stg_edfi_students_school_year_student_unique_id.3a33c30a48": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "school_year || '-' || student_unique_id", "model": "{{ get_where_subquery(ref('stg_edfi_students')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.project.stg_edfi_students"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "staging", "edfi", "unique_stg_edfi_students_school_year_student_unique_id"], "unique_id": "test.project.unique_stg_edfi_students_school_year_student_unique_id.3a33c30a48", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "unique_stg_edfi_students_school_year_student_unique_id.sql", "original_file_path": "models/staging/edfi/stg_edfi.yml", "name": "unique_stg_edfi_students_school_year_student_unique_id", "alias": "unique_stg_edfi_students_school_year_student_unique_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_edfi_students"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi.yml/unique_stg_edfi_students_school_year_student_unique_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650510022.1371965, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select school_year || '-' || student_unique_id as unique_field\n  from `gcp-project`.`dev_staging`.`stg_edfi_students`\n  where school_year || '-' || student_unique_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_edfi_students"}, "test.project.relationships_rls_user_student_data_authorization_student_key__student_key__ref_dim_student_.2b38b50db6": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_rls_user_student_95bbd76f907cc43c4b9d27cc2096f3ed\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_student')", "field": "student_key", "column_name": "student_key", "model": "{{ get_where_subquery(ref('rls_user_student_data_authorization')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_student", "model.project.rls_user_student_data_authorization"]}, "config": {"enabled": true, "alias": "relationships_rls_user_student_95bbd76f907cc43c4b9d27cc2096f3ed", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "row_level_security", "relationships_rls_user_student_data_authorization_student_key__student_key__ref_dim_student_"], "unique_id": "test.project.relationships_rls_user_student_data_authorization_student_key__student_key__ref_dim_student_.2b38b50db6", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "relationships_rls_user_student_95bbd76f907cc43c4b9d27cc2096f3ed.sql", "original_file_path": "models/marts/row_level_security/row_level_security.yml", "name": "relationships_rls_user_student_data_authorization_student_key__student_key__ref_dim_student_", "alias": "relationships_rls_user_student_95bbd76f907cc43c4b9d27cc2096f3ed", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_student"], ["rls_user_student_data_authorization"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/row_level_security/row_level_security.yml/relationships_rls_user_student_95bbd76f907cc43c4b9d27cc2096f3ed.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_rls_user_student_95bbd76f907cc43c4b9d27cc2096f3ed"}, "created_at": 1650510022.139966, "compiled_sql": "\n    \n    \n\nwith child as (\n    select student_key as from_field\n    from `gcp-project`.`dev_row_level_security`.`rls_user_student_data_authorization`\n    where student_key is not null\n),\n\nparent as (\n    select student_key as to_field\n    from `gcp-project`.`dev_core`.`dim_student`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "student_key", "file_key_name": "models.rls_user_student_data_authorization"}, "test.project.not_null_fct_student_section_grade_student_key.cc4059fd96": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "student_key", "model": "{{ get_where_subquery(ref('fct_student_section_grade')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.fct_student_section_grade"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "grades", "not_null_fct_student_section_grade_student_key"], "unique_id": "test.project.not_null_fct_student_section_grade_student_key.cc4059fd96", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "not_null_fct_student_section_grade_student_key.sql", "original_file_path": "models/marts/grades/grades.yml", "name": "not_null_fct_student_section_grade_student_key", "alias": "not_null_fct_student_section_grade_student_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_student_section_grade"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/grades/grades.yml/not_null_fct_student_section_grade_student_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650510022.1469853, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-project`.`dev_grades`.`fct_student_section_grade`\nwhere student_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "student_key", "file_key_name": "models.fct_student_section_grade"}, "test.project.not_null_fct_student_section_grade_letter_grade_earned.14c0fe6021": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "letter_grade_earned", "model": "{{ get_where_subquery(ref('fct_student_section_grade')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.fct_student_section_grade"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "grades", "not_null_fct_student_section_grade_letter_grade_earned"], "unique_id": "test.project.not_null_fct_student_section_grade_letter_grade_earned.14c0fe6021", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "not_null_fct_student_section_grade_letter_grade_earned.sql", "original_file_path": "models/marts/grades/grades.yml", "name": "not_null_fct_student_section_grade_letter_grade_earned", "alias": "not_null_fct_student_section_grade_letter_grade_earned", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_student_section_grade"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/grades/grades.yml/not_null_fct_student_section_grade_letter_grade_earned.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650510022.1486366, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-project`.`dev_grades`.`fct_student_section_grade`\nwhere letter_grade_earned is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "letter_grade_earned", "file_key_name": "models.fct_student_section_grade"}, "test.project.dbt_utils_expression_is_true_fct_student_section_grade_numeric_grade_earned_0.144140aea3": {"raw_sql": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_f_a00a47d0ec0454b18653d19e928733eb\") }}", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "numeric_grade_earned >= 0", "model": "{{ get_where_subquery(ref('fct_student_section_grade')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.project.fct_student_section_grade"]}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_f_a00a47d0ec0454b18653d19e928733eb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-project", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "grades", "dbt_utils_expression_is_true_fct_student_section_grade_numeric_grade_earned_0"], "unique_id": "test.project.dbt_utils_expression_is_true_fct_student_section_grade_numeric_grade_earned_0.144140aea3", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "dbt_utils_expression_is_true_f_a00a47d0ec0454b18653d19e928733eb.sql", "original_file_path": "models/marts/grades/grades.yml", "name": "dbt_utils_expression_is_true_fct_student_section_grade_numeric_grade_earned_0", "alias": "dbt_utils_expression_is_true_f_a00a47d0ec0454b18653d19e928733eb", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_student_section_grade"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/grades/grades.yml/dbt_utils_expression_is_true_f_a00a47d0ec0454b18653d19e928733eb.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_expression_is_true_f_a00a47d0ec0454b18653d19e928733eb"}, "created_at": 1650510022.1500878, "compiled_sql": "\n\nwith meet_condition as (\n    select * from `gcp-project`.`dev_grades`.`fct_student_section_grade` where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(numeric_grade_earned >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.fct_student_section_grade"}}, "sources": {"source.project.staging.base_nwea_map_assessment_results": {"fqn": ["project", "staging", "nwea_map", "staging", "base_nwea_map_assessment_results"], "database": "gcp-project", "schema": "dev_staging", "unique_id": "source.project.staging.base_nwea_map_assessment_results", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "models/staging/nwea_map/src_nwea_map.yml", "original_file_path": "models/staging/nwea_map/src_nwea_map.yml", "name": "base_nwea_map_assessment_results", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_nwea_map_assessment_results", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-bucket-1/nwea_map/*assessment_results.csv", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "csv", "skip_leading_rows": 1}}, "description": "", "columns": {"term_name": {"name": "term_name", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "district_name": {"name": "district_name", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "district__state_i_d": {"name": "district__state_i_d", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "school_name": {"name": "school_name", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "school__state_i_d": {"name": "school__state_i_d", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "student_i_d": {"name": "student_i_d", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "student__state_i_d": {"name": "student__state_i_d", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "subject": {"name": "subject", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "course": {"name": "course", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "growth_measure_y_n": {"name": "growth_measure_y_n", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "norms_reference_data": {"name": "norms_reference_data", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "w_i_selected_a_y_fall": {"name": "w_i_selected_a_y_fall", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "w_i_selected_a_y_winter": {"name": "w_i_selected_a_y_winter", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "w_i_selected_a_y_spring": {"name": "w_i_selected_a_y_spring", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "w_i_previous_a_y_fall": {"name": "w_i_previous_a_y_fall", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "w_i_previous_a_y_winter": {"name": "w_i_previous_a_y_winter", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "w_i_previous_a_y_spring": {"name": "w_i_previous_a_y_spring", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "test_type": {"name": "test_type", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "test_name": {"name": "test_name", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "test_i_d": {"name": "test_i_d", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "test_start_date": {"name": "test_start_date", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "test_start_time": {"name": "test_start_time", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "test_duration_minutes": {"name": "test_duration_minutes", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "test_r_i_t_score": {"name": "test_r_i_t_score", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "test_standard_error": {"name": "test_standard_error", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "test_percentile": {"name": "test_percentile", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "achievement_quintile": {"name": "achievement_quintile", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "percent_correct": {"name": "percent_correct", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "rapid_guessing_percentage": {"name": "rapid_guessing_percentage", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "fall_to_fall_projected_growth": {"name": "fall_to_fall_projected_growth", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "fall_to_fall_observed_growth": {"name": "fall_to_fall_observed_growth", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "fall_to_fall_observed_growth_s_e": {"name": "fall_to_fall_observed_growth_s_e", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "fall_to_fall_met_projected_growth": {"name": "fall_to_fall_met_projected_growth", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "fall_to_fall_conditional_growth_index": {"name": "fall_to_fall_conditional_growth_index", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "fall_to_fall_conditional_growth_percentile": {"name": "fall_to_fall_conditional_growth_percentile", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "fall_to_fall_growth_quintile": {"name": "fall_to_fall_growth_quintile", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "fall_to_winter_projected_growth": {"name": "fall_to_winter_projected_growth", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "fall_to_winter_observed_growth": {"name": "fall_to_winter_observed_growth", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "fall_to_winter_observed_growth_s_e": {"name": "fall_to_winter_observed_growth_s_e", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "fall_to_winter_met_projected_growth": {"name": "fall_to_winter_met_projected_growth", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "fall_to_winter_conditional_growth_index": {"name": "fall_to_winter_conditional_growth_index", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "fall_to_winter_conditional_growth_percentile": {"name": "fall_to_winter_conditional_growth_percentile", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "fall_to_winter_growth_quintile": {"name": "fall_to_winter_growth_quintile", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "fall_to_spring_projected_growth": {"name": "fall_to_spring_projected_growth", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "fall_to_spring_observed_growth": {"name": "fall_to_spring_observed_growth", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "fall_to_spring_observed_growth_s_e": {"name": "fall_to_spring_observed_growth_s_e", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "fall_to_spring_met_projected_growth": {"name": "fall_to_spring_met_projected_growth", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "fall_to_spring_conditional_growth_index": {"name": "fall_to_spring_conditional_growth_index", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "fall_to_spring_conditional_growth_percentile": {"name": "fall_to_spring_conditional_growth_percentile", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "fall_to_spring_growth_quintile": {"name": "fall_to_spring_growth_quintile", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "winter_to_winter_projected_growth": {"name": "winter_to_winter_projected_growth", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "winter_to_winter_observed_growth": {"name": "winter_to_winter_observed_growth", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "winter_to_winter_observed_growth_s_e": {"name": "winter_to_winter_observed_growth_s_e", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "winter_to_winter_met_projected_growth": {"name": "winter_to_winter_met_projected_growth", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "winter_to_winter_conditional_growth_index": {"name": "winter_to_winter_conditional_growth_index", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "winter_to_winter_conditional_growth_percentile": {"name": "winter_to_winter_conditional_growth_percentile", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "winter_to_winter_growth_quintile": {"name": "winter_to_winter_growth_quintile", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "winter_to_spring_projected_growth": {"name": "winter_to_spring_projected_growth", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "winter_to_spring_observed_growth": {"name": "winter_to_spring_observed_growth", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "winter_to_spring_observed_growth_s_e": {"name": "winter_to_spring_observed_growth_s_e", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "winter_to_spring_met_projected_growth": {"name": "winter_to_spring_met_projected_growth", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "winter_to_spring_conditional_growth_index": {"name": "winter_to_spring_conditional_growth_index", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "winter_to_spring_conditional_growth_percentile": {"name": "winter_to_spring_conditional_growth_percentile", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "winter_to_spring_growth_quintile": {"name": "winter_to_spring_growth_quintile", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "spring_to_spring_projected_growth": {"name": "spring_to_spring_projected_growth", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "spring_to_spring_observed_growth": {"name": "spring_to_spring_observed_growth", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "spring_to_spring_observed_growth_s_e": {"name": "spring_to_spring_observed_growth_s_e", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "spring_to_spring_met_projected_growth": {"name": "spring_to_spring_met_projected_growth", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "spring_to_spring_conditional_growth_index": {"name": "spring_to_spring_conditional_growth_index", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "spring_to_spring_conditional_growth_percentile": {"name": "spring_to_spring_conditional_growth_percentile", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "spring_to_spring_growth_quintile": {"name": "spring_to_spring_growth_quintile", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "lexile_score": {"name": "lexile_score", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "lexile_min": {"name": "lexile_min", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "lexile_max": {"name": "lexile_max", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "quantile_score": {"name": "quantile_score", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "quantile_min": {"name": "quantile_min", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "quantile_max": {"name": "quantile_max", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "goal1_name": {"name": "goal1_name", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "goal1_rit_score": {"name": "goal1_rit_score", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "goal1_std_err": {"name": "goal1_std_err", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "goal1_range": {"name": "goal1_range", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "goal1_adjective": {"name": "goal1_adjective", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "goal2_name": {"name": "goal2_name", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "goal2_rit_score": {"name": "goal2_rit_score", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "goal2_std_err": {"name": "goal2_std_err", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "goal2_range": {"name": "goal2_range", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "goal2_adjective": {"name": "goal2_adjective", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "goal3_name": {"name": "goal3_name", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "goal3_rit_score": {"name": "goal3_rit_score", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "goal3_std_err": {"name": "goal3_std_err", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "goal3_range": {"name": "goal3_range", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "goal3_adjective": {"name": "goal3_adjective", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "goal4_name": {"name": "goal4_name", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "goal4_rit_score": {"name": "goal4_rit_score", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "goal4_std_err": {"name": "goal4_std_err", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "goal4_range": {"name": "goal4_range", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "goal4_adjective": {"name": "goal4_adjective", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "goal5_name": {"name": "goal5_name", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "goal5_rit_score": {"name": "goal5_rit_score", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "goal5_std_err": {"name": "goal5_std_err", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "goal5_range": {"name": "goal5_range", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "goal5_adjective": {"name": "goal5_adjective", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "goal6_name": {"name": "goal6_name", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "goal6_rit_score": {"name": "goal6_rit_score", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "goal6_std_err": {"name": "goal6_std_err", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "goal6_range": {"name": "goal6_range", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "goal6_adjective": {"name": "goal6_adjective", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "goal7_name": {"name": "goal7_name", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "goal7_rit_score": {"name": "goal7_rit_score", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "goal7_std_err": {"name": "goal7_std_err", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "goal7_range": {"name": "goal7_range", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "goal7_adjective": {"name": "goal7_adjective", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "goal8_name": {"name": "goal8_name", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "goal8_rit_score": {"name": "goal8_rit_score", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "goal8_std_err": {"name": "goal8_std_err", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "goal8_range": {"name": "goal8_range", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "goal8_adjective": {"name": "goal8_adjective", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "typical_fall_to_fall_growth": {"name": "typical_fall_to_fall_growth", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "typical_fall_to_winter_growth": {"name": "typical_fall_to_winter_growth", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "typical_fall_to_spring_growth": {"name": "typical_fall_to_spring_growth", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "typical_winter_to_winter_growth": {"name": "typical_winter_to_winter_growth", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "typical_winter_to_spring_growth": {"name": "typical_winter_to_spring_growth", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "typical_spring_to_spring_growth": {"name": "typical_spring_to_spring_growth", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "projected_proficiency_study1": {"name": "projected_proficiency_study1", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "projected_proficiency_level1": {"name": "projected_proficiency_level1", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "projected_proficiency_study2": {"name": "projected_proficiency_study2", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "projected_proficiency_level2": {"name": "projected_proficiency_level2", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "projected_proficiency_study3": {"name": "projected_proficiency_study3", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "projected_proficiency_level3": {"name": "projected_proficiency_level3", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "projected_proficiency_study4": {"name": "projected_proficiency_study4", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "projected_proficiency_level4": {"name": "projected_proficiency_level4", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "projected_proficiency_study5": {"name": "projected_proficiency_study5", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "projected_proficiency_level5": {"name": "projected_proficiency_level5", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "projected_proficiency_study6": {"name": "projected_proficiency_study6", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "projected_proficiency_level6": {"name": "projected_proficiency_level6", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "projected_proficiency_study7": {"name": "projected_proficiency_study7", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "projected_proficiency_level7": {"name": "projected_proficiency_level7", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "projected_proficiency_study8": {"name": "projected_proficiency_study8", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "projected_proficiency_level8": {"name": "projected_proficiency_level8", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "projected_proficiency_study9": {"name": "projected_proficiency_study9", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "projected_proficiency_level9": {"name": "projected_proficiency_level9", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "projected_proficiency_study10": {"name": "projected_proficiency_study10", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "projected_proficiency_level10": {"name": "projected_proficiency_level10", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-project`.`dev_staging`.`base_nwea_map_assessment_results`", "created_at": 1650509849.099308}, "source.project.staging.base_nwea_map_class_assignments": {"fqn": ["project", "staging", "nwea_map", "staging", "base_nwea_map_class_assignments"], "database": "gcp-project", "schema": "dev_staging", "unique_id": "source.project.staging.base_nwea_map_class_assignments", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "models/staging/nwea_map/src_nwea_map.yml", "original_file_path": "models/staging/nwea_map/src_nwea_map.yml", "name": "base_nwea_map_class_assignments", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_nwea_map_class_assignments", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-bucket-1/nwea_map/*class_assignments.csv", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "csv", "skip_leading_rows": 1}}, "description": "", "columns": {"term_name": {"name": "term_name", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "district_name": {"name": "district_name", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "district__state_i_d": {"name": "district__state_i_d", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "school_name": {"name": "school_name", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "school__state_i_d": {"name": "school__state_i_d", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "student_i_d": {"name": "student_i_d", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "student__state_i_d": {"name": "student__state_i_d", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "class_name": {"name": "class_name", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "teacher_name": {"name": "teacher_name", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "teacher_i_d": {"name": "teacher_i_d", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "teacher__state_i_d": {"name": "teacher__state_i_d", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-project`.`dev_staging`.`base_nwea_map_class_assignments`", "created_at": 1650509849.0994477}, "source.project.staging.base_nwea_map_students_by_school": {"fqn": ["project", "staging", "nwea_map", "staging", "base_nwea_map_students_by_school"], "database": "gcp-project", "schema": "dev_staging", "unique_id": "source.project.staging.base_nwea_map_students_by_school", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "models/staging/nwea_map/src_nwea_map.yml", "original_file_path": "models/staging/nwea_map/src_nwea_map.yml", "name": "base_nwea_map_students_by_school", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_nwea_map_students_by_school", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-bucket-1/nwea_map/*students_by_school.csv", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "csv", "skip_leading_rows": 1}}, "description": "", "columns": {"term_name": {"name": "term_name", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "district_name": {"name": "district_name", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "district__state_i_d": {"name": "district__state_i_d", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "school_name": {"name": "school_name", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "school__state_i_d": {"name": "school__state_i_d", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "student_last_name": {"name": "student_last_name", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "student_first_name": {"name": "student_first_name", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "student_m_i": {"name": "student_m_i", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "student_i_d": {"name": "student_i_d", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "student__state_i_d": {"name": "student__state_i_d", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "student_date_of_birth": {"name": "student_date_of_birth", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "student_ethnic_group": {"name": "student_ethnic_group", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "n_w_e_a_standard__ethnic_group": {"name": "n_w_e_a_standard__ethnic_group", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "student_gender": {"name": "student_gender", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "grade": {"name": "grade", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "n_w_e_a_standard__grade": {"name": "n_w_e_a_standard__grade", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-project`.`dev_staging`.`base_nwea_map_students_by_school`", "created_at": 1650509849.0995731}, "source.project.staging.edfi_processed_change_versions": {"fqn": ["project", "staging", "edfi", "staging", "edfi_processed_change_versions"], "database": "gcp-project", "schema": "dev_staging", "unique_id": "source.project.staging.edfi_processed_change_versions", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "edfi_processed_change_versions", "source_name": "staging", "source_description": "", "loader": "", "identifier": "edfi_processed_change_versions", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "this will be ignored", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "NEWLINE_DELIMITED_JSON", "uris": ["gs://dagster-dev-bucket-1/edfi_api/school_year_2021/*.json", "gs://dagster-dev-bucket-1/edfi_api/school_year_2022/*.json", "gs://dagster-dev-bucket-1/edfi_api/school_year_2023/*.json", "gs://dagster-dev-bucket-1/edfi_api/school_year_2024/*.json"]}}, "description": "", "columns": {"school_year": {"name": "school_year", "description": "", "meta": {}, "data_type": "integer", "quote": null, "tags": []}, "run_id": {"name": "run_id", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "oldest_change_version": {"name": "oldest_change_version", "description": "", "meta": {}, "data_type": "integer", "quote": null, "tags": []}, "newest_change_version": {"name": "newest_change_version", "description": "", "meta": {}, "data_type": "integer", "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-project`.`dev_staging`.`edfi_processed_change_versions`", "created_at": 1650509849.099678}, "source.project.staging.base_edfi_assessments": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_assessments"], "database": "gcp-project", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_assessments", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_assessments", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_assessments", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_assessments/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "school_year", "description": "", "data_type": "integer", "meta": {}}, {"name": "date_extracted", "description": "", "data_type": "timestamp", "meta": {}}, {"name": "extract_type", "description": "", "data_type": "string", "meta": {}}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_assessments"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-project`.`dev_staging`.`base_edfi_assessments`", "created_at": 1650509849.099779}, "source.project.staging.base_edfi_calendars": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_calendars"], "database": "gcp-project", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_calendars", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_calendars", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_calendars", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_calendars/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "school_year", "description": "", "data_type": "integer", "meta": {}}, {"name": "date_extracted", "description": "", "data_type": "timestamp", "meta": {}}, {"name": "extract_type", "description": "", "data_type": "string", "meta": {}}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_calendars"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-project`.`dev_staging`.`base_edfi_calendars`", "created_at": 1650509849.0998783}, "source.project.staging.base_edfi_calendar_dates": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_calendar_dates"], "database": "gcp-project", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_calendar_dates", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_calendar_dates", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_calendar_dates", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_calendar_dates/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "school_year", "description": "", "data_type": "integer", "meta": {}}, {"name": "date_extracted", "description": "", "data_type": "timestamp", "meta": {}}, {"name": "extract_type", "description": "", "data_type": "string", "meta": {}}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_calendar_dates"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-project`.`dev_staging`.`base_edfi_calendar_dates`", "created_at": 1650509849.0999777}, "source.project.staging.base_edfi_courses": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_courses"], "database": "gcp-project", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_courses", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_courses", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_courses", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_courses/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "school_year", "description": "", "data_type": "integer", "meta": {}}, {"name": "date_extracted", "description": "", "data_type": "timestamp", "meta": {}}, {"name": "extract_type", "description": "", "data_type": "string", "meta": {}}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_courses"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-project`.`dev_staging`.`base_edfi_courses`", "created_at": 1650509849.1000772}, "source.project.staging.base_edfi_course_offerings": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_course_offerings"], "database": "gcp-project", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_course_offerings", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_course_offerings", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_course_offerings", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_course_offerings/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "school_year", "description": "", "data_type": "integer", "meta": {}}, {"name": "date_extracted", "description": "", "data_type": "timestamp", "meta": {}}, {"name": "extract_type", "description": "", "data_type": "string", "meta": {}}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_course_offerings"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-project`.`dev_staging`.`base_edfi_course_offerings`", "created_at": 1650509849.100176}, "source.project.staging.base_edfi_discipline_actions": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_discipline_actions"], "database": "gcp-project", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_discipline_actions", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_discipline_actions", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_discipline_actions", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_discipline_actions/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "school_year", "description": "", "data_type": "integer", "meta": {}}, {"name": "date_extracted", "description": "", "data_type": "timestamp", "meta": {}}, {"name": "extract_type", "description": "", "data_type": "string", "meta": {}}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_discipline_actions"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-project`.`dev_staging`.`base_edfi_discipline_actions`", "created_at": 1650509849.1002748}, "source.project.staging.base_edfi_discipline_incidents": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_discipline_incidents"], "database": "gcp-project", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_discipline_incidents", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_discipline_incidents", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_discipline_incidents", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_discipline_incidents/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "school_year", "description": "", "data_type": "integer", "meta": {}}, {"name": "date_extracted", "description": "", "data_type": "timestamp", "meta": {}}, {"name": "extract_type", "description": "", "data_type": "string", "meta": {}}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_discipline_incidents"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-project`.`dev_staging`.`base_edfi_discipline_incidents`", "created_at": 1650509849.1003802}, "source.project.staging.base_edfi_grading_periods": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_grading_periods"], "database": "gcp-project", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_grading_periods", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_grading_periods", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_grading_periods", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_grading_periods/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "school_year", "description": "", "data_type": "integer", "meta": {}}, {"name": "date_extracted", "description": "", "data_type": "timestamp", "meta": {}}, {"name": "extract_type", "description": "", "data_type": "string", "meta": {}}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_grading_periods"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-project`.`dev_staging`.`base_edfi_grading_periods`", "created_at": 1650509849.100522}, "source.project.staging.base_edfi_grading_period_descriptors": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_grading_period_descriptors"], "database": "gcp-project", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_grading_period_descriptors", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_grading_period_descriptors", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_grading_period_descriptors", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_grading_period_descriptors/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "school_year", "description": "", "data_type": "integer", "meta": {}}, {"name": "date_extracted", "description": "", "data_type": "timestamp", "meta": {}}, {"name": "extract_type", "description": "", "data_type": "string", "meta": {}}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_grading_period_descriptors"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-project`.`dev_staging`.`base_edfi_grading_period_descriptors`", "created_at": 1650509849.1006246}, "source.project.staging.base_edfi_grades": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_grades"], "database": "gcp-project", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_grades", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_grades", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_grades", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_grades/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "school_year", "description": "", "data_type": "integer", "meta": {}}, {"name": "date_extracted", "description": "", "data_type": "timestamp", "meta": {}}, {"name": "extract_type", "description": "", "data_type": "string", "meta": {}}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_grades"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-project`.`dev_staging`.`base_edfi_grades`", "created_at": 1650509849.1007242}, "source.project.staging.base_edfi_local_education_agencies": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_local_education_agencies"], "database": "gcp-project", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_local_education_agencies", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_local_education_agencies", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_local_education_agencies", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_local_education_agencies/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "school_year", "description": "", "data_type": "integer", "meta": {}}, {"name": "date_extracted", "description": "", "data_type": "timestamp", "meta": {}}, {"name": "extract_type", "description": "", "data_type": "string", "meta": {}}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_local_education_agencies"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-project`.`dev_staging`.`base_edfi_local_education_agencies`", "created_at": 1650509849.100823}, "source.project.staging.base_edfi_objective_assessments": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_objective_assessments"], "database": "gcp-project", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_objective_assessments", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_objective_assessments", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_objective_assessments", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_objective_assessments/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "school_year", "description": "", "data_type": "integer", "meta": {}}, {"name": "date_extracted", "description": "", "data_type": "timestamp", "meta": {}}, {"name": "extract_type", "description": "", "data_type": "string", "meta": {}}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_objective_assessments"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-project`.`dev_staging`.`base_edfi_objective_assessments`", "created_at": 1650509849.100923}, "source.project.staging.base_edfi_parents": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_parents"], "database": "gcp-project", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_parents", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_parents", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_parents", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_parents/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "school_year", "description": "", "data_type": "integer", "meta": {}}, {"name": "date_extracted", "description": "", "data_type": "timestamp", "meta": {}}, {"name": "extract_type", "description": "", "data_type": "string", "meta": {}}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_parents"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-project`.`dev_staging`.`base_edfi_parents`", "created_at": 1650509849.1010225}, "source.project.staging.base_edfi_programs": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_programs"], "database": "gcp-project", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_programs", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_programs", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_programs", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_programs/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "school_year", "description": "", "data_type": "integer", "meta": {}}, {"name": "date_extracted", "description": "", "data_type": "timestamp", "meta": {}}, {"name": "extract_type", "description": "", "data_type": "string", "meta": {}}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_programs"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-project`.`dev_staging`.`base_edfi_programs`", "created_at": 1650509849.1011207}, "source.project.staging.base_edfi_schools": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_schools"], "database": "gcp-project", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_schools", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_schools", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_schools", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_schools/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "school_year", "description": "", "data_type": "integer", "meta": {}}, {"name": "date_extracted", "description": "", "data_type": "timestamp", "meta": {}}, {"name": "extract_type", "description": "", "data_type": "string", "meta": {}}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_schools"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-project`.`dev_staging`.`base_edfi_schools`", "created_at": 1650509849.101223}, "source.project.staging.base_edfi_school_year_types": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_school_year_types"], "database": "gcp-project", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_school_year_types", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_school_year_types", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_school_year_types", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_school_year_types/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "school_year", "description": "", "data_type": "integer", "meta": {}}, {"name": "date_extracted", "description": "", "data_type": "timestamp", "meta": {}}, {"name": "extract_type", "description": "", "data_type": "string", "meta": {}}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_school_year_types"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-project`.`dev_staging`.`base_edfi_school_year_types`", "created_at": 1650509849.1013246}, "source.project.staging.base_edfi_sections": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_sections"], "database": "gcp-project", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_sections", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_sections", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_sections", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_sections/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "school_year", "description": "", "data_type": "integer", "meta": {}}, {"name": "date_extracted", "description": "", "data_type": "timestamp", "meta": {}}, {"name": "extract_type", "description": "", "data_type": "string", "meta": {}}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_sections"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-project`.`dev_staging`.`base_edfi_sections`", "created_at": 1650509849.101423}, "source.project.staging.base_edfi_sessions": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_sessions"], "database": "gcp-project", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_sessions", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_sessions", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_sessions", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_sessions/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "school_year", "description": "", "data_type": "integer", "meta": {}}, {"name": "date_extracted", "description": "", "data_type": "timestamp", "meta": {}}, {"name": "extract_type", "description": "", "data_type": "string", "meta": {}}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_sessions"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-project`.`dev_staging`.`base_edfi_sessions`", "created_at": 1650509849.1015232}, "source.project.staging.base_edfi_staffs": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_staffs"], "database": "gcp-project", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_staffs", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_staffs", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_staffs", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_staffs/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "school_year", "description": "", "data_type": "integer", "meta": {}}, {"name": "date_extracted", "description": "", "data_type": "timestamp", "meta": {}}, {"name": "extract_type", "description": "", "data_type": "string", "meta": {}}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_staffs"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-project`.`dev_staging`.`base_edfi_staffs`", "created_at": 1650509849.1016243}, "source.project.staging.base_edfi_staff_discipline_incident_associations": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_staff_discipline_incident_associations"], "database": "gcp-project", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_staff_discipline_incident_associations", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_staff_discipline_incident_associations", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_staff_discipline_incident_associations", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_staff_discipline_incident_associations/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "school_year", "description": "", "data_type": "integer", "meta": {}}, {"name": "date_extracted", "description": "", "data_type": "timestamp", "meta": {}}, {"name": "extract_type", "description": "", "data_type": "string", "meta": {}}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_staff_discipline_incident_associations"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-project`.`dev_staging`.`base_edfi_staff_discipline_incident_associations`", "created_at": 1650509849.101723}, "source.project.staging.base_edfi_staff_education_organization_assignment_associations": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_staff_education_organization_assignment_associations"], "database": "gcp-project", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_staff_education_organization_assignment_associations", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_staff_education_organization_assignment_associations", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_staff_education_organization_assignment_associations", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_staff_education_organization_assignment_associations/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "school_year", "description": "", "data_type": "integer", "meta": {}}, {"name": "date_extracted", "description": "", "data_type": "timestamp", "meta": {}}, {"name": "extract_type", "description": "", "data_type": "string", "meta": {}}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_staff_education_organization_assignment_associations"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-project`.`dev_staging`.`base_edfi_staff_education_organization_assignment_associations`", "created_at": 1650509849.101822}, "source.project.staging.base_edfi_staff_school_associations": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_staff_school_associations"], "database": "gcp-project", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_staff_school_associations", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_staff_school_associations", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_staff_school_associations", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_staff_school_associations/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "school_year", "description": "", "data_type": "integer", "meta": {}}, {"name": "date_extracted", "description": "", "data_type": "timestamp", "meta": {}}, {"name": "extract_type", "description": "", "data_type": "string", "meta": {}}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_staff_school_associations"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-project`.`dev_staging`.`base_edfi_staff_school_associations`", "created_at": 1650509849.1019216}, "source.project.staging.base_edfi_staff_section_associations": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_staff_section_associations"], "database": "gcp-project", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_staff_section_associations", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_staff_section_associations", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_staff_section_associations", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_staff_section_associations/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "school_year", "description": "", "data_type": "integer", "meta": {}}, {"name": "date_extracted", "description": "", "data_type": "timestamp", "meta": {}}, {"name": "extract_type", "description": "", "data_type": "string", "meta": {}}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_staff_section_associations"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-project`.`dev_staging`.`base_edfi_staff_section_associations`", "created_at": 1650509849.1020224}, "source.project.staging.base_edfi_students": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_students"], "database": "gcp-project", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_students", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_students", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_students", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_students/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "school_year", "description": "", "data_type": "integer", "meta": {}}, {"name": "date_extracted", "description": "", "data_type": "timestamp", "meta": {}}, {"name": "extract_type", "description": "", "data_type": "string", "meta": {}}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_students"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-project`.`dev_staging`.`base_edfi_students`", "created_at": 1650509849.1021218}, "source.project.staging.base_edfi_student_assessments": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_student_assessments"], "database": "gcp-project", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_student_assessments", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_student_assessments", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_student_assessments", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_student_assessments/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "school_year", "description": "", "data_type": "integer", "meta": {}}, {"name": "date_extracted", "description": "", "data_type": "timestamp", "meta": {}}, {"name": "extract_type", "description": "", "data_type": "string", "meta": {}}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_student_assessments"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-project`.`dev_staging`.`base_edfi_student_assessments`", "created_at": 1650509849.10222}, "source.project.staging.base_edfi_student_discipline_incident_associations": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_student_discipline_incident_associations"], "database": "gcp-project", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_student_discipline_incident_associations", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_student_discipline_incident_associations", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_student_discipline_incident_associations", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_student_discipline_incident_associations/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "school_year", "description": "", "data_type": "integer", "meta": {}}, {"name": "date_extracted", "description": "", "data_type": "timestamp", "meta": {}}, {"name": "extract_type", "description": "", "data_type": "string", "meta": {}}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_student_discipline_incident_associations"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-project`.`dev_staging`.`base_edfi_student_discipline_incident_associations`", "created_at": 1650509849.1023202}, "source.project.staging.base_edfi_student_education_organization_associations": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_student_education_organization_associations"], "database": "gcp-project", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_student_education_organization_associations", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_student_education_organization_associations", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_student_education_organization_associations", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_student_education_organization_associations/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "school_year", "description": "", "data_type": "integer", "meta": {}}, {"name": "date_extracted", "description": "", "data_type": "timestamp", "meta": {}}, {"name": "extract_type", "description": "", "data_type": "string", "meta": {}}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_student_education_organization_associations"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-project`.`dev_staging`.`base_edfi_student_education_organization_associations`", "created_at": 1650509849.1024184}, "source.project.staging.base_edfi_student_parent_associations": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_student_parent_associations"], "database": "gcp-project", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_student_parent_associations", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_student_parent_associations", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_student_parent_associations", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_student_parent_associations/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "school_year", "description": "", "data_type": "integer", "meta": {}}, {"name": "date_extracted", "description": "", "data_type": "timestamp", "meta": {}}, {"name": "extract_type", "description": "", "data_type": "string", "meta": {}}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_student_parent_associations"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-project`.`dev_staging`.`base_edfi_student_parent_associations`", "created_at": 1650509849.1025183}, "source.project.staging.base_edfi_student_program_associations": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_student_program_associations"], "database": "gcp-project", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_student_program_associations", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_student_program_associations", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_student_program_associations", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_student_program_associations/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "school_year", "description": "", "data_type": "integer", "meta": {}}, {"name": "date_extracted", "description": "", "data_type": "timestamp", "meta": {}}, {"name": "extract_type", "description": "", "data_type": "string", "meta": {}}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_student_program_associations"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-project`.`dev_staging`.`base_edfi_student_program_associations`", "created_at": 1650509849.1026194}, "source.project.staging.base_edfi_student_school_associations": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_student_school_associations"], "database": "gcp-project", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_student_school_associations", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_student_school_associations", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_student_school_associations", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_student_school_associations/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "school_year", "description": "", "data_type": "integer", "meta": {}}, {"name": "date_extracted", "description": "", "data_type": "timestamp", "meta": {}}, {"name": "extract_type", "description": "", "data_type": "string", "meta": {}}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_student_school_associations"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-project`.`dev_staging`.`base_edfi_student_school_associations`", "created_at": 1650509849.102721}, "source.project.staging.base_edfi_student_school_attendance_events": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_student_school_attendance_events"], "database": "gcp-project", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_student_school_attendance_events", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_student_school_attendance_events", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_student_school_attendance_events", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_student_school_attendance_events/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "school_year", "description": "", "data_type": "integer", "meta": {}}, {"name": "date_extracted", "description": "", "data_type": "timestamp", "meta": {}}, {"name": "extract_type", "description": "", "data_type": "string", "meta": {}}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_student_school_attendance_events"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-project`.`dev_staging`.`base_edfi_student_school_attendance_events`", "created_at": 1650509849.1028218}, "source.project.staging.base_edfi_student_section_associations": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_student_section_associations"], "database": "gcp-project", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_student_section_associations", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_student_section_associations", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_student_section_associations", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_student_section_associations/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "school_year", "description": "", "data_type": "integer", "meta": {}}, {"name": "date_extracted", "description": "", "data_type": "timestamp", "meta": {}}, {"name": "extract_type", "description": "", "data_type": "string", "meta": {}}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_student_section_associations"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-project`.`dev_staging`.`base_edfi_student_section_associations`", "created_at": 1650509849.1029215}, "source.project.staging.base_edfi_student_section_attendance_events": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_student_section_attendance_events"], "database": "gcp-project", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_student_section_attendance_events", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_student_section_attendance_events", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_student_section_attendance_events", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_student_section_attendance_events/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "school_year", "description": "", "data_type": "integer", "meta": {}}, {"name": "date_extracted", "description": "", "data_type": "timestamp", "meta": {}}, {"name": "extract_type", "description": "", "data_type": "string", "meta": {}}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_student_section_attendance_events"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-project`.`dev_staging`.`base_edfi_student_section_attendance_events`", "created_at": 1650509849.1030214}, "source.project.staging.base_edfi_student_special_education_program_associations": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_student_special_education_program_associations"], "database": "gcp-project", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_student_special_education_program_associations", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_student_special_education_program_associations", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_student_special_education_program_associations", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_student_special_education_program_associations/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "school_year", "description": "", "data_type": "integer", "meta": {}}, {"name": "date_extracted", "description": "", "data_type": "timestamp", "meta": {}}, {"name": "extract_type", "description": "", "data_type": "string", "meta": {}}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_student_special_education_program_associations"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-project`.`dev_staging`.`base_edfi_student_special_education_program_associations`", "created_at": 1650509849.1031203}, "source.project.staging.base_edfi_descriptors": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_descriptors"], "database": "gcp-project", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_descriptors", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_descriptors", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_descriptors", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_descriptors/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "school_year", "description": "", "data_type": "integer", "meta": {}}, {"name": "date_extracted", "description": "", "data_type": "timestamp", "meta": {}}, {"name": "extract_type", "description": "", "data_type": "string", "meta": {}}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-bucket-1/edfi_api/base_edfi_descriptors"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-project`.`dev_staging`.`base_edfi_descriptors`", "created_at": 1650509849.1032407}, "source.project.staging.base_google_forms_questions": {"fqn": ["project", "staging", "google_forms", "staging", "base_google_forms_questions"], "database": "gcp-project", "schema": "dev_staging", "unique_id": "source.project.staging.base_google_forms_questions", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "models/staging/google_forms/src_google_forms.yml", "original_file_path": "models/staging/google_forms/src_google_forms.yml", "name": "base_google_forms_questions", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_google_forms_questions", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-bucket-1/google_forms/questions/*.json", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "NEWLINE_DELIMITED_JSON"}}, "description": "", "columns": {"id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-project`.`dev_staging`.`base_google_forms_questions`", "created_at": 1650509849.1033552}, "source.project.staging.base_google_forms_responses": {"fqn": ["project", "staging", "google_forms", "staging", "base_google_forms_responses"], "database": "gcp-project", "schema": "dev_staging", "unique_id": "source.project.staging.base_google_forms_responses", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "models/staging/google_forms/src_google_forms.yml", "original_file_path": "models/staging/google_forms/src_google_forms.yml", "name": "base_google_forms_responses", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_google_forms_responses", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-bucket-1/google_forms/responses/*.json", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "NEWLINE_DELIMITED_JSON"}}, "description": "", "columns": {"id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-project`.`dev_staging`.`base_google_forms_responses`", "created_at": 1650509849.103464}}, "macros": {"macro.dbt_bigquery.date_sharded_table": {"unique_id": "macro.dbt_bigquery.date_sharded_table", "package_name": "dbt_bigquery", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.1960585}, "macro.dbt_bigquery.grant_access_to": {"unique_id": "macro.dbt_bigquery.grant_access_to", "package_name": "dbt_bigquery", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "grant_access_to", "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.19647}, "macro.dbt_bigquery.get_partitions_metadata": {"unique_id": "macro.dbt_bigquery.get_partitions_metadata", "package_name": "dbt_bigquery", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "get_partitions_metadata", "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.1969838}, "macro.dbt_bigquery.partition_by": {"unique_id": "macro.dbt_bigquery.partition_by", "package_name": "dbt_bigquery", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2043796}, "macro.dbt_bigquery.cluster_by": {"unique_id": "macro.dbt_bigquery.cluster_by", "package_name": "dbt_bigquery", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2051919}, "macro.dbt_bigquery.bigquery_options": {"unique_id": "macro.dbt_bigquery.bigquery_options", "package_name": "dbt_bigquery", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery_options", "macro_sql": "{% macro bigquery_options(opts) %}\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.205938}, "macro.dbt_bigquery.bigquery_table_options": {"unique_id": "macro.dbt_bigquery.bigquery_table_options", "package_name": "dbt_bigquery", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2064564}, "macro.dbt_bigquery.bigquery__create_table_as": {"unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "package_name": "dbt_bigquery", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, sql) -%}\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace table {{ relation }}\n  {{ partition_by(partition_config) }}\n  {{ cluster_by(raw_cluster_by) }}\n  {{ bigquery_table_options(config, model, temporary) }}\n  as (\n    {{ sql }}\n  );\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_table_options"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2077775}, "macro.dbt_bigquery.bigquery_view_options": {"unique_id": "macro.dbt_bigquery.bigquery_view_options", "package_name": "dbt_bigquery", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery_view_options", "macro_sql": "{% macro bigquery_view_options(config, node) %}\n  {% set opts = adapter.get_view_options(config, node) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.208236}, "macro.dbt_bigquery.bigquery__create_view_as": {"unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "package_name": "dbt_bigquery", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_view_options(config, model) }}\n  as {{ sql }};\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_view_options"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2090287}, "macro.dbt_bigquery.bigquery__create_schema": {"unique_id": "macro.dbt_bigquery.bigquery__create_schema", "package_name": "dbt_bigquery", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_schema", "macro_sql": "{% macro bigquery__create_schema(relation) -%}\n  {{ adapter.create_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2092893}, "macro.dbt_bigquery.bigquery__drop_schema": {"unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "package_name": "dbt_bigquery", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2095618}, "macro.dbt_bigquery.bigquery__drop_relation": {"unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "package_name": "dbt_bigquery", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n  {% call statement('drop_relation') -%}\n    drop {{ relation.type }} if exists {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.20994}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "package_name": "dbt_bigquery", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2102208}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "package_name": "dbt_bigquery", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.210514}, "macro.dbt_bigquery.bigquery__current_timestamp": {"unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "package_name": "dbt_bigquery", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  CURRENT_TIMESTAMP()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.21066}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "package_name": "dbt_bigquery", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2109964}, "macro.dbt_bigquery.bigquery__list_schemas": {"unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "package_name": "dbt_bigquery", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2112706}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "package_name": "dbt_bigquery", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.211638}, "macro.dbt_bigquery.bigquery__persist_docs": {"unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "package_name": "dbt_bigquery", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2121756}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "package_name": "dbt_bigquery", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2124841}, "macro.dbt_bigquery.bigquery__rename_relation": {"unique_id": "macro.dbt_bigquery.bigquery__rename_relation", "package_name": "dbt_bigquery", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__rename_relation", "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2127888}, "macro.dbt_bigquery.bigquery__alter_relation_add_columns": {"unique_id": "macro.dbt_bigquery.bigquery__alter_relation_add_columns", "package_name": "dbt_bigquery", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_relation_add_columns", "macro_sql": "{% macro bigquery__alter_relation_add_columns(relation, add_columns) %}\n  \n  {% set sql -%}\n     \n     alter {{ relation.type }} {{ relation }}\n        {% for column in add_columns %}\n          add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n        {% endfor %}\n  \n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2135673}, "macro.dbt_bigquery.bigquery__alter_relation_drop_columns": {"unique_id": "macro.dbt_bigquery.bigquery__alter_relation_drop_columns", "package_name": "dbt_bigquery", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_relation_drop_columns", "macro_sql": "{% macro bigquery__alter_relation_drop_columns(relation, drop_columns) %}\n  \n  {% set sql -%}\n     \n     alter {{ relation.type }} {{ relation }}\n\n        {% for column in drop_columns %}\n          drop column {{ column.name }}{{ ',' if not loop.last }}\n        {% endfor %}\n  \n  {%- endset -%}\n  \n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2143724}, "macro.dbt_bigquery.bigquery__alter_column_type": {"unique_id": "macro.dbt_bigquery.bigquery__alter_column_type", "package_name": "dbt_bigquery", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_column_type", "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#-- Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_relation", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2157705}, "macro.dbt_bigquery.bigquery__test_unique": {"unique_id": "macro.dbt_bigquery.bigquery__test_unique", "package_name": "dbt_bigquery", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__test_unique", "macro_sql": "{% macro bigquery__test_unique(model, column_name) %}\n\nwith dbt_test__target as (\n  \n  select {{ column_name }} as unique_field\n  from {{ model }}\n  where {{ column_name }} is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2160876}, "macro.dbt_bigquery.bigquery__get_catalog": {"unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "package_name": "dbt_bigquery", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n  {%- if (schemas | length) == 0 -%}\n    {# Hopefully nothing cares about the columns we return when there are no rows #}\n    {%- set query  = \"select 1 as id limit 0\" -%}\n  {%- else -%}\n\n  {%- set query -%}\n    with tables as (\n        select\n            project_id as table_database,\n            dataset_id as table_schema,\n            table_id as original_table_name,\n\n            concat(project_id, '.', dataset_id, '.', table_id) as relation_id,\n\n            row_count,\n            size_bytes as size_bytes,\n            case\n                when type = 1 then 'table'\n                when type = 2 then 'view'\n                else 'external'\n            end as table_type,\n\n            REGEXP_CONTAINS(table_id, '^.+[0-9]{8}$') and coalesce(type, 0) = 1 as is_date_shard,\n            REGEXP_EXTRACT(table_id, '^(.+)[0-9]{8}$') as shard_base_name,\n            REGEXP_EXTRACT(table_id, '^.+([0-9]{8})$') as shard_name\n\n        from {{ information_schema.replace(information_schema_view='__TABLES__') }}\n        where (\n          {%- for schema in schemas -%}\n            upper(dataset_id) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n    ),\n\n    extracted as (\n\n        select *,\n            case\n                when is_date_shard then shard_base_name\n                else original_table_name\n            end as table_name\n\n        from tables\n\n    ),\n\n    unsharded_tables as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            coalesce(table_type, 'external') as table_type,\n            is_date_shard,\n\n            struct(\n                min(shard_name) as shard_min,\n                max(shard_name) as shard_max,\n                count(*) as shard_count\n            ) as table_shards,\n\n            sum(size_bytes) as size_bytes,\n            sum(row_count) as row_count,\n\n            max(relation_id) as relation_id\n\n        from extracted\n        group by 1,2,3,4,5\n\n    ),\n\n    info_schema_columns as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            table_catalog as table_database,\n            table_schema,\n            table_name,\n\n            -- use the \"real\" column name from the paths query below\n            column_name as base_column_name,\n            ordinal_position as column_index,\n\n            is_partitioning_column,\n            clustering_ordinal_position\n\n        from {{ information_schema.replace(information_schema_view='COLUMNS') }}\n        where ordinal_position is not null\n\n    ),\n\n    info_schema_column_paths as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            field_path as column_name,\n            data_type as column_type,\n            column_name as base_column_name,\n            description as column_comment\n\n        from {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }}\n\n    ),\n\n    columns as (\n\n        select * except (base_column_name)\n        from info_schema_columns\n        join info_schema_column_paths using (relation_id, base_column_name)\n\n    ),\n\n    column_stats as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            max(relation_id) as relation_id,\n            max(case when is_partitioning_column = 'YES' then 1 else 0 end) = 1 as is_partitioned,\n            max(case when is_partitioning_column = 'YES' then column_name else null end) as partition_column,\n            max(case when clustering_ordinal_position is not null then 1 else 0 end) = 1 as is_clustered,\n            array_to_string(\n                array_agg(\n                    case\n                        when clustering_ordinal_position is not null then column_name\n                        else null\n                    end ignore nulls\n                    order by clustering_ordinal_position\n                ), ', '\n            ) as clustering_columns\n\n        from columns\n        group by 1,2,3\n\n    )\n\n    select\n        unsharded_tables.table_database,\n        unsharded_tables.table_schema,\n        case\n            when is_date_shard then concat(unsharded_tables.table_name, '*')\n            else unsharded_tables.table_name\n        end as table_name,\n        unsharded_tables.table_type,\n\n        -- coalesce name and type for External tables - these columns are not\n        -- present in the COLUMN_FIELD_PATHS resultset\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields -- BQ does\n        -- not treat these nested properties as independent fields\n        row_number() over (\n            partition by relation_id\n            order by columns.column_index, columns.column_name\n        ) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        columns.column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_shards.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_shards.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_shards.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        is_clustered as `stats__clustering_fields__include`\n\n    -- join using relation_id (an actual relation, not a shard prefix) to make\n    -- sure that column metadata is picked up through the join. This will only\n    -- return the column information for the \"max\" table in a date-sharded table set\n    from unsharded_tables\n    left join columns using (relation_id)\n    left join column_stats using (relation_id)\n  {%- endset -%}\n\n  {%- endif -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2203627}, "macro.dbt_bigquery.materialization_copy_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_copy_bigquery", "package_name": "dbt_bigquery", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/copy.sql", "original_file_path": "macros/materializations/copy.sql", "name": "materialization_copy_bigquery", "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {% set destination = this.incorporate(type='table') %}\n\n  {# there can be several ref() or source() according to BQ copy API docs #}\n  {# cycle over ref() and source() to create source tables array #}\n  {% set source_array = [] %}\n  {% for ref_table in model.refs %}\n    {{ source_array.append(ref(*ref_table)) }}\n  {% endfor %}\n\n  {% for src_table in model.sources %}\n    {{ source_array.append(source(*src_table)) }}\n  {% endfor %}\n\n  {# Call adapter's copy_table function #}\n  {%- set result_str = adapter.copy_table(\n      source_array,\n      destination,\n      config.get('copy_materialization', default = 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2226577}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "package_name": "dbt_bigquery", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2234607}, "macro.dbt_bigquery.bigquery__create_columns": {"unique_id": "macro.dbt_bigquery.bigquery__create_columns", "package_name": "dbt_bigquery", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2237673}, "macro.dbt_bigquery.bigquery__post_snapshot": {"unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "package_name": "dbt_bigquery", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2240164}, "macro.dbt_bigquery.declare_dbt_max_partition": {"unique_id": "macro.dbt_bigquery.declare_dbt_max_partition", "package_name": "dbt_bigquery", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "declare_dbt_max_partition", "macro_sql": "{% macro declare_dbt_max_partition(relation, partition_by, sql) %}\n\n  {% if '_dbt_max_partition' in sql %}\n\n    declare _dbt_max_partition {{ partition_by.data_type }} default (\n      select max({{ partition_by.field }}) from {{ this }}\n      where {{ partition_by.field }} is not null\n    );\n  \n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2268581}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "package_name": "dbt_bigquery", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2277231}, "macro.dbt_bigquery.bq_insert_overwrite": {"unique_id": "macro.dbt_bigquery.bq_insert_overwrite", "package_name": "dbt_bigquery", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "bq_insert_overwrite", "macro_sql": "{% macro bq_insert_overwrite(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n) %}\n\n  {% if partitions is not none and partitions != [] %} {# static #}\n\n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {{sql}}\n        )\n      {%- endset -%}\n\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=true) }}\n\n  {% else %} {# dynamic #}\n\n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type }}>;\n\n      {# have we already created the temp table to check for schema changes? #}\n      {% if not tmp_relation_exists %}\n        {{ declare_dbt_max_partition(this, partition_by, sql) }}\n        \n        -- 1. create a temp table\n        {{ create_table_as(True, tmp_relation, sql) }}\n      {% else %}\n        -- 1. temp table already exists, we used it to check for schema changes\n      {% endif %}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              array_agg(distinct {{ partition_by.render() }})\n          from {{ tmp_relation }}\n      );\n\n      {#\n        TODO: include_sql_header is a hack; consider a better approach that includes\n              the sql_header at the materialization-level instead\n      #}\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=false) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql", "macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2301712}, "macro.dbt_bigquery.bq_generate_incremental_build_sql": {"unique_id": "macro.dbt_bigquery.bq_generate_incremental_build_sql", "package_name": "dbt_bigquery", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "bq_generate_incremental_build_sql", "macro_sql": "{% macro bq_generate_incremental_build_sql(\n    strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n) %}\n  {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n  {% if strategy == 'insert_overwrite' %}\n\n    {% set missing_partition_msg -%}\n      The 'insert_overwrite' strategy requires the `partition_by` config.\n    {%- endset %}\n    {% if partition_by is none %}\n      {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n    {% endif %}\n\n    {% set build_sql = bq_insert_overwrite(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, on_schema_change\n    ) %}\n\n  {% else %} {# strategy == 'merge' #}\n    {%- set source_sql -%}\n      {%- if tmp_relation_exists -%}\n        (\n          select * from {{ tmp_relation }}\n        )\n      {%- else -%} {#-- wrap sql in parens to make it a subquery --#}\n        (\n          {{sql}}\n        )\n      {%- endif -%}\n    {%- endset -%}\n\n    {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {{ return(build_sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.232013}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "package_name": "dbt_bigquery", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery' -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% else %}\n    {% set tmp_relation_exists = false %}\n    {% if on_schema_change != 'ignore' %} {# Check first, since otherwise we may not build a temp table #}\n      {% do run_query(\n        declare_dbt_max_partition(this, partition_by, sql) + create_table_as(True, tmp_relation, sql)\n      ) %}\n      {% set tmp_relation_exists = true %}\n      {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n      {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% endif %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = bq_generate_incremental_build_sql(\n        strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n    ) %}\n\n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {% endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.process_schema_changes", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.statement", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2376215}, "macro.dbt_bigquery.materialization_table_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "package_name": "dbt_bigquery", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery' -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      We only need to drop this thing if it is not a table.\n      If it _is_ already a table, then we can overwrite it without downtime\n      Unlike table -> view, no need for `--full-refresh`: dropping a view is no big deal\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n  {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n    {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% endif %}\n  {% call statement('main') -%}\n    {{ create_table_as(False, target_relation, sql) }}\n  {% endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2413301}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "package_name": "dbt_bigquery", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.242575}, "macro.dbt_bigquery.materialization_view_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "package_name": "dbt_bigquery", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2437472}, "macro.dbt_bigquery.bigquery__create_csv_table": {"unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "package_name": "dbt_bigquery", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2444432}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "package_name": "dbt_bigquery", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2447731}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "package_name": "dbt_bigquery", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override) }}\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.24594}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2484047}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2487473}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2494066}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2497828}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2504172}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.250863}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2520335}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2525096}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n  \n  {% set sql -%}\n     \n     alter {{ relation.type }} {{ relation }}\n       \n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n            \n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n  \n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2541742}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.25663}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2572246}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2575667}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2580125}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2583814}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2587214}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2590997}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2596707}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2601461}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.26122}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2616668}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2620425}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2632627}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2635798}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2639806}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2643108}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2648869}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2659416}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2668483}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2671359}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2675812}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2684324}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2693708}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2696478}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2699544}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2707345}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2715027}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.27189}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2722027}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.272558}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2746234}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2751207}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2754686}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2757852}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2761207}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.276593}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2770739}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2776647}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2780197}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2783399}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2793128}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2798824}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2804193}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2812173}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2817276}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2825265}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2830021}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2855375}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2879996}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2896414}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2900999}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2921932}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2933102}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2938871}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2945235}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\nselect *\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2950742}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2958302}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2969887}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.297736}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2983594}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.2989955}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.3010335}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.3014066}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.3017042}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.301972}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.30229}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.3031657}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.3043768}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.3054075}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.3066053}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n    \n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n    \n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n    \n    {% do relations.append(target_relation) %}\n  \n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n    \n    {{ adapter.commit() }}\n  \n  {% else %}\n\n      {% set main_sql = sql %}\n  \n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n  \n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.3107662}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.3160522}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.3180208}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.3187304}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.3197103}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.3199866}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.320205}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.3205018}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.3207574}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.321703}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.3220568}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.324744}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.3299568}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.3309102}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.331421}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_schema", "macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.3416376}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.347062}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.3474965}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.3479638}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.3482318}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.3484385}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.3499825}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.3503091}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.3506591}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.3526304}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = config.get('updated_at', snapshot_string_as_time(now)) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.run_query", "macro.dbt.snapshot_string_as_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.356606}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.360665}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.3613906}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.361763}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.361947}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.3623493}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.3642333}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.364609}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.3652925}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.3661544}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n   \n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n     \n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n     \n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n   \n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.3722851}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n  \n  {% set schema_changed = False %}\n  \n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n  \n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.3747678}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n  \n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n  \n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n  \n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %} \n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n  \n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(schema_change_message) %}\n  \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.377311}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n    \n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n    \n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n      \n      {% if schema_changes_dict['schema_changed'] %}\n    \n        {% if on_schema_change == 'fail' %}\n        \n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways: \n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n          \n          {% do exceptions.raise_compiler_error(fail_msg) %}\n        \n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n          \n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n        \n        {% endif %}\n      \n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n    \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.3788264}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.382692}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.3851185}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.3856175}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.3864892}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.3870053}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.3882337}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(target_relation) %}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n  {% set backup_identifier = model['name'] + \"__dbt_backup\" %}\n\n  -- the intermediate_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {% set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                  schema=schema,\n                                                                  database=database) %}                                               \n  {% set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                            schema=schema,\n                                                            database=database) %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {# -- first check whether we want to full refresh for source view or config reasons #}\n  {% set trigger_full_refresh = (full_refresh_mode or existing_relation.is_view) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n{% elif trigger_full_refresh %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n      {% set backup_identifier = model['name'] + '__dbt_backup' %}\n      {% set intermediate_relation = existing_relation.incorporate(path={\"identifier\": tmp_identifier}) %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n\n      {% set build_sql = create_table_as(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns) %}\n  \n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %} \n      {% do adapter.rename_relation(target_relation, backup_relation) %} \n      {% do adapter.rename_relation(intermediate_relation, target_relation) %} \n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.get_delete_insert_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.3967037}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.3980083}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    \n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.399499}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n   \n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n  \n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4006078}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n  \n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }} \n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4018676}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4041808}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4048483}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4052942}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4109137}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4116952}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.412021}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4123697}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4128609}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4136887}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4140563}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4144394}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  \n  {{ sql_header if sql_header is not none }}\n  \n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4152799}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4212208}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.422305}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4227414}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.423304}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4238205}, "macro.dbt_utils.listagg": {"unique_id": "macro.dbt_utils.listagg", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt_utils') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__listagg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4269645}, "macro.dbt_utils.default__listagg": {"unique_id": "macro.dbt_utils.default__listagg", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4277706}, "macro.dbt_utils.bigquery__listagg": {"unique_id": "macro.dbt_utils.bigquery__listagg", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4283655}, "macro.dbt_utils.postgres__listagg": {"unique_id": "macro.dbt_utils.postgres__listagg", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n    \n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4291587}, "macro.dbt_utils.redshift__listagg": {"unique_id": "macro.dbt_utils.redshift__listagg", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "redshift__listagg", "macro_sql": "{% macro redshift__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    {% set ns = namespace() %}\n    {% set ns.delimiter_text_regex = delimiter_text|trim(\"'\") %}\n    {% set special_chars %}\\,^,$,.,|,?,*,+,(,),[,],{,}{% endset %}  \n    {%- for char in special_chars.split(',') -%}\n        {% set escape_char %}\\\\{{ char }}{% endset %}\n        {% set ns.delimiter_text_regex = ns.delimiter_text_regex|replace(char,escape_char) %}\n    {%- endfor -%}\n\n    {% set regex %}'([^{{ ns.delimiter_text_regex }}]+{{ ns.delimiter_text_regex }}){1,{{ limit_num - 1}}}[^{{ ns.delimiter_text_regex }}]+'{% endset %}\n    regexp_substr(\n        listagg(\n            {{ measure }},\n            {{ delimiter_text }}\n            )\n            {% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n        ,{{ regex }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.431074}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4320567}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4323788}, "macro.dbt_utils.bigquery__split_part": {"unique_id": "macro.dbt_utils.bigquery__split_part", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4327116}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4333045}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4335015}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4368258}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4371734}, "macro.dbt_utils.bigquery__datediff": {"unique_id": "macro.dbt_utils.bigquery__datediff", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4374874}, "macro.dbt_utils.postgres__datediff": {"unique_id": "macro.dbt_utils.postgres__datediff", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4410577}, "macro.dbt_utils.redshift__datediff": {"unique_id": "macro.dbt_utils.redshift__datediff", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "redshift__datediff", "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) -%}\n\n    {{ return(dbt_utils.default__datediff(first_date, second_date, datepart)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4414368}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_ephemeral.sql", "original_file_path": "macros/cross_db_utils/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4430652}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4437609}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4440265}, "macro.dbt_utils.bigquery__date_trunc": {"unique_id": "macro.dbt_utils.bigquery__date_trunc", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4442837}, "macro.dbt_utils.any_value": {"unique_id": "macro.dbt_utils.any_value", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4449959}, "macro.dbt_utils.default__any_value": {"unique_id": "macro.dbt_utils.default__any_value", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n    \n    any_value({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4452016}, "macro.dbt_utils.postgres__any_value": {"unique_id": "macro.dbt_utils.postgres__any_value", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n    {#- /*Postgres doesn't support any_value, so we're using min() to get the same result*/ -#}\n    min({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4454045}, "macro.dbt_utils.bool_or": {"unique_id": "macro.dbt_utils.bool_or", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.446095}, "macro.dbt_utils.default__bool_or": {"unique_id": "macro.dbt_utils.default__bool_or", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n    \n    bool_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4462924}, "macro.dbt_utils.snowflake__bool_or": {"unique_id": "macro.dbt_utils.snowflake__bool_or", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n    \n    boolor_agg({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4464831}, "macro.dbt_utils.bigquery__bool_or": {"unique_id": "macro.dbt_utils.bigquery__bool_or", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n    \n    logical_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4466712}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.447655}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4479825}, "macro.dbt_utils.bigquery__dateadd": {"unique_id": "macro.dbt_utils.bigquery__dateadd", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4483035}, "macro.dbt_utils.postgres__dateadd": {"unique_id": "macro.dbt_utils.postgres__dateadd", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4486513}, "macro.dbt_utils.redshift__dateadd": {"unique_id": "macro.dbt_utils.redshift__dateadd", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "redshift__dateadd", "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ return(dbt_utils.default__dateadd(datepart, interval, from_date_or_timestamp)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4490297}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4497879}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.450078}, "macro.dbt_utils.snowflake__safe_cast": {"unique_id": "macro.dbt_utils.snowflake__safe_cast", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4503233}, "macro.dbt_utils.bigquery__safe_cast": {"unique_id": "macro.dbt_utils.bigquery__safe_cast", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.450653}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4516325}, "macro.dbt_utils.default_last_day": {"unique_id": "macro.dbt_utils.default_last_day", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4521549}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4524288}, "macro.dbt_utils.postgres__last_day": {"unique_id": "macro.dbt_utils.postgres__last_day", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc", "macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4531856}, "macro.dbt_utils.redshift__last_day": {"unique_id": "macro.dbt_utils.redshift__last_day", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "redshift__last_day", "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n\n    {{ return(dbt_utils.default__last_day(date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4535131}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4541607}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4543607}, "macro.dbt_utils.redshift__length": {"unique_id": "macro.dbt_utils.redshift__length", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4545534}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__identifier"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.455511}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4557192}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4559155}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.456522}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4567657}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4579625}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4581263}, "macro.dbt_utils.redshift__type_string": {"unique_id": "macro.dbt_utils.redshift__type_string", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4582644}, "macro.dbt_utils.postgres__type_string": {"unique_id": "macro.dbt_utils.postgres__type_string", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.458406}, "macro.dbt_utils.snowflake__type_string": {"unique_id": "macro.dbt_utils.snowflake__type_string", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4585524}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.458934}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.459093}, "macro.dbt_utils.postgres__type_timestamp": {"unique_id": "macro.dbt_utils.postgres__type_timestamp", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() %}\n    timestamp without time zone\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4592302}, "macro.dbt_utils.snowflake__type_timestamp": {"unique_id": "macro.dbt_utils.snowflake__type_timestamp", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4593606}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4596524}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4597864}, "macro.dbt_utils.bigquery__type_float": {"unique_id": "macro.dbt_utils.bigquery__type_float", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4599187}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4602776}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4604156}, "macro.dbt_utils.bigquery__type_numeric": {"unique_id": "macro.dbt_utils.bigquery__type_numeric", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4605467}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4608371}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4609826}, "macro.dbt_utils.bigquery__type_bigint": {"unique_id": "macro.dbt_utils.bigquery__type_bigint", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4611263}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4614217}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.461555}, "macro.dbt_utils.bigquery__type_int": {"unique_id": "macro.dbt_utils.bigquery__type_int", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4616838}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4626377}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4628475}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4629989}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.463167}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4634717}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4636738}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4640465}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4642563}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4644954}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4654267}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4656847}, "macro.dbt_utils.bigquery__right": {"unique_id": "macro.dbt_utils.bigquery__right", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4659965}, "macro.dbt_utils.snowflake__right": {"unique_id": "macro.dbt_utils.snowflake__right", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.466299}, "macro.dbt_utils.escape_single_quotes": {"unique_id": "macro.dbt_utils.escape_single_quotes", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4670095}, "macro.dbt_utils.default__escape_single_quotes": {"unique_id": "macro.dbt_utils.default__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.467277}, "macro.dbt_utils.snowflake__escape_single_quotes": {"unique_id": "macro.dbt_utils.snowflake__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4675329}, "macro.dbt_utils.bigquery__escape_single_quotes": {"unique_id": "macro.dbt_utils.bigquery__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4678085}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_relation.sql", "original_file_path": "macros/cross_db_utils/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4687662}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4695067}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4697726}, "macro.dbt_utils.bigquery__position": {"unique_id": "macro.dbt_utils.bigquery__position", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4700494}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4707363}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.471214}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.472158}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.472477}, "macro.dbt_utils.redshift__cast_bool_to_text": {"unique_id": "macro.dbt_utils.redshift__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "redshift__cast_bool_to_text", "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4727426}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4733958}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4735503}, "macro.dbt_utils.bigquery__intersect": {"unique_id": "macro.dbt_utils.bigquery__intersect", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4737997}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.475688}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4765923}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4775035}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.477868}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4784656}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4786072}, "macro.dbt_utils.bigquery__except": {"unique_id": "macro.dbt_utils.bigquery__except", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4787486}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4793968}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4796643}, "macro.dbt_utils.bigquery__hash": {"unique_id": "macro.dbt_utils.bigquery__hash", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4799063}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.480722}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(\n                    dbt_utils.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4816294}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.482538}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4837663}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4844408}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4850523}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4861732}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('*') }}\n    {% endif %}\n\n    {%- for col in dbt_utils.get_filtered_columns_in_relation(from, except) %}\n\n        {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\n        {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n\n    {%- endfor -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4879262}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.488762}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.489317}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4910576}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt_utils.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.492822}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4935696}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4942238}, "macro.dbt_utils.get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4951193}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4965134}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.4990473}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.5036833}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.507151}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.5130472}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.5139346}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.5146074}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.5161045}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.5168655}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.5183535}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.5201273}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.5214856}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.5222864}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.5226455}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.5236886}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.5248322}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.5264525}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.5275295}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.529348}, "macro.dbt_utils.deduplicate": {"unique_id": "macro.dbt_utils.deduplicate", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "deduplicate", "macro_sql": "{%- macro deduplicate(relation, group_by, order_by=none, relation_alias=none) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, group_by, order_by=order_by, relation_alias=relation_alias)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.5305843}, "macro.dbt_utils.default__deduplicate": {"unique_id": "macro.dbt_utils.default__deduplicate", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, group_by, order_by=none, relation_alias=none) -%}\n\n    select\n        {{ dbt_utils.star(relation, relation_alias='deduped') | indent }}\n    from (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ group_by }}\n                {% if order_by is not none -%}\n                order by {{ order_by }}\n                {%- endif %}\n            ) as rn\n        from {{ relation if relation_alias is none else relation_alias }} as _inner\n    ) as deduped\n    where deduped.rn = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.5313394}, "macro.dbt_utils.bigquery__deduplicate": {"unique_id": "macro.dbt_utils.bigquery__deduplicate", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, group_by, order_by=none, relation_alias=none) -%}\n\n    select\n        {{ dbt_utils.star(relation, relation_alias='deduped') | indent }}\n    from (\n        select\n            array_agg (\n                original\n                {% if order_by is not none -%}\n                order by {{ order_by }}\n                {%- endif %}\n                limit 1\n            )[offset(0)] as deduped\n        from {{ relation if relation_alias is none else relation_alias }} as original\n        group by {{ group_by }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.5323586}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.5335734}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.5347369}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.5351834}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.5358956}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.537969}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.5385532}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.5399575}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.5409486}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.5425315}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.545247}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.5458887}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.5464017}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.547324}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.547876}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.5486693}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.5498855}, "macro.dbt_utils.get_table_types_sql": {"unique_id": "macro.dbt_utils.get_table_types_sql", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.5506713}, "macro.dbt_utils.default__get_table_types_sql": {"unique_id": "macro.dbt_utils.default__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.5508308}, "macro.dbt_utils.postgres__get_table_types_sql": {"unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.5510051}, "macro.dbt_utils.bigquery__get_table_types_sql": {"unique_id": "macro.dbt_utils.bigquery__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "bigquery__get_table_types_sql", "macro_sql": "{% macro bigquery__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as `table_type`\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.5511627}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.5524042}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.554023}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.5546365}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.5549426}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.5555887}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.555963}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.5569484}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.557545}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.557871}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.5653398}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.5663774}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.5670042}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.568016}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.5783687}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.5796053}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.58026}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.581376}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.5821664}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.5832012}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.583881}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.5847826}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.5851393}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.586317}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, previous_column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.5875695}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.5884457}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.5895126}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.590411}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.5912273}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.5924118}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.5934904}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.5980659}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.6013212}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.6027303}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.6045506}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.6057844}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.606483}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.6072152}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.6075609}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.6082985}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.608669}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.6095622}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.6099193}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.611069}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.6123776}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.6133146}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.6137435}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.6145773}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.6151605}, "macro.dbt_external_tables.spark__refresh_external_table": {"unique_id": "macro.dbt_external_tables.spark__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/spark/refresh_external_table.sql", "original_file_path": "macros/plugins/spark/refresh_external_table.sql", "name": "spark__refresh_external_table", "macro_sql": "{% macro spark__refresh_external_table(source_node) %}\n    \n    {% set refresh %}\n        refresh table {{source(source_node.source_name, source_node.name)}}\n    {% endset %}\n    \n    {% do return([refresh]) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.615918}, "macro.dbt_external_tables.spark__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.spark__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/spark/get_external_build_plan.sql", "original_file_path": "macros/plugins/spark/get_external_build_plan.sql", "name": "spark__get_external_build_plan", "macro_sql": "{% macro spark__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n\n    {% set old_relation = adapter.get_relation(\n        database = none,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n\n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [\n            dbt_external_tables.dropif(source_node), \n            dbt_external_tables.create_external_table(source_node)\n        ] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n\n    {% set recover_partitions = spark__recover_partitions(source_node) %}\n    {% if recover_partitions|length > 0 %}\n    {% set build_plan = build_plan + [\n        recover_partitions\n    ] %}\n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table", "macro.dbt_external_tables.spark__recover_partitions"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.6183467}, "macro.dbt_external_tables.spark__create_external_table": {"unique_id": "macro.dbt_external_tables.spark__create_external_table", "package_name": "dbt_external_tables", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/spark/create_external_table.sql", "original_file_path": "macros/plugins/spark/create_external_table.sql", "name": "spark__create_external_table", "macro_sql": "{% macro spark__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n    {%- set options = external.options -%}\n\n{# https://spark.apache.org/docs/latest/sql-data-sources-hive-tables.html #}\n    create table {{source(source_node.source_name, source_node.name)}} \n    {%- if columns|length > 0 %} (\n        {% for column in columns %}\n            {{column.name}} {{column.data_type}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    ) {% endif -%}\n    {% if external.using %} using {{external.using}} {%- endif %}\n    {% if options -%} options (\n        {%- for key, value in options.items() -%}\n            '{{ key }}' = '{{value}}' {{- ', \\n' if not loop.last -}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if partitions -%} partitioned by (\n        {%- for partition in partitions -%}\n            {{partition.name}} {{partition.data_type}}{{', ' if not loop.last}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\n    {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\n    {% if external.location -%} location '{{external.location}}' {%- endif %}\n    {% if external.table_properties -%} tblproperties {{ external.table_properties }} {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.6223063}, "macro.dbt_external_tables.spark__dropif": {"unique_id": "macro.dbt_external_tables.spark__dropif", "package_name": "dbt_external_tables", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/spark/helpers/dropif.sql", "original_file_path": "macros/plugins/spark/helpers/dropif.sql", "name": "spark__dropif", "macro_sql": "{% macro spark__dropif(node) %}\n    \n    {% set ddl %}\n        drop table if exists {{source(node.source_name, node.name)}}\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.6231785}, "macro.dbt_external_tables.spark__recover_partitions": {"unique_id": "macro.dbt_external_tables.spark__recover_partitions", "package_name": "dbt_external_tables", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/spark/helpers/recover_partitions.sql", "original_file_path": "macros/plugins/spark/helpers/recover_partitions.sql", "name": "spark__recover_partitions", "macro_sql": "{% macro spark__recover_partitions(source_node) %}\n    {# https://docs.databricks.com/sql/language-manual/sql-ref-syntax-ddl-alter-table.html #}\n\n    {% set ddl %}\n    {%- if source_node.external.partitions and source_node.external.using and source_node.external.using|lower != 'delta' -%}\n        ALTER TABLE {{ source(source_node.source_name, source_node.name) }} RECOVER PARTITIONS\n    {%- endif -%}\n    {% endset %}\n\n    {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.624221}, "macro.dbt_external_tables.redshift__refresh_external_table": {"unique_id": "macro.dbt_external_tables.redshift__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/refresh_external_table.sql", "original_file_path": "macros/plugins/redshift/refresh_external_table.sql", "name": "redshift__refresh_external_table", "macro_sql": "{% macro redshift__refresh_external_table(source_node) %}\n\n    {%- set partitions = source_node.external.get('partitions',[]) -%}\n\n    {%- if partitions -%}\n    \n        {%- set part_len = partitions|length -%}\n    \n        {%- set get_partitions_sql -%}\n        \n        select * from\n        \n        {%- for partition in partitions %} (\n        \n            {%- set part_num = loop.index -%}\n            \n            {%- if partition.vals.macro -%}\n                {%- set vals = dbt_external_tables.render_from_context(partition.vals.macro, **partition.vals.args) -%}\n            {%- elif partition.vals is string -%}\n                {%- set vals = [partition.vals] -%}\n            {%- else -%}\n                {%- set vals = partition.vals -%}\n            {%- endif -%}\n        \n            {%- for val in vals %}\n            \n                select\n                    '\"{{ partition.name }}\"' as name_{{ part_num }},\n                    '\"{{ val }}\"' as val_{{ part_num }},\n                    '\"{{ dbt_external_tables.render_from_context(partition.path_macro, partition.name, val) }}\"' as path_{{ part_num }}\n                \n                {{ 'union all' if not loop.last else ') ' }}\n            \n            {%- endfor -%}\n            \n            {{ 'cross join' if not loop.last }}\n            \n        {%- endfor -%}\n        \n        {%- endset -%}\n        \n        {%- set finals = [] -%}\n        \n        {%- if execute -%}\n            {%- set results = run_query(get_partitions_sql) -%}\n            {%- for row in results -%}\n                \n                {%- set partition_parts = [] -%}\n                {%- set path_parts = [] -%}\n                \n                {%- for i in range(0, part_len) -%}\n                    {%- do partition_parts.append({\n                        'name': row[i * 3][1:-1],\n                        'value': row[i * 3 + 1][1:-1]\n                    }) -%}\n                    {%- do path_parts.append(row[i * 3 + 2][1:-1]) -%}\n                {%- endfor -%}\n                \n                {%- set construct = {\n                    'partition_by': partition_parts,\n                    'path': path_parts | join('/')\n                }  -%}\n                \n                {% do finals.append(construct) %}\n            {%- endfor -%}\n        {%- endif -%}\n    \n        {%- set ddl = dbt_external_tables.redshift_alter_table_add_partitions(source_node, finals) -%}\n        {{ return(ddl) }}\n    \n    {% else %}\n    \n        {% do return([]) %}\n    \n    {% endif %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.render_from_context", "macro.dbt.run_query", "macro.dbt_external_tables.redshift_alter_table_add_partitions"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.6317992}, "macro.dbt_external_tables.redshift__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.redshift__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/get_external_build_plan.sql", "original_file_path": "macros/plugins/redshift/get_external_build_plan.sql", "name": "redshift__get_external_build_plan", "macro_sql": "{% macro redshift__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set create_or_replace = (var('ext_full_refresh', false) or not redshift_is_ext_tbl(source_node)) %}\n    \n    {% if create_or_replace %}\n\n        {% set build_plan = [\n                dbt_external_tables.dropif(source_node),\n                dbt_external_tables.create_external_table(source_node)\n            ] + dbt_external_tables.refresh_external_table(source_node) \n        %}\n        \n    {% else %}\n    \n        {% set build_plan = dbt_external_tables.refresh_external_table(source_node) %}\n        \n    {% endif %}\n    \n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.redshift_is_ext_tbl", "macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.6334546}, "macro.dbt_external_tables.redshift__create_external_table": {"unique_id": "macro.dbt_external_tables.redshift__create_external_table", "package_name": "dbt_external_tables", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/create_external_table.sql", "original_file_path": "macros/plugins/redshift/create_external_table.sql", "name": "redshift__create_external_table", "macro_sql": "{% macro redshift__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n\n{# https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_EXTERNAL_TABLE.html #}\n{# This assumes you have already created an external schema #}\n\n    create external table {{source(source_node.source_name, source_node.name)}} (\n        {% for column in columns %}\n            {{adapter.quote(column.name)}} {{column.data_type}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    {% if partitions -%} partitioned by (\n        {%- for partition in partitions -%}\n            {{adapter.quote(partition.name)}} {{partition.data_type}}{{', ' if not loop.last}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\n    {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\n    {% if external.location -%} location '{{external.location}}' {%- endif %}\n    {% if external.table_properties -%} table properties {{external.table_properties}} {%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.6361475}, "macro.dbt_external_tables.redshift_alter_table_add_partitions": {"unique_id": "macro.dbt_external_tables.redshift_alter_table_add_partitions", "package_name": "dbt_external_tables", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/add_partitions.sql", "original_file_path": "macros/plugins/redshift/helpers/add_partitions.sql", "name": "redshift_alter_table_add_partitions", "macro_sql": "{% macro redshift_alter_table_add_partitions(source_node, partitions) %}\n\n  {{ log(\"Generating ADD PARTITION statement for partition set between \" \n         ~ partitions[0]['path'] ~ \" and \" ~ (partitions|last)['path']) }}\n\n  {% set ddl = [] %}\n  \n  {% if partitions|length > 0 %}\n  \n    {% set alter_table_add %}\n        alter table {{source(source_node.source_name, source_node.name)}} add if not exists \n    {% endset %}\n  \n    {%- set alters -%}\n\n      {{ alter_table_add }}\n\n    {%- for partition in partitions -%}\n\n      {%- if loop.index0 != 0 and loop.index0 % 100 == 0 -%}\n\n        ; {{ alter_table_add }}\n\n      {%- endif -%}\n\n        partition ({%- for part in partition.partition_by -%}{{ part.name }}='{{ part.value }}'{{', ' if not loop.last}}{%- endfor -%})\n        location '{{ source_node.external.location }}/{{ partition.path }}/'\n\n    {% endfor -%}\n    \n    {%- endset -%}\n    \n    {% set ddl = ddl + alters.split(';') %}\n\n  {% else %}\n\n    {{ log(\"No partitions to be added\") }}\n\n  {% endif %}\n  \n  {% do return(ddl) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.6391063}, "macro.dbt_external_tables.render_from_context": {"unique_id": "macro.dbt_external_tables.render_from_context", "package_name": "dbt_external_tables", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/render_macro.sql", "original_file_path": "macros/plugins/redshift/helpers/render_macro.sql", "name": "render_from_context", "macro_sql": "{% macro render_from_context(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called by macro '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  \n    {{ return(package_context[name](*varargs, **kwargs)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.641157}, "macro.dbt_external_tables.year_month_day": {"unique_id": "macro.dbt_external_tables.year_month_day", "package_name": "dbt_external_tables", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "name": "year_month_day", "macro_sql": "{% macro year_month_day(name, value) %}\n    {% set path = value.replace('-','/') %}\n    {{return(path)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.641883}, "macro.dbt_external_tables.key_value": {"unique_id": "macro.dbt_external_tables.key_value", "package_name": "dbt_external_tables", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "name": "key_value", "macro_sql": "{% macro key_value(name, value) %}\n    {% set path = name ~ '=' ~ value %}\n    {{return(path)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.6422558}, "macro.dbt_external_tables.value_only": {"unique_id": "macro.dbt_external_tables.value_only", "package_name": "dbt_external_tables", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "name": "value_only", "macro_sql": "{% macro value_only(name, value) %}\n    {% set path = value %}\n    {{return(path)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.6425834}, "macro.dbt_external_tables.redshift__dropif": {"unique_id": "macro.dbt_external_tables.redshift__dropif", "package_name": "dbt_external_tables", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/dropif.sql", "original_file_path": "macros/plugins/redshift/helpers/dropif.sql", "name": "redshift__dropif", "macro_sql": "{% macro redshift__dropif(node) %}\n    \n    {% set ddl %}\n        drop table if exists {{source(node.source_name, node.name)}} cascade\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.6432502}, "macro.dbt_external_tables.redshift__exit_transaction": {"unique_id": "macro.dbt_external_tables.redshift__exit_transaction", "package_name": "dbt_external_tables", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/transaction.sql", "original_file_path": "macros/plugins/redshift/helpers/transaction.sql", "name": "redshift__exit_transaction", "macro_sql": "{% macro redshift__exit_transaction() %}\n    {{ return('begin; commit;') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.6436489}, "macro.dbt_external_tables.redshift_is_ext_tbl": {"unique_id": "macro.dbt_external_tables.redshift_is_ext_tbl", "package_name": "dbt_external_tables", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/is_ext_tbl.sql", "original_file_path": "macros/plugins/redshift/helpers/is_ext_tbl.sql", "name": "redshift_is_ext_tbl", "macro_sql": "{% macro redshift_is_ext_tbl(node) %}\n\n    {% set existing_relation = load_relation(node) %}\n    \n    {#  external tables don't appear in information_schema.tables,\n        so dbt doesn't cache them #}\n    {% if existing_relation is none %}\n\n        {% set find_ext_tbl %}\n        \n            select count(*) from svv_external_tables\n            where schemaname = '{{node.schema}}'\n            and tablename = '{{node.identifier}}'\n        \n        {% endset %}\n        \n        {% if execute %}\n            {% set result = run_query(find_ext_tbl)[0][0] %}\n        {% else %}\n            {% set result = 0 %}\n        {% endif %}\n\n        {% set is_ext_tbl = (result > 0) %}\n        {% do return(is_ext_tbl) %}\n        \n    {% else %}\n    \n        {% do return(false) %}\n        \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.6454556}, "macro.dbt_external_tables.bigquery__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.bigquery__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/bigquery/get_external_build_plan.sql", "original_file_path": "macros/plugins/bigquery/get_external_build_plan.sql", "name": "bigquery__get_external_build_plan", "macro_sql": "{% macro bigquery__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n    \n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [dbt_external_tables.create_external_table(source_node)] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.6471658}, "macro.dbt_external_tables.bigquery__create_external_table": {"unique_id": "macro.dbt_external_tables.bigquery__create_external_table", "package_name": "dbt_external_tables", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/bigquery/create_external_table.sql", "original_file_path": "macros/plugins/bigquery/create_external_table.sql", "name": "bigquery__create_external_table", "macro_sql": "{% macro bigquery__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n    {%- set options = external.options -%}\n    \n    {%- set uris = [] -%}\n    {%- if options is mapping and options.get('uris', none) -%}\n        {%- set uris = external.options.get('uris') -%}\n    {%- else -%}\n        {%- set uris = [external.location] -%}\n    {%- endif -%}\n\n    create or replace external table {{source(source_node.source_name, source_node.name)}}\n        {%- if columns -%}(\n            {% for column in columns %}\n                {{column.name}} {{column.data_type}} {{- ',' if not loop.last -}}\n            {%- endfor -%}\n        )\n        {% endif %}\n        {% if options and options.get('hive_partition_uri_prefix', none) %}\n        with partition columns {%- if partitions %} (\n            {%- for partition in partitions %}\n                {{partition.name}} {{partition.data_type}}{{',' if not loop.last}}\n            {%- endfor -%}\n        ) {% endif -%}\n        {% endif %}\n        options (\n            uris = [{%- for uri in uris -%} '{{uri}}' {{- \",\" if not loop.last}} {%- endfor -%}]\n            {%- if options is mapping -%}\n            {%- for key, value in options.items() if key != 'uris' %}\n                {%- if value is string -%}\n                , {{key}} = '{{value}}'\n                {%- else -%}\n                , {{key}} = {{value}}\n                {%- endif -%}\n            {%- endfor -%}\n            {%- endif -%}\n        )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.6517065}, "macro.dbt_external_tables.snowflake__refresh_external_table": {"unique_id": "macro.dbt_external_tables.snowflake__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/refresh_external_table.sql", "original_file_path": "macros/plugins/snowflake/refresh_external_table.sql", "name": "snowflake__refresh_external_table", "macro_sql": "{% macro snowflake__refresh_external_table(source_node) %}\n\n    {% set external = source_node.external %}\n    {% set snowpipe = source_node.external.get('snowpipe', none) %}\n    \n    {% set auto_refresh = external.get('auto_refresh', false) %}\n    {% set partitions = external.get('partitions', none) %}\n    \n    {% set manual_refresh = (partitions and not auto_refresh) %}\n    \n    {% if manual_refresh %}\n\n        {% set ddl %}\n        begin;\n        alter external table {{source(source_node.source_name, source_node.name)}} refresh;\n        commit;\n        {% endset %}\n        \n        {% do return([ddl]) %}\n    \n    {% else %}\n    \n        {% do return([]) %}\n    \n    {% endif %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.6535726}, "macro.dbt_external_tables.snowflake__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.snowflake__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/get_external_build_plan.sql", "original_file_path": "macros/plugins/snowflake/get_external_build_plan.sql", "name": "snowflake__get_external_build_plan", "macro_sql": "{% macro snowflake__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n    \n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if source_node.external.get('snowpipe', none) is not none %}\n    \n        {% if create_or_replace %}\n            {% set build_plan = build_plan + [\n                dbt_external_tables.snowflake_create_empty_table(source_node),\n                dbt_external_tables.snowflake_get_copy_sql(source_node, explicit_transaction=true),\n                dbt_external_tables.snowflake_create_snowpipe(source_node)\n            ] %}\n        {% else %}\n            {% set build_plan = build_plan + dbt_external_tables.snowflake_refresh_snowpipe(source_node) %}\n        {% endif %}\n            \n    {% else %}\n    \n        {% if create_or_replace %}\n            {% set build_plan = build_plan + [dbt_external_tables.create_external_table(source_node)] %}\n        {% else %}\n            {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n        {% endif %}\n        \n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake_create_empty_table", "macro.dbt_external_tables.snowflake_get_copy_sql", "macro.dbt_external_tables.snowflake_create_snowpipe", "macro.dbt_external_tables.snowflake_refresh_snowpipe", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.6563745}, "macro.dbt_external_tables.snowflake__create_external_table": {"unique_id": "macro.dbt_external_tables.snowflake__create_external_table", "package_name": "dbt_external_tables", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/create_external_table.sql", "original_file_path": "macros/plugins/snowflake/create_external_table.sql", "name": "snowflake__create_external_table", "macro_sql": "{% macro snowflake__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n\n    {%- set is_csv = dbt_external_tables.is_csv(external.file_format) -%}\n\n{# https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html #}\n{# This assumes you have already created an external stage #}\n    create or replace external table {{source(source_node.source_name, source_node.name)}}\n    {%- if columns or partitions -%}\n    (\n        {%- if partitions -%}{%- for partition in partitions %}\n            {{partition.name}} {{partition.data_type}} as {{partition.expression}}{{- ',' if not loop.last or columns|length > 0 -}}\n        {%- endfor -%}{%- endif -%}\n        {%- for column in columns %}\n            {%- set column_quoted = adapter.quote(column.name) if column.quote else column.name %}\n            {%- set col_expression -%}\n                {%- set col_id = 'value:c' ~ loop.index if is_csv else 'value:' ~ column.name -%}\n                (case when is_null_value({{col_id}}) or lower({{col_id}}) = 'null' then null else {{col_id}} end)\n            {%- endset %}\n            {{column_quoted}} {{column.data_type}} as ({{col_expression}}::{{column.data_type}})\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    {%- endif -%}\n    {% if partitions %} partition by ({{partitions|map(attribute='name')|join(', ')}}) {% endif %}\n    location = {{external.location}} {# stage #}\n    {% if external.auto_refresh in (true, false) -%}\n      auto_refresh = {{external.auto_refresh}}\n    {%- endif %}\n    {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\n    {% if external.integration -%} integration = '{{external.integration}}' {%- endif %}\n    file_format = {{external.file_format}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.is_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.6606483}, "macro.dbt_external_tables.is_csv": {"unique_id": "macro.dbt_external_tables.is_csv", "package_name": "dbt_external_tables", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/helpers/is_csv.sql", "original_file_path": "macros/plugins/snowflake/helpers/is_csv.sql", "name": "is_csv", "macro_sql": "{% macro is_csv(file_format) %}\n\n{# From https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html:\n\nImportant: The external table does not inherit the file format, if any, in the \nstage definition. You must explicitly specify any file format options for the \nexternal table using the FILE_FORMAT parameter.\n\nNote: FORMAT_NAME and TYPE are mutually exclusive; to avoid unintended behavior, \nyou should only specify one or the other when creating an external table.\n\n#}\n\n    {% set ff_ltrimmed = file_format|lower|replace(' ','') %}\n\n    {% if 'type=' in ff_ltrimmed %}\n    \n        {% if 'type=csv' in ff_ltrimmed %}\n\n            {{return(true)}}\n\n        {% else %}\n\n            {{return(false)}}\n            \n        {% endif %}\n        \n    {% else %}\n    \n        {% set ff_standardized = ff_ltrimmed\n            | replace('(','') | replace(')','')\n            | replace('format_name=','') %}\n        {% set fqn = ff_standardized.split('.') %}\n        \n        {% if fqn | length == 3 %}\n            {% set ff_database, ff_schema, ff_identifier = fqn[0], fqn[1], fqn[2] %}\n        {% elif fqn | length == 2 %}\n            {% set ff_database, ff_schema, ff_identifier = target.database, fqn[0], fqn[1] %}\n        {% else %}\n            {% set ff_database, ff_schema, ff_identifier = target.database, target.schema, fqn[0] %}\n        {% endif %}\n    \n        {% call statement('get_file_format', fetch_result = True) %}\n            show file formats in {{ff_database}}.{{ff_schema}}\n        {% endcall %}\n        \n        {% set ffs = load_result('get_file_format').table %}\n        \n        {% for ff in ffs %}\n            \n            {% if ff['name']|lower == ff_identifier and ff['type']|lower == 'csv' %}\n            \n                {{return(true)}}\n            \n            {% endif %}\n        \n        {% endfor %}\n        \n        {{return(false)}}        \n    \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.6654503}, "macro.dbt_external_tables.snowflake_create_snowpipe": {"unique_id": "macro.dbt_external_tables.snowflake_create_snowpipe", "package_name": "dbt_external_tables", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/create_snowpipe.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/create_snowpipe.sql", "name": "snowflake_create_snowpipe", "macro_sql": "{% macro snowflake_create_snowpipe(source_node) %}\n\n    {%- set external = source_node.external -%}\n    {%- set snowpipe = external.snowpipe -%}\n\n{# https://docs.snowflake.com/en/sql-reference/sql/create-pipe.html #}\n    create or replace pipe {{source(source_node.source_name, source_node.name)}}\n        {% if snowpipe.auto_ingest -%} auto_ingest = {{snowpipe.auto_ingest}} {%- endif %}\n        {% if snowpipe.aws_sns_topic -%} aws_sns_topic = '{{snowpipe.aws_sns_topic}}' {%- endif %}\n        {% if snowpipe.integration -%} integration = '{{snowpipe.integration}}' {%- endif %}\n        as {{ dbt_external_tables.snowflake_get_copy_sql(source_node) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake_get_copy_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.6668634}, "macro.dbt_external_tables.snowflake_create_empty_table": {"unique_id": "macro.dbt_external_tables.snowflake_create_empty_table", "package_name": "dbt_external_tables", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/create_empty_table.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/create_empty_table.sql", "name": "snowflake_create_empty_table", "macro_sql": "{% macro snowflake_create_empty_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() %}\n\n    create or replace table {{source(source_node.source_name, source_node.name)}} (\n        {% if columns|length == 0 %}\n            value variant,\n        {% else -%}\n        {%- for column in columns -%}\n            {{column.name}} {{column.data_type}},\n        {% endfor -%}\n        {% endif %}\n            metadata_filename varchar,\n            metadata_file_row_number bigint,\n            _dbt_copied_at timestamp\n    );\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.6680167}, "macro.dbt_external_tables.snowflake_get_copy_sql": {"unique_id": "macro.dbt_external_tables.snowflake_get_copy_sql", "package_name": "dbt_external_tables", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/get_copy_sql.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/get_copy_sql.sql", "name": "snowflake_get_copy_sql", "macro_sql": "{% macro snowflake_get_copy_sql(source_node, explicit_transaction=false) %}\n{# This assumes you have already created an external stage #}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set is_csv = dbt_external_tables.is_csv(external.file_format) %}\n    {%- set copy_options = external.snowpipe.get('copy_options', none) -%}\n   \n    {%- if explicit_transaction -%} begin; {%- endif %}\n    \n    copy into {{source(source_node.source_name, source_node.name)}}\n    from ( \n        select\n        {% if columns|length == 0 %}\n            $1::variant as value,\n        {% else -%}\n        {%- for column in columns -%}\n            {%- set col_expression -%}\n                {%- if is_csv -%}nullif(${{loop.index}},''){# special case: get columns by ordinal position #}\n                {%- else -%}nullif($1:{{column.name}},''){# standard behavior: get columns by name #}\n                {%- endif -%}\n            {%- endset -%}\n            {{col_expression}}::{{column.data_type}} as {{column.name}},\n        {% endfor -%}\n        {% endif %}\n            metadata$filename::varchar as metadata_filename,\n            metadata$file_row_number::bigint as metadata_file_row_number,\n            current_timestamp::timestamp as _dbt_copied_at\n        from {{external.location}} {# stage #}\n    )\n    file_format = {{external.file_format}}\n    {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\n    {% if copy_options %} {{copy_options}} {% endif %};\n    \n    {% if explicit_transaction -%} commit; {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.is_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.6708512}, "macro.dbt_external_tables.snowflake_refresh_snowpipe": {"unique_id": "macro.dbt_external_tables.snowflake_refresh_snowpipe", "package_name": "dbt_external_tables", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/refresh_snowpipe.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/refresh_snowpipe.sql", "name": "snowflake_refresh_snowpipe", "macro_sql": "{% macro snowflake_refresh_snowpipe(source_node) %}\n\n    {% set snowpipe = source_node.external.snowpipe %}\n    {% set auto_ingest = snowpipe.get('auto_ingest', false) if snowpipe is mapping %}\n    \n    {% if auto_ingest is true %}\n    \n        {% do return([]) %}\n    \n    {% else %}\n    \n        {% set ddl %}\n        alter pipe {{source(source_node.source_name, source_node.name)}} refresh\n        {% endset %}\n        \n        {{ return([ddl]) }}\n    \n    {% endif %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.6722367}, "macro.dbt_external_tables.sqlserver__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.sqlserver__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/sqlserver/get_external_build_plan.sql", "original_file_path": "macros/plugins/sqlserver/get_external_build_plan.sql", "name": "sqlserver__get_external_build_plan", "macro_sql": "{% macro sqlserver__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n\n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n\n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [ \n            dbt_external_tables.dropif(source_node), \n            dbt_external_tables.create_external_table(source_node)\n        ] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.6739292}, "macro.dbt_external_tables.sqlserver__create_external_table": {"unique_id": "macro.dbt_external_tables.sqlserver__create_external_table", "package_name": "dbt_external_tables", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/sqlserver/create_external_table.sql", "original_file_path": "macros/plugins/sqlserver/create_external_table.sql", "name": "sqlserver__create_external_table", "macro_sql": "{% macro sqlserver__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n\n    {% if external.ansi_nulls is true -%} SET ANSI_NULLS ON; {%- endif %}\n    {% if external.quoted_identifier is true -%} SET QUOTED_IDENTIFIER ON; {%- endif %}\n\n    create external table {{source(source_node.source_name, source_node.name)}} (\n        {% for column in columns %}\n            {# TODO set nullity based on schema tests?? #}\n            {%- set nullity = 'NOT NULL' if 'not_null' in columns.tests else 'NULL'-%}\n            {{adapter.quote(column.name)}} {{column.data_type}} {{nullity}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    WITH (\n        {# remove keys that are None (i.e. not defined for a given source) #}\n        {%- for key, value in external.items() if value is not none and key not in ['ansi_nulls', 'quoted_identifier'] -%}\n            {{key}} = \n                {%- if key in [\"location\", \"schema_name\", \"object_name\"] -%}\n                    '{{value}}'\n                {% elif key in [\"data_source\",\"file_format\"] -%}\n                    [{{value}}]\n                {% else -%}\n                    {{value}}\n                {%- endif -%}\n            {{- ',' if not loop.last -}}\n            {%- endfor -%}\n    )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.676816}, "macro.dbt_external_tables.sqlserver__dropif": {"unique_id": "macro.dbt_external_tables.sqlserver__dropif", "package_name": "dbt_external_tables", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/sqlserver/helpers/dropif.sql", "original_file_path": "macros/plugins/sqlserver/helpers/dropif.sql", "name": "sqlserver__dropif", "macro_sql": "{% macro sqlserver__dropif(node) %}\n    \n    {% set ddl %}\n      if object_id ('{{source(node.source_name, node.name)}}') is not null\n        begin\n        drop external table {{source(node.source_name, node.name)}}\n        end\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.6776478}, "macro.dbt_external_tables.stage_external_sources": {"unique_id": "macro.dbt_external_tables.stage_external_sources", "package_name": "dbt_external_tables", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_external_tables", "path": "macros/common/stage_external_sources.sql", "original_file_path": "macros/common/stage_external_sources.sql", "name": "stage_external_sources", "macro_sql": "{% macro stage_external_sources(select=none) %}\n\n    {% set sources_to_stage = [] %}\n    \n    {% set source_nodes = graph.sources.values() if graph.sources else [] %}\n    \n    {% for node in source_nodes %}\n        {% if node.external %}\n            \n            {% if select %}\n            \n                {% for src in select.split(' ') %}\n                \n                    {% if '.' in src %}\n                        {% set src_s = src.split('.') %}\n                        {% if src_s[0] == node.source_name and src_s[1] == node.name %}\n                            {% do sources_to_stage.append(node) %}\n                        {% endif %}\n                    {% else %}\n                        {% if src == node.source_name %}\n                            {% do sources_to_stage.append(node) %}\n                        {% endif %}\n                    {% endif %}\n                    \n                {% endfor %}\n                        \n            {% else %}\n            \n                {% do sources_to_stage.append(node) %}\n                \n            {% endif %}\n        {% endif %}\n        \n    {% endfor %}\n    \n    {% if sources_to_stage|length == 0 %}\n        {% do log('No external sources selected', info = true) %}\n    {% endif %}\n            \n    {% for node in sources_to_stage %}\n\n        {% set loop_label = loop.index ~ ' of ' ~ loop.length %}\n\n        {% do log(loop_label ~ ' START external source ' ~ node.schema ~ '.' ~ node.identifier, info = true) -%}\n        \n        {% set run_queue = dbt_external_tables.get_external_build_plan(node) %}\n        \n        {% do log(loop_label ~ ' SKIP', info = true) if run_queue == [] %}\n        {% set width = flags.PRINTER_WIDTH %}\n        \n        {% for q in run_queue %}\n        \n            {% set q_msg = q|replace('\\n','')|replace('begin;','')|trim %}\n            {% set q_log = q_msg[:width] ~ '...  ' if q_msg|length > width else q_msg %}\n        \n            {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ q_log, info = true) %}\n            {% set exit_txn = dbt_external_tables.exit_transaction() %}\n        \n            {% call statement('runner', fetch_result = True, auto_begin = False) %}\n                {{ exit_txn }} {{ q }}\n            {% endcall %}\n            \n            {% set runner = load_result('runner') %}\n            {% set log_msg = runner['response'] if 'response' in runner.keys() else runner['status'] %}\n            {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ log_msg, info = true) %}\n            \n        {% endfor %}\n        \n    {% endfor %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.get_external_build_plan", "macro.dbt_external_tables.exit_transaction", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.6858006}, "macro.dbt_external_tables.refresh_external_table": {"unique_id": "macro.dbt_external_tables.refresh_external_table", "package_name": "dbt_external_tables", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_external_tables", "path": "macros/common/refresh_external_table.sql", "original_file_path": "macros/common/refresh_external_table.sql", "name": "refresh_external_table", "macro_sql": "{% macro refresh_external_table(source_node) %}\n    {{ return(adapter.dispatch('refresh_external_table', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.default__refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.6864095}, "macro.dbt_external_tables.default__refresh_external_table": {"unique_id": "macro.dbt_external_tables.default__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_external_tables", "path": "macros/common/refresh_external_table.sql", "original_file_path": "macros/common/refresh_external_table.sql", "name": "default__refresh_external_table", "macro_sql": "{% macro default__refresh_external_table(source_node) %}\n    {% do return([]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.6866634}, "macro.dbt_external_tables.get_external_build_plan": {"unique_id": "macro.dbt_external_tables.get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_external_tables", "path": "macros/common/get_external_build_plan.sql", "original_file_path": "macros/common/get_external_build_plan.sql", "name": "get_external_build_plan", "macro_sql": "{% macro get_external_build_plan(source_node) %}\n    {{ return(adapter.dispatch('get_external_build_plan', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.bigquery__get_external_build_plan"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.68728}, "macro.dbt_external_tables.default__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.default__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_external_tables", "path": "macros/common/get_external_build_plan.sql", "original_file_path": "macros/common/get_external_build_plan.sql", "name": "default__get_external_build_plan", "macro_sql": "{% macro default__get_external_build_plan(source_node) %}\n    {{ exceptions.raise_compiler_error(\"Staging external sources is not implemented for the default adapter\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.687532}, "macro.dbt_external_tables.create_external_table": {"unique_id": "macro.dbt_external_tables.create_external_table", "package_name": "dbt_external_tables", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_external_tables", "path": "macros/common/create_external_table.sql", "original_file_path": "macros/common/create_external_table.sql", "name": "create_external_table", "macro_sql": "{% macro create_external_table(source_node) %}\n    {{ adapter.dispatch('create_external_table', 'dbt_external_tables')(source_node) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.bigquery__create_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.6880863}, "macro.dbt_external_tables.default__create_external_table": {"unique_id": "macro.dbt_external_tables.default__create_external_table", "package_name": "dbt_external_tables", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_external_tables", "path": "macros/common/create_external_table.sql", "original_file_path": "macros/common/create_external_table.sql", "name": "default__create_external_table", "macro_sql": "{% macro default__create_external_table(source_node) %}\n    {{ exceptions.raise_compiler_error(\"External table creation is not implemented for the default adapter\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.6883419}, "macro.dbt_external_tables.dropif": {"unique_id": "macro.dbt_external_tables.dropif", "package_name": "dbt_external_tables", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_external_tables", "path": "macros/common/helpers/dropif.sql", "original_file_path": "macros/common/helpers/dropif.sql", "name": "dropif", "macro_sql": "{% macro dropif(node) %}\n    {{ adapter.dispatch('dropif', 'dbt_external_tables')(node) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.default__dropif"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.688893}, "macro.dbt_external_tables.default__dropif": {"unique_id": "macro.dbt_external_tables.default__dropif", "package_name": "dbt_external_tables", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_external_tables", "path": "macros/common/helpers/dropif.sql", "original_file_path": "macros/common/helpers/dropif.sql", "name": "default__dropif", "macro_sql": "{% macro default__dropif() %}\n    {{ exceptions.raise_compiler_error(\n        \"Dropping external tables is not implemented for the default adapter\"\n    ) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.6891327}, "macro.dbt_external_tables.exit_transaction": {"unique_id": "macro.dbt_external_tables.exit_transaction", "package_name": "dbt_external_tables", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_external_tables", "path": "macros/common/helpers/transaction.sql", "original_file_path": "macros/common/helpers/transaction.sql", "name": "exit_transaction", "macro_sql": "{% macro exit_transaction() %}\n    {{ return(adapter.dispatch('exit_transaction', 'dbt_external_tables')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.default__exit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.6896765}, "macro.dbt_external_tables.default__exit_transaction": {"unique_id": "macro.dbt_external_tables.default__exit_transaction", "package_name": "dbt_external_tables", "root_path": "/home/marcos/k12-analytics-engineering/dbt/dbt_packages/dbt_external_tables", "path": "macros/common/helpers/transaction.sql", "original_file_path": "macros/common/helpers/transaction.sql", "name": "default__exit_transaction", "macro_sql": "{% macro default__exit_transaction() %}\n    {{ return('') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650509847.6898928}, "macro.project.retrieve_edfi_records_from_data_lake": {"unique_id": "macro.project.retrieve_edfi_records_from_data_lake", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "macros/retrieve_edfi_records_from_data_lake.sql", "original_file_path": "macros/retrieve_edfi_records_from_data_lake.sql", "name": "retrieve_edfi_records_from_data_lake", "macro_sql": "{% macro retrieve_edfi_records_from_data_lake(table_name) %}\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from {{ source('staging', table_name) }}\n    where is_complete_extract IS TRUE\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from {{ source('staging', table_name) }} base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            OR base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650510021.4783604}, "macro.project.get_unweighted_gpa_point": {"unique_id": "macro.project.get_unweighted_gpa_point", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "macros/get_unweighted_gpa_point.sql", "original_file_path": "macros/get_unweighted_gpa_point.sql", "name": "get_unweighted_gpa_point", "macro_sql": "{% macro get_unweighted_gpa_point(letter_grade) %}\n    case {{ letter_grade }}\n        when 'A+'   then 4.4\n        when 'A'    then 4\n        when 'A-'   then 3.7\n        when 'B+'   then 3.4\n        when 'B'    then 3\n        when 'B-'   then 2.7\n        when 'C+'   then 2.4\n        when 'C'    then 2\n        when 'C-'   then 1.7\n        when 'D+'   then 1.4\n        when 'D'    then 1.4\n        when 'D-'   then 0.6\n        when 'F'    then 0\n        else NULL\n    end\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "This macro converts a letter grade to the equivalent unweighted gpa point value\n", "meta": {}, "docs": {"show": true}, "patch_path": "project://macros/macros.yml", "arguments": [{"name": "letter_grade", "type": "string", "description": "Letter grade earned"}], "created_at": 1650510022.1597037}, "macro.project.remove_edfi_deletes_and_duplicates": {"unique_id": "macro.project.remove_edfi_deletes_and_duplicates", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "macros/remove_edfi_deletes_and_duplicates.sql", "original_file_path": "macros/remove_edfi_deletes_and_duplicates.sql", "name": "remove_edfi_deletes_and_duplicates", "macro_sql": "{% macro remove_edfi_deletes_and_duplicates() %}\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650510021.4791899}, "macro.project.convert_grade_level_to_id": {"unique_id": "macro.project.convert_grade_level_to_id", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "macros/convert_grade_level_to_id.sql", "original_file_path": "macros/convert_grade_level_to_id.sql", "name": "convert_grade_level_to_id", "macro_sql": "{% macro convert_grade_level_to_id(grade_level) %}\n    case {{ grade_level }}\n        when 'Infant/toddler'            then -3\n        when 'Preschool/Prekindergarten' then -2\n        when 'Transitional Kindergarten' then -1\n        when 'Kindergarten'              then 1\n        when 'First grade'               then 2\n        when 'Second grade'              then 3\n        when 'Third grade'               then 4\n        when 'Fourth grade'              then 5\n        when 'Fifth grade'               then 6\n        when 'Sixth grade'               then 7\n        when 'Seventh grade'             then 8\n        when 'Eighth grade'              then 9\n        when 'Ninth grade'               then 10\n        when 'Tenth grade'               then 11\n        when 'Eleventh grade'            then 12\n        when 'Twelfth grade'             then 13\n        else 999999999\n    end\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "This macro converts grade level descriptors to a numeric value for use in sorting in a bi tool\n", "meta": {}, "docs": {"show": true}, "patch_path": "project://macros/macros.yml", "arguments": [{"name": "grade_level", "type": "string", "description": "Ed-Fi grade level descriptor"}], "created_at": 1650510022.1607165}, "macro.project.convert_grade_level_to_short_label": {"unique_id": "macro.project.convert_grade_level_to_short_label", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "macros/convert_grade_level_to_short_label.sql", "original_file_path": "macros/convert_grade_level_to_short_label.sql", "name": "convert_grade_level_to_short_label", "macro_sql": "{% macro convert_grade_level_to_short_label(grade_level) %}\n    case {{ grade_level }}\n        when 'Infant/toddler'            then 'Infant'\n        when 'Preschool/Prekindergarten' then 'PreK'\n        when 'Transitional Kindergarten' then 'TK'\n        when 'Kindergarten'              then 'K'\n        when 'First grade'               then '1'\n        when 'Second grade'              then '2'\n        when 'Third grade'               then '3'\n        when 'Fourth grade'              then '4'\n        when 'Fifth grade'               then '5'\n        when 'Sixth grade'               then '6'\n        when 'Seventh grade'             then '7'\n        when 'Eighth grade'              then '8'\n        when 'Ninth grade'               then '9'\n        when 'Tenth grade'               then '10'\n        when 'Eleventh grade'            then '11'\n        when 'Twelfth grade'             then '12'\n        else '999999999'\n    end\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "This macro converts grade level descriptors to shorter, often numeric grade levels (ie. Fifth grade -> 5 )\n", "meta": {}, "docs": {"show": true}, "patch_path": "project://macros/macros.yml", "arguments": [{"name": "grade_level", "type": "string", "description": "Ed-Fi grade level descriptor"}], "created_at": 1650510022.161795}}, "docs": {"project.__overview__": {"unique_id": "project.__overview__", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "overview.md", "original_file_path": "models/overview.md", "name": "__overview__", "block_contents": "# Ed-Fi data marts\n\nThe data marts and models found in this documentation largely reflect Ed-Fi's Analytics Middle Tier. There are some places where additional columns or entirely new data models were added. The documentation will always note when this is the case. This documentation should serve as a companion guide to Ed-Fi's [official documentation](https://techdocs.ed-fi.org/display/EDFITOOLS/AMT+User+Guide)."}, "project.rls_user_student_data_authorization": {"unique_id": "project.rls_user_student_data_authorization", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "marts/row_level_security/row_level_security.md", "original_file_path": "models/marts/row_level_security/row_level_security.md", "name": "rls_user_student_data_authorization", "block_contents": "# User student data authorization\n\nThis row-level security (RLS) table has a grain size of one row per student key. `authorized_emails` is a repeated field containing all user emails who are allowed access to the respective student's data.\n\nIf a staff member is actively assigned to a school with a classification of Superintendent, School Administrator, or Principal, they are given access.\n\nIf a staff member is actively assigned to a class section where the student has an association, they are given access.\n\nFinally, each student will have their email included for their respective `student_key` record."}, "project.fct_student_section_grades": {"unique_id": "project.fct_student_section_grades", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "marts/grades/grades.md", "original_file_path": "models/marts/grades/grades.md", "name": "fct_student_section_grades", "block_contents": "# Student section grades fact\n\nThis fact table can be found in Ed-Fi's Early Warning System collection. Here it is included in the grades data mart due to student grades being valuable in other places in addition to early warning systems.\n\nThis table contains a row per student per section per grading period per grade type."}, "project.fct_student_attendance": {"unique_id": "project.fct_student_attendance", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "marts/attendance/attendance.md", "original_file_path": "models/marts/attendance/attendance.md", "name": "fct_student_attendance", "block_contents": "# Student attendance fact\n\nGrain: one row per student per school year per school per instructional day they hold an enrollment\n\nUsed for looking at a student's attendance by day. This fact table provides a row for each instructional day the student holds an enrollment up to the previous date."}, "project.rpt_student_attendance": {"unique_id": "project.rpt_student_attendance", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "marts/attendance/attendance.md", "original_file_path": "models/marts/attendance/attendance.md", "name": "rpt_student_attendance", "block_contents": "# Report student attendance\n\nGrain: one row per student per school year per school per instructional day they hold an enrollment\n\nUsed for looking at a student's attendance by day. This fact table provides a row for each instructional day the student holds an enrollment up to the previous date."}, "project.dim_assessment": {"unique_id": "project.dim_assessment", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "marts/assessments/assessments.md", "original_file_path": "models/marts/assessments/assessments.md", "name": "dim_assessment", "block_contents": "# Assessments dim\n\nGrain size: a row per assessment and objective assessment"}, "project.fct_student_assessment": {"unique_id": "project.fct_student_assessment", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "marts/assessments/assessments.md", "original_file_path": "models/marts/assessments/assessments.md", "name": "fct_student_assessment", "block_contents": "# Student assessments fact\n\nGrain size: one row per assessment measure per student assessment"}, "project.dim_date": {"unique_id": "project.dim_date", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "marts/core/core.md", "original_file_path": "models/marts/core/core.md", "name": "dim_date", "block_contents": "# Date dim\n\nA date dimension table can be found in almost every dimensional model and allows the analytics engineer to look at student performance across different time periods. An explicit date dimension table can also help store date attributes that are not supported by a SQL date function (ie. month sort order in the context of a school year).\n\nThis dimension table notably lacks the date key found in Ed-Fi's Analytics Middle Tier. This is also counter to what Kimball tells us to do. Instead, fact tables found in the marts that include a date, use the DATE type. Kimball argues that if a fact table does this, it will cause folks to use SQL functions on that date to extract items like month name and avoid the join to the date dimension when they need to retrieve such information. You should use the date if you need the date and join on the date dimension if you need more."}, "project.dim_grading_period": {"unique_id": "project.dim_grading_period", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "marts/core/core.md", "original_file_path": "models/marts/core/core.md", "name": "dim_grading_period", "block_contents": "# Grading period dim\n\nGrain: one row per school per grading period"}, "project.dim_local_education_agency": {"unique_id": "project.dim_local_education_agency", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "marts/core/core.md", "original_file_path": "models/marts/core/core.md", "name": "dim_local_education_agency", "block_contents": "# Local education agency dim\n\nGrain: one row per local education agency"}, "project.dim_school": {"unique_id": "project.dim_school", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "marts/core/core.md", "original_file_path": "models/marts/core/core.md", "name": "dim_school", "block_contents": "# School dim\n\nGrain: one row per school per school year"}, "project.dim_section": {"unique_id": "project.dim_section", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "marts/core/core.md", "original_file_path": "models/marts/core/core.md", "name": "dim_section", "block_contents": "# Section dim\n\nGrain: one row per section per school"}, "project.dim_session": {"unique_id": "project.dim_session", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "marts/core/core.md", "original_file_path": "models/marts/core/core.md", "name": "dim_session", "block_contents": "# Session dim\n\nGrain: one row per school per session"}, "project.dim_staff": {"unique_id": "project.dim_staff", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "marts/core/core.md", "original_file_path": "models/marts/core/core.md", "name": "dim_staff", "block_contents": "# Staff dim\n\nGrain: one row per staff member per school year"}, "project.dim_student": {"unique_id": "project.dim_student", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "marts/core/core.md", "original_file_path": "models/marts/core/core.md", "name": "dim_student", "block_contents": "# Student dim\n\nGrain: one record per student per school year\n\nEd-Fi's Analytics Middle Tier provides two student dims related to the student's LEA association and the student's school association. This dim combines those two dims to provide one student dim that can be used downstream. If a student has multiple school enrollments, only their most recent will show in this dim."}, "project.fct_student_section": {"unique_id": "project.fct_student_section", "package_name": "project", "root_path": "/home/marcos/k12-analytics-engineering/dbt", "path": "marts/core/core.md", "original_file_path": "models/marts/core/core.md", "name": "fct_student_section", "block_contents": "# Student section fact\n\nGrain: a row per student section per section enrollment. The `teachers` column is a concatenation of all teachers currently assigned to the class section."}, "dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/home/marcos/.cache/pypoetry/virtualenvs/dbt-JFD-b-B3-py3.9/lib/python3.9/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.project.dim_survey": [], "model.project.dim_survey_question": [], "model.project.fct_survey_response": ["model.project.stg_edfi_survey_question_responses", "model.project.stg_edfi_survey_responses"], "model.project.stg_nwea_map_assessment_results": ["source.project.staging.base_nwea_map_assessment_results"], "model.project.stg_google_forms": ["source.project.staging.base_google_forms_questions"], "model.project.google_forms_edfi_surveys": ["model.project.stg_google_forms"], "model.project.google_forms_edfi_survey_question_responses": ["model.project.stg_google_forms_responses"], "model.project.google_forms_edfi_survey_responses": ["model.project.dim_student", "model.project.stg_google_forms_responses"], "model.project.google_forms_deleted_responses": ["model.project.google_forms_edfi_survey_question_responses", "model.project.stg_edfi_survey_question_responses", "model.project.stg_edfi_survey_responses"], "test.project.unique_dim_survey_survey_key.06f98b78fd": ["model.project.dim_survey"], "test.project.not_null_dim_survey_survey_key.5be831148e": ["model.project.dim_survey"], "test.project.not_null_dim_survey_namespace.ebc0b8ae90": ["model.project.dim_survey"], "test.project.not_null_dim_survey_survey_identifier.44423bac2a": ["model.project.dim_survey"], "test.project.not_null_dim_survey_title.bd8681ca91": ["model.project.dim_survey"], "test.project.unique_dim_survey_question_survey_question_key.ff3c28d992": ["model.project.dim_survey_question"], "test.project.not_null_dim_survey_question_survey_question_key.30658bc614": ["model.project.dim_survey_question"], "test.project.relationships_dim_survey_question_survey_key__survey_key__ref_dim_survey_.c326a16f76": ["model.project.dim_survey", "model.project.dim_survey_question"], "test.project.not_null_dim_survey_question_survey_question_identifier.28c61e03d8": ["model.project.dim_survey_question"], "test.project.not_null_dim_survey_question_text.8c76c49c42": ["model.project.dim_survey_question"], "test.project.not_null_dim_survey_question_type.529c95202a": ["model.project.dim_survey_question"], "test.project.unique_stg_google_forms_form_id.af71bf645b": ["model.project.stg_google_forms"], "test.project.not_null_stg_google_forms_form_id.3c450263cd": ["model.project.stg_google_forms"], "test.project.unique_google_forms_deleted_responses_survey_responses_id_survey_question_responses_id.0926e7fbe9": ["model.project.google_forms_deleted_responses"], "test.project.not_null_google_forms_edfi_surveys_namespace.efc76b1797": ["model.project.google_forms_edfi_surveys"], "test.project.not_null_google_forms_edfi_surveys_surveyIdentifier.ff4076d488": ["model.project.google_forms_edfi_surveys"], "test.project.not_null_google_forms_edfi_surveys_schoolYearTypeReference.c0f4244952": ["model.project.google_forms_edfi_surveys"], "test.project.not_null_google_forms_edfi_surveys_surveyTitle.0935a70322": ["model.project.google_forms_edfi_surveys"], "model.project.rpt_student_attendance": ["model.project.dim_date", "model.project.dim_local_education_agency", "model.project.dim_school", "model.project.dim_student", "model.project.fct_student_attendance", "model.project.fct_student_attendance", "model.project.rls_user_student_data_authorization"], "model.project.current_gpa": ["model.project.dim_grading_period", "model.project.dim_school", "model.project.dim_section", "model.project.dim_student", "model.project.fct_student_school", "model.project.fct_student_section_grade"], "model.project.nwea_map_edfi_student_assessments": ["model.project.stg_nwea_map_assessment_results", "model.project.stg_nwea_map_assessment_results", "model.project.stg_nwea_map_assessment_results", "model.project.stg_nwea_map_assessment_results", "model.project.stg_nwea_map_assessment_results"], "model.project.stg_edfi_school_year_types": ["source.project.staging.base_edfi_school_year_types", "source.project.staging.base_edfi_school_year_types"], "model.project.fct_staff_school": ["model.project.stg_edfi_schools", "model.project.stg_edfi_staff_education_organization_assignment_associations", "model.project.stg_edfi_staff_school_associations"], "model.project.nwea_map_edfi_objective_assessments": ["model.project.stg_nwea_map_assessment_results", "model.project.stg_nwea_map_assessment_results", "model.project.stg_nwea_map_assessment_results", "model.project.stg_nwea_map_assessment_results"], "model.project.dim_date": ["model.project.stg_edfi_calendar_dates"], "model.project.rpt_student_section_grade": ["model.project.bridge_staff_group", "model.project.dim_grading_period", "model.project.dim_local_education_agency", "model.project.dim_school", "model.project.dim_section", "model.project.dim_session", "model.project.dim_staff", "model.project.dim_student", "model.project.fct_student_section_grade"], "model.project.dim_student": ["model.project.stg_edfi_programs", "model.project.stg_edfi_sessions", "model.project.stg_edfi_student_education_organization_associations", "model.project.stg_edfi_student_school_associations", "model.project.stg_edfi_student_school_associations", "model.project.stg_edfi_student_special_education_program_associations", "model.project.stg_edfi_students"], "model.project.stg_google_forms_responses": ["source.project.staging.base_google_forms_responses"], "model.project.rpt_student_assessment": ["model.project.dim_assessment", "model.project.dim_assessment", "model.project.dim_assessment", "model.project.dim_school", "model.project.dim_student", "model.project.fct_student_assessment", "model.project.fct_student_assessment", "model.project.fct_student_assessment"], "model.project.dim_assessment": ["model.project.stg_edfi_assessments", "model.project.stg_edfi_assessments", "model.project.stg_edfi_objective_assessments"], "model.project.stg_edfi_assessments": ["source.project.staging.base_edfi_assessments", "source.project.staging.base_edfi_assessments"], "model.project.fct_student_attendance": ["model.project.stg_edfi_calendar_dates", "model.project.stg_edfi_schools", "model.project.stg_edfi_student_school_associations", "model.project.stg_edfi_student_school_attendance_events", "model.project.stg_edfi_student_section_associations", "model.project.stg_edfi_student_section_attendance_events", "model.project.stg_edfi_students"], "model.project.rls_user_student_data_authorization": ["model.project.bridge_staff_group", "model.project.dim_staff", "model.project.dim_staff", "model.project.dim_student", "model.project.dim_student", "model.project.dim_student", "model.project.fct_staff_school", "model.project.fct_student_school", "model.project.fct_student_section"], "model.project.fct_student_school": ["model.project.stg_edfi_calendar_dates", "model.project.stg_edfi_schools", "model.project.stg_edfi_student_school_associations"], "model.project.stg_edfi_calendar_dates": ["source.project.staging.base_edfi_calendar_dates", "source.project.staging.base_edfi_calendar_dates"], "model.project.stg_edfi_calendars": ["source.project.staging.base_edfi_calendars", "source.project.staging.base_edfi_calendars"], "model.project.bridge_staff_group": ["model.project.stg_edfi_course_offerings", "model.project.stg_edfi_sections", "model.project.stg_edfi_sessions", "model.project.stg_edfi_staff_section_associations"], "model.project.dim_section": ["model.project.stg_edfi_course_offerings", "model.project.stg_edfi_courses", "model.project.stg_edfi_schools", "model.project.stg_edfi_sections", "model.project.stg_edfi_sessions"], "model.project.fct_student_section": ["model.project.stg_edfi_course_offerings", "model.project.stg_edfi_student_section_associations"], "model.project.stg_edfi_course_offerings": ["source.project.staging.base_edfi_course_offerings", "source.project.staging.base_edfi_course_offerings"], "model.project.stg_edfi_courses": ["source.project.staging.base_edfi_courses", "source.project.staging.base_edfi_courses"], "model.project.stg_edfi_descriptors": ["source.project.staging.base_edfi_descriptors", "source.project.staging.base_edfi_descriptors"], "model.project.stg_edfi_discipline_incidents": ["source.project.staging.base_edfi_discipline_incidents", "source.project.staging.base_edfi_discipline_incidents"], "model.project.dim_grading_period": ["model.project.stg_edfi_grades", "model.project.stg_edfi_grading_periods", "model.project.stg_edfi_grading_periods", "model.project.stg_edfi_school_year_types", "model.project.stg_edfi_sessions"], "model.project.fct_student_section_grade": ["model.project.stg_edfi_grades", "model.project.stg_edfi_student_section_associations"], "model.project.stg_edfi_grades": ["source.project.staging.base_edfi_grades", "source.project.staging.base_edfi_grades"], "model.project.stg_edfi_grading_periods": ["source.project.staging.base_edfi_grading_periods", "source.project.staging.base_edfi_grading_periods"], "model.project.dim_local_education_agency": ["model.project.stg_edfi_local_education_agencies"], "model.project.dim_school": ["model.project.stg_edfi_local_education_agencies", "model.project.stg_edfi_schools"], "model.project.stg_edfi_local_education_agencies": ["source.project.staging.base_edfi_local_education_agencies", "source.project.staging.base_edfi_local_education_agencies"], "model.project.stg_edfi_objective_assessments": ["source.project.staging.base_edfi_objective_assessments", "source.project.staging.base_edfi_objective_assessments"], "model.project.stg_edfi_parents": ["source.project.staging.base_edfi_parents", "source.project.staging.base_edfi_parents"], "model.project.stg_edfi_programs": ["source.project.staging.base_edfi_programs", "source.project.staging.base_edfi_programs"], "model.project.stg_edfi_schools": ["source.project.staging.base_edfi_schools", "source.project.staging.base_edfi_schools"], "model.project.stg_edfi_sections": ["source.project.staging.base_edfi_sections", "source.project.staging.base_edfi_sections"], "model.project.dim_session": ["model.project.stg_edfi_school_year_types", "model.project.stg_edfi_sessions"], "model.project.stg_edfi_sessions": ["source.project.staging.base_edfi_sessions", "source.project.staging.base_edfi_sessions"], "model.project.stg_edfi_staff_education_organization_assignment_associations": ["source.project.staging.base_edfi_staff_education_organization_assignment_associations", "source.project.staging.base_edfi_staff_education_organization_assignment_associations"], "model.project.stg_edfi_staff_school_associations": ["source.project.staging.base_edfi_staff_school_associations", "source.project.staging.base_edfi_staff_school_associations"], "model.project.stg_edfi_staff_section_associations": ["source.project.staging.base_edfi_staff_section_associations", "source.project.staging.base_edfi_staff_section_associations"], "model.project.dim_staff": ["model.project.stg_edfi_staffs"], "model.project.stg_edfi_staffs": ["source.project.staging.base_edfi_staffs", "source.project.staging.base_edfi_staffs"], "model.project.fct_student_assessment": ["model.project.stg_edfi_student_assessments", "model.project.stg_edfi_student_assessments", "model.project.stg_edfi_student_assessments", "model.project.stg_edfi_student_assessments", "model.project.stg_edfi_student_school_associations", "model.project.stg_edfi_student_school_associations", "model.project.stg_edfi_student_school_associations", "model.project.stg_edfi_student_school_associations"], "model.project.stg_edfi_student_assessments": ["source.project.staging.base_edfi_student_assessments", "source.project.staging.base_edfi_student_assessments"], "model.project.stg_edfi_student_discipline_incident_associations": ["source.project.staging.base_edfi_student_discipline_incident_associations", "source.project.staging.base_edfi_student_discipline_incident_associations"], "model.project.stg_edfi_student_education_organization_associations": ["source.project.staging.base_edfi_student_education_organization_associations", "source.project.staging.base_edfi_student_education_organization_associations"], "model.project.stg_edfi_student_parent_associations": ["source.project.staging.base_edfi_student_parent_associations", "source.project.staging.base_edfi_student_parent_associations"], "model.project.stg_edfi_student_program_associations": ["source.project.staging.base_edfi_student_program_associations", "source.project.staging.base_edfi_student_program_associations"], "model.project.stg_edfi_student_school_associations": ["source.project.staging.base_edfi_student_school_associations", "source.project.staging.base_edfi_student_school_associations"], "model.project.stg_edfi_student_school_attendance_events": ["source.project.staging.base_edfi_student_school_attendance_events", "source.project.staging.base_edfi_student_school_attendance_events"], "model.project.stg_edfi_student_section_associations": ["source.project.staging.base_edfi_student_section_associations", "source.project.staging.base_edfi_student_section_associations"], "model.project.stg_edfi_student_section_attendance_events": ["source.project.staging.base_edfi_student_section_attendance_events", "source.project.staging.base_edfi_student_section_attendance_events"], "model.project.stg_edfi_student_special_education_program_associations": ["source.project.staging.base_edfi_student_special_education_program_associations", "source.project.staging.base_edfi_student_special_education_program_associations"], "model.project.stg_edfi_students": ["source.project.staging.base_edfi_students", "source.project.staging.base_edfi_students"], "model.project.stg_edfi_survey_question_responses": [], "model.project.google_forms_edfi_survey_questions": ["model.project.stg_google_forms_questions", "model.project.stg_google_forms_questions"], "model.project.stg_google_forms_questions": ["source.project.staging.base_google_forms_questions"], "model.project.nwea_map_edfi_assessments": ["model.project.nwea_map_edfi_student_assessments", "model.project.nwea_map_edfi_student_assessments", "model.project.stg_nwea_map_assessment_results"], "model.project.stg_edfi_surveys": [], "model.project.stg_edfi_survey_questions": [], "model.project.stg_edfi_survey_responses": [], "test.project.relationships_fct_student_attendance_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.1058409cf0": ["model.project.dim_local_education_agency", "model.project.fct_student_attendance"], "test.project.relationships_fct_student_attendance_school_key__school_key__ref_dim_school_.a425d4b0e7": ["model.project.dim_school", "model.project.fct_student_attendance"], "test.project.relationships_fct_student_attendance_student_key__student_key__ref_dim_student_.902b20eb5a": ["model.project.dim_student", "model.project.fct_student_attendance"], "test.project.not_null_fct_student_attendance_school_year.c69c139be1": ["model.project.fct_student_attendance"], "test.project.not_null_fct_student_attendance_date.1c7057eb63": ["model.project.fct_student_attendance"], "test.project.not_null_fct_student_attendance_school_attendance_event_category_descriptor.be3ab06fa8": ["model.project.fct_student_attendance"], "test.project.not_null_fct_student_attendance_event_duration.7405fc5f51": ["model.project.fct_student_attendance"], "test.project.unique_dim_date_date.dd069a8d31": ["model.project.dim_date"], "test.project.not_null_dim_date_date.78f11e7735": ["model.project.dim_date"], "test.project.unique_dim_student_student_key.45ef646b54": ["model.project.dim_student"], "test.project.not_null_dim_student_student_key.67ab09a6e6": ["model.project.dim_student"], "test.project.relationships_dim_student_school_key__school_key__ref_dim_school_.ea466bff27": ["model.project.dim_school", "model.project.dim_student"], "test.project.not_null_dim_student_school_year.cb1c50e460": ["model.project.dim_student"], "test.project.not_null_dim_student_student_unique_id.8a392fc4ab": ["model.project.dim_student"], "test.project.not_null_dim_student_student_last_surname.329ae57d5b": ["model.project.dim_student"], "test.project.not_null_dim_student_student_first_name.f007907dff": ["model.project.dim_student"], "test.project.not_null_dim_student_is_english_language_learner.55a5cd929d": ["model.project.dim_student"], "test.project.accepted_values_dim_student_is_english_language_learner__Yes__No.d5a7434ec1": ["model.project.dim_student"], "test.project.not_null_dim_student_in_special_education_program.f8695e7bf3": ["model.project.dim_student"], "test.project.accepted_values_dim_student_in_special_education_program__Yes__No.7a967caab1": ["model.project.dim_student"], "test.project.not_null_dim_student_is_hispanic.2f36046142": ["model.project.dim_student"], "test.project.accepted_values_dim_student_is_hispanic__Yes__No.28cf24b221": ["model.project.dim_student"], "test.project.relationships_fct_student_school_student_key__student_key__ref_dim_student_.ce63ab9df5": ["model.project.dim_student", "model.project.fct_student_school"], "test.project.relationships_fct_student_school_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.bdd6a57ac4": ["model.project.dim_local_education_agency", "model.project.fct_student_school"], "test.project.relationships_fct_student_school_school_key__school_key__ref_dim_school_.7a675bb6ae": ["model.project.dim_school", "model.project.fct_student_school"], "test.project.unique_bridge_staff_group_staff_group_key_staff_key.71682839f2": ["model.project.bridge_staff_group"], "test.project.unique_dim_section_section_key.4b442b173b": ["model.project.dim_section"], "test.project.not_null_dim_section_section_key.d763cc8042": ["model.project.dim_section"], "test.project.relationships_dim_section_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.1c63a4fa13": ["model.project.dim_local_education_agency", "model.project.dim_section"], "test.project.relationships_dim_section_school_key__school_key__ref_dim_school_.b29c32ae93": ["model.project.dim_school", "model.project.dim_section"], "test.project.relationships_dim_section_session_key__session_key__ref_dim_session_.5fcf678cd6": ["model.project.dim_section", "model.project.dim_session"], "test.project.not_null_dim_section_section_identifier.5aa4059a37": ["model.project.dim_section"], "test.project.unique_dim_grading_period_grading_period_key.2c941ffbec": ["model.project.dim_grading_period"], "test.project.not_null_dim_grading_period_grading_period_key.a9c6847f9d": ["model.project.dim_grading_period"], "test.project.relationships_dim_grading_period_school_key__school_key__ref_dim_school_.fff5503f34": ["model.project.dim_grading_period", "model.project.dim_school"], "test.project.unique_dim_local_education_agency_local_education_agency_key.2cf2d58a69": ["model.project.dim_local_education_agency"], "test.project.not_null_dim_local_education_agency_local_education_agency_key.3f6251750d": ["model.project.dim_local_education_agency"], "test.project.unique_dim_local_education_agency_local_education_agency_id.1a30878627": ["model.project.dim_local_education_agency"], "test.project.not_null_dim_local_education_agency_local_education_agency_id.6ba737bcd9": ["model.project.dim_local_education_agency"], "test.project.unique_dim_school_school_key.64ec309207": ["model.project.dim_school"], "test.project.not_null_dim_school_school_key.209ee6078e": ["model.project.dim_school"], "test.project.relationships_dim_school_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.c40f28107b": ["model.project.dim_local_education_agency", "model.project.dim_school"], "test.project.unique_dim_school_school_id.d10cafcd76": ["model.project.dim_school"], "test.project.not_null_dim_school_school_id.36d55ce30b": ["model.project.dim_school"], "test.project.unique_dim_session_session_key.b5230e3fd3": ["model.project.dim_session"], "test.project.not_null_dim_session_session_key.2c2f8e6dac": ["model.project.dim_session"], "test.project.relationships_dim_session_school_key__school_key__ref_dim_school_.d4064049b7": ["model.project.dim_school", "model.project.dim_session"], "test.project.unique_dim_staff_student_key.57b69ecc98": ["model.project.dim_staff"], "test.project.not_null_dim_staff_student_key.8f46632ad4": ["model.project.dim_staff"], "test.project.unique_stg_google_forms_responses_form_id_response_id.735779ab54": ["model.project.stg_google_forms_responses"], "test.project.unique_stg_google_forms_questions_form_id_question_id.21c31ca063": ["model.project.stg_google_forms_questions"], "test.project.unique_dim_assessment_assessment_key.d45cb819a0": ["model.project.dim_assessment"], "test.project.not_null_dim_assessment_assessment_key.1ee4792dcf": ["model.project.dim_assessment"], "test.project.not_null_dim_assessment_education_organization_key.e46eded9e2": ["model.project.dim_assessment"], "test.project.not_null_dim_assessment_school_year.6f50975711": ["model.project.dim_assessment"], "test.project.not_null_dim_assessment_assessment_identifier.b01a1c84ef": ["model.project.dim_assessment"], "test.project.relationships_fct_student_assessment_assessment_key__assessment_key__ref_dim_assessment_.fb7625afbd": ["model.project.dim_assessment", "model.project.fct_student_assessment"], "test.project.relationships_fct_student_assessment_student_key__student_key__ref_dim_student_.505c0cae72": ["model.project.dim_student", "model.project.fct_student_assessment"], "test.project.relationships_fct_student_assessment_school_key__school_key__ref_dim_school_.6d4121ee49": ["model.project.dim_school", "model.project.fct_student_assessment"], "test.project.not_null_fct_student_assessment_school_year.d353cc4178": ["model.project.fct_student_assessment"], "test.project.not_null_fct_student_assessment_student_assessment_identifier.bf72913748": ["model.project.fct_student_assessment"], "test.project.unique_stg_edfi_local_education_agencies_CONCAT_school_year_local_education_agency_id_.68cfccff4d": ["model.project.stg_edfi_local_education_agencies"], "test.project.relationships_stg_edfi_schools_school_id__school_reference_school_id__ref_stg_edfi_sessions_.621576b37d": ["model.project.stg_edfi_schools", "model.project.stg_edfi_sessions"], "test.project.unique_stg_edfi_students_school_year_student_unique_id.3a33c30a48": ["model.project.stg_edfi_students"], "test.project.relationships_rls_user_student_data_authorization_student_key__student_key__ref_dim_student_.2b38b50db6": ["model.project.dim_student", "model.project.rls_user_student_data_authorization"], "test.project.not_null_fct_student_section_grade_student_key.cc4059fd96": ["model.project.fct_student_section_grade"], "test.project.not_null_fct_student_section_grade_letter_grade_earned.14c0fe6021": ["model.project.fct_student_section_grade"], "test.project.dbt_utils_expression_is_true_fct_student_section_grade_numeric_grade_earned_0.144140aea3": ["model.project.fct_student_section_grade"], "source.project.staging.base_nwea_map_assessment_results": [], "source.project.staging.base_nwea_map_class_assignments": [], "source.project.staging.base_nwea_map_students_by_school": [], "source.project.staging.edfi_processed_change_versions": [], "source.project.staging.base_edfi_assessments": [], "source.project.staging.base_edfi_calendars": [], "source.project.staging.base_edfi_calendar_dates": [], "source.project.staging.base_edfi_courses": [], "source.project.staging.base_edfi_course_offerings": [], "source.project.staging.base_edfi_discipline_actions": [], "source.project.staging.base_edfi_discipline_incidents": [], "source.project.staging.base_edfi_grading_periods": [], "source.project.staging.base_edfi_grading_period_descriptors": [], "source.project.staging.base_edfi_grades": [], "source.project.staging.base_edfi_local_education_agencies": [], "source.project.staging.base_edfi_objective_assessments": [], "source.project.staging.base_edfi_parents": [], "source.project.staging.base_edfi_programs": [], "source.project.staging.base_edfi_schools": [], "source.project.staging.base_edfi_school_year_types": [], "source.project.staging.base_edfi_sections": [], "source.project.staging.base_edfi_sessions": [], "source.project.staging.base_edfi_staffs": [], "source.project.staging.base_edfi_staff_discipline_incident_associations": [], "source.project.staging.base_edfi_staff_education_organization_assignment_associations": [], "source.project.staging.base_edfi_staff_school_associations": [], "source.project.staging.base_edfi_staff_section_associations": [], "source.project.staging.base_edfi_students": [], "source.project.staging.base_edfi_student_assessments": [], "source.project.staging.base_edfi_student_discipline_incident_associations": [], "source.project.staging.base_edfi_student_education_organization_associations": [], "source.project.staging.base_edfi_student_parent_associations": [], "source.project.staging.base_edfi_student_program_associations": [], "source.project.staging.base_edfi_student_school_associations": [], "source.project.staging.base_edfi_student_school_attendance_events": [], "source.project.staging.base_edfi_student_section_associations": [], "source.project.staging.base_edfi_student_section_attendance_events": [], "source.project.staging.base_edfi_student_special_education_program_associations": [], "source.project.staging.base_edfi_descriptors": [], "source.project.staging.base_google_forms_questions": [], "source.project.staging.base_google_forms_responses": []}, "child_map": {"model.project.dim_survey": ["test.project.not_null_dim_survey_namespace.ebc0b8ae90", "test.project.not_null_dim_survey_survey_identifier.44423bac2a", "test.project.not_null_dim_survey_survey_key.5be831148e", "test.project.not_null_dim_survey_title.bd8681ca91", "test.project.relationships_dim_survey_question_survey_key__survey_key__ref_dim_survey_.c326a16f76", "test.project.unique_dim_survey_survey_key.06f98b78fd"], "model.project.dim_survey_question": ["test.project.not_null_dim_survey_question_survey_question_identifier.28c61e03d8", "test.project.not_null_dim_survey_question_survey_question_key.30658bc614", "test.project.not_null_dim_survey_question_text.8c76c49c42", "test.project.not_null_dim_survey_question_type.529c95202a", "test.project.relationships_dim_survey_question_survey_key__survey_key__ref_dim_survey_.c326a16f76", "test.project.unique_dim_survey_question_survey_question_key.ff3c28d992"], "model.project.fct_survey_response": [], "model.project.stg_nwea_map_assessment_results": ["model.project.nwea_map_edfi_assessments", "model.project.nwea_map_edfi_objective_assessments", "model.project.nwea_map_edfi_objective_assessments", "model.project.nwea_map_edfi_objective_assessments", "model.project.nwea_map_edfi_objective_assessments", "model.project.nwea_map_edfi_student_assessments", "model.project.nwea_map_edfi_student_assessments", "model.project.nwea_map_edfi_student_assessments", "model.project.nwea_map_edfi_student_assessments", "model.project.nwea_map_edfi_student_assessments"], "model.project.stg_google_forms": ["model.project.google_forms_edfi_surveys", "test.project.not_null_stg_google_forms_form_id.3c450263cd", "test.project.unique_stg_google_forms_form_id.af71bf645b"], "model.project.google_forms_edfi_surveys": ["test.project.not_null_google_forms_edfi_surveys_namespace.efc76b1797", "test.project.not_null_google_forms_edfi_surveys_schoolYearTypeReference.c0f4244952", "test.project.not_null_google_forms_edfi_surveys_surveyIdentifier.ff4076d488", "test.project.not_null_google_forms_edfi_surveys_surveyTitle.0935a70322"], "model.project.google_forms_edfi_survey_question_responses": ["model.project.google_forms_deleted_responses"], "model.project.google_forms_edfi_survey_responses": [], "model.project.google_forms_deleted_responses": ["test.project.unique_google_forms_deleted_responses_survey_responses_id_survey_question_responses_id.0926e7fbe9"], "test.project.unique_dim_survey_survey_key.06f98b78fd": [], "test.project.not_null_dim_survey_survey_key.5be831148e": [], "test.project.not_null_dim_survey_namespace.ebc0b8ae90": [], "test.project.not_null_dim_survey_survey_identifier.44423bac2a": [], "test.project.not_null_dim_survey_title.bd8681ca91": [], "test.project.unique_dim_survey_question_survey_question_key.ff3c28d992": [], "test.project.not_null_dim_survey_question_survey_question_key.30658bc614": [], "test.project.relationships_dim_survey_question_survey_key__survey_key__ref_dim_survey_.c326a16f76": [], "test.project.not_null_dim_survey_question_survey_question_identifier.28c61e03d8": [], "test.project.not_null_dim_survey_question_text.8c76c49c42": [], "test.project.not_null_dim_survey_question_type.529c95202a": [], "test.project.unique_stg_google_forms_form_id.af71bf645b": [], "test.project.not_null_stg_google_forms_form_id.3c450263cd": [], "test.project.unique_google_forms_deleted_responses_survey_responses_id_survey_question_responses_id.0926e7fbe9": [], "test.project.not_null_google_forms_edfi_surveys_namespace.efc76b1797": [], "test.project.not_null_google_forms_edfi_surveys_surveyIdentifier.ff4076d488": [], "test.project.not_null_google_forms_edfi_surveys_schoolYearTypeReference.c0f4244952": [], "test.project.not_null_google_forms_edfi_surveys_surveyTitle.0935a70322": [], "model.project.rpt_student_attendance": [], "model.project.current_gpa": [], "model.project.nwea_map_edfi_student_assessments": ["model.project.nwea_map_edfi_assessments", "model.project.nwea_map_edfi_assessments"], "model.project.stg_edfi_school_year_types": ["model.project.dim_grading_period", "model.project.dim_session"], "model.project.fct_staff_school": ["model.project.rls_user_student_data_authorization"], "model.project.nwea_map_edfi_objective_assessments": [], "model.project.dim_date": ["model.project.rpt_student_attendance", "test.project.not_null_dim_date_date.78f11e7735", "test.project.unique_dim_date_date.dd069a8d31"], "model.project.rpt_student_section_grade": [], "model.project.dim_student": ["model.project.current_gpa", "model.project.google_forms_edfi_survey_responses", "model.project.rls_user_student_data_authorization", "model.project.rls_user_student_data_authorization", "model.project.rls_user_student_data_authorization", "model.project.rpt_student_assessment", "model.project.rpt_student_attendance", "model.project.rpt_student_section_grade", "test.project.accepted_values_dim_student_in_special_education_program__Yes__No.7a967caab1", "test.project.accepted_values_dim_student_is_english_language_learner__Yes__No.d5a7434ec1", "test.project.accepted_values_dim_student_is_hispanic__Yes__No.28cf24b221", "test.project.not_null_dim_student_in_special_education_program.f8695e7bf3", "test.project.not_null_dim_student_is_english_language_learner.55a5cd929d", "test.project.not_null_dim_student_is_hispanic.2f36046142", "test.project.not_null_dim_student_school_year.cb1c50e460", "test.project.not_null_dim_student_student_first_name.f007907dff", "test.project.not_null_dim_student_student_key.67ab09a6e6", "test.project.not_null_dim_student_student_last_surname.329ae57d5b", "test.project.not_null_dim_student_student_unique_id.8a392fc4ab", "test.project.relationships_dim_student_school_key__school_key__ref_dim_school_.ea466bff27", "test.project.relationships_fct_student_assessment_student_key__student_key__ref_dim_student_.505c0cae72", "test.project.relationships_fct_student_attendance_student_key__student_key__ref_dim_student_.902b20eb5a", "test.project.relationships_fct_student_school_student_key__student_key__ref_dim_student_.ce63ab9df5", "test.project.relationships_rls_user_student_data_authorization_student_key__student_key__ref_dim_student_.2b38b50db6", "test.project.unique_dim_student_student_key.45ef646b54"], "model.project.stg_google_forms_responses": ["model.project.google_forms_edfi_survey_question_responses", "model.project.google_forms_edfi_survey_responses", "test.project.unique_stg_google_forms_responses_form_id_response_id.735779ab54"], "model.project.rpt_student_assessment": [], "model.project.dim_assessment": ["model.project.rpt_student_assessment", "model.project.rpt_student_assessment", "model.project.rpt_student_assessment", "test.project.not_null_dim_assessment_assessment_identifier.b01a1c84ef", "test.project.not_null_dim_assessment_assessment_key.1ee4792dcf", "test.project.not_null_dim_assessment_education_organization_key.e46eded9e2", "test.project.not_null_dim_assessment_school_year.6f50975711", "test.project.relationships_fct_student_assessment_assessment_key__assessment_key__ref_dim_assessment_.fb7625afbd", "test.project.unique_dim_assessment_assessment_key.d45cb819a0"], "model.project.stg_edfi_assessments": ["model.project.dim_assessment", "model.project.dim_assessment"], "model.project.fct_student_attendance": ["model.project.rpt_student_attendance", "model.project.rpt_student_attendance", "test.project.not_null_fct_student_attendance_date.1c7057eb63", "test.project.not_null_fct_student_attendance_event_duration.7405fc5f51", "test.project.not_null_fct_student_attendance_school_attendance_event_category_descriptor.be3ab06fa8", "test.project.not_null_fct_student_attendance_school_year.c69c139be1", "test.project.relationships_fct_student_attendance_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.1058409cf0", "test.project.relationships_fct_student_attendance_school_key__school_key__ref_dim_school_.a425d4b0e7", "test.project.relationships_fct_student_attendance_student_key__student_key__ref_dim_student_.902b20eb5a"], "model.project.rls_user_student_data_authorization": ["model.project.rpt_student_attendance", "test.project.relationships_rls_user_student_data_authorization_student_key__student_key__ref_dim_student_.2b38b50db6"], "model.project.fct_student_school": ["model.project.current_gpa", "model.project.rls_user_student_data_authorization", "test.project.relationships_fct_student_school_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.bdd6a57ac4", "test.project.relationships_fct_student_school_school_key__school_key__ref_dim_school_.7a675bb6ae", "test.project.relationships_fct_student_school_student_key__student_key__ref_dim_student_.ce63ab9df5"], "model.project.stg_edfi_calendar_dates": ["model.project.dim_date", "model.project.fct_student_attendance", "model.project.fct_student_school"], "model.project.stg_edfi_calendars": [], "model.project.bridge_staff_group": ["model.project.rls_user_student_data_authorization", "model.project.rpt_student_section_grade", "test.project.unique_bridge_staff_group_staff_group_key_staff_key.71682839f2"], "model.project.dim_section": ["model.project.current_gpa", "model.project.rpt_student_section_grade", "test.project.not_null_dim_section_section_identifier.5aa4059a37", "test.project.not_null_dim_section_section_key.d763cc8042", "test.project.relationships_dim_section_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.1c63a4fa13", "test.project.relationships_dim_section_school_key__school_key__ref_dim_school_.b29c32ae93", "test.project.relationships_dim_section_session_key__session_key__ref_dim_session_.5fcf678cd6", "test.project.unique_dim_section_section_key.4b442b173b"], "model.project.fct_student_section": ["model.project.rls_user_student_data_authorization"], "model.project.stg_edfi_course_offerings": ["model.project.bridge_staff_group", "model.project.dim_section", "model.project.fct_student_section"], "model.project.stg_edfi_courses": ["model.project.dim_section"], "model.project.stg_edfi_descriptors": [], "model.project.stg_edfi_discipline_incidents": [], "model.project.dim_grading_period": ["model.project.current_gpa", "model.project.rpt_student_section_grade", "test.project.not_null_dim_grading_period_grading_period_key.a9c6847f9d", "test.project.relationships_dim_grading_period_school_key__school_key__ref_dim_school_.fff5503f34", "test.project.unique_dim_grading_period_grading_period_key.2c941ffbec"], "model.project.fct_student_section_grade": ["model.project.current_gpa", "model.project.rpt_student_section_grade", "test.project.dbt_utils_expression_is_true_fct_student_section_grade_numeric_grade_earned_0.144140aea3", "test.project.not_null_fct_student_section_grade_letter_grade_earned.14c0fe6021", "test.project.not_null_fct_student_section_grade_student_key.cc4059fd96"], "model.project.stg_edfi_grades": ["model.project.dim_grading_period", "model.project.fct_student_section_grade"], "model.project.stg_edfi_grading_periods": ["model.project.dim_grading_period", "model.project.dim_grading_period"], "model.project.dim_local_education_agency": ["model.project.rpt_student_attendance", "model.project.rpt_student_section_grade", "test.project.not_null_dim_local_education_agency_local_education_agency_id.6ba737bcd9", "test.project.not_null_dim_local_education_agency_local_education_agency_key.3f6251750d", "test.project.relationships_dim_school_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.c40f28107b", "test.project.relationships_dim_section_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.1c63a4fa13", "test.project.relationships_fct_student_attendance_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.1058409cf0", "test.project.relationships_fct_student_school_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.bdd6a57ac4", "test.project.unique_dim_local_education_agency_local_education_agency_id.1a30878627", "test.project.unique_dim_local_education_agency_local_education_agency_key.2cf2d58a69"], "model.project.dim_school": ["model.project.current_gpa", "model.project.rpt_student_assessment", "model.project.rpt_student_attendance", "model.project.rpt_student_section_grade", "test.project.not_null_dim_school_school_id.36d55ce30b", "test.project.not_null_dim_school_school_key.209ee6078e", "test.project.relationships_dim_grading_period_school_key__school_key__ref_dim_school_.fff5503f34", "test.project.relationships_dim_school_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.c40f28107b", "test.project.relationships_dim_section_school_key__school_key__ref_dim_school_.b29c32ae93", "test.project.relationships_dim_session_school_key__school_key__ref_dim_school_.d4064049b7", "test.project.relationships_dim_student_school_key__school_key__ref_dim_school_.ea466bff27", "test.project.relationships_fct_student_assessment_school_key__school_key__ref_dim_school_.6d4121ee49", "test.project.relationships_fct_student_attendance_school_key__school_key__ref_dim_school_.a425d4b0e7", "test.project.relationships_fct_student_school_school_key__school_key__ref_dim_school_.7a675bb6ae", "test.project.unique_dim_school_school_id.d10cafcd76", "test.project.unique_dim_school_school_key.64ec309207"], "model.project.stg_edfi_local_education_agencies": ["model.project.dim_local_education_agency", "model.project.dim_school", "test.project.unique_stg_edfi_local_education_agencies_CONCAT_school_year_local_education_agency_id_.68cfccff4d"], "model.project.stg_edfi_objective_assessments": ["model.project.dim_assessment"], "model.project.stg_edfi_parents": [], "model.project.stg_edfi_programs": ["model.project.dim_student"], "model.project.stg_edfi_schools": ["model.project.dim_school", "model.project.dim_section", "model.project.fct_staff_school", "model.project.fct_student_attendance", "model.project.fct_student_school", "test.project.relationships_stg_edfi_schools_school_id__school_reference_school_id__ref_stg_edfi_sessions_.621576b37d"], "model.project.stg_edfi_sections": ["model.project.bridge_staff_group", "model.project.dim_section"], "model.project.dim_session": ["model.project.rpt_student_section_grade", "test.project.not_null_dim_session_session_key.2c2f8e6dac", "test.project.relationships_dim_section_session_key__session_key__ref_dim_session_.5fcf678cd6", "test.project.relationships_dim_session_school_key__school_key__ref_dim_school_.d4064049b7", "test.project.unique_dim_session_session_key.b5230e3fd3"], "model.project.stg_edfi_sessions": ["model.project.bridge_staff_group", "model.project.dim_grading_period", "model.project.dim_section", "model.project.dim_session", "model.project.dim_student", "test.project.relationships_stg_edfi_schools_school_id__school_reference_school_id__ref_stg_edfi_sessions_.621576b37d"], "model.project.stg_edfi_staff_education_organization_assignment_associations": ["model.project.fct_staff_school"], "model.project.stg_edfi_staff_school_associations": ["model.project.fct_staff_school"], "model.project.stg_edfi_staff_section_associations": ["model.project.bridge_staff_group"], "model.project.dim_staff": ["model.project.rls_user_student_data_authorization", "model.project.rls_user_student_data_authorization", "model.project.rpt_student_section_grade", "test.project.not_null_dim_staff_student_key.8f46632ad4", "test.project.unique_dim_staff_student_key.57b69ecc98"], "model.project.stg_edfi_staffs": ["model.project.dim_staff"], "model.project.fct_student_assessment": ["model.project.rpt_student_assessment", "model.project.rpt_student_assessment", "model.project.rpt_student_assessment", "test.project.not_null_fct_student_assessment_school_year.d353cc4178", "test.project.not_null_fct_student_assessment_student_assessment_identifier.bf72913748", "test.project.relationships_fct_student_assessment_assessment_key__assessment_key__ref_dim_assessment_.fb7625afbd", "test.project.relationships_fct_student_assessment_school_key__school_key__ref_dim_school_.6d4121ee49", "test.project.relationships_fct_student_assessment_student_key__student_key__ref_dim_student_.505c0cae72"], "model.project.stg_edfi_student_assessments": ["model.project.fct_student_assessment", "model.project.fct_student_assessment", "model.project.fct_student_assessment", "model.project.fct_student_assessment"], "model.project.stg_edfi_student_discipline_incident_associations": [], "model.project.stg_edfi_student_education_organization_associations": ["model.project.dim_student"], "model.project.stg_edfi_student_parent_associations": [], "model.project.stg_edfi_student_program_associations": [], "model.project.stg_edfi_student_school_associations": ["model.project.dim_student", "model.project.dim_student", "model.project.fct_student_assessment", "model.project.fct_student_assessment", "model.project.fct_student_assessment", "model.project.fct_student_assessment", "model.project.fct_student_attendance", "model.project.fct_student_school"], "model.project.stg_edfi_student_school_attendance_events": ["model.project.fct_student_attendance"], "model.project.stg_edfi_student_section_associations": ["model.project.fct_student_attendance", "model.project.fct_student_section", "model.project.fct_student_section_grade"], "model.project.stg_edfi_student_section_attendance_events": ["model.project.fct_student_attendance"], "model.project.stg_edfi_student_special_education_program_associations": ["model.project.dim_student"], "model.project.stg_edfi_students": ["model.project.dim_student", "model.project.fct_student_attendance", "test.project.unique_stg_edfi_students_school_year_student_unique_id.3a33c30a48"], "model.project.stg_edfi_survey_question_responses": ["model.project.fct_survey_response", "model.project.google_forms_deleted_responses"], "model.project.google_forms_edfi_survey_questions": [], "model.project.stg_google_forms_questions": ["model.project.google_forms_edfi_survey_questions", "model.project.google_forms_edfi_survey_questions", "test.project.unique_stg_google_forms_questions_form_id_question_id.21c31ca063"], "model.project.nwea_map_edfi_assessments": [], "model.project.stg_edfi_surveys": [], "model.project.stg_edfi_survey_questions": [], "model.project.stg_edfi_survey_responses": ["model.project.fct_survey_response", "model.project.google_forms_deleted_responses"], "test.project.relationships_fct_student_attendance_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.1058409cf0": [], "test.project.relationships_fct_student_attendance_school_key__school_key__ref_dim_school_.a425d4b0e7": [], "test.project.relationships_fct_student_attendance_student_key__student_key__ref_dim_student_.902b20eb5a": [], "test.project.not_null_fct_student_attendance_school_year.c69c139be1": [], "test.project.not_null_fct_student_attendance_date.1c7057eb63": [], "test.project.not_null_fct_student_attendance_school_attendance_event_category_descriptor.be3ab06fa8": [], "test.project.not_null_fct_student_attendance_event_duration.7405fc5f51": [], "test.project.unique_dim_date_date.dd069a8d31": [], "test.project.not_null_dim_date_date.78f11e7735": [], "test.project.unique_dim_student_student_key.45ef646b54": [], "test.project.not_null_dim_student_student_key.67ab09a6e6": [], "test.project.relationships_dim_student_school_key__school_key__ref_dim_school_.ea466bff27": [], "test.project.not_null_dim_student_school_year.cb1c50e460": [], "test.project.not_null_dim_student_student_unique_id.8a392fc4ab": [], "test.project.not_null_dim_student_student_last_surname.329ae57d5b": [], "test.project.not_null_dim_student_student_first_name.f007907dff": [], "test.project.not_null_dim_student_is_english_language_learner.55a5cd929d": [], "test.project.accepted_values_dim_student_is_english_language_learner__Yes__No.d5a7434ec1": [], "test.project.not_null_dim_student_in_special_education_program.f8695e7bf3": [], "test.project.accepted_values_dim_student_in_special_education_program__Yes__No.7a967caab1": [], "test.project.not_null_dim_student_is_hispanic.2f36046142": [], "test.project.accepted_values_dim_student_is_hispanic__Yes__No.28cf24b221": [], "test.project.relationships_fct_student_school_student_key__student_key__ref_dim_student_.ce63ab9df5": [], "test.project.relationships_fct_student_school_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.bdd6a57ac4": [], "test.project.relationships_fct_student_school_school_key__school_key__ref_dim_school_.7a675bb6ae": [], "test.project.unique_bridge_staff_group_staff_group_key_staff_key.71682839f2": [], "test.project.unique_dim_section_section_key.4b442b173b": [], "test.project.not_null_dim_section_section_key.d763cc8042": [], "test.project.relationships_dim_section_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.1c63a4fa13": [], "test.project.relationships_dim_section_school_key__school_key__ref_dim_school_.b29c32ae93": [], "test.project.relationships_dim_section_session_key__session_key__ref_dim_session_.5fcf678cd6": [], "test.project.not_null_dim_section_section_identifier.5aa4059a37": [], "test.project.unique_dim_grading_period_grading_period_key.2c941ffbec": [], "test.project.not_null_dim_grading_period_grading_period_key.a9c6847f9d": [], "test.project.relationships_dim_grading_period_school_key__school_key__ref_dim_school_.fff5503f34": [], "test.project.unique_dim_local_education_agency_local_education_agency_key.2cf2d58a69": [], "test.project.not_null_dim_local_education_agency_local_education_agency_key.3f6251750d": [], "test.project.unique_dim_local_education_agency_local_education_agency_id.1a30878627": [], "test.project.not_null_dim_local_education_agency_local_education_agency_id.6ba737bcd9": [], "test.project.unique_dim_school_school_key.64ec309207": [], "test.project.not_null_dim_school_school_key.209ee6078e": [], "test.project.relationships_dim_school_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.c40f28107b": [], "test.project.unique_dim_school_school_id.d10cafcd76": [], "test.project.not_null_dim_school_school_id.36d55ce30b": [], "test.project.unique_dim_session_session_key.b5230e3fd3": [], "test.project.not_null_dim_session_session_key.2c2f8e6dac": [], "test.project.relationships_dim_session_school_key__school_key__ref_dim_school_.d4064049b7": [], "test.project.unique_dim_staff_student_key.57b69ecc98": [], "test.project.not_null_dim_staff_student_key.8f46632ad4": [], "test.project.unique_stg_google_forms_responses_form_id_response_id.735779ab54": [], "test.project.unique_stg_google_forms_questions_form_id_question_id.21c31ca063": [], "test.project.unique_dim_assessment_assessment_key.d45cb819a0": [], "test.project.not_null_dim_assessment_assessment_key.1ee4792dcf": [], "test.project.not_null_dim_assessment_education_organization_key.e46eded9e2": [], "test.project.not_null_dim_assessment_school_year.6f50975711": [], "test.project.not_null_dim_assessment_assessment_identifier.b01a1c84ef": [], "test.project.relationships_fct_student_assessment_assessment_key__assessment_key__ref_dim_assessment_.fb7625afbd": [], "test.project.relationships_fct_student_assessment_student_key__student_key__ref_dim_student_.505c0cae72": [], "test.project.relationships_fct_student_assessment_school_key__school_key__ref_dim_school_.6d4121ee49": [], "test.project.not_null_fct_student_assessment_school_year.d353cc4178": [], "test.project.not_null_fct_student_assessment_student_assessment_identifier.bf72913748": [], "test.project.unique_stg_edfi_local_education_agencies_CONCAT_school_year_local_education_agency_id_.68cfccff4d": [], "test.project.relationships_stg_edfi_schools_school_id__school_reference_school_id__ref_stg_edfi_sessions_.621576b37d": [], "test.project.unique_stg_edfi_students_school_year_student_unique_id.3a33c30a48": [], "test.project.relationships_rls_user_student_data_authorization_student_key__student_key__ref_dim_student_.2b38b50db6": [], "test.project.not_null_fct_student_section_grade_student_key.cc4059fd96": [], "test.project.not_null_fct_student_section_grade_letter_grade_earned.14c0fe6021": [], "test.project.dbt_utils_expression_is_true_fct_student_section_grade_numeric_grade_earned_0.144140aea3": [], "source.project.staging.base_nwea_map_assessment_results": ["model.project.stg_nwea_map_assessment_results"], "source.project.staging.base_nwea_map_class_assignments": [], "source.project.staging.base_nwea_map_students_by_school": [], "source.project.staging.edfi_processed_change_versions": [], "source.project.staging.base_edfi_assessments": ["model.project.stg_edfi_assessments", "model.project.stg_edfi_assessments"], "source.project.staging.base_edfi_calendars": ["model.project.stg_edfi_calendars", "model.project.stg_edfi_calendars"], "source.project.staging.base_edfi_calendar_dates": ["model.project.stg_edfi_calendar_dates", "model.project.stg_edfi_calendar_dates"], "source.project.staging.base_edfi_courses": ["model.project.stg_edfi_courses", "model.project.stg_edfi_courses"], "source.project.staging.base_edfi_course_offerings": ["model.project.stg_edfi_course_offerings", "model.project.stg_edfi_course_offerings"], "source.project.staging.base_edfi_discipline_actions": [], "source.project.staging.base_edfi_discipline_incidents": ["model.project.stg_edfi_discipline_incidents", "model.project.stg_edfi_discipline_incidents"], "source.project.staging.base_edfi_grading_periods": ["model.project.stg_edfi_grading_periods", "model.project.stg_edfi_grading_periods"], "source.project.staging.base_edfi_grading_period_descriptors": [], "source.project.staging.base_edfi_grades": ["model.project.stg_edfi_grades", "model.project.stg_edfi_grades"], "source.project.staging.base_edfi_local_education_agencies": ["model.project.stg_edfi_local_education_agencies", "model.project.stg_edfi_local_education_agencies"], "source.project.staging.base_edfi_objective_assessments": ["model.project.stg_edfi_objective_assessments", "model.project.stg_edfi_objective_assessments"], "source.project.staging.base_edfi_parents": ["model.project.stg_edfi_parents", "model.project.stg_edfi_parents"], "source.project.staging.base_edfi_programs": ["model.project.stg_edfi_programs", "model.project.stg_edfi_programs"], "source.project.staging.base_edfi_schools": ["model.project.stg_edfi_schools", "model.project.stg_edfi_schools"], "source.project.staging.base_edfi_school_year_types": ["model.project.stg_edfi_school_year_types", "model.project.stg_edfi_school_year_types"], "source.project.staging.base_edfi_sections": ["model.project.stg_edfi_sections", "model.project.stg_edfi_sections"], "source.project.staging.base_edfi_sessions": ["model.project.stg_edfi_sessions", "model.project.stg_edfi_sessions"], "source.project.staging.base_edfi_staffs": ["model.project.stg_edfi_staffs", "model.project.stg_edfi_staffs"], "source.project.staging.base_edfi_staff_discipline_incident_associations": [], "source.project.staging.base_edfi_staff_education_organization_assignment_associations": ["model.project.stg_edfi_staff_education_organization_assignment_associations", "model.project.stg_edfi_staff_education_organization_assignment_associations"], "source.project.staging.base_edfi_staff_school_associations": ["model.project.stg_edfi_staff_school_associations", "model.project.stg_edfi_staff_school_associations"], "source.project.staging.base_edfi_staff_section_associations": ["model.project.stg_edfi_staff_section_associations", "model.project.stg_edfi_staff_section_associations"], "source.project.staging.base_edfi_students": ["model.project.stg_edfi_students", "model.project.stg_edfi_students"], "source.project.staging.base_edfi_student_assessments": ["model.project.stg_edfi_student_assessments", "model.project.stg_edfi_student_assessments"], "source.project.staging.base_edfi_student_discipline_incident_associations": ["model.project.stg_edfi_student_discipline_incident_associations", "model.project.stg_edfi_student_discipline_incident_associations"], "source.project.staging.base_edfi_student_education_organization_associations": ["model.project.stg_edfi_student_education_organization_associations", "model.project.stg_edfi_student_education_organization_associations"], "source.project.staging.base_edfi_student_parent_associations": ["model.project.stg_edfi_student_parent_associations", "model.project.stg_edfi_student_parent_associations"], "source.project.staging.base_edfi_student_program_associations": ["model.project.stg_edfi_student_program_associations", "model.project.stg_edfi_student_program_associations"], "source.project.staging.base_edfi_student_school_associations": ["model.project.stg_edfi_student_school_associations", "model.project.stg_edfi_student_school_associations"], "source.project.staging.base_edfi_student_school_attendance_events": ["model.project.stg_edfi_student_school_attendance_events", "model.project.stg_edfi_student_school_attendance_events"], "source.project.staging.base_edfi_student_section_associations": ["model.project.stg_edfi_student_section_associations", "model.project.stg_edfi_student_section_associations"], "source.project.staging.base_edfi_student_section_attendance_events": ["model.project.stg_edfi_student_section_attendance_events", "model.project.stg_edfi_student_section_attendance_events"], "source.project.staging.base_edfi_student_special_education_program_associations": ["model.project.stg_edfi_student_special_education_program_associations", "model.project.stg_edfi_student_special_education_program_associations"], "source.project.staging.base_edfi_descriptors": ["model.project.stg_edfi_descriptors", "model.project.stg_edfi_descriptors"], "source.project.staging.base_google_forms_questions": ["model.project.stg_google_forms", "model.project.stg_google_forms_questions"], "source.project.staging.base_google_forms_responses": ["model.project.stg_google_forms_responses"]}}