{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v4.json", "dbt_version": "1.0.1", "generated_at": "2022-01-29T01:25:59.059419Z", "invocation_id": "069164d8-e4d1-44ab-ba42-2cb678b09747", "env": {}, "project_id": "46f86faa6bbf9ac94a7e459509a20ed0", "user_id": "ae2c97a3-5d82-4e5e-bb43-f224e7e31ca2", "send_anonymous_usage_stats": true, "adapter_type": "bigquery"}, "nodes": {"model.project.rls_student_data_authorization": {"raw_sql": "{{\r\n  config(\r\n    labels = {'analytics_middle_tier': 'yes'}\r\n  )\r\n}}\r\n\r\n\r\nSELECT\r\n    {{ dbt_utils.surrogate_key([\r\n        'ssa.student_reference.student_unique_id'\r\n    ]) }}                                           AS student_key,\r\n    {{ dbt_utils.surrogate_key([\r\n        'ssa.section_reference.school_id'\r\n    ]) }}                                           AS school_key,\r\n    {{ dbt_utils.surrogate_key([\r\n        'sections.id'\r\n     ]) }}                                          AS section_id,\r\n    ssa.begin_date,\r\n    ssa.end_date\r\nFROM {{ ref('stg_edfi_student_section_associations') }} ssa\r\nLEFT JOIN {{ ref('stg_edfi_sections') }} sections\r\n    ON ssa.school_year = sections.school_year\r\n    AND sections.course_offering_reference.local_course_code = ssa.section_reference.local_course_code\r\n    AND sections.course_offering_reference.school_id = ssa.section_reference.school_id\r\n    AND sections.course_offering_reference.school_year = ssa.section_reference.school_year\r\n    AND sections.section_identifier = ssa.section_reference.section_identifier\r\n    AND sections.course_offering_reference.session_name = ssa.section_reference.session_name", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.project.stg_edfi_student_section_associations", "model.project.stg_edfi_sections"]}, "config": {"enabled": true, "alias": null, "schema": "row_level_security", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"analytics_middle_tier": "yes"}, "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_row_level_security", "fqn": ["project", "marts", "row_level_security", "rls_student_data_authorization"], "unique_id": "model.project.rls_student_data_authorization", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "marts/row_level_security/rls_student_data_authorization.sql", "original_file_path": "models/marts/row_level_security/rls_student_data_authorization.sql", "name": "rls_student_data_authorization", "alias": "rls_student_data_authorization", "checksum": {"name": "sha256", "checksum": "5f2b500bf1503f3f304b195c80186ac97007b293e62e696e0531ee2d3c12310d"}, "tags": ["amt"], "refs": [["stg_edfi_student_section_associations"], ["stg_edfi_sections"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/row_level_security/rls_student_data_authorization.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "tags": "amt", "schema": "row_level_security", "labels": {"analytics_middle_tier": "yes"}}, "created_at": 1643419470.0272233, "compiled_sql": "\n\n\nSELECT\n    to_hex(md5(cast(coalesce(cast(ssa.student_reference.student_unique_id as \n    string\n), '') as \n    string\n)))                                           AS student_key,\n    to_hex(md5(cast(coalesce(cast(ssa.section_reference.school_id as \n    string\n), '') as \n    string\n)))                                           AS school_key,\n    to_hex(md5(cast(coalesce(cast(sections.id as \n    string\n), '') as \n    string\n)))                                          AS section_id,\n    ssa.begin_date,\n    ssa.end_date\nFROM `gcp-proj-id`.`dev_staging`.`stg_edfi_student_section_associations` ssa\nLEFT JOIN `gcp-proj-id`.`dev_staging`.`stg_edfi_sections` sections\n    ON ssa.school_year = sections.school_year\n    AND sections.course_offering_reference.local_course_code = ssa.section_reference.local_course_code\n    AND sections.course_offering_reference.school_id = ssa.section_reference.school_id\n    AND sections.course_offering_reference.school_year = ssa.section_reference.school_year\n    AND sections.section_identifier = ssa.section_reference.section_identifier\n    AND sections.course_offering_reference.session_name = ssa.section_reference.session_name", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_row_level_security`.`rls_student_data_authorization`"}, "model.project.rls_user_authorization": {"raw_sql": "{{\r\n  config(\r\n    labels = {'analytics_middle_tier': 'yes'}\r\n  )\r\n}}\r\n\r\n\r\nWITH staff_to_scope_map AS (\r\n    SELECT\r\n        seoa.school_year,\r\n        seoa.staff_reference.staff_unique_id,\r\n        seoa.staff_classification_descriptor AS user_scope,\r\n        seoa.education_organization_reference.education_organization_id\r\n    FROM  {{ ref('stg_edfi_staff_education_organization_assignment_associations') }} seoa\r\n    WHERE\r\n        seoa.staff_classification_descriptor IN ('Superintendent', 'Principal', 'Teacher')\r\n        AND (seoa.end_date IS NOT NULL OR seoa.end_date >= CURRENT_DATE)\r\n)\r\n\r\nSELECT DISTINCT\r\n    {{ dbt_utils.surrogate_key([\r\n        'staff_to_scope_map.staff_unique_id'\r\n     ]) }}                                          AS user_key,\r\n    staff_to_scope_map.user_scope                   AS user_scope,\r\n    'ALL'                                           AS student_permission,\r\n    CASE staff_to_scope_map.user_scope\r\n        WHEN 'Superintendent' THEN 'ALL'\r\n        WHEN 'Principal' THEN 'ALL'\r\n        ELSE edfi_sections.section_identifier\r\n    END                                             AS section_permission,\r\n    CASE staff_to_scope_map.user_scope\r\n        WHEN 'Superintendent' THEN 'ALL'\r\n\t\tWHEN 'Principal'      THEN 'ALL'\r\n        ELSE CONCAT(\r\n            edfi_sections.course_offering_reference.school_id, '-',\r\n            edfi_sections.course_offering_reference.local_course_code, '-',\r\n            edfi_sections.course_offering_reference.school_year, '-',\r\n            edfi_sections.section_identifier, '-',\r\n            edfi_sections.course_offering_reference.session_name\r\n        )\r\n    END                                             AS section_key_permission,\r\n    CASE staff_to_scope_map.user_scope\r\n        WHEN 'Superintendent' THEN 'ALL'\r\n        ELSE staff_to_scope_map.education_organization_id\r\n    END                                             AS school_permission,\r\n    IF(staff_to_scope_map.user_scope = 'Superintendent', staff_to_scope_map.education_organization_id, NULL) AS district_id\r\nFROM staff_to_scope_map\r\nLEFT JOIN {{ ref('stg_edfi_staff_section_associations') }} staff_section_associations\r\n    ON staff_to_scope_map.school_year = staff_section_associations.school_year\r\n    AND staff_section_associations.staff_reference.staff_unique_id = staff_to_scope_map.staff_unique_id\r\n    AND staff_section_associations.section_reference.school_id = staff_to_scope_map.education_organization_id\r\nLEFT JOIN {{ ref('stg_edfi_sections') }} edfi_sections\r\n    ON staff_to_scope_map.school_year = edfi_sections.school_year\r\n    AND edfi_sections.course_offering_reference.local_course_code = staff_section_associations.section_reference.local_course_code\r\n    AND edfi_sections.course_offering_reference.school_id = staff_section_associations.section_reference.school_id\r\n    AND edfi_sections.course_offering_reference.school_year = staff_section_associations.section_reference.school_year\r\n    AND edfi_sections.section_identifier = staff_section_associations.section_reference.section_identifier\r\n    AND edfi_sections.course_offering_reference.session_name = staff_section_associations.section_reference.session_name\r\nWHERE\r\n    staff_to_scope_map.user_scope IN ('Superintendent', 'Principal', 'Teacher')\r\n    OR staff_section_associations.staff_reference.staff_unique_id IS NOT NULL", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.project.stg_edfi_staff_education_organization_assignment_associations", "model.project.stg_edfi_staff_section_associations", "model.project.stg_edfi_sections"]}, "config": {"enabled": true, "alias": null, "schema": "row_level_security", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"analytics_middle_tier": "yes"}, "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_row_level_security", "fqn": ["project", "marts", "row_level_security", "rls_user_authorization"], "unique_id": "model.project.rls_user_authorization", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "marts/row_level_security/rls_user_authorization.sql", "original_file_path": "models/marts/row_level_security/rls_user_authorization.sql", "name": "rls_user_authorization", "alias": "rls_user_authorization", "checksum": {"name": "sha256", "checksum": "b0cc04dac54745586ed24117266335260cd1accf6ce21ed97dc3ae24e557f256"}, "tags": ["amt"], "refs": [["stg_edfi_staff_education_organization_assignment_associations"], ["stg_edfi_staff_section_associations"], ["stg_edfi_sections"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/row_level_security/rls_user_authorization.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "tags": "amt", "schema": "row_level_security", "labels": {"analytics_middle_tier": "yes"}}, "created_at": 1643419470.053871, "compiled_sql": "\n\n\nWITH staff_to_scope_map AS (\n    SELECT\n        seoa.school_year,\n        seoa.staff_reference.staff_unique_id,\n        seoa.staff_classification_descriptor AS user_scope,\n        seoa.education_organization_reference.education_organization_id\n    FROM  `gcp-proj-id`.`dev_staging`.`stg_edfi_staff_education_organization_assignment_associations` seoa\n    WHERE\n        seoa.staff_classification_descriptor IN ('Superintendent', 'Principal', 'Teacher')\n        AND (seoa.end_date IS NOT NULL OR seoa.end_date >= CURRENT_DATE)\n)\n\nSELECT DISTINCT\n    to_hex(md5(cast(coalesce(cast(staff_to_scope_map.staff_unique_id as \n    string\n), '') as \n    string\n)))                                          AS user_key,\n    staff_to_scope_map.user_scope                   AS user_scope,\n    'ALL'                                           AS student_permission,\n    CASE staff_to_scope_map.user_scope\n        WHEN 'Superintendent' THEN 'ALL'\n        WHEN 'Principal' THEN 'ALL'\n        ELSE edfi_sections.section_identifier\n    END                                             AS section_permission,\n    CASE staff_to_scope_map.user_scope\n        WHEN 'Superintendent' THEN 'ALL'\n\t\tWHEN 'Principal'      THEN 'ALL'\n        ELSE CONCAT(\n            edfi_sections.course_offering_reference.school_id, '-',\n            edfi_sections.course_offering_reference.local_course_code, '-',\n            edfi_sections.course_offering_reference.school_year, '-',\n            edfi_sections.section_identifier, '-',\n            edfi_sections.course_offering_reference.session_name\n        )\n    END                                             AS section_key_permission,\n    CASE staff_to_scope_map.user_scope\n        WHEN 'Superintendent' THEN 'ALL'\n        ELSE staff_to_scope_map.education_organization_id\n    END                                             AS school_permission,\n    IF(staff_to_scope_map.user_scope = 'Superintendent', staff_to_scope_map.education_organization_id, NULL) AS district_id\nFROM staff_to_scope_map\nLEFT JOIN `gcp-proj-id`.`dev_staging`.`stg_edfi_staff_section_associations` staff_section_associations\n    ON staff_to_scope_map.school_year = staff_section_associations.school_year\n    AND staff_section_associations.staff_reference.staff_unique_id = staff_to_scope_map.staff_unique_id\n    AND staff_section_associations.section_reference.school_id = staff_to_scope_map.education_organization_id\nLEFT JOIN `gcp-proj-id`.`dev_staging`.`stg_edfi_sections` edfi_sections\n    ON staff_to_scope_map.school_year = edfi_sections.school_year\n    AND edfi_sections.course_offering_reference.local_course_code = staff_section_associations.section_reference.local_course_code\n    AND edfi_sections.course_offering_reference.school_id = staff_section_associations.section_reference.school_id\n    AND edfi_sections.course_offering_reference.school_year = staff_section_associations.section_reference.school_year\n    AND edfi_sections.section_identifier = staff_section_associations.section_reference.section_identifier\n    AND edfi_sections.course_offering_reference.session_name = staff_section_associations.section_reference.session_name\nWHERE\n    staff_to_scope_map.user_scope IN ('Superintendent', 'Principal', 'Teacher')\n    OR staff_section_associations.staff_reference.staff_unique_id IS NOT NULL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_row_level_security`.`rls_user_authorization`"}, "model.project.rls_dim_user": {"raw_sql": "{{\r\n  config(\r\n    labels = {'analytics_middle_tier': 'yes'}\r\n  )\r\n}}\r\n\r\n\r\nSELECT DISTINCT\r\n    {{ dbt_utils.surrogate_key([\r\n        'staff.staff_unique_id'\r\n     ]) }}                          AS user_key,\r\n    email.electronic_mail_address   AS user_email\r\nFROM {{ ref('stg_edfi_staffs') }} staff,\r\n    UNNEST(staff.electronic_mails) AS email\r\nWHERE email.electronic_mail_type_descriptor = 'Work'", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.project.stg_edfi_staffs"]}, "config": {"enabled": true, "alias": null, "schema": "row_level_security", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"analytics_middle_tier": "yes"}, "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_row_level_security", "fqn": ["project", "marts", "row_level_security", "rls_dim_user"], "unique_id": "model.project.rls_dim_user", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "marts/row_level_security/rls_dim_user.sql", "original_file_path": "models/marts/row_level_security/rls_dim_user.sql", "name": "rls_dim_user", "alias": "rls_dim_user", "checksum": {"name": "sha256", "checksum": "678a1f903480f604d82ac0afa84ab70c6baadf7a2c8768d9f287d8ba07078ed4"}, "tags": ["amt"], "refs": [["stg_edfi_staffs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/row_level_security/rls_dim_user.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "tags": "amt", "schema": "row_level_security", "labels": {"analytics_middle_tier": "yes"}}, "created_at": 1643419470.059934, "compiled_sql": "\n\n\nSELECT DISTINCT\n    to_hex(md5(cast(coalesce(cast(staff.staff_unique_id as \n    string\n), '') as \n    string\n)))                          AS user_key,\n    email.electronic_mail_address   AS user_email\nFROM `gcp-proj-id`.`dev_staging`.`stg_edfi_staffs` staff,\n    UNNEST(staff.electronic_mails) AS email\nWHERE email.electronic_mail_type_descriptor = 'Work'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_row_level_security`.`rls_dim_user`"}, "model.project.rls_user_student_data_authorization": {"raw_sql": "{{\r\n  config(\r\n    labels = {'analytics_middle_tier': 'yes'}\r\n  )\r\n}}\r\n\r\n\r\nSELECT DISTINCT\r\n    {{ dbt_utils.surrogate_key([\r\n        'seoa.staff_reference.staff_unique_id' \r\n    ]) }}                                                   AS user_key,\r\n    {{ dbt_utils.surrogate_key([\r\n        'ssa.student_reference.student_unique_id'\r\n    ]) }}                                                   AS student_key\r\nFROM  {{ ref('stg_edfi_staff_education_organization_assignment_associations') }} seoa\r\nLEFT JOIN {{ ref('stg_edfi_schools') }} schools\r\n    ON seoa.school_year = schools.school_year\r\n    AND schools.local_education_agency_id = seoa.education_organization_reference.education_organization_id\r\nLEFT JOIN {{ ref('stg_edfi_student_school_associations') }} ssa\r\n    ON seoa.school_year = ssa.school_year\r\n    AND ssa.school_reference.school_id = schools.school_id\r\nWHERE\r\n    seoa.staff_classification_descriptor = 'Superintendent'\r\n    AND (seoa.end_date IS NOT NULL OR seoa.end_date >= CURRENT_DATE)\r\n    AND (ssa.exit_withdraw_date IS NOT NULL OR ssa.exit_withdraw_date >= CURRENT_DATE)\r\n\r\nUNION ALL\r\n\r\nSELECT\r\n    {{ dbt_utils.surrogate_key([\r\n        'seoa.staff_reference.staff_unique_id'\r\n    ]) }}                                                   AS user_key,\r\n    {{ dbt_utils.surrogate_key([\r\n        'ssa.student_reference.student_unique_id'\r\n    ]) }}                                                   AS student_key\r\nFROM  {{ ref('stg_edfi_staff_education_organization_assignment_associations') }} seoa\r\nLEFT JOIN{{ ref('stg_edfi_student_school_associations') }} ssa\r\n    ON seoa.school_year = ssa.school_year\r\n    AND ssa.school_reference.school_id = seoa.education_organization_reference.education_organization_id\r\nWHERE\r\n    seoa.staff_classification_descriptor = 'Principal'\r\n    AND (seoa.end_date IS NOT NULL OR seoa.end_date >= CURRENT_DATE)\r\n    AND (ssa.exit_withdraw_date IS NOT NULL OR ssa.exit_withdraw_date >= CURRENT_DATE)\r\n\r\nUNION ALL\r\n\r\nSELECT\r\n    {{ dbt_utils.surrogate_key([\r\n        'seoa.staff_reference.staff_unique_id' ])\r\n    }}                                                      AS user_key,\r\n    {{ dbt_utils.surrogate_key([\r\n        'student_section_associations.student_reference.student_unique_id'\r\n    ]) }}                                                   AS student_key\r\nFROM  {{ ref('stg_edfi_staff_education_organization_assignment_associations') }} seoa\r\nLEFT JOIN {{ ref('stg_edfi_staff_section_associations') }} staff_section_associations\r\n    ON seoa.school_year = staff_section_associations.school_year\r\n    AND staff_section_associations.staff_reference.staff_unique_id = seoa.staff_reference.staff_unique_id\r\n    AND staff_section_associations.section_reference.school_id = seoa.education_organization_reference.education_organization_id\r\nLEFT JOIN {{ ref('stg_edfi_student_section_associations') }} student_section_associations\r\n    ON seoa.school_year = student_section_associations.school_year\r\n    AND student_section_associations.section_reference.local_course_code = staff_section_associations.section_reference.local_course_code\r\n    AND student_section_associations.section_reference.school_id = staff_section_associations.section_reference.school_id\r\n    AND student_section_associations.section_reference.school_year = staff_section_associations.section_reference.school_year\r\n    AND student_section_associations.section_reference.section_identifier = staff_section_associations.section_reference.section_identifier\r\n    AND student_section_associations.section_reference.session_name = staff_section_associations.section_reference.session_name\r\nWHERE\r\n    seoa.staff_classification_descriptor = 'Teacher'\r\n    AND (student_section_associations.end_date IS NOT NULL OR student_section_associations.end_date >= CURRENT_DATE)", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.project.stg_edfi_staff_education_organization_assignment_associations", "model.project.stg_edfi_schools", "model.project.stg_edfi_student_school_associations", "model.project.stg_edfi_staff_education_organization_assignment_associations", "model.project.stg_edfi_student_school_associations", "model.project.stg_edfi_staff_education_organization_assignment_associations", "model.project.stg_edfi_staff_section_associations", "model.project.stg_edfi_student_section_associations"]}, "config": {"enabled": true, "alias": null, "schema": "row_level_security", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"analytics_middle_tier": "yes"}, "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_row_level_security", "fqn": ["project", "marts", "row_level_security", "rls_user_student_data_authorization"], "unique_id": "model.project.rls_user_student_data_authorization", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "marts/row_level_security/rls_user_student_data_authorization.sql", "original_file_path": "models/marts/row_level_security/rls_user_student_data_authorization.sql", "name": "rls_user_student_data_authorization", "alias": "rls_user_student_data_authorization", "checksum": {"name": "sha256", "checksum": "9597cc55b08d8046113226969cc101995fc8c4cbc2e03ef33a475e9883c00073"}, "tags": ["amt"], "refs": [["stg_edfi_staff_education_organization_assignment_associations"], ["stg_edfi_schools"], ["stg_edfi_student_school_associations"], ["stg_edfi_staff_education_organization_assignment_associations"], ["stg_edfi_student_school_associations"], ["stg_edfi_staff_education_organization_assignment_associations"], ["stg_edfi_staff_section_associations"], ["stg_edfi_student_section_associations"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/row_level_security/rls_user_student_data_authorization.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "tags": "amt", "schema": "row_level_security", "labels": {"analytics_middle_tier": "yes"}}, "created_at": 1643419470.0647967, "compiled_sql": "\n\n\nSELECT DISTINCT\n    to_hex(md5(cast(coalesce(cast(seoa.staff_reference.staff_unique_id as \n    string\n), '') as \n    string\n)))                                                   AS user_key,\n    to_hex(md5(cast(coalesce(cast(ssa.student_reference.student_unique_id as \n    string\n), '') as \n    string\n)))                                                   AS student_key\nFROM  `gcp-proj-id`.`dev_staging`.`stg_edfi_staff_education_organization_assignment_associations` seoa\nLEFT JOIN `gcp-proj-id`.`dev_staging`.`stg_edfi_schools` schools\n    ON seoa.school_year = schools.school_year\n    AND schools.local_education_agency_id = seoa.education_organization_reference.education_organization_id\nLEFT JOIN `gcp-proj-id`.`dev_staging`.`stg_edfi_student_school_associations` ssa\n    ON seoa.school_year = ssa.school_year\n    AND ssa.school_reference.school_id = schools.school_id\nWHERE\n    seoa.staff_classification_descriptor = 'Superintendent'\n    AND (seoa.end_date IS NOT NULL OR seoa.end_date >= CURRENT_DATE)\n    AND (ssa.exit_withdraw_date IS NOT NULL OR ssa.exit_withdraw_date >= CURRENT_DATE)\n\nUNION ALL\n\nSELECT\n    to_hex(md5(cast(coalesce(cast(seoa.staff_reference.staff_unique_id as \n    string\n), '') as \n    string\n)))                                                   AS user_key,\n    to_hex(md5(cast(coalesce(cast(ssa.student_reference.student_unique_id as \n    string\n), '') as \n    string\n)))                                                   AS student_key\nFROM  `gcp-proj-id`.`dev_staging`.`stg_edfi_staff_education_organization_assignment_associations` seoa\nLEFT JOIN`gcp-proj-id`.`dev_staging`.`stg_edfi_student_school_associations` ssa\n    ON seoa.school_year = ssa.school_year\n    AND ssa.school_reference.school_id = seoa.education_organization_reference.education_organization_id\nWHERE\n    seoa.staff_classification_descriptor = 'Principal'\n    AND (seoa.end_date IS NOT NULL OR seoa.end_date >= CURRENT_DATE)\n    AND (ssa.exit_withdraw_date IS NOT NULL OR ssa.exit_withdraw_date >= CURRENT_DATE)\n\nUNION ALL\n\nSELECT\n    to_hex(md5(cast(coalesce(cast(seoa.staff_reference.staff_unique_id as \n    string\n), '') as \n    string\n)))                                                      AS user_key,\n    to_hex(md5(cast(coalesce(cast(student_section_associations.student_reference.student_unique_id as \n    string\n), '') as \n    string\n)))                                                   AS student_key\nFROM  `gcp-proj-id`.`dev_staging`.`stg_edfi_staff_education_organization_assignment_associations` seoa\nLEFT JOIN `gcp-proj-id`.`dev_staging`.`stg_edfi_staff_section_associations` staff_section_associations\n    ON seoa.school_year = staff_section_associations.school_year\n    AND staff_section_associations.staff_reference.staff_unique_id = seoa.staff_reference.staff_unique_id\n    AND staff_section_associations.section_reference.school_id = seoa.education_organization_reference.education_organization_id\nLEFT JOIN `gcp-proj-id`.`dev_staging`.`stg_edfi_student_section_associations` student_section_associations\n    ON seoa.school_year = student_section_associations.school_year\n    AND student_section_associations.section_reference.local_course_code = staff_section_associations.section_reference.local_course_code\n    AND student_section_associations.section_reference.school_id = staff_section_associations.section_reference.school_id\n    AND student_section_associations.section_reference.school_year = staff_section_associations.section_reference.school_year\n    AND student_section_associations.section_reference.section_identifier = staff_section_associations.section_reference.section_identifier\n    AND student_section_associations.section_reference.session_name = staff_section_associations.section_reference.session_name\nWHERE\n    seoa.staff_classification_descriptor = 'Teacher'\n    AND (student_section_associations.end_date IS NOT NULL OR student_section_associations.end_date >= CURRENT_DATE)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_row_level_security`.`rls_user_student_data_authorization`"}, "model.project.rls_user_school_authorization": {"raw_sql": "WITH emails AS (\n\n    SELECT\n        stg_edfi_staffs.staff_unique_id AS staff_unique_id,\n        emails.electronic_mail_address  AS electronic_mail_address\n    FROM {{ ref('stg_edfi_staffs') }} stg_edfi_staffs\n    CROSS JOIN UNNEST(electronic_mails) AS emails\n    WHERE emails.electronic_mail_type_descriptor = 'Work'\n\n)\n\n\nSELECT\n    school_year_type_reference.school_year          AS school_year,\n    {{ dbt_utils.surrogate_key([\n        'staff_reference.staff_unique_id' \n    ]) }}                                           AS user_key,\n    {{ dbt_utils.surrogate_key([\n        'school_reference.school_id'\n    ]) }}                                           AS school_key,\n    emails.electronic_mail_address                  AS email\nFROM {{ ref('stg_edfi_staff_school_associations') }} stg_edfi_staff_school_associations\nLEFT JOIN emails\n    ON stg_edfi_staff_school_associations.staff_reference.staff_unique_id = emails.staff_unique_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.project.stg_edfi_staffs", "model.project.stg_edfi_staff_school_associations"]}, "config": {"enabled": true, "alias": null, "schema": "row_level_security", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_row_level_security", "fqn": ["project", "marts", "row_level_security", "rls_user_school_authorization"], "unique_id": "model.project.rls_user_school_authorization", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "marts/row_level_security/rls_user_school_authorization.sql", "original_file_path": "models/marts/row_level_security/rls_user_school_authorization.sql", "name": "rls_user_school_authorization", "alias": "rls_user_school_authorization", "checksum": {"name": "sha256", "checksum": "00a2f6066ba1614cef3e8cf6bb769b218929abfea3a1f2786b67f67c6145b917"}, "tags": ["amt"], "refs": [["stg_edfi_staffs"], ["stg_edfi_staff_school_associations"]], "sources": [], "description": "One row per school a user is association with", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/marts/row_level_security/row_level_security.yml", "compiled_path": "target/compiled/project/models/marts/row_level_security/rls_user_school_authorization.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "tags": "amt", "schema": "row_level_security"}, "created_at": 1643419470.40413, "compiled_sql": "WITH emails AS (\n\n    SELECT\n        stg_edfi_staffs.staff_unique_id AS staff_unique_id,\n        emails.electronic_mail_address  AS electronic_mail_address\n    FROM `gcp-proj-id`.`dev_staging`.`stg_edfi_staffs` stg_edfi_staffs\n    CROSS JOIN UNNEST(electronic_mails) AS emails\n    WHERE emails.electronic_mail_type_descriptor = 'Work'\n\n)\n\n\nSELECT\n    school_year_type_reference.school_year          AS school_year,\n    to_hex(md5(cast(coalesce(cast(staff_reference.staff_unique_id as \n    string\n), '') as \n    string\n)))                                           AS user_key,\n    to_hex(md5(cast(coalesce(cast(school_reference.school_id as \n    string\n), '') as \n    string\n)))                                           AS school_key,\n    emails.electronic_mail_address                  AS email\nFROM `gcp-proj-id`.`dev_staging`.`stg_edfi_staff_school_associations` stg_edfi_staff_school_associations\nLEFT JOIN emails\n    ON stg_edfi_staff_school_associations.staff_reference.staff_unique_id = emails.staff_unique_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_row_level_security`.`rls_user_school_authorization`"}, "model.project.rpt_student_section_grade": {"raw_sql": "SELECT DISTINCT\n    dim_student.student_unique_id                               AS student_unique_id,\n    dim_student.student_display_name                            AS student_display_name,\n    fct_student_section_grade.school_year                       AS school_year,\n    dim_student_section.local_course_code                       AS local_course_code,\n    dim_student_section.course_title                            AS course_title,\n    dim_section.section_identifier                              AS section_identifier,\n    dim_student_section.academic_subject                        AS academic_subject,\n    dim_session.session_name                       AS session_name,\n    dim_session.term_name                          AS term_name,\n    dim_section.course_gpa_applicability                        AS course_gpa_applicability,\n    dim_section.available_credits                               AS available_credits,\n    dim_grading_period.grading_period_description               AS grading_period_description,\n    IF(\n        CURRENT_DATE BETWEEN dim_grading_period.grading_period_begin_date AND dim_grading_period.grading_period_end_date,\n        TRUE,\n        FALSE\n    )                                                           AS is_current_grading_period,\n    fct_student_section_grade.grade_type                        AS grade_type,\n    fct_student_section_grade.numeric_grade_earned              AS numeric_grade_earned,\n    fct_student_section_grade.letter_grade_earned               AS letter_grade_earned,\n    IF(\n        CURRENT_DATE BETWEEN dim_student_section.student_section_start_date AND dim_student_section.student_section_end_date,\n        \"Yes\",\n        \"No\"\n    )                                                           AS is_currently_enrolled_in_section,\n    dim_local_education_agency.local_education_agency_name      AS local_education_agency_name,\n    dim_school.school_name                                      AS school_name,\n    dim_student.student_last_surname                            AS student_last_surname,\n    dim_student.student_first_name                              AS student_first_name,\n    dim_student.is_actively_enrolled                            AS is_actively_enrolled,\n    dim_student.grade_level                                     AS grade_level,\n    dim_student.grade_level_id                                  AS grade_level_id,\n    dim_student.gender                                          AS gender,\n    dim_student.limited_english_proficiency                     AS limited_english_proficiency,\n    dim_student.is_english_language_learner                     AS is_english_language_learner,\n    dim_student.in_special_education_program                    AS in_special_education_program,\n    dim_student.is_hispanic                                     AS is_hispanic,\n    dim_student.race_and_ethnicity_roll_up                      AS race_and_ethnicity_roll_up\nFROM {{ ref('fct_student_section_grade') }} fct_student_section_grade\nLEFT JOIN {{ ref('dim_student_section') }} dim_student_section\n    ON fct_student_section_grade.student_section_key = dim_student_section.student_section_key\nLEFT JOIN {{ ref('dim_section') }} dim_section\n    ON dim_student_section.section_key = dim_section.section_key\nLEFT JOIN {{ ref('dim_session') }} dim_session\n    ON dim_student_section.session_key = dim_session.session_key\nLEFT JOIN {{ ref('dim_grading_period') }} dim_grading_period\n    ON fct_student_section_grade.grading_period_key = dim_grading_period.grading_period_key\nLEFT JOIN {{ ref('dim_student') }} dim_student\n    ON fct_student_section_grade.student_key = dim_student.student_key\nLEFT JOIN {{ ref('dim_school') }} dim_school\n    ON fct_student_section_grade.school_key = dim_school.school_key\nLEFT JOIN {{ ref('dim_local_education_agency') }} dim_local_education_agency\n    ON dim_school.local_education_agency_key = dim_local_education_agency.local_education_agency_key", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.project.fct_student_section_grade", "model.project.dim_student_section", "model.project.dim_section", "model.project.dim_session", "model.project.dim_grading_period", "model.project.dim_student", "model.project.dim_school", "model.project.dim_local_education_agency"]}, "config": {"enabled": true, "alias": null, "schema": "grades", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_grades", "fqn": ["project", "marts", "grades", "rpt_student_section_grade"], "unique_id": "model.project.rpt_student_section_grade", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "marts/grades/rpt_student_section_grade.sql", "original_file_path": "models/marts/grades/rpt_student_section_grade.sql", "name": "rpt_student_section_grade", "alias": "rpt_student_section_grade", "checksum": {"name": "sha256", "checksum": "67425633384a54261e9b9b3988909b15946df7564c422fb96331bb8c6adf1da0"}, "tags": ["amt"], "refs": [["fct_student_section_grade"], ["dim_student_section"], ["dim_section"], ["dim_session"], ["dim_grading_period"], ["dim_student"], ["dim_school"], ["dim_local_education_agency"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/grades/rpt_student_section_grade.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "tags": "amt", "schema": "grades"}, "created_at": 1643419470.0807345, "compiled_sql": "SELECT DISTINCT\n    dim_student.student_unique_id                               AS student_unique_id,\n    dim_student.student_display_name                            AS student_display_name,\n    fct_student_section_grade.school_year                       AS school_year,\n    dim_student_section.local_course_code                       AS local_course_code,\n    dim_student_section.course_title                            AS course_title,\n    dim_section.section_identifier                              AS section_identifier,\n    dim_student_section.academic_subject                        AS academic_subject,\n    dim_session.session_name                       AS session_name,\n    dim_session.term_name                          AS term_name,\n    dim_section.course_gpa_applicability                        AS course_gpa_applicability,\n    dim_section.available_credits                               AS available_credits,\n    dim_grading_period.grading_period_description               AS grading_period_description,\n    IF(\n        CURRENT_DATE BETWEEN dim_grading_period.grading_period_begin_date AND dim_grading_period.grading_period_end_date,\n        TRUE,\n        FALSE\n    )                                                           AS is_current_grading_period,\n    fct_student_section_grade.grade_type                        AS grade_type,\n    fct_student_section_grade.numeric_grade_earned              AS numeric_grade_earned,\n    fct_student_section_grade.letter_grade_earned               AS letter_grade_earned,\n    IF(\n        CURRENT_DATE BETWEEN dim_student_section.student_section_start_date AND dim_student_section.student_section_end_date,\n        \"Yes\",\n        \"No\"\n    )                                                           AS is_currently_enrolled_in_section,\n    dim_local_education_agency.local_education_agency_name      AS local_education_agency_name,\n    dim_school.school_name                                      AS school_name,\n    dim_student.student_last_surname                            AS student_last_surname,\n    dim_student.student_first_name                              AS student_first_name,\n    dim_student.is_actively_enrolled                            AS is_actively_enrolled,\n    dim_student.grade_level                                     AS grade_level,\n    dim_student.grade_level_id                                  AS grade_level_id,\n    dim_student.gender                                          AS gender,\n    dim_student.limited_english_proficiency                     AS limited_english_proficiency,\n    dim_student.is_english_language_learner                     AS is_english_language_learner,\n    dim_student.in_special_education_program                    AS in_special_education_program,\n    dim_student.is_hispanic                                     AS is_hispanic,\n    dim_student.race_and_ethnicity_roll_up                      AS race_and_ethnicity_roll_up\nFROM `gcp-proj-id`.`dev_grades`.`fct_student_section_grade` fct_student_section_grade\nLEFT JOIN `gcp-proj-id`.`dev_core`.`dim_student_section` dim_student_section\n    ON fct_student_section_grade.student_section_key = dim_student_section.student_section_key\nLEFT JOIN `gcp-proj-id`.`dev_core`.`dim_section` dim_section\n    ON dim_student_section.section_key = dim_section.section_key\nLEFT JOIN `gcp-proj-id`.`dev_core`.`dim_session` dim_session\n    ON dim_student_section.session_key = dim_session.session_key\nLEFT JOIN `gcp-proj-id`.`dev_core`.`dim_grading_period` dim_grading_period\n    ON fct_student_section_grade.grading_period_key = dim_grading_period.grading_period_key\nLEFT JOIN `gcp-proj-id`.`dev_core`.`dim_student` dim_student\n    ON fct_student_section_grade.student_key = dim_student.student_key\nLEFT JOIN `gcp-proj-id`.`dev_core`.`dim_school` dim_school\n    ON fct_student_section_grade.school_key = dim_school.school_key\nLEFT JOIN `gcp-proj-id`.`dev_core`.`dim_local_education_agency` dim_local_education_agency\n    ON dim_school.local_education_agency_key = dim_local_education_agency.local_education_agency_key", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_grades`.`rpt_student_section_grade`"}, "model.project.fct_student_section_grade": {"raw_sql": "{{\r\n  config(\r\n    labels = {'analytics_middle_tier': 'yes'}\r\n  )\r\n}}\r\n\r\n\r\nSELECT\r\n    {{ dbt_utils.surrogate_key([\r\n        'grades.student_section_association_reference.school_id',\r\n        'grades.grading_period_reference.school_year'\r\n    ]) }}                                                                   AS school_key,\r\n    {{ dbt_utils.surrogate_key([\r\n        'grades.student_section_association_reference.student_unique_id',\r\n        'grades.grading_period_reference.school_year'\r\n    ]) }}                                                                   AS student_key,\r\n    {{ dbt_utils.surrogate_key([\r\n        'grades.grading_period_reference.school_id',\r\n        'grades.grading_period_reference.school_year',\r\n        'grades.grading_period_reference.grading_period_descriptor',\r\n        'grades.grading_period_reference.period_sequence'\r\n    ]) }}                                                                   AS grading_period_key,\r\n    {{ dbt_utils.surrogate_key([\r\n        'student_section_association_reference.school_id',\r\n        'grading_period_reference.school_year',\r\n        'student_section_association_reference.session_name',\r\n        'student_section_association_reference.local_course_code',\r\n        'student_section_association_reference.section_identifier',\r\n        'student_section_association_reference.student_unique_id',\r\n        'student_section_association_reference.begin_date'\r\n    ]) }}                                                                   AS student_section_key,\r\n    {{ dbt_utils.surrogate_key([\r\n        'student_section_association_reference.school_id',\r\n        'student_section_association_reference.local_course_code',\r\n        'student_section_association_reference.school_year',\r\n        'student_section_association_reference.section_identifier',\r\n        'student_section_association_reference.session_name'\r\n    ]) }}                                                                   AS section_key,\r\n    grading_period_reference.school_year                                    AS school_year,\r\n    numeric_grade_earned                                                    AS numeric_grade_earned,\r\n    letter_grade_earned                                                     AS letter_grade_earned,\r\n    grade_type_descriptor                                                   AS grade_type\r\nFROM {{ ref('stg_edfi_grades') }} grades\r\nLEFT JOIN {{ ref('stg_edfi_descriptors') }} descriptors\r\n    ON grades.school_year = descriptors.school_year\r\n    AND descriptors.code_value = grading_period_reference.grading_period_descriptor", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.project.stg_edfi_grades", "model.project.stg_edfi_descriptors"]}, "config": {"enabled": true, "alias": null, "schema": "grades", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"analytics_middle_tier": "yes"}, "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_grades", "fqn": ["project", "marts", "grades", "fct_student_section_grade"], "unique_id": "model.project.fct_student_section_grade", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "marts/grades/fct_student_section_grade.sql", "original_file_path": "models/marts/grades/fct_student_section_grade.sql", "name": "fct_student_section_grade", "alias": "fct_student_section_grade", "checksum": {"name": "sha256", "checksum": "541ba4c7ba43c47ad936f7d047fb204acd602cd310fa4e5ab599a1ddff9b1507"}, "tags": ["amt"], "refs": [["stg_edfi_grades"], ["stg_edfi_descriptors"]], "sources": [], "description": "# Student section grades fact\n\nThis fact table can be found in Ed-Fi's Early Warning System collection. Here it is included in the grades data mart due to student grades being valuable in other places in addition to early warning systems.\n\nThis table contains a row per student per section per grading period per grade type.\n\n---------------------------\nDifferences from Ed-Fi AMT\n*", "columns": {"student_key": {"name": "student_key", "description": "Unique student identifier", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_key": {"name": "school_key", "description": "Unique school identifier", "meta": {}, "data_type": null, "quote": null, "tags": []}, "grading_period_key": {"name": "grading_period_key", "description": "Concatenation of grading period descriptor code value, school id, and grading period begin date", "meta": {}, "data_type": null, "quote": null, "tags": []}, "student_section_key": {"name": "student_section_key", "description": "Concatenation of student key and section information to allow for an easy join on student section dimension", "meta": {}, "data_type": null, "quote": null, "tags": []}, "section_key": {"name": "section_key", "description": "Concatenation of section information to uniquely identifier a section", "meta": {}, "data_type": null, "quote": null, "tags": []}, "numeric_grade_earned": {"name": "numeric_grade_earned", "description": "Numeric grade reflecting student performance in a class as submitted by the instructor", "meta": {}, "data_type": null, "quote": null, "tags": []}, "letter_grade_earned": {"name": "letter_grade_earned", "description": "Letter grade reflecting student performance in a class as submitted by the instructor", "meta": {}, "data_type": null, "quote": null, "tags": []}, "grade_type": {"name": "grade_type", "description": "The type of grade reported (e.g., Exam, Final, Grading Period)", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/marts/grades/grades.yml", "compiled_path": "target/compiled/project/models/marts/grades/fct_student_section_grade.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "tags": "amt", "schema": "grades", "labels": {"analytics_middle_tier": "yes"}}, "created_at": 1643419470.4070144, "compiled_sql": "\n\n\nSELECT\n    to_hex(md5(cast(coalesce(cast(grades.student_section_association_reference.school_id as \n    string\n), '') || '-' || coalesce(cast(grades.grading_period_reference.school_year as \n    string\n), '') as \n    string\n)))                                                                   AS school_key,\n    to_hex(md5(cast(coalesce(cast(grades.student_section_association_reference.student_unique_id as \n    string\n), '') || '-' || coalesce(cast(grades.grading_period_reference.school_year as \n    string\n), '') as \n    string\n)))                                                                   AS student_key,\n    to_hex(md5(cast(coalesce(cast(grades.grading_period_reference.school_id as \n    string\n), '') || '-' || coalesce(cast(grades.grading_period_reference.school_year as \n    string\n), '') || '-' || coalesce(cast(grades.grading_period_reference.grading_period_descriptor as \n    string\n), '') || '-' || coalesce(cast(grades.grading_period_reference.period_sequence as \n    string\n), '') as \n    string\n)))                                                                   AS grading_period_key,\n    to_hex(md5(cast(coalesce(cast(student_section_association_reference.school_id as \n    string\n), '') || '-' || coalesce(cast(grading_period_reference.school_year as \n    string\n), '') || '-' || coalesce(cast(student_section_association_reference.session_name as \n    string\n), '') || '-' || coalesce(cast(student_section_association_reference.local_course_code as \n    string\n), '') || '-' || coalesce(cast(student_section_association_reference.section_identifier as \n    string\n), '') || '-' || coalesce(cast(student_section_association_reference.student_unique_id as \n    string\n), '') || '-' || coalesce(cast(student_section_association_reference.begin_date as \n    string\n), '') as \n    string\n)))                                                                   AS student_section_key,\n    to_hex(md5(cast(coalesce(cast(student_section_association_reference.school_id as \n    string\n), '') || '-' || coalesce(cast(student_section_association_reference.local_course_code as \n    string\n), '') || '-' || coalesce(cast(student_section_association_reference.school_year as \n    string\n), '') || '-' || coalesce(cast(student_section_association_reference.section_identifier as \n    string\n), '') || '-' || coalesce(cast(student_section_association_reference.session_name as \n    string\n), '') as \n    string\n)))                                                                   AS section_key,\n    grading_period_reference.school_year                                    AS school_year,\n    numeric_grade_earned                                                    AS numeric_grade_earned,\n    letter_grade_earned                                                     AS letter_grade_earned,\n    grade_type_descriptor                                                   AS grade_type\nFROM `gcp-proj-id`.`dev_staging`.`stg_edfi_grades` grades\nLEFT JOIN `gcp-proj-id`.`dev_staging`.`stg_edfi_descriptors` descriptors\n    ON grades.school_year = descriptors.school_year\n    AND descriptors.code_value = grading_period_reference.grading_period_descriptor", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_grades`.`fct_student_section_grade`"}, "model.project.rpt_student_attendance": {"raw_sql": "SELECT\r\n    fct_student_attendance.school_year                                     AS school_year,\r\n    dim_student.student_unique_id                                          AS student_unique_id,\r\n    dim_student.student_display_name                                       AS student_display_name,\r\n    dim_school.school_key                                                  AS school_key,\r\n    dim_school.school_id                                                   AS school_id,\r\n    dim_date.date                                                          AS date,\r\n    dim_date.month                                                         AS month,\r\n    dim_date.month_sort_order                                              AS month_sort_order,\r\n    fct_student_attendance.school_attendance_event_category_descriptor     AS school_attendance_event_category_descriptor,\r\n    fct_student_attendance.event_duration                                  AS event_duration,\r\n    fct_student_attendance.reported_as_present_at_school                   AS reported_as_present_at_school,\r\n    fct_student_attendance.reported_as_absent_from_school                  AS reported_as_absent_from_school,\r\n    fct_student_attendance.reported_as_present_at_home_room                AS reported_as_present_at_home_room,\r\n    fct_student_attendance.reported_as_absent_from_home_room               AS reported_as_absent_from_home_room,\r\n    fct_student_attendance.reported_as_is_present_in_all_sections          AS reported_as_is_present_in_all_sections,\r\n    fct_student_attendance.reported_as_absent_from_any_section             AS reported_as_absent_from_any_section,\r\n    dim_local_education_agency.local_education_agency_name                 AS local_education_agency_name,\r\n    dim_school.school_name                                                 AS school_name,\r\n    dim_student.student_last_surname                                       AS student_last_surname,\r\n    dim_student.student_first_name                                         AS student_first_name,\r\n    dim_student.is_actively_enrolled                                       AS is_actively_enrolled,\r\n    dim_student.grade_level                                                AS grade_level,\r\n    dim_student.gender                                                     AS gender,\r\n    dim_student.limited_english_proficiency                                AS limited_english_proficiency,\r\n    dim_student.is_english_language_learner                                AS is_english_language_learner,\r\n    dim_student.in_special_education_program                               AS in_special_education_program,\r\n    dim_student.is_hispanic                                                AS is_hispanic,\r\n    dim_student.race_and_ethnicity_roll_up                                 AS race_and_ethnicity_roll_up\r\nFROM {{ ref('fct_student_attendance') }} fct_student_attendance\r\nLEFT JOIN {{ ref('dim_student') }} dim_student\r\n    ON fct_student_attendance.student_key = dim_student.student_key\r\nLEFT JOIN {{ ref('dim_date') }} dim_date\r\n    ON fct_student_attendance.date = dim_date.date\r\nLEFT JOIN {{ ref('dim_school') }} dim_school\r\n    ON fct_student_attendance.school_key = dim_school.school_key\r\nLEFT JOIN {{ ref('dim_local_education_agency') }} dim_local_education_agency\r\n    ON dim_school.local_education_agency_key = dim_local_education_agency.local_education_agency_key", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.project.fct_student_attendance", "model.project.dim_student", "model.project.dim_date", "model.project.dim_school", "model.project.dim_local_education_agency"]}, "config": {"enabled": true, "alias": null, "schema": "attendance", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_attendance", "fqn": ["project", "marts", "attendance", "rpt_student_attendance"], "unique_id": "model.project.rpt_student_attendance", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "marts/attendance/rpt_student_attendance.sql", "original_file_path": "models/marts/attendance/rpt_student_attendance.sql", "name": "rpt_student_attendance", "alias": "rpt_student_attendance", "checksum": {"name": "sha256", "checksum": "994bd8ce928424e038a2e7a32506fec3656d06abab60209ae10fec1d1eb49c27"}, "tags": ["amt"], "refs": [["fct_student_attendance"], ["dim_student"], ["dim_date"], ["dim_school"], ["dim_local_education_agency"]], "sources": [], "description": "Staging version of the attendance fact table that joins on the date dim and student dim to add contextual information.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/marts/attendance/attendance.yml", "compiled_path": "target/compiled/project/models/marts/attendance/rpt_student_attendance.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "tags": "amt", "schema": "attendance"}, "created_at": 1643419470.4381883, "compiled_sql": "SELECT\n    fct_student_attendance.school_year                                     AS school_year,\n    dim_student.student_unique_id                                          AS student_unique_id,\n    dim_student.student_display_name                                       AS student_display_name,\n    dim_school.school_key                                                  AS school_key,\n    dim_school.school_id                                                   AS school_id,\n    dim_date.date                                                          AS date,\n    dim_date.month                                                         AS month,\n    dim_date.month_sort_order                                              AS month_sort_order,\n    fct_student_attendance.school_attendance_event_category_descriptor     AS school_attendance_event_category_descriptor,\n    fct_student_attendance.event_duration                                  AS event_duration,\n    fct_student_attendance.reported_as_present_at_school                   AS reported_as_present_at_school,\n    fct_student_attendance.reported_as_absent_from_school                  AS reported_as_absent_from_school,\n    fct_student_attendance.reported_as_present_at_home_room                AS reported_as_present_at_home_room,\n    fct_student_attendance.reported_as_absent_from_home_room               AS reported_as_absent_from_home_room,\n    fct_student_attendance.reported_as_is_present_in_all_sections          AS reported_as_is_present_in_all_sections,\n    fct_student_attendance.reported_as_absent_from_any_section             AS reported_as_absent_from_any_section,\n    dim_local_education_agency.local_education_agency_name                 AS local_education_agency_name,\n    dim_school.school_name                                                 AS school_name,\n    dim_student.student_last_surname                                       AS student_last_surname,\n    dim_student.student_first_name                                         AS student_first_name,\n    dim_student.is_actively_enrolled                                       AS is_actively_enrolled,\n    dim_student.grade_level                                                AS grade_level,\n    dim_student.gender                                                     AS gender,\n    dim_student.limited_english_proficiency                                AS limited_english_proficiency,\n    dim_student.is_english_language_learner                                AS is_english_language_learner,\n    dim_student.in_special_education_program                               AS in_special_education_program,\n    dim_student.is_hispanic                                                AS is_hispanic,\n    dim_student.race_and_ethnicity_roll_up                                 AS race_and_ethnicity_roll_up\nFROM `gcp-proj-id`.`dev_attendance`.`fct_student_attendance` fct_student_attendance\nLEFT JOIN `gcp-proj-id`.`dev_core`.`dim_student` dim_student\n    ON fct_student_attendance.student_key = dim_student.student_key\nLEFT JOIN `gcp-proj-id`.`dev_core`.`dim_date` dim_date\n    ON fct_student_attendance.date = dim_date.date\nLEFT JOIN `gcp-proj-id`.`dev_core`.`dim_school` dim_school\n    ON fct_student_attendance.school_key = dim_school.school_key\nLEFT JOIN `gcp-proj-id`.`dev_core`.`dim_local_education_agency` dim_local_education_agency\n    ON dim_school.local_education_agency_key = dim_local_education_agency.local_education_agency_key", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_attendance`.`rpt_student_attendance`"}, "model.project.fct_student_attendance": {"raw_sql": "{{\r\n  config(\r\n    labels = {'analytics_middle_tier': 'yes'}\r\n  )\r\n}}\r\n\r\n\r\nSELECT\r\n    {{ dbt_utils.surrogate_key([\r\n        'ssa.student_reference.student_unique_id',\r\n        'ssa.school_year_type_reference.school_year'\r\n    ]) }}                                                                                               AS student_key,\r\n    {{ dbt_utils.surrogate_key([\r\n        'ssa.school_reference.school_id',\r\n        'ssa.school_year_type_reference.school_year'\r\n    ]) }}                                                                                               AS school_key,\r\n    ssa.school_year_type_reference.school_year                                                          AS school_year,\r\n    calendar_dates.date                                                                                 AS date,\r\n    IFNULL(MIN(school_attendance.attendance_event_category_descriptor), 'In Attendance')                AS school_attendance_event_category_descriptor,\r\n    IFNULL(school_attendance.event_duration, 0)                                                         AS event_duration,\r\n    MAX(IF(school_attendance.attendance_event_category_descriptor = 'In Attendance', 1, 0))             AS reported_as_present_at_school,\r\n    MAX(IF(\r\n        school_attendance.attendance_event_category_descriptor IN ('Excused Absence', 'Unexcused Absence'), 1, 0\r\n    ))                                                                                                  AS reported_as_absent_from_school,\r\n    MAX(IF(\r\n        school_attendance.attendance_event_category_descriptor = 'In Attendance' \r\n            AND student_section_associations.homeroom_indicator IS TRUE,\r\n        1, 0\r\n    ))                                                                                                  AS reported_as_present_at_home_room,\r\n    MAX(IF(\r\n        school_attendance.attendance_event_category_descriptor IN ('Excused Absence', 'Unexcused Absence') \r\n            AND student_section_associations.homeroom_indicator IS TRUE,\r\n        1, 0\r\n    ))                                                                                                  AS reported_as_absent_from_home_room,\r\n    NULL                                                                                                AS reported_as_is_present_in_all_sections,\r\n    NULL                                                                                                AS reported_as_absent_from_any_section\r\nFROM {{ ref('stg_edfi_student_school_associations') }} ssa\r\nLEFT JOIN {{ ref('stg_edfi_students') }} students\r\n    ON ssa.school_year = students.school_year\r\n    AND ssa.student_reference.student_unique_id = students.student_unique_id\r\nLEFT JOIN {{ ref('stg_edfi_calendar_dates') }} calendar_dates\r\n    ON ssa.school_year = calendar_dates.school_year\r\n    AND ssa.school_reference.school_id = calendar_dates.calendar_reference.school_id\r\n    AND ssa.entry_date <= calendar_dates.date\r\n    AND (\r\n        ssa.exit_withdraw_date IS NULL\r\n        OR ssa.exit_withdraw_date >= calendar_dates.date\r\n    )\r\nCROSS JOIN UNNEST(calendar_dates.calendar_events) AS calendar_events\r\n-- school attendance\r\nLEFT JOIN {{ ref('stg_edfi_student_school_attendance_events') }} school_attendance\r\n    ON ssa.school_year = school_attendance.school_year\r\n    AND school_attendance.student_reference.student_unique_id = ssa.student_reference.student_unique_id\r\n    AND school_attendance.school_reference.school_id = ssa.school_reference.school_id\r\n    AND (\r\n\t\tssa.school_year_type_reference.school_year IS NULL\r\n        OR \r\n\t\tschool_attendance.session_reference.school_year = ssa.school_year_type_reference.school_year\r\n\t)\r\n    AND school_attendance.event_date = calendar_dates.date\r\n-- section attendance\r\nLEFT JOIN{{ ref('stg_edfi_student_section_attendance_events') }} section_attendance\r\n    ON ssa.school_year = section_attendance.school_year\r\n    AND section_attendance.student_reference.student_unique_id = ssa.student_reference.student_unique_id\r\n    AND section_attendance.section_reference.school_id = ssa.school_reference.school_id\r\n    AND section_attendance.event_date = calendar_dates.date\r\n    AND (\r\n\t\tssa.school_year_type_reference.school_year IS NULL\r\n        OR \r\n\t\tsection_attendance.section_reference.school_year = ssa.school_year_type_reference.school_year\r\n\t)\r\nLEFT JOIN {{ ref('stg_edfi_student_section_associations') }} student_section_associations\r\n    ON section_attendance.school_year = student_section_associations.school_year\r\n    AND student_section_associations.student_reference.student_unique_id = section_attendance.student_reference.student_unique_id\r\n    AND student_section_associations.section_reference.local_course_code = section_attendance.section_reference.local_course_code\r\n    AND student_section_associations.section_reference.school_id = section_attendance.section_reference.school_id\r\n    AND student_section_associations.section_reference.school_year = section_attendance.section_reference.school_year\r\n    AND student_section_associations.section_reference.section_identifier = section_attendance.section_reference.section_identifier\r\n    AND student_section_associations.section_reference.session_name = section_attendance.section_reference.session_name\r\nWHERE\r\n    calendar_dates.date < CURRENT_DATE\r\n    AND calendar_events.calendar_event_descriptor = 'Instructional day'\r\nGROUP BY\r\n    ssa.student_reference.student_unique_id,\r\n    ssa.school_reference.school_id,\r\n    ssa.school_year_type_reference.school_year,\r\n    calendar_dates.date,\r\n    school_attendance.event_duration", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.project.stg_edfi_student_school_associations", "model.project.stg_edfi_students", "model.project.stg_edfi_calendar_dates", "model.project.stg_edfi_student_school_attendance_events", "model.project.stg_edfi_student_section_attendance_events", "model.project.stg_edfi_student_section_associations"]}, "config": {"enabled": true, "alias": null, "schema": "attendance", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"analytics_middle_tier": "yes"}, "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_attendance", "fqn": ["project", "marts", "attendance", "fct_student_attendance"], "unique_id": "model.project.fct_student_attendance", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "marts/attendance/fct_student_attendance.sql", "original_file_path": "models/marts/attendance/fct_student_attendance.sql", "name": "fct_student_attendance", "alias": "fct_student_attendance", "checksum": {"name": "sha256", "checksum": "076efb5610d5fdab516667e05472f2a930026a689b2c06cea3077856370a7d6e"}, "tags": ["amt"], "refs": [["stg_edfi_student_school_associations"], ["stg_edfi_students"], ["stg_edfi_calendar_dates"], ["stg_edfi_student_school_attendance_events"], ["stg_edfi_student_section_attendance_events"], ["stg_edfi_student_section_associations"]], "sources": [], "description": "# Student attendance fact\n\nGrain: one row per student per instructional day they hold an enrollment\n\nUsed for looking at a student's attendance per day. This fact table provides a row for each instructional day the student holds an enrollment up to the previous date.\n\n---------------------------\nDifferences from Ed-Fi AMT\n* Adds `event_duration` columns\n* Adds `school_attendance_event_category_descriptor` column", "columns": {"student_key": {"name": "student_key", "description": "Foreign key to `dim_student`", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_key": {"name": "school_key", "description": "Foreign key to `dim_school`", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_year": {"name": "school_year", "description": "School year", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "Attendance date", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_attendance_event_category_descriptor": {"name": "school_attendance_event_category_descriptor", "description": "Descriptor for student school attendance event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_duration": {"name": "event_duration", "description": "Absence event duration", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reported_as_present_at_school": {"name": "reported_as_present_at_school", "description": "1 if the student was present for the school day", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reported_as_absent_from_school": {"name": "reported_as_absent_from_school", "description": "1 if the student was absent for the school day", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reported_as_present_at_home_room": {"name": "reported_as_present_at_home_room", "description": "1 if the student was present during their home room class", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reported_as_absent_from_home_room": {"name": "reported_as_absent_from_home_room", "description": "1 if the student was absent during their home room class", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reported_as_is_present_in_all_sections": {"name": "reported_as_is_present_in_all_sections", "description": "SQL logic not complete", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reported_as_absent_from_any_section": {"name": "reported_as_absent_from_any_section", "description": "SQL logic not complete", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/marts/attendance/attendance.yml", "compiled_path": "target/compiled/project/models/marts/attendance/fct_student_attendance.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "tags": "amt", "schema": "attendance", "labels": {"analytics_middle_tier": "yes"}}, "created_at": 1643419470.4378312, "compiled_sql": "\n\n\nSELECT\n    to_hex(md5(cast(coalesce(cast(ssa.student_reference.student_unique_id as \n    string\n), '') || '-' || coalesce(cast(ssa.school_year_type_reference.school_year as \n    string\n), '') as \n    string\n)))                                                                                               AS student_key,\n    to_hex(md5(cast(coalesce(cast(ssa.school_reference.school_id as \n    string\n), '') || '-' || coalesce(cast(ssa.school_year_type_reference.school_year as \n    string\n), '') as \n    string\n)))                                                                                               AS school_key,\n    ssa.school_year_type_reference.school_year                                                          AS school_year,\n    calendar_dates.date                                                                                 AS date,\n    IFNULL(MIN(school_attendance.attendance_event_category_descriptor), 'In Attendance')                AS school_attendance_event_category_descriptor,\n    IFNULL(school_attendance.event_duration, 0)                                                         AS event_duration,\n    MAX(IF(school_attendance.attendance_event_category_descriptor = 'In Attendance', 1, 0))             AS reported_as_present_at_school,\n    MAX(IF(\n        school_attendance.attendance_event_category_descriptor IN ('Excused Absence', 'Unexcused Absence'), 1, 0\n    ))                                                                                                  AS reported_as_absent_from_school,\n    MAX(IF(\n        school_attendance.attendance_event_category_descriptor = 'In Attendance' \n            AND student_section_associations.homeroom_indicator IS TRUE,\n        1, 0\n    ))                                                                                                  AS reported_as_present_at_home_room,\n    MAX(IF(\n        school_attendance.attendance_event_category_descriptor IN ('Excused Absence', 'Unexcused Absence') \n            AND student_section_associations.homeroom_indicator IS TRUE,\n        1, 0\n    ))                                                                                                  AS reported_as_absent_from_home_room,\n    NULL                                                                                                AS reported_as_is_present_in_all_sections,\n    NULL                                                                                                AS reported_as_absent_from_any_section\nFROM `gcp-proj-id`.`dev_staging`.`stg_edfi_student_school_associations` ssa\nLEFT JOIN `gcp-proj-id`.`dev_staging`.`stg_edfi_students` students\n    ON ssa.school_year = students.school_year\n    AND ssa.student_reference.student_unique_id = students.student_unique_id\nLEFT JOIN `gcp-proj-id`.`dev_staging`.`stg_edfi_calendar_dates` calendar_dates\n    ON ssa.school_year = calendar_dates.school_year\n    AND ssa.school_reference.school_id = calendar_dates.calendar_reference.school_id\n    AND ssa.entry_date <= calendar_dates.date\n    AND (\n        ssa.exit_withdraw_date IS NULL\n        OR ssa.exit_withdraw_date >= calendar_dates.date\n    )\nCROSS JOIN UNNEST(calendar_dates.calendar_events) AS calendar_events\n-- school attendance\nLEFT JOIN `gcp-proj-id`.`dev_staging`.`stg_edfi_student_school_attendance_events` school_attendance\n    ON ssa.school_year = school_attendance.school_year\n    AND school_attendance.student_reference.student_unique_id = ssa.student_reference.student_unique_id\n    AND school_attendance.school_reference.school_id = ssa.school_reference.school_id\n    AND (\n\t\tssa.school_year_type_reference.school_year IS NULL\n        OR \n\t\tschool_attendance.session_reference.school_year = ssa.school_year_type_reference.school_year\n\t)\n    AND school_attendance.event_date = calendar_dates.date\n-- section attendance\nLEFT JOIN`gcp-proj-id`.`dev_staging`.`stg_edfi_student_section_attendance_events` section_attendance\n    ON ssa.school_year = section_attendance.school_year\n    AND section_attendance.student_reference.student_unique_id = ssa.student_reference.student_unique_id\n    AND section_attendance.section_reference.school_id = ssa.school_reference.school_id\n    AND section_attendance.event_date = calendar_dates.date\n    AND (\n\t\tssa.school_year_type_reference.school_year IS NULL\n        OR \n\t\tsection_attendance.section_reference.school_year = ssa.school_year_type_reference.school_year\n\t)\nLEFT JOIN `gcp-proj-id`.`dev_staging`.`stg_edfi_student_section_associations` student_section_associations\n    ON section_attendance.school_year = student_section_associations.school_year\n    AND student_section_associations.student_reference.student_unique_id = section_attendance.student_reference.student_unique_id\n    AND student_section_associations.section_reference.local_course_code = section_attendance.section_reference.local_course_code\n    AND student_section_associations.section_reference.school_id = section_attendance.section_reference.school_id\n    AND student_section_associations.section_reference.school_year = section_attendance.section_reference.school_year\n    AND student_section_associations.section_reference.section_identifier = section_attendance.section_reference.section_identifier\n    AND student_section_associations.section_reference.session_name = section_attendance.section_reference.session_name\nWHERE\n    calendar_dates.date < CURRENT_DATE\n    AND calendar_events.calendar_event_descriptor = 'Instructional day'\nGROUP BY\n    ssa.student_reference.student_unique_id,\n    ssa.school_reference.school_id,\n    ssa.school_year_type_reference.school_year,\n    calendar_dates.date,\n    school_attendance.event_duration", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_attendance`.`fct_student_attendance`"}, "model.project.rpt_student_assessment": {"raw_sql": "WITH assessments AS (\r\n\r\n    SELECT\r\n        fct_student_assessment.school_year,\r\n        fct_student_assessment.student_assessment_identifier,\r\n        ARRAY_AGG(\r\n            STRUCT(\r\n                fct_student_assessment.reporting_method                    AS reporting_method,\r\n                fct_student_assessment.student_result                      AS student_result\r\n            )\r\n        ) AS assessment_student_score\r\n    FROM {{ ref('fct_student_assessment') }} fct_student_assessment\r\n    WHERE fct_student_assessment.objective_assessment_key = \"\"\r\n    GROUP BY 1, 2\r\n\r\n),\r\n\r\nobjective_assessments AS (\r\n\r\n    SELECT\r\n        fct_student_assessment.school_year,\r\n        fct_student_assessment.student_assessment_identifier,\r\n        ARRAY_AGG(\r\n            STRUCT(\r\n                dim_objective_assessment.identification_code              AS identification_code,\r\n                dim_objective_assessment.description                      AS description,\r\n                fct_student_assessment.reporting_method                   AS reporting_method,\r\n                fct_student_assessment.student_result                     AS student_result\r\n            )\r\n        ) AS objective_assessment_student_score\r\n    FROM {{ ref('fct_student_assessment') }} fct_student_assessment\r\n    LEFT JOIN {{ ref('dim_objective_assessment') }} dim_objective_assessment\r\n        ON fct_student_assessment.assessment_key = dim_objective_assessment.assessment_key\r\n        AND fct_student_assessment.objective_assessment_key = dim_objective_assessment.objective_assessment_key\r\n        AND fct_student_assessment.school_year = dim_objective_assessment.school_year\r\n    WHERE fct_student_assessment.objective_assessment_key != \"\"\r\n    GROUP BY 1, 2\r\n\r\n)\r\n\r\nSELECT\r\n    fct_student_assessment.school_year                          AS school_year,\r\n    dim_assessment.title                                        AS title,\r\n    dim_assessment.namespace                                    AS namespace,\r\n    dim_student.student_unique_id                               AS student_unique_id,\r\n    fct_student_assessment.student_assessment_identifier        AS student_assessment_identifier,\r\n    objective_assessments.objective_assessment_student_score    AS objective_assessment_student_score,\r\n    assessments.assessment_student_score                        AS assessment_student_score,\r\n    dim_school.school_name                                      AS school_name,\r\n    dim_student.student_last_surname                            AS student_last_surname,\r\n    dim_student.student_first_name                              AS student_first_name,\r\n    dim_student.student_display_name                            AS student_display_name,\r\n    dim_student.is_actively_enrolled                            AS is_actively_enrolled,\r\n    dim_student.grade_level                                     AS grade_level,\r\n    dim_student.gender                                          AS gender,\r\n    dim_student.limited_english_proficiency                     AS limited_english_proficiency,\r\n    dim_student.is_english_language_learner                     AS is_english_language_learner,\r\n    dim_student.in_special_education_program                    AS in_special_education_program,\r\n    dim_student.is_hispanic                                     AS is_hispanic,\r\n    dim_student.race_and_ethnicity_roll_up                      AS race_and_ethnicity_roll_up\r\nFROM {{ ref('fct_student_assessment') }} fct_student_assessment\r\nLEFT JOIN {{ ref('dim_assessment') }} dim_assessment\r\n    ON fct_student_assessment.assessment_key = dim_assessment.assessment_key\r\nLEFT JOIN assessments\r\n    ON fct_student_assessment.student_assessment_identifier = assessments.student_assessment_identifier\r\nLEFT JOIN objective_assessments\r\n    ON fct_student_assessment.student_assessment_identifier = objective_assessments.student_assessment_identifier\r\nLEFT JOIN {{ ref('dim_student') }} dim_student\r\n    ON fct_student_assessment.student_key = dim_student.student_key\r\nLEFT JOIN {{ ref('dim_school') }} dim_school\r\n    ON fct_student_assessment.school_key = dim_school.school_key\r\nWHERE fct_student_assessment.objective_assessment_key = \"\"", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.project.fct_student_assessment", "model.project.fct_student_assessment", "model.project.dim_objective_assessment", "model.project.fct_student_assessment", "model.project.dim_assessment", "model.project.dim_student", "model.project.dim_school"]}, "config": {"enabled": true, "alias": null, "schema": "assessments", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_assessments", "fqn": ["project", "marts", "assessments", "rpt_student_assessment"], "unique_id": "model.project.rpt_student_assessment", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "marts/assessments/rpt_student_assessment.sql", "original_file_path": "models/marts/assessments/rpt_student_assessment.sql", "name": "rpt_student_assessment", "alias": "rpt_student_assessment", "checksum": {"name": "sha256", "checksum": "eeb6a7d539236ddcf734dd1728afb9929b2cf23117c871d67e33a4702b075577"}, "tags": ["amt"], "refs": [["fct_student_assessment"], ["fct_student_assessment"], ["dim_objective_assessment"], ["fct_student_assessment"], ["dim_assessment"], ["dim_student"], ["dim_school"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/assessments/rpt_student_assessment.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "tags": "amt", "schema": "assessments"}, "created_at": 1643419470.1087134, "compiled_sql": "WITH assessments AS (\n\n    SELECT\n        fct_student_assessment.school_year,\n        fct_student_assessment.student_assessment_identifier,\n        ARRAY_AGG(\n            STRUCT(\n                fct_student_assessment.reporting_method                    AS reporting_method,\n                fct_student_assessment.student_result                      AS student_result\n            )\n        ) AS assessment_student_score\n    FROM `gcp-proj-id`.`dev_assessments`.`fct_student_assessment` fct_student_assessment\n    WHERE fct_student_assessment.objective_assessment_key = \"\"\n    GROUP BY 1, 2\n\n),\n\nobjective_assessments AS (\n\n    SELECT\n        fct_student_assessment.school_year,\n        fct_student_assessment.student_assessment_identifier,\n        ARRAY_AGG(\n            STRUCT(\n                dim_objective_assessment.identification_code              AS identification_code,\n                dim_objective_assessment.description                      AS description,\n                fct_student_assessment.reporting_method                   AS reporting_method,\n                fct_student_assessment.student_result                     AS student_result\n            )\n        ) AS objective_assessment_student_score\n    FROM `gcp-proj-id`.`dev_assessments`.`fct_student_assessment` fct_student_assessment\n    LEFT JOIN `gcp-proj-id`.`dev_assessments`.`dim_objective_assessment` dim_objective_assessment\n        ON fct_student_assessment.assessment_key = dim_objective_assessment.assessment_key\n        AND fct_student_assessment.objective_assessment_key = dim_objective_assessment.objective_assessment_key\n        AND fct_student_assessment.school_year = dim_objective_assessment.school_year\n    WHERE fct_student_assessment.objective_assessment_key != \"\"\n    GROUP BY 1, 2\n\n)\n\nSELECT\n    fct_student_assessment.school_year                          AS school_year,\n    dim_assessment.title                                        AS title,\n    dim_assessment.namespace                                    AS namespace,\n    dim_student.student_unique_id                               AS student_unique_id,\n    fct_student_assessment.student_assessment_identifier        AS student_assessment_identifier,\n    objective_assessments.objective_assessment_student_score    AS objective_assessment_student_score,\n    assessments.assessment_student_score                        AS assessment_student_score,\n    dim_school.school_name                                      AS school_name,\n    dim_student.student_last_surname                            AS student_last_surname,\n    dim_student.student_first_name                              AS student_first_name,\n    dim_student.student_display_name                            AS student_display_name,\n    dim_student.is_actively_enrolled                            AS is_actively_enrolled,\n    dim_student.grade_level                                     AS grade_level,\n    dim_student.gender                                          AS gender,\n    dim_student.limited_english_proficiency                     AS limited_english_proficiency,\n    dim_student.is_english_language_learner                     AS is_english_language_learner,\n    dim_student.in_special_education_program                    AS in_special_education_program,\n    dim_student.is_hispanic                                     AS is_hispanic,\n    dim_student.race_and_ethnicity_roll_up                      AS race_and_ethnicity_roll_up\nFROM `gcp-proj-id`.`dev_assessments`.`fct_student_assessment` fct_student_assessment\nLEFT JOIN `gcp-proj-id`.`dev_assessments`.`dim_assessment` dim_assessment\n    ON fct_student_assessment.assessment_key = dim_assessment.assessment_key\nLEFT JOIN assessments\n    ON fct_student_assessment.student_assessment_identifier = assessments.student_assessment_identifier\nLEFT JOIN objective_assessments\n    ON fct_student_assessment.student_assessment_identifier = objective_assessments.student_assessment_identifier\nLEFT JOIN `gcp-proj-id`.`dev_core`.`dim_student` dim_student\n    ON fct_student_assessment.student_key = dim_student.student_key\nLEFT JOIN `gcp-proj-id`.`dev_core`.`dim_school` dim_school\n    ON fct_student_assessment.school_key = dim_school.school_key\nWHERE fct_student_assessment.objective_assessment_key = \"\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_assessments`.`rpt_student_assessment`"}, "model.project.fct_student_assessment": {"raw_sql": "-- student assessment score results\r\nSELECT DISTINCT\r\n    {{ dbt_utils.surrogate_key([\r\n        'student_assessments.assessment_reference.assessment_identifier',\r\n        'student_assessments.assessment_reference.namespace'\r\n    ]) }}                                                                           AS assessment_key,\r\n    \"\"                                                                              AS objective_assessment_key,\r\n    {{ dbt_utils.surrogate_key([\r\n        'student_assessments.student_reference.student_unique_id',\r\n        'student_assessments.school_year'\r\n    ]) }}                                                                           AS student_key,\r\n    {{ dbt_utils.surrogate_key([\r\n        'student_school_associations.school_reference.school_id',\r\n        'student_assessments.school_year'\r\n    ]) }}                                                                           AS school_key,\r\n    student_assessments.school_year                                                 AS school_year,\r\n    student_assessments.student_assessment_identifier                               AS student_assessment_identifier,\r\n    student_assessments.administration_date                                         AS administration_date,\r\n    student_assessments.when_assessed_grade_level_descriptor                        AS assessed_grade_level,\r\n    score_results.assessment_reporting_method_descriptor                            AS reporting_method,\r\n    score_results.result_datatype_type_descriptor                                   AS student_result_data_type,\r\n    score_results.result                                                            AS student_result\r\nFROM {{ ref('stg_edfi_student_assessments') }} student_assessments\r\nLEFT JOIN UNNEST(student_assessments.score_results) AS score_results\r\nLEFT JOIN UNNEST(student_assessments.performance_levels) AS performance_levels\r\nLEFT JOIN {{ ref('stg_edfi_student_school_associations') }} student_school_associations\r\n    ON student_assessments.school_year = student_school_associations.school_year\r\n    AND student_assessments.student_reference.student_unique_id = student_school_associations.student_reference.student_unique_id\r\n    AND student_assessments.administration_date >= student_school_associations.entry_date\r\n    AND (\r\n        student_assessments.administration_date <= student_school_associations.exit_withdraw_date\r\n        OR student_school_associations.exit_withdraw_date IS NULL\r\n    )\r\n\r\n\r\nUNION ALL\r\n\r\n\r\n--student assessment performance levels\r\nSELECT DISTINCT\r\n    {{ dbt_utils.surrogate_key([\r\n        'student_assessments.assessment_reference.assessment_identifier',\r\n        'student_assessments.assessment_reference.namespace'\r\n    ]) }}                                                                           AS assessment_key,\r\n    \"\"                                                                              AS objective_assessment_key,\r\n    {{ dbt_utils.surrogate_key([\r\n        'student_assessments.student_reference.student_unique_id',\r\n        'student_assessments.school_year'\r\n    ]) }}                                                                           AS student_key,\r\n    {{ dbt_utils.surrogate_key([\r\n        'student_school_associations.school_reference.school_id',\r\n        'student_assessments.school_year'\r\n    ]) }}                                                                           AS school_key,\r\n    student_assessments.school_year                                                 AS school_year,\r\n    student_assessments.student_assessment_identifier                               AS student_assessment_identifier,\r\n    student_assessments.administration_date                                         AS administration_date,\r\n    student_assessments.when_assessed_grade_level_descriptor                        AS assessed_grade_level,\r\n    performance_levels.assessment_reporting_method_descriptor                       AS reporting_method,\r\n    'Performance Level'                                                             AS student_result_data_type,\r\n    performance_levels.performance_level_descriptor                                 AS student_result\r\nFROM {{ ref('stg_edfi_student_assessments') }} student_assessments\r\nLEFT JOIN UNNEST(student_assessments.performance_levels) AS performance_levels\r\nLEFT JOIN {{ ref('stg_edfi_student_school_associations') }} student_school_associations\r\n    ON student_assessments.school_year = student_school_associations.school_year\r\n    AND student_assessments.student_reference.student_unique_id = student_school_associations.student_reference.student_unique_id\r\n    AND student_assessments.administration_date >= student_school_associations.entry_date\r\n    AND (\r\n        student_assessments.administration_date <= student_school_associations.exit_withdraw_date\r\n        OR student_school_associations.exit_withdraw_date IS NULL\r\n    )\r\n\r\n\r\nUNION ALL\r\n\r\n\r\n-- student objective assessment score results\r\nSELECT DISTINCT\r\n    {{ dbt_utils.surrogate_key([\r\n        'student_assessments.assessment_reference.assessment_identifier',\r\n        'student_assessments.assessment_reference.namespace'\r\n    ]) }}                                                                                AS assessment_key,\r\n    {{ dbt_utils.surrogate_key([\r\n        'student_assessments.assessment_reference.assessment_identifier',\r\n        'student_assessments.assessment_reference.namespace',\r\n        'student_objective_assessments.objective_assessment_reference.identification_code'\r\n    ]) }}                                                                                AS objective_assessment_key,\r\n    {{ dbt_utils.surrogate_key([\r\n        'student_assessments.student_reference.student_unique_id',\r\n        'student_assessments.school_year'\r\n    ]) }}                                                                                AS student_key,\r\n    {{ dbt_utils.surrogate_key([\r\n        'student_school_associations.school_reference.school_id',\r\n        'student_assessments.school_year'\r\n    ]) }}                                                                                AS school_key,\r\n    student_assessments.school_year                                                      AS school_year,\r\n    student_assessments.student_assessment_identifier                                    AS student_assessment_identifier,\r\n    student_assessments.administration_date                                              AS administration_date,\r\n    student_assessments.when_assessed_grade_level_descriptor                             AS assessed_grade_level,\r\n    student_objective_assessments_score_results.assessment_reporting_method_descriptor   AS reporting_method,\r\n    student_objective_assessments_score_results.result_datatype_type_descriptor          AS student_result_data_type,\r\n    student_objective_assessments_score_results.result                                   AS student_result\r\nFROM {{ ref('stg_edfi_student_assessments') }} student_assessments\r\nLEFT JOIN UNNEST(student_assessments.student_objective_assessments) AS student_objective_assessments\r\nLEFT JOIN UNNEST(student_objective_assessments.score_results) AS student_objective_assessments_score_results\r\nLEFT JOIN {{ ref('stg_edfi_student_school_associations') }} student_school_associations\r\n    ON student_assessments.school_year = student_school_associations.school_year\r\n    AND student_assessments.student_reference.student_unique_id = student_school_associations.student_reference.student_unique_id\r\n    AND student_assessments.administration_date >= student_school_associations.entry_date\r\n    AND (\r\n        student_assessments.administration_date <= student_school_associations.exit_withdraw_date\r\n        OR student_school_associations.exit_withdraw_date IS NULL\r\n    )\r\n\r\n\r\nUNION ALL\r\n\r\n\r\n-- student objective assessment performance levels\r\nSELECT DISTINCT\r\n    {{ dbt_utils.surrogate_key([\r\n        'student_assessments.assessment_reference.assessment_identifier',\r\n        'student_assessments.assessment_reference.namespace'\r\n    ]) }}                                                                                     AS assessment_key,\r\n    {{ dbt_utils.surrogate_key([\r\n        'student_assessments.assessment_reference.assessment_identifier',\r\n        'student_assessments.assessment_reference.namespace',\r\n        'student_objective_assessments.objective_assessment_reference.identification_code'\r\n    ]) }}                                                                                     AS objective_assessment_key,\r\n    {{ dbt_utils.surrogate_key([\r\n        'student_assessments.student_reference.student_unique_id',\r\n        'student_assessments.school_year'\r\n    ]) }}                                                                                     AS student_key,\r\n    {{ dbt_utils.surrogate_key([\r\n        'student_school_associations.school_reference.school_id',\r\n        'student_assessments.school_year'\r\n    ]) }}                                                                                     AS school_key,\r\n    student_assessments.school_year                                                           AS school_year,\r\n    student_assessments.student_assessment_identifier                                         AS student_assessment_identifier,\r\n    student_assessments.administration_date                                                   AS administration_date,\r\n    student_assessments.when_assessed_grade_level_descriptor                                  AS assessed_grade_level,\r\n    student_objective_assessments_performance_levels.assessment_reporting_method_descriptor   AS reporting_method,\r\n    'Performance Level'                                                                       AS student_result_data_type,\r\n    student_objective_assessments_performance_levels.performance_level_descriptor             AS student_result\r\nFROM {{ ref('stg_edfi_student_assessments') }} student_assessments\r\nLEFT JOIN UNNEST(student_assessments.student_objective_assessments) AS student_objective_assessments\r\nLEFT JOIN UNNEST(student_objective_assessments.performance_levels) AS student_objective_assessments_performance_levels\r\nLEFT JOIN {{ ref('stg_edfi_student_school_associations') }} student_school_associations\r\n    ON student_assessments.school_year = student_school_associations.school_year\r\n    AND student_assessments.student_reference.student_unique_id = student_school_associations.student_reference.student_unique_id\r\n    AND student_assessments.administration_date >= student_school_associations.entry_date\r\n    AND (\r\n        student_assessments.administration_date <= student_school_associations.exit_withdraw_date\r\n        OR student_school_associations.exit_withdraw_date IS NULL\r\n    )", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.project.stg_edfi_student_assessments", "model.project.stg_edfi_student_school_associations", "model.project.stg_edfi_student_assessments", "model.project.stg_edfi_student_school_associations", "model.project.stg_edfi_student_assessments", "model.project.stg_edfi_student_school_associations", "model.project.stg_edfi_student_assessments", "model.project.stg_edfi_student_school_associations"]}, "config": {"enabled": true, "alias": null, "schema": "assessments", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_assessments", "fqn": ["project", "marts", "assessments", "fct_student_assessment"], "unique_id": "model.project.fct_student_assessment", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "marts/assessments/fct_student_assessment.sql", "original_file_path": "models/marts/assessments/fct_student_assessment.sql", "name": "fct_student_assessment", "alias": "fct_student_assessment", "checksum": {"name": "sha256", "checksum": "498c59dbe1ab94221cd930e36c3cf938563ee0b322e193326e161f68f5a7e5c2"}, "tags": ["amt"], "refs": [["stg_edfi_student_assessments"], ["stg_edfi_student_school_associations"], ["stg_edfi_student_assessments"], ["stg_edfi_student_school_associations"], ["stg_edfi_student_assessments"], ["stg_edfi_student_school_associations"], ["stg_edfi_student_assessments"], ["stg_edfi_student_school_associations"]], "sources": [], "description": "# Student assessments fact\n\n\n---------------------------\nDifferences from Ed-Fi AMT\n* Removes student assessment fact key\n* Removes `student_assessment_fact_key`\n* Removes `student_objective_assessment_key`\n* Adds `assessment_family`\n* Adds `school_year`\n* Removes `student_school_key`", "columns": {"assessment_key": {"name": "assessment_key", "description": "Foreign key to `dim_assessment`", "meta": {}, "data_type": null, "quote": null, "tags": []}, "objective_assessment_key": {"name": "objective_assessment_key", "description": "Foreign key to `dim_objective_assessment`", "meta": {}, "data_type": null, "quote": null, "tags": []}, "student_key": {"name": "student_key", "description": "Foreign key to `dim_student`", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_key": {"name": "school_key", "description": "Foreign key to `dim_school`", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_year": {"name": "school_year", "description": "School year", "meta": {}, "data_type": null, "quote": null, "tags": []}, "student_assessment_identifier": {"name": "student_assessment_identifier", "description": "Unique identifier for student assessment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "administration_date": {"name": "administration_date", "description": "Date the assessment was administered", "meta": {}, "data_type": null, "quote": null, "tags": []}, "assessed_grade_level": {"name": "assessed_grade_level", "description": "Grade level of student when assessment was administered", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reporting_method": {"name": "reporting_method", "description": "Describes how the results of the assessment are reported.  This will create multiple records if there are multiple reporting methods associated with the assessment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "student_result_data_type": {"name": "student_result_data_type", "description": "Describes what format the results for the assessment are reported.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "student_result": {"name": "student_result", "description": "The documented score for the student for the corresponding assessment or objective assessment.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/marts/assessments/assessments.yml", "compiled_path": "target/compiled/project/models/marts/assessments/fct_student_assessment.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "tags": "amt", "schema": "assessments"}, "created_at": 1643419470.4635303, "compiled_sql": "-- student assessment score results\nSELECT DISTINCT\n    to_hex(md5(cast(coalesce(cast(student_assessments.assessment_reference.assessment_identifier as \n    string\n), '') || '-' || coalesce(cast(student_assessments.assessment_reference.namespace as \n    string\n), '') as \n    string\n)))                                                                           AS assessment_key,\n    \"\"                                                                              AS objective_assessment_key,\n    to_hex(md5(cast(coalesce(cast(student_assessments.student_reference.student_unique_id as \n    string\n), '') || '-' || coalesce(cast(student_assessments.school_year as \n    string\n), '') as \n    string\n)))                                                                           AS student_key,\n    to_hex(md5(cast(coalesce(cast(student_school_associations.school_reference.school_id as \n    string\n), '') || '-' || coalesce(cast(student_assessments.school_year as \n    string\n), '') as \n    string\n)))                                                                           AS school_key,\n    student_assessments.school_year                                                 AS school_year,\n    student_assessments.student_assessment_identifier                               AS student_assessment_identifier,\n    student_assessments.administration_date                                         AS administration_date,\n    student_assessments.when_assessed_grade_level_descriptor                        AS assessed_grade_level,\n    score_results.assessment_reporting_method_descriptor                            AS reporting_method,\n    score_results.result_datatype_type_descriptor                                   AS student_result_data_type,\n    score_results.result                                                            AS student_result\nFROM `gcp-proj-id`.`dev_staging`.`stg_edfi_student_assessments` student_assessments\nLEFT JOIN UNNEST(student_assessments.score_results) AS score_results\nLEFT JOIN UNNEST(student_assessments.performance_levels) AS performance_levels\nLEFT JOIN `gcp-proj-id`.`dev_staging`.`stg_edfi_student_school_associations` student_school_associations\n    ON student_assessments.school_year = student_school_associations.school_year\n    AND student_assessments.student_reference.student_unique_id = student_school_associations.student_reference.student_unique_id\n    AND student_assessments.administration_date >= student_school_associations.entry_date\n    AND (\n        student_assessments.administration_date <= student_school_associations.exit_withdraw_date\n        OR student_school_associations.exit_withdraw_date IS NULL\n    )\n\n\nUNION ALL\n\n\n--student assessment performance levels\nSELECT DISTINCT\n    to_hex(md5(cast(coalesce(cast(student_assessments.assessment_reference.assessment_identifier as \n    string\n), '') || '-' || coalesce(cast(student_assessments.assessment_reference.namespace as \n    string\n), '') as \n    string\n)))                                                                           AS assessment_key,\n    \"\"                                                                              AS objective_assessment_key,\n    to_hex(md5(cast(coalesce(cast(student_assessments.student_reference.student_unique_id as \n    string\n), '') || '-' || coalesce(cast(student_assessments.school_year as \n    string\n), '') as \n    string\n)))                                                                           AS student_key,\n    to_hex(md5(cast(coalesce(cast(student_school_associations.school_reference.school_id as \n    string\n), '') || '-' || coalesce(cast(student_assessments.school_year as \n    string\n), '') as \n    string\n)))                                                                           AS school_key,\n    student_assessments.school_year                                                 AS school_year,\n    student_assessments.student_assessment_identifier                               AS student_assessment_identifier,\n    student_assessments.administration_date                                         AS administration_date,\n    student_assessments.when_assessed_grade_level_descriptor                        AS assessed_grade_level,\n    performance_levels.assessment_reporting_method_descriptor                       AS reporting_method,\n    'Performance Level'                                                             AS student_result_data_type,\n    performance_levels.performance_level_descriptor                                 AS student_result\nFROM `gcp-proj-id`.`dev_staging`.`stg_edfi_student_assessments` student_assessments\nLEFT JOIN UNNEST(student_assessments.performance_levels) AS performance_levels\nLEFT JOIN `gcp-proj-id`.`dev_staging`.`stg_edfi_student_school_associations` student_school_associations\n    ON student_assessments.school_year = student_school_associations.school_year\n    AND student_assessments.student_reference.student_unique_id = student_school_associations.student_reference.student_unique_id\n    AND student_assessments.administration_date >= student_school_associations.entry_date\n    AND (\n        student_assessments.administration_date <= student_school_associations.exit_withdraw_date\n        OR student_school_associations.exit_withdraw_date IS NULL\n    )\n\n\nUNION ALL\n\n\n-- student objective assessment score results\nSELECT DISTINCT\n    to_hex(md5(cast(coalesce(cast(student_assessments.assessment_reference.assessment_identifier as \n    string\n), '') || '-' || coalesce(cast(student_assessments.assessment_reference.namespace as \n    string\n), '') as \n    string\n)))                                                                                AS assessment_key,\n    to_hex(md5(cast(coalesce(cast(student_assessments.assessment_reference.assessment_identifier as \n    string\n), '') || '-' || coalesce(cast(student_assessments.assessment_reference.namespace as \n    string\n), '') || '-' || coalesce(cast(student_objective_assessments.objective_assessment_reference.identification_code as \n    string\n), '') as \n    string\n)))                                                                                AS objective_assessment_key,\n    to_hex(md5(cast(coalesce(cast(student_assessments.student_reference.student_unique_id as \n    string\n), '') || '-' || coalesce(cast(student_assessments.school_year as \n    string\n), '') as \n    string\n)))                                                                                AS student_key,\n    to_hex(md5(cast(coalesce(cast(student_school_associations.school_reference.school_id as \n    string\n), '') || '-' || coalesce(cast(student_assessments.school_year as \n    string\n), '') as \n    string\n)))                                                                                AS school_key,\n    student_assessments.school_year                                                      AS school_year,\n    student_assessments.student_assessment_identifier                                    AS student_assessment_identifier,\n    student_assessments.administration_date                                              AS administration_date,\n    student_assessments.when_assessed_grade_level_descriptor                             AS assessed_grade_level,\n    student_objective_assessments_score_results.assessment_reporting_method_descriptor   AS reporting_method,\n    student_objective_assessments_score_results.result_datatype_type_descriptor          AS student_result_data_type,\n    student_objective_assessments_score_results.result                                   AS student_result\nFROM `gcp-proj-id`.`dev_staging`.`stg_edfi_student_assessments` student_assessments\nLEFT JOIN UNNEST(student_assessments.student_objective_assessments) AS student_objective_assessments\nLEFT JOIN UNNEST(student_objective_assessments.score_results) AS student_objective_assessments_score_results\nLEFT JOIN `gcp-proj-id`.`dev_staging`.`stg_edfi_student_school_associations` student_school_associations\n    ON student_assessments.school_year = student_school_associations.school_year\n    AND student_assessments.student_reference.student_unique_id = student_school_associations.student_reference.student_unique_id\n    AND student_assessments.administration_date >= student_school_associations.entry_date\n    AND (\n        student_assessments.administration_date <= student_school_associations.exit_withdraw_date\n        OR student_school_associations.exit_withdraw_date IS NULL\n    )\n\n\nUNION ALL\n\n\n-- student objective assessment performance levels\nSELECT DISTINCT\n    to_hex(md5(cast(coalesce(cast(student_assessments.assessment_reference.assessment_identifier as \n    string\n), '') || '-' || coalesce(cast(student_assessments.assessment_reference.namespace as \n    string\n), '') as \n    string\n)))                                                                                     AS assessment_key,\n    to_hex(md5(cast(coalesce(cast(student_assessments.assessment_reference.assessment_identifier as \n    string\n), '') || '-' || coalesce(cast(student_assessments.assessment_reference.namespace as \n    string\n), '') || '-' || coalesce(cast(student_objective_assessments.objective_assessment_reference.identification_code as \n    string\n), '') as \n    string\n)))                                                                                     AS objective_assessment_key,\n    to_hex(md5(cast(coalesce(cast(student_assessments.student_reference.student_unique_id as \n    string\n), '') || '-' || coalesce(cast(student_assessments.school_year as \n    string\n), '') as \n    string\n)))                                                                                     AS student_key,\n    to_hex(md5(cast(coalesce(cast(student_school_associations.school_reference.school_id as \n    string\n), '') || '-' || coalesce(cast(student_assessments.school_year as \n    string\n), '') as \n    string\n)))                                                                                     AS school_key,\n    student_assessments.school_year                                                           AS school_year,\n    student_assessments.student_assessment_identifier                                         AS student_assessment_identifier,\n    student_assessments.administration_date                                                   AS administration_date,\n    student_assessments.when_assessed_grade_level_descriptor                                  AS assessed_grade_level,\n    student_objective_assessments_performance_levels.assessment_reporting_method_descriptor   AS reporting_method,\n    'Performance Level'                                                                       AS student_result_data_type,\n    student_objective_assessments_performance_levels.performance_level_descriptor             AS student_result\nFROM `gcp-proj-id`.`dev_staging`.`stg_edfi_student_assessments` student_assessments\nLEFT JOIN UNNEST(student_assessments.student_objective_assessments) AS student_objective_assessments\nLEFT JOIN UNNEST(student_objective_assessments.performance_levels) AS student_objective_assessments_performance_levels\nLEFT JOIN `gcp-proj-id`.`dev_staging`.`stg_edfi_student_school_associations` student_school_associations\n    ON student_assessments.school_year = student_school_associations.school_year\n    AND student_assessments.student_reference.student_unique_id = student_school_associations.student_reference.student_unique_id\n    AND student_assessments.administration_date >= student_school_associations.entry_date\n    AND (\n        student_assessments.administration_date <= student_school_associations.exit_withdraw_date\n        OR student_school_associations.exit_withdraw_date IS NULL\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_assessments`.`fct_student_assessment`"}, "model.project.dim_assessment": {"raw_sql": "SELECT\r\n    {{ dbt_utils.surrogate_key([\r\n        'assessments.assessment_identifier',\r\n        'assessments.namespace'\r\n    ]) }}                                               AS assessment_key,\r\n    {{ dbt_utils.surrogate_key([\r\n        'education_organization_reference.education_organization_id',\r\n        'assessments.school_year'\r\n    ]) }}                                               AS education_organization_key,\r\n    assessments.school_year                             AS school_year,\r\n    assessments.assessment_identifier                   AS assessment_identifier,\r\n    assessments.assessment_family                       AS assessment_family,\r\n    assessments.namespace                               AS namespace,\r\n    assessments.assessment_title                        AS title,\r\n    IFNULL(assessments.assessment_version, 0)           AS version,\r\n    assessments.assessment_category_descriptor\t        AS category,\r\n    assessment_form                                     AS form,\r\n    IF(adaptive_assessment IS TRUE, 'Yes', 'No')        AS adaptive_assessment\r\nFROM {{ ref('stg_edfi_assessments') }} assessments", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.project.stg_edfi_assessments"]}, "config": {"enabled": true, "alias": null, "schema": "assessments", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_assessments", "fqn": ["project", "marts", "assessments", "dim_assessment"], "unique_id": "model.project.dim_assessment", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "marts/assessments/dim_assessment.sql", "original_file_path": "models/marts/assessments/dim_assessment.sql", "name": "dim_assessment", "alias": "dim_assessment", "checksum": {"name": "sha256", "checksum": "e00907ad924c90de4f926d75dbfa761ebf971e5196656bf3fc72283c6f607c0f"}, "tags": ["amt"], "refs": [["stg_edfi_assessments"]], "sources": [], "description": "# Assessments dim\n\n\n---------------------------\nDifferences from Ed-Fi AMT\n* Renames assessment fact table to be a dimension table", "columns": {"assessment_key": {"name": "assessment_key", "description": "Primary key for dimension table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "education_organization_key": {"name": "education_organization_key", "description": "Primary key for dimension table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_year": {"name": "school_year", "description": "School year", "meta": {}, "data_type": null, "quote": null, "tags": []}, "assessment_identifier": {"name": "assessment_identifier", "description": "The unique identifier that describes the assessment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "assessment_family": {"name": "assessment_family", "description": "Assessment family", "meta": {}, "data_type": null, "quote": null, "tags": []}, "namespace": {"name": "namespace", "description": "Typically defines the vendor who sent the assessment data", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title": {"name": "title", "description": "The title description of the assessment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "version": {"name": "version", "description": "Describes what version the assessment or objective assessment focuses on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "category": {"name": "category", "description": "Describes what category the assessment or objective assessment focuses on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "form": {"name": "form", "description": "This is the minimum score that can be achieved for this assessment or objective assessment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "adaptive_assessment": {"name": "adaptive_assessment", "description": "This is the maximum score that can be achieved for this assessment or objective assessment.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/marts/assessments/assessments.yml", "compiled_path": "target/compiled/project/models/marts/assessments/dim_assessment.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "tags": "amt", "schema": "assessments"}, "created_at": 1643419470.45739, "compiled_sql": "SELECT\n    to_hex(md5(cast(coalesce(cast(assessments.assessment_identifier as \n    string\n), '') || '-' || coalesce(cast(assessments.namespace as \n    string\n), '') as \n    string\n)))                                               AS assessment_key,\n    to_hex(md5(cast(coalesce(cast(education_organization_reference.education_organization_id as \n    string\n), '') || '-' || coalesce(cast(assessments.school_year as \n    string\n), '') as \n    string\n)))                                               AS education_organization_key,\n    assessments.school_year                             AS school_year,\n    assessments.assessment_identifier                   AS assessment_identifier,\n    assessments.assessment_family                       AS assessment_family,\n    assessments.namespace                               AS namespace,\n    assessments.assessment_title                        AS title,\n    IFNULL(assessments.assessment_version, 0)           AS version,\n    assessments.assessment_category_descriptor\t        AS category,\n    assessment_form                                     AS form,\n    IF(adaptive_assessment IS TRUE, 'Yes', 'No')        AS adaptive_assessment\nFROM `gcp-proj-id`.`dev_staging`.`stg_edfi_assessments` assessments", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_assessments`.`dim_assessment`"}, "model.project.dim_objective_assessment": {"raw_sql": "SELECT\r\n    {{ dbt_utils.surrogate_key([\r\n        'assessments.assessment_identifier',\r\n        'assessments.namespace',\r\n        'objective_assessments.identification_code'\r\n    ]) }}                                               AS objective_assessment_key,\r\n    {{ dbt_utils.surrogate_key([\r\n        'assessments.assessment_identifier',\r\n        'assessments.namespace',\r\n    ]) }}                                               AS assessment_key,\r\n    objective_assessments.school_year                   AS school_year,\r\n    objective_assessments.identification_code           AS identification_code,\r\n    objective_assessments.academic_subject_descriptor   AS academic_subject,\r\n    objective_assessments.description                   AS description\r\nFROM {{ ref('stg_edfi_objective_assessments') }} objective_assessments\r\nLEFT JOIN {{ ref('stg_edfi_assessments') }} assessments\r\n    ON objective_assessments.assessment_reference.assessment_identifier = assessments.assessment_identifier\r\n    AND objective_assessments.assessment_reference.namespace = assessments.namespace\r\n    AND objective_assessments.school_year = assessments.school_year", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.project.stg_edfi_objective_assessments", "model.project.stg_edfi_assessments"]}, "config": {"enabled": true, "alias": null, "schema": "assessments", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_assessments", "fqn": ["project", "marts", "assessments", "dim_objective_assessment"], "unique_id": "model.project.dim_objective_assessment", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "marts/assessments/dim_objective_assessment.sql", "original_file_path": "models/marts/assessments/dim_objective_assessment.sql", "name": "dim_objective_assessment", "alias": "dim_objective_assessment", "checksum": {"name": "sha256", "checksum": "373ff1d2538657964ce5ace558dfb6407bf16707e3733cab15e59d5f8d651bd0"}, "tags": ["amt"], "refs": [["stg_edfi_objective_assessments"], ["stg_edfi_assessments"]], "sources": [], "description": "", "columns": {"objective_assessment_key": {"name": "objective_assessment_key", "description": "Primary key for dimension table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "assessment_key": {"name": "assessment_key", "description": "Foreign key to `dim_assessment`", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_year": {"name": "school_year", "description": "School year", "meta": {}, "data_type": null, "quote": null, "tags": []}, "identification_code": {"name": "identification_code", "description": "Unique identifier for objective assessment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "academic_subject": {"name": "academic_subject", "description": "Academic subject for objective assessment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Description for objective assessment", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/marts/assessments/assessments.yml", "compiled_path": "target/compiled/project/models/marts/assessments/dim_objective_assessment.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "tags": "amt", "schema": "assessments"}, "created_at": 1643419470.4598398, "compiled_sql": "SELECT\n    to_hex(md5(cast(coalesce(cast(assessments.assessment_identifier as \n    string\n), '') || '-' || coalesce(cast(assessments.namespace as \n    string\n), '') || '-' || coalesce(cast(objective_assessments.identification_code as \n    string\n), '') as \n    string\n)))                                               AS objective_assessment_key,\n    to_hex(md5(cast(coalesce(cast(assessments.assessment_identifier as \n    string\n), '') || '-' || coalesce(cast(assessments.namespace as \n    string\n), '') as \n    string\n)))                                               AS assessment_key,\n    objective_assessments.school_year                   AS school_year,\n    objective_assessments.identification_code           AS identification_code,\n    objective_assessments.academic_subject_descriptor   AS academic_subject,\n    objective_assessments.description                   AS description\nFROM `gcp-proj-id`.`dev_staging`.`stg_edfi_objective_assessments` objective_assessments\nLEFT JOIN `gcp-proj-id`.`dev_staging`.`stg_edfi_assessments` assessments\n    ON objective_assessments.assessment_reference.assessment_identifier = assessments.assessment_identifier\n    AND objective_assessments.assessment_reference.namespace = assessments.namespace\n    AND objective_assessments.school_year = assessments.school_year", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_assessments`.`dim_objective_assessment`"}, "model.project.fct_student_school": {"raw_sql": "SELECT\r\n    {{ dbt_utils.surrogate_key([\r\n            'ssa.student_reference.student_unique_id',\r\n            'ssa.school_year_type_reference.school_year'\r\n    ]) }}                                                           AS student_key,\r\n    {{ dbt_utils.surrogate_key([\r\n        'schools.local_education_agency_id',\r\n        'ssa.school_year_type_reference.school_year'\r\n    ]) }}                                                           AS local_education_agency_key,\r\n    {{ dbt_utils.surrogate_key([\r\n        'ssa.school_reference.school_id',\r\n        'ssa.school_year_type_reference.school_year'\r\n    ]) }}                                                           AS school_key,\r\n    ssa.school_year_type_reference.school_year                      AS school_year,\r\n    {{ convert_grade_level_to_short_label('ssa.entry_grade_level_descriptor') }}     AS grade_level,\r\n    {{ convert_grade_level_to_id('ssa.entry_grade_level_descriptor') }}              AS grade_level_id,\r\n    ssa.entry_date                                                  AS enrollment_date,\r\n    ssa.entry_type_descriptor                                       AS enrollment_type,\r\n    ssa.exit_withdraw_date                                          AS exit_date,\r\n    ssa.exit_withdraw_type_descriptor                               AS exit_type,\r\n    ssa.primary_school                                              AS is_primary_school,\r\n    COUNT(calendar_dates.date)                                      AS count_days_enrolled,\r\n    IF(\r\n        ssa.exit_withdraw_date IS NULL\r\n        OR (\r\n            CURRENT_DATE >= ssa.entry_date\r\n            AND CURRENT_DATE < ssa.exit_withdraw_date\r\n        ),\r\n        1, 0)                                                       AS is_actively_enrolled\r\nFROM {{ ref('stg_edfi_student_school_associations') }} ssa\r\nLEFT JOIN {{ ref('stg_edfi_schools') }} schools\r\n    ON ssa.school_reference.school_id = schools.school_id\r\n    AND ssa.school_year_type_reference.school_year = schools.school_year\r\nLEFT JOIN {{ ref('stg_edfi_calendar_dates') }} calendar_dates\r\n    ON ssa.school_year = calendar_dates.school_year\r\n    AND ssa.school_reference.school_id = calendar_dates.calendar_reference.school_id\r\n    AND ssa.entry_date <= calendar_dates.date\r\n    AND (\r\n        ssa.exit_withdraw_date IS NULL\r\n        OR ssa.exit_withdraw_date > calendar_dates.date\r\n    )\r\nCROSS JOIN UNNEST(calendar_dates.calendar_events) AS calendar_events\r\nWHERE\r\n    calendar_dates.date < CURRENT_DATE\r\n    AND calendar_events.calendar_event_descriptor = 'Instructional day'\r\nGROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.project.convert_grade_level_to_short_label", "macro.project.convert_grade_level_to_id"], "nodes": ["model.project.stg_edfi_student_school_associations", "model.project.stg_edfi_schools", "model.project.stg_edfi_calendar_dates"]}, "config": {"enabled": true, "alias": null, "schema": "core", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_core", "fqn": ["project", "marts", "core", "fct_student_school"], "unique_id": "model.project.fct_student_school", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "marts/core/fct_student_school.sql", "original_file_path": "models/marts/core/fct_student_school.sql", "name": "fct_student_school", "alias": "fct_student_school", "checksum": {"name": "sha256", "checksum": "c9e49da7510a190b9b731c7660f2c2f1d8175e490b1f186f41fc7229b4237c56"}, "tags": ["amt"], "refs": [["stg_edfi_student_school_associations"], ["stg_edfi_schools"], ["stg_edfi_calendar_dates"]], "sources": [], "description": "", "columns": {"student_key": {"name": "student_key", "description": "Foreign key to `dim_student`", "meta": {}, "data_type": null, "quote": null, "tags": []}, "local_education_agency_key": {"name": "local_education_agency_key", "description": "Foreign key to `dim_local_education_agency`", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_key": {"name": "school_key", "description": "Foreign key to `dim_school`", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/marts/core/core.yml", "compiled_path": "target/compiled/project/models/marts/core/fct_student_school.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "tags": "amt", "schema": "core"}, "created_at": 1643419470.528267, "compiled_sql": "SELECT\n    to_hex(md5(cast(coalesce(cast(ssa.student_reference.student_unique_id as \n    string\n), '') || '-' || coalesce(cast(ssa.school_year_type_reference.school_year as \n    string\n), '') as \n    string\n)))                                                           AS student_key,\n    to_hex(md5(cast(coalesce(cast(schools.local_education_agency_id as \n    string\n), '') || '-' || coalesce(cast(ssa.school_year_type_reference.school_year as \n    string\n), '') as \n    string\n)))                                                           AS local_education_agency_key,\n    to_hex(md5(cast(coalesce(cast(ssa.school_reference.school_id as \n    string\n), '') || '-' || coalesce(cast(ssa.school_year_type_reference.school_year as \n    string\n), '') as \n    string\n)))                                                           AS school_key,\n    ssa.school_year_type_reference.school_year                      AS school_year,\n    \n    CASE ssa.entry_grade_level_descriptor\n        WHEN 'Infant/toddler'            THEN 'Infant'\n        WHEN 'Preschool/Prekindergarten' THEN 'PreK'\n        WHEN 'Kindergarten'              THEN 'K'\n        WHEN 'First grade'               THEN '1'\n        WHEN 'Second grade'              THEN '2'\n        WHEN 'Third grade'               THEN '3'\n        WHEN 'Fourth grade'              THEN '4'\n        WHEN 'Fifth grade'               THEN '5'\n        WHEN 'Sixth grade'               THEN '6'\n        WHEN 'Seventh grade'             THEN '7'\n        WHEN 'Eighth grade'              THEN '8'\n        WHEN 'Ninth grade'               THEN '9'\n        WHEN 'Tenth grade'               THEN '10'\n        WHEN 'Eleventh grade'            THEN '11'\n        WHEN 'Twelfth grade'             THEN '12'\n        ELSE '999999999'\n    END\n     AS grade_level,\n    \n    CASE ssa.entry_grade_level_descriptor\n        WHEN 'Infant/toddler'            THEN -3\n        WHEN 'Preschool/Prekindergarten' THEN -2\n        WHEN 'Kindergarten'              THEN -1\n        WHEN 'First grade'               THEN 1\n        WHEN 'Second grade'              THEN 2\n        WHEN 'Third grade'               THEN 3\n        WHEN 'Fourth grade'              THEN 4\n        WHEN 'Fifth grade'               THEN 5\n        WHEN 'Sixth grade'               THEN 6\n        WHEN 'Seventh grade'             THEN 7\n        WHEN 'Eighth grade'              THEN 8\n        WHEN 'Ninth grade'               THEN 9\n        WHEN 'Tenth grade'               THEN 10\n        WHEN 'Eleventh grade'            THEN 11\n        WHEN 'Twelfth grade'             THEN 12\n        ELSE 999999999\n    END\n              AS grade_level_id,\n    ssa.entry_date                                                  AS enrollment_date,\n    ssa.entry_type_descriptor                                       AS enrollment_type,\n    ssa.exit_withdraw_date                                          AS exit_date,\n    ssa.exit_withdraw_type_descriptor                               AS exit_type,\n    ssa.primary_school                                              AS is_primary_school,\n    COUNT(calendar_dates.date)                                      AS count_days_enrolled,\n    IF(\n        ssa.exit_withdraw_date IS NULL\n        OR (\n            CURRENT_DATE >= ssa.entry_date\n            AND CURRENT_DATE < ssa.exit_withdraw_date\n        ),\n        1, 0)                                                       AS is_actively_enrolled\nFROM `gcp-proj-id`.`dev_staging`.`stg_edfi_student_school_associations` ssa\nLEFT JOIN `gcp-proj-id`.`dev_staging`.`stg_edfi_schools` schools\n    ON ssa.school_reference.school_id = schools.school_id\n    AND ssa.school_year_type_reference.school_year = schools.school_year\nLEFT JOIN `gcp-proj-id`.`dev_staging`.`stg_edfi_calendar_dates` calendar_dates\n    ON ssa.school_year = calendar_dates.school_year\n    AND ssa.school_reference.school_id = calendar_dates.calendar_reference.school_id\n    AND ssa.entry_date <= calendar_dates.date\n    AND (\n        ssa.exit_withdraw_date IS NULL\n        OR ssa.exit_withdraw_date > calendar_dates.date\n    )\nCROSS JOIN UNNEST(calendar_dates.calendar_events) AS calendar_events\nWHERE\n    calendar_dates.date < CURRENT_DATE\n    AND calendar_events.calendar_event_descriptor = 'Instructional day'\nGROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_core`.`fct_student_school`"}, "model.project.dim_student_section": {"raw_sql": "{{\r\n  config(\r\n    labels = {'analytics_middle_tier': 'yes'}\r\n  )\r\n}}\r\n\r\n\r\nWITH teachers AS (\r\n\r\n    SELECT\r\n        ssa.section_reference.school_id,\r\n        ssa.section_reference.local_course_code,\r\n        ssa.section_reference.school_year,\r\n        ssa.section_reference.section_identifier,\r\n        ssa.section_reference.session_name,\r\n        STRING_AGG(staff.first_name || ' ' || staff.last_surname, ', ') AS teachers\r\n    FROM {{ ref('stg_edfi_staff_section_associations') }} ssa\r\n    LEFT JOIN {{ ref('stg_edfi_staffs') }} staff\r\n        ON ssa.school_year = staff.school_year\r\n        AND ssa.staff_reference.staff_unique_id = staff.staff_unique_id\r\n    GROUP BY ssa.section_reference.school_id,\r\n        ssa.section_reference.local_course_code,\r\n        ssa.section_reference.school_year,\r\n        ssa.section_reference.section_identifier,\r\n        ssa.section_reference.session_name\r\n\r\n)\r\n\r\n\r\nSELECT\r\n    {{ dbt_utils.surrogate_key([\r\n        'ssa.section_reference.school_id',\r\n        'ssa.section_reference.school_year',\r\n        'ssa.section_reference.session_name',\r\n        'ssa.section_reference.local_course_code',\r\n        'ssa.section_reference.section_identifier',\r\n        'ssa.student_reference.student_unique_id',\r\n        'ssa.begin_date'\r\n    ]) }}                                               AS student_section_key,\r\n    {{ dbt_utils.surrogate_key([\r\n        'ssa.section_reference.school_id',\r\n        'ssa.section_reference.school_year'\r\n    ]) }}                                               AS school_key,\r\n    {{ dbt_utils.surrogate_key([\r\n        'course_offerings.session_reference.school_id',\r\n        'course_offerings.session_reference.school_year',\r\n        'course_offerings.session_reference.session_name'\r\n    ]) }}                                               AS session_key,\r\n    {{ dbt_utils.surrogate_key([\r\n        'ssa.section_reference.school_id',\r\n        'ssa.section_reference.school_year',\r\n        'ssa.section_reference.session_name',\r\n        'ssa.section_reference.local_course_code',\r\n        'ssa.section_reference.section_identifier'\r\n    ]) }}                                               AS section_key,\r\n    {{ dbt_utils.surrogate_key([\r\n        'ssa.student_reference.student_unique_id',\r\n        'ssa.section_reference.school_year'\r\n     ]) }}                                              AS student_key,\r\n    section_reference.school_year                       AS school_year,\r\n    section_reference.local_course_code                 AS local_course_code,\r\n    courses.academic_subject_descriptor                 AS academic_subject,\r\n    courses.course_title                                AS course_title,\r\n    teachers.teachers                                   AS teacher_name,\r\n    ssa.begin_date                                      AS student_section_start_date,\r\n    ssa.end_date                                        AS student_section_end_date\r\nFROM {{ ref('stg_edfi_student_section_associations') }} ssa\r\nLEFT JOIN {{ ref('stg_edfi_course_offerings') }} course_offerings\r\n    ON ssa.school_year = course_offerings.school_year\r\n    AND course_offerings.local_course_code = ssa.section_reference.local_course_code\r\n    AND course_offerings.school_reference.school_id = ssa.section_reference.school_id\r\n    AND course_offerings.session_reference.school_year = ssa.section_reference.school_year\r\n    AND course_offerings.session_reference.session_name = ssa.section_reference.session_name\r\nLEFT JOIN {{ ref('stg_edfi_courses') }} courses\r\n    ON course_offerings.school_year = courses.school_year\r\n    AND courses.course_code = course_offerings.course_reference.course_code\r\n    AND courses.education_organization_reference.education_organization_id = course_offerings.course_reference.education_organization_id\r\nLEFT JOIN teachers\r\n    ON ssa.school_year = teachers.school_year\r\n    AND teachers.local_course_code = ssa.section_reference.local_course_code\r\n    AND teachers.school_year = ssa.section_reference.school_year\r\n    AND teachers.section_identifier = ssa.section_reference.section_identifier\r\n    AND teachers.session_name = ssa.section_reference.session_name", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.project.stg_edfi_staff_section_associations", "model.project.stg_edfi_staffs", "model.project.stg_edfi_student_section_associations", "model.project.stg_edfi_course_offerings", "model.project.stg_edfi_courses"]}, "config": {"enabled": true, "alias": null, "schema": "core", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"analytics_middle_tier": "yes"}, "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_core", "fqn": ["project", "marts", "core", "dim_student_section"], "unique_id": "model.project.dim_student_section", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "marts/core/dim_student_section.sql", "original_file_path": "models/marts/core/dim_student_section.sql", "name": "dim_student_section", "alias": "dim_student_section", "checksum": {"name": "sha256", "checksum": "3024456d1a57be4b612fe054741eacee95daf5f8c8601a7742f6a50fc6a85cac"}, "tags": ["amt"], "refs": [["stg_edfi_staff_section_associations"], ["stg_edfi_staffs"], ["stg_edfi_student_section_associations"], ["stg_edfi_course_offerings"], ["stg_edfi_courses"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/dim_student_section.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "tags": "amt", "schema": "core", "labels": {"analytics_middle_tier": "yes"}}, "created_at": 1643419470.153246, "compiled_sql": "\n\n\nWITH teachers AS (\n\n    SELECT\n        ssa.section_reference.school_id,\n        ssa.section_reference.local_course_code,\n        ssa.section_reference.school_year,\n        ssa.section_reference.section_identifier,\n        ssa.section_reference.session_name,\n        STRING_AGG(staff.first_name || ' ' || staff.last_surname, ', ') AS teachers\n    FROM `gcp-proj-id`.`dev_staging`.`stg_edfi_staff_section_associations` ssa\n    LEFT JOIN `gcp-proj-id`.`dev_staging`.`stg_edfi_staffs` staff\n        ON ssa.school_year = staff.school_year\n        AND ssa.staff_reference.staff_unique_id = staff.staff_unique_id\n    GROUP BY ssa.section_reference.school_id,\n        ssa.section_reference.local_course_code,\n        ssa.section_reference.school_year,\n        ssa.section_reference.section_identifier,\n        ssa.section_reference.session_name\n\n)\n\n\nSELECT\n    to_hex(md5(cast(coalesce(cast(ssa.section_reference.school_id as \n    string\n), '') || '-' || coalesce(cast(ssa.section_reference.school_year as \n    string\n), '') || '-' || coalesce(cast(ssa.section_reference.session_name as \n    string\n), '') || '-' || coalesce(cast(ssa.section_reference.local_course_code as \n    string\n), '') || '-' || coalesce(cast(ssa.section_reference.section_identifier as \n    string\n), '') || '-' || coalesce(cast(ssa.student_reference.student_unique_id as \n    string\n), '') || '-' || coalesce(cast(ssa.begin_date as \n    string\n), '') as \n    string\n)))                                               AS student_section_key,\n    to_hex(md5(cast(coalesce(cast(ssa.section_reference.school_id as \n    string\n), '') || '-' || coalesce(cast(ssa.section_reference.school_year as \n    string\n), '') as \n    string\n)))                                               AS school_key,\n    to_hex(md5(cast(coalesce(cast(course_offerings.session_reference.school_id as \n    string\n), '') || '-' || coalesce(cast(course_offerings.session_reference.school_year as \n    string\n), '') || '-' || coalesce(cast(course_offerings.session_reference.session_name as \n    string\n), '') as \n    string\n)))                                               AS session_key,\n    to_hex(md5(cast(coalesce(cast(ssa.section_reference.school_id as \n    string\n), '') || '-' || coalesce(cast(ssa.section_reference.school_year as \n    string\n), '') || '-' || coalesce(cast(ssa.section_reference.session_name as \n    string\n), '') || '-' || coalesce(cast(ssa.section_reference.local_course_code as \n    string\n), '') || '-' || coalesce(cast(ssa.section_reference.section_identifier as \n    string\n), '') as \n    string\n)))                                               AS section_key,\n    to_hex(md5(cast(coalesce(cast(ssa.student_reference.student_unique_id as \n    string\n), '') || '-' || coalesce(cast(ssa.section_reference.school_year as \n    string\n), '') as \n    string\n)))                                              AS student_key,\n    section_reference.school_year                       AS school_year,\n    section_reference.local_course_code                 AS local_course_code,\n    courses.academic_subject_descriptor                 AS academic_subject,\n    courses.course_title                                AS course_title,\n    teachers.teachers                                   AS teacher_name,\n    ssa.begin_date                                      AS student_section_start_date,\n    ssa.end_date                                        AS student_section_end_date\nFROM `gcp-proj-id`.`dev_staging`.`stg_edfi_student_section_associations` ssa\nLEFT JOIN `gcp-proj-id`.`dev_staging`.`stg_edfi_course_offerings` course_offerings\n    ON ssa.school_year = course_offerings.school_year\n    AND course_offerings.local_course_code = ssa.section_reference.local_course_code\n    AND course_offerings.school_reference.school_id = ssa.section_reference.school_id\n    AND course_offerings.session_reference.school_year = ssa.section_reference.school_year\n    AND course_offerings.session_reference.session_name = ssa.section_reference.session_name\nLEFT JOIN `gcp-proj-id`.`dev_staging`.`stg_edfi_courses` courses\n    ON course_offerings.school_year = courses.school_year\n    AND courses.course_code = course_offerings.course_reference.course_code\n    AND courses.education_organization_reference.education_organization_id = course_offerings.course_reference.education_organization_id\nLEFT JOIN teachers\n    ON ssa.school_year = teachers.school_year\n    AND teachers.local_course_code = ssa.section_reference.local_course_code\n    AND teachers.school_year = ssa.section_reference.school_year\n    AND teachers.section_identifier = ssa.section_reference.section_identifier\n    AND teachers.session_name = ssa.section_reference.session_name", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_core`.`dim_student_section`"}, "model.project.student_local_education_agency_demographics_bridge": {"raw_sql": "{{\r\n  config(\r\n    labels = {'analytics_middle_tier': 'yes'}\r\n  )\r\n}}\r\n\r\n\r\nWITH demographics AS (\r\n    SELECT\r\n        seoa.school_year                                                            AS school_year,\r\n        {{ dbt_utils.surrogate_key([\r\n            'cohort_years.school_year',\r\n            'cohort_years.cohort_type_descriptor',\r\n            'seoa.student_reference.student_unique_id',\r\n            'seoa.education_organization_reference.education_organization_id'\r\n        ]) }}                                                                       AS student_school_demographic_bridge_key,\r\n        {{ dbt_utils.surrogate_key([\r\n            'seoa.student_reference.student_unique_id',\r\n            'seoa.education_organization_reference.education_organization_id'\r\n        ]) }}                                                                       AS student_local_education_agency_key,\r\n        {{ dbt_utils.surrogate_key([\r\n            'cohort_years.school_year',\r\n            'cohort_years.cohort_type_descriptor'\r\n        ]) }}                                                                       AS demographic_key,\r\n        seoa.education_organization_reference.education_organization_id             AS education_organization_id,\r\n        seoa.student_reference.student_unique_id                                    AS student_unique_id,\r\n        ROW_NUMBER() OVER (\r\n            PARTITION BY\r\n                seoa.student_reference.student_unique_id,\r\n                cohort_years.cohort_type_descriptor\r\n            ORDER BY seoa.school_year DESC\r\n        )                                                                           AS rank\r\n    FROM {{ ref('stg_edfi_student_education_organization_associations') }} seoa\r\n    CROSS JOIN UNNEST(seoa.cohort_years) AS cohort_years\r\n\r\n    UNION ALL\r\n\r\n    SELECT\r\n        seoa.school_year                                                            AS school_year,\r\n        {{ dbt_utils.surrogate_key([\r\n            'uses.language_use_descriptor', \r\n            'seoa.student_reference.student_unique_id',\r\n            'seoa.education_organization_reference.education_organization_id'\r\n        ]) }}                                                                       AS student_school_demographic_bridge_key,\r\n        {{ dbt_utils.surrogate_key([\r\n            'seoa.student_reference.student_unique_id',\r\n            'seoa.education_organization_reference.education_organization_id'\r\n        ]) }}                                                                       AS student_local_education_agency_key,\r\n        {{ dbt_utils.surrogate_key([\r\n            'uses.language_use_descriptor'\r\n        ]) }}                                                                       AS demographic_key,\r\n        seoa.education_organization_reference.education_organization_id             AS education_organization_id,\r\n        seoa.student_reference.student_unique_id                                    AS student_unique_id,\r\n        ROW_NUMBER() OVER (\r\n            PARTITION BY\r\n                seoa.student_reference.student_unique_id,\r\n                uses.language_use_descriptor\r\n            ORDER BY seoa.school_year DESC\r\n        )                                                                           AS rank\r\n    FROM {{ ref('stg_edfi_student_education_organization_associations') }} seoa\r\n    CROSS JOIN UNNEST(seoa.languages) AS languages\r\n    CROSS JOIN UNNEST(languages.uses) AS uses\r\n\r\n    UNION ALL\r\n\r\n    SELECT\r\n        seoa.school_year                                                            AS school_year,\r\n        {{ dbt_utils.surrogate_key([\r\n            'languages.language_descriptor',\r\n            'seoa.student_reference.student_unique_id',\r\n            'seoa.education_organization_reference.education_organization_id'\r\n        ]) }}                                                                       AS student_school_demographic_bridge_key,\r\n        {{ dbt_utils.surrogate_key([\r\n            'seoa.student_reference.student_unique_id',\r\n            'seoa.education_organization_reference.education_organization_id'\r\n        ]) }}                                                                       AS student_local_education_agency_key,\r\n        {{ dbt_utils.surrogate_key([\r\n            'languages.language_descriptor'\r\n        ]) }}                                                                       AS demographic_key,\r\n        seoa.education_organization_reference.education_organization_id             AS education_organization_id,\r\n        seoa.student_reference.student_unique_id                                    AS student_unique_id,\r\n        ROW_NUMBER() OVER (\r\n            PARTITION BY\r\n                seoa.student_reference.student_unique_id,\r\n                languages.language_descriptor\r\n            ORDER BY seoa.school_year DESC\r\n        )                                                                           AS rank\r\n    FROM {{ ref('stg_edfi_student_education_organization_associations') }} seoa\r\n    CROSS JOIN UNNEST(seoa.languages) AS languages\r\n\r\n    UNION ALL\r\n\r\n    SELECT\r\n        seoa.school_year                                                            AS school_year,\r\n        {{ dbt_utils.surrogate_key([\r\n            'races.race_descriptor', \r\n            'seoa.student_reference.student_unique_id',\r\n            'seoa.education_organization_reference.education_organization_id'\r\n        ]) }}                                                                       AS student_school_demographic_bridge_key,\r\n        {{ dbt_utils.surrogate_key([\r\n            'seoa.student_reference.student_unique_id',\r\n            'seoa.education_organization_reference.education_organization_id'\r\n        ]) }}                                                                       AS student_local_education_agency_key,\r\n        {{ dbt_utils.surrogate_key([\r\n            'races.race_descriptor'\r\n        ]) }}                                                                       AS demographic_key,\r\n        seoa.education_organization_reference.education_organization_id             AS education_organization_id,\r\n        seoa.student_reference.student_unique_id                                    AS student_unique_id,\r\n        ROW_NUMBER() OVER (\r\n            PARTITION BY\r\n                seoa.student_reference.student_unique_id,\r\n                races.race_descriptor\r\n            ORDER BY seoa.school_year DESC\r\n        )                                                                           AS rank\r\n    FROM {{ ref('stg_edfi_student_education_organization_associations') }} seoa\r\n    CROSS JOIN UNNEST(seoa.races) AS races\r\n\r\n)\r\n\r\nSELECT\r\n    school_year                                 AS school_year,\r\n    student_school_demographic_bridge_key       AS student_school_demographic_bridge_key,\r\n    student_local_education_agency_key          AS student_local_education_agency_key,\r\n    demographic_key                             AS demographic_key\r\nFROM demographics \r\nWHERE\r\n    rank = 1\r\n    AND EXISTS (\r\n        SELECT 1\r\n        FROM {{ ref('stg_edfi_student_school_associations') }} ssa\r\n        LEFT JOIN {{ ref('stg_edfi_schools') }} schools\r\n            ON ssa.school_reference.school_id = schools.school_id\r\n            AND ssa.school_year = schools.school_year\r\n        WHERE\r\n            (ssa.exit_withdraw_date IS NULL OR ssa.exit_withdraw_date >= CURRENT_DATE)\r\n            AND schools.local_education_agency_id = demographics.education_organization_id\r\n            AND ssa.student_reference.student_unique_id = demographics.student_unique_id\r\n            AND ssa.school_year = demographics.school_year\r\n    )", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.project.stg_edfi_student_education_organization_associations", "model.project.stg_edfi_student_education_organization_associations", "model.project.stg_edfi_student_education_organization_associations", "model.project.stg_edfi_student_education_organization_associations", "model.project.stg_edfi_student_school_associations", "model.project.stg_edfi_schools"]}, "config": {"enabled": true, "alias": null, "schema": "core", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"analytics_middle_tier": "yes"}, "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_core", "fqn": ["project", "marts", "core", "student_local_education_agency_demographics_bridge"], "unique_id": "model.project.student_local_education_agency_demographics_bridge", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "marts/core/student_local_education_agency_demographics_bridge.sql", "original_file_path": "models/marts/core/student_local_education_agency_demographics_bridge.sql", "name": "student_local_education_agency_demographics_bridge", "alias": "student_local_education_agency_demographics_bridge", "checksum": {"name": "sha256", "checksum": "5de79699bd36591e8b402f5071186d5c8d8b06f8eb62d69f5d7eb88c6099c60f"}, "tags": ["amt"], "refs": [["stg_edfi_student_education_organization_associations"], ["stg_edfi_student_education_organization_associations"], ["stg_edfi_student_education_organization_associations"], ["stg_edfi_student_education_organization_associations"], ["stg_edfi_student_school_associations"], ["stg_edfi_schools"]], "sources": [], "description": "This view provides student demographic information by linking the dim_student_local_education_agency to the dim_demographic.", "columns": {"student_school_demographic_bridge_key": {"name": "student_school_demographic_bridge_key", "description": "Concatenation of the demographic_key found in the dim_demographic with the student_local_education_agency_key found in the dim_student_local_education_agency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "student_local_education_agency_key": {"name": "student_local_education_agency_key", "description": "Concatenation of the student unique id and the LEA id.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "demographic_key": {"name": "demographic_key", "description": "Concatenation of parent key and label columns to allow for easier joins.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/marts/core/core.yml", "compiled_path": "target/compiled/project/models/marts/core/student_local_education_agency_demographics_bridge.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "tags": "amt", "schema": "core", "labels": {"analytics_middle_tier": "yes"}}, "created_at": 1643419470.526231, "compiled_sql": "\n\n\nWITH demographics AS (\n    SELECT\n        seoa.school_year                                                            AS school_year,\n        to_hex(md5(cast(coalesce(cast(cohort_years.school_year as \n    string\n), '') || '-' || coalesce(cast(cohort_years.cohort_type_descriptor as \n    string\n), '') || '-' || coalesce(cast(seoa.student_reference.student_unique_id as \n    string\n), '') || '-' || coalesce(cast(seoa.education_organization_reference.education_organization_id as \n    string\n), '') as \n    string\n)))                                                                       AS student_school_demographic_bridge_key,\n        to_hex(md5(cast(coalesce(cast(seoa.student_reference.student_unique_id as \n    string\n), '') || '-' || coalesce(cast(seoa.education_organization_reference.education_organization_id as \n    string\n), '') as \n    string\n)))                                                                       AS student_local_education_agency_key,\n        to_hex(md5(cast(coalesce(cast(cohort_years.school_year as \n    string\n), '') || '-' || coalesce(cast(cohort_years.cohort_type_descriptor as \n    string\n), '') as \n    string\n)))                                                                       AS demographic_key,\n        seoa.education_organization_reference.education_organization_id             AS education_organization_id,\n        seoa.student_reference.student_unique_id                                    AS student_unique_id,\n        ROW_NUMBER() OVER (\n            PARTITION BY\n                seoa.student_reference.student_unique_id,\n                cohort_years.cohort_type_descriptor\n            ORDER BY seoa.school_year DESC\n        )                                                                           AS rank\n    FROM `gcp-proj-id`.`dev_staging`.`stg_edfi_student_education_organization_associations` seoa\n    CROSS JOIN UNNEST(seoa.cohort_years) AS cohort_years\n\n    UNION ALL\n\n    SELECT\n        seoa.school_year                                                            AS school_year,\n        to_hex(md5(cast(coalesce(cast(uses.language_use_descriptor as \n    string\n), '') || '-' || coalesce(cast(seoa.student_reference.student_unique_id as \n    string\n), '') || '-' || coalesce(cast(seoa.education_organization_reference.education_organization_id as \n    string\n), '') as \n    string\n)))                                                                       AS student_school_demographic_bridge_key,\n        to_hex(md5(cast(coalesce(cast(seoa.student_reference.student_unique_id as \n    string\n), '') || '-' || coalesce(cast(seoa.education_organization_reference.education_organization_id as \n    string\n), '') as \n    string\n)))                                                                       AS student_local_education_agency_key,\n        to_hex(md5(cast(coalesce(cast(uses.language_use_descriptor as \n    string\n), '') as \n    string\n)))                                                                       AS demographic_key,\n        seoa.education_organization_reference.education_organization_id             AS education_organization_id,\n        seoa.student_reference.student_unique_id                                    AS student_unique_id,\n        ROW_NUMBER() OVER (\n            PARTITION BY\n                seoa.student_reference.student_unique_id,\n                uses.language_use_descriptor\n            ORDER BY seoa.school_year DESC\n        )                                                                           AS rank\n    FROM `gcp-proj-id`.`dev_staging`.`stg_edfi_student_education_organization_associations` seoa\n    CROSS JOIN UNNEST(seoa.languages) AS languages\n    CROSS JOIN UNNEST(languages.uses) AS uses\n\n    UNION ALL\n\n    SELECT\n        seoa.school_year                                                            AS school_year,\n        to_hex(md5(cast(coalesce(cast(languages.language_descriptor as \n    string\n), '') || '-' || coalesce(cast(seoa.student_reference.student_unique_id as \n    string\n), '') || '-' || coalesce(cast(seoa.education_organization_reference.education_organization_id as \n    string\n), '') as \n    string\n)))                                                                       AS student_school_demographic_bridge_key,\n        to_hex(md5(cast(coalesce(cast(seoa.student_reference.student_unique_id as \n    string\n), '') || '-' || coalesce(cast(seoa.education_organization_reference.education_organization_id as \n    string\n), '') as \n    string\n)))                                                                       AS student_local_education_agency_key,\n        to_hex(md5(cast(coalesce(cast(languages.language_descriptor as \n    string\n), '') as \n    string\n)))                                                                       AS demographic_key,\n        seoa.education_organization_reference.education_organization_id             AS education_organization_id,\n        seoa.student_reference.student_unique_id                                    AS student_unique_id,\n        ROW_NUMBER() OVER (\n            PARTITION BY\n                seoa.student_reference.student_unique_id,\n                languages.language_descriptor\n            ORDER BY seoa.school_year DESC\n        )                                                                           AS rank\n    FROM `gcp-proj-id`.`dev_staging`.`stg_edfi_student_education_organization_associations` seoa\n    CROSS JOIN UNNEST(seoa.languages) AS languages\n\n    UNION ALL\n\n    SELECT\n        seoa.school_year                                                            AS school_year,\n        to_hex(md5(cast(coalesce(cast(races.race_descriptor as \n    string\n), '') || '-' || coalesce(cast(seoa.student_reference.student_unique_id as \n    string\n), '') || '-' || coalesce(cast(seoa.education_organization_reference.education_organization_id as \n    string\n), '') as \n    string\n)))                                                                       AS student_school_demographic_bridge_key,\n        to_hex(md5(cast(coalesce(cast(seoa.student_reference.student_unique_id as \n    string\n), '') || '-' || coalesce(cast(seoa.education_organization_reference.education_organization_id as \n    string\n), '') as \n    string\n)))                                                                       AS student_local_education_agency_key,\n        to_hex(md5(cast(coalesce(cast(races.race_descriptor as \n    string\n), '') as \n    string\n)))                                                                       AS demographic_key,\n        seoa.education_organization_reference.education_organization_id             AS education_organization_id,\n        seoa.student_reference.student_unique_id                                    AS student_unique_id,\n        ROW_NUMBER() OVER (\n            PARTITION BY\n                seoa.student_reference.student_unique_id,\n                races.race_descriptor\n            ORDER BY seoa.school_year DESC\n        )                                                                           AS rank\n    FROM `gcp-proj-id`.`dev_staging`.`stg_edfi_student_education_organization_associations` seoa\n    CROSS JOIN UNNEST(seoa.races) AS races\n\n)\n\nSELECT\n    school_year                                 AS school_year,\n    student_school_demographic_bridge_key       AS student_school_demographic_bridge_key,\n    student_local_education_agency_key          AS student_local_education_agency_key,\n    demographic_key                             AS demographic_key\nFROM demographics \nWHERE\n    rank = 1\n    AND EXISTS (\n        SELECT 1\n        FROM `gcp-proj-id`.`dev_staging`.`stg_edfi_student_school_associations` ssa\n        LEFT JOIN `gcp-proj-id`.`dev_staging`.`stg_edfi_schools` schools\n            ON ssa.school_reference.school_id = schools.school_id\n            AND ssa.school_year = schools.school_year\n        WHERE\n            (ssa.exit_withdraw_date IS NULL OR ssa.exit_withdraw_date >= CURRENT_DATE)\n            AND schools.local_education_agency_id = demographics.education_organization_id\n            AND ssa.student_reference.student_unique_id = demographics.student_unique_id\n            AND ssa.school_year = demographics.school_year\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_core`.`student_local_education_agency_demographics_bridge`"}, "model.project.dim_date": {"raw_sql": "{{\r\n  config(\r\n    labels = {'analytics_middle_tier': 'yes'}\r\n  )\r\n}}\r\n\r\n\r\nWITH dates AS (\r\n    SELECT DISTINCT\r\n        date,\r\n        calendar_reference.school_year\r\n    FROM  {{ ref('stg_edfi_calendar_dates') }}\r\n)\r\n\r\n\r\nSELECT\r\n    date                                                    AS date,\r\n    EXTRACT(DAY FROM date)                                  AS day,\r\n    EXTRACT(MONTH FROM date)                                AS month,\r\n    FORMAT_DATETIME('%B', date)                             AS month_name,\r\n    EXTRACT(QUARTER FROM date)                              AS calendar_quarter,\r\n    CASE\r\n        WHEN EXTRACT(QUARTER FROM date) = 1 THEN 'First'\r\n        WHEN EXTRACT(QUARTER FROM date) = 2 THEN 'Second'\r\n        WHEN EXTRACT(QUARTER FROM date) = 3 THEN 'Third'\r\n        WHEN EXTRACT(QUARTER FROM date) = 4 THEN 'Fourth'\r\n    END                                                     AS calendar_quarter_name,\r\n    CAST(school_year AS int64)                              AS calendar_year,\r\n    IF(\r\n        EXTRACT(MONTH FROM date) >= 7, \r\n        EXTRACT(MONTH FROM date) - 6,\r\n        EXTRACT(MONTH FROM date) + 6\r\n    )                                                       AS month_sort_order -- note in core amt\r\nFROM dates", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.project.stg_edfi_calendar_dates"]}, "config": {"enabled": true, "alias": null, "schema": "core", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"analytics_middle_tier": "yes"}, "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_core", "fqn": ["project", "marts", "core", "dim_date"], "unique_id": "model.project.dim_date", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "marts/core/dim_date.sql", "original_file_path": "models/marts/core/dim_date.sql", "name": "dim_date", "alias": "dim_date", "checksum": {"name": "sha256", "checksum": "9b0596e9be08bc4e08d4352133f2bc28c1cf205635ba7fb72b6fed04f74f829c"}, "tags": ["amt"], "refs": [["stg_edfi_calendar_dates"]], "sources": [], "description": "# Date dim\n\nA date dimension table can be found in almost every dimensional model and allows the analytics engineer to look at student performance across different time periods. An explicit date dimension table can also help store date attributes that are not supported by a SQL date function (ie. month sort order in the context of a school year).\n\nThis dimension table notably lacks the date key found in Ed-Fi's Analytics Middle Tier. This is also counter to what Kimball tells us to do. Instead, fact tables found in the marts that include a date, use the DATE type. Kimball argues that if a fact table does this, it will cause folks to use SQL functions on that date to extract items like month name and avoid the join to the date dimension when they need to retrieve such information. You should use the date if you need the date and join on the date dimension if you need more.\n\n---------------------------\nDifferences from Ed-Fi AMT\n* Removes `date_key`\n* Adds `month_sort_order`", "columns": {"date": {"name": "date", "description": "Calendar date", "meta": {}, "data_type": null, "quote": null, "tags": []}, "day": {"name": "day", "description": "Day number", "meta": {}, "data_type": null, "quote": null, "tags": []}, "month": {"name": "month", "description": "Month number", "meta": {}, "data_type": null, "quote": null, "tags": []}, "month_name": {"name": "month_name", "description": "Month name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "calendar_quarter": {"name": "calendar_quarter", "description": "Based on 1: Jan-Mar, 2: Apr-Jun, 3: Jul-Sep, 4: Oct-Dec", "meta": {}, "data_type": null, "quote": null, "tags": []}, "calendar_quarter_name": {"name": "calendar_quarter_name", "description": "Calendar quarter name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "calendar_year": {"name": "calendar_year", "description": "Full four digit year", "meta": {}, "data_type": null, "quote": null, "tags": []}, "month_sort_order": {"name": "month_sort_order", "description": "Looks at school year as July - June", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/marts/core/core.yml", "compiled_path": "target/compiled/project/models/marts/core/dim_date.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "tags": "amt", "schema": "core", "labels": {"analytics_middle_tier": "yes"}}, "created_at": 1643419470.5048141, "compiled_sql": "\n\n\nWITH dates AS (\n    SELECT DISTINCT\n        date,\n        calendar_reference.school_year\n    FROM  `gcp-proj-id`.`dev_staging`.`stg_edfi_calendar_dates`\n)\n\n\nSELECT\n    date                                                    AS date,\n    EXTRACT(DAY FROM date)                                  AS day,\n    EXTRACT(MONTH FROM date)                                AS month,\n    FORMAT_DATETIME('%B', date)                             AS month_name,\n    EXTRACT(QUARTER FROM date)                              AS calendar_quarter,\n    CASE\n        WHEN EXTRACT(QUARTER FROM date) = 1 THEN 'First'\n        WHEN EXTRACT(QUARTER FROM date) = 2 THEN 'Second'\n        WHEN EXTRACT(QUARTER FROM date) = 3 THEN 'Third'\n        WHEN EXTRACT(QUARTER FROM date) = 4 THEN 'Fourth'\n    END                                                     AS calendar_quarter_name,\n    CAST(school_year AS int64)                              AS calendar_year,\n    IF(\n        EXTRACT(MONTH FROM date) >= 7, \n        EXTRACT(MONTH FROM date) - 6,\n        EXTRACT(MONTH FROM date) + 6\n    )                                                       AS month_sort_order -- note in core amt\nFROM dates", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_core`.`dim_date`"}, "model.project.dim_student_program": {"raw_sql": "{{\r\n  config(\r\n    labels = {'analytics_middle_tier': 'yes'}\r\n  )\r\n}}\r\n\r\n\r\nSELECT\r\n    {{ dbt_utils.surrogate_key([\r\n        'edfi_student_sped_associations.student_reference.student_unique_id',\r\n        'edfi_student_sped_associations.school_year',\r\n        'edfi_programs.program_name',\r\n        'edfi_programs.program_type_descriptor',\r\n        'edfi_programs.education_organization_reference.education_organization_id',\r\n        'edfi_student_sped_associations.begin_date'\r\n    ]) }}                                                                       AS student_program_key,\r\n    {{ dbt_utils.surrogate_key([\r\n        'edfi_programs.education_organization_reference.education_organization_id',\r\n        'edfi_student_sped_associations.school_year'\r\n    ]) }}                                                                       AS education_organization_key,\r\n    {{ dbt_utils.surrogate_key([\r\n        'edfi_student_sped_associations.student_reference.student_unique_id',\r\n        'edfi_student_sped_associations.school_year'\r\n    ]) }}                                                                       AS student_key,\r\n    edfi_student_sped_associations.school_year                                  AS school_year,\r\n    edfi_student_sped_associations.begin_date                                   AS begin_date,\r\n    edfi_student_sped_associations.end_date                                     AS end_date,\r\n    edfi_programs.program_name                                                  AS program_name\r\nFROM {{ ref('stg_edfi_student_special_education_program_associations') }} edfi_student_sped_associations\r\nLEFT JOIN {{ ref('stg_edfi_programs') }} edfi_programs\r\n    ON edfi_student_sped_associations.school_year = edfi_programs.school_year\r\n    AND edfi_student_sped_associations.program_reference.program_type_descriptor = edfi_programs.program_type_descriptor\r\n    AND edfi_student_sped_associations.program_reference.education_organization_id = edfi_programs.education_organization_reference.education_organization_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.project.stg_edfi_student_special_education_program_associations", "model.project.stg_edfi_programs"]}, "config": {"enabled": true, "alias": null, "schema": "core", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"analytics_middle_tier": "yes"}, "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_core", "fqn": ["project", "marts", "core", "dim_student_program"], "unique_id": "model.project.dim_student_program", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "marts/core/dim_student_program.sql", "original_file_path": "models/marts/core/dim_student_program.sql", "name": "dim_student_program", "alias": "dim_student_program", "checksum": {"name": "sha256", "checksum": "d48bcd7c7b2e3885400aa26124db969a2021643a58888314a2e12956bdaa2cb4"}, "tags": ["amt"], "refs": [["stg_edfi_student_special_education_program_associations"], ["stg_edfi_programs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/marts/core/core.yml", "compiled_path": "target/compiled/project/models/marts/core/dim_student_program.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "tags": "amt", "schema": "core", "labels": {"analytics_middle_tier": "yes"}}, "created_at": 1643419470.5266037, "compiled_sql": "\n\n\nSELECT\n    to_hex(md5(cast(coalesce(cast(edfi_student_sped_associations.student_reference.student_unique_id as \n    string\n), '') || '-' || coalesce(cast(edfi_student_sped_associations.school_year as \n    string\n), '') || '-' || coalesce(cast(edfi_programs.program_name as \n    string\n), '') || '-' || coalesce(cast(edfi_programs.program_type_descriptor as \n    string\n), '') || '-' || coalesce(cast(edfi_programs.education_organization_reference.education_organization_id as \n    string\n), '') || '-' || coalesce(cast(edfi_student_sped_associations.begin_date as \n    string\n), '') as \n    string\n)))                                                                       AS student_program_key,\n    to_hex(md5(cast(coalesce(cast(edfi_programs.education_organization_reference.education_organization_id as \n    string\n), '') || '-' || coalesce(cast(edfi_student_sped_associations.school_year as \n    string\n), '') as \n    string\n)))                                                                       AS education_organization_key,\n    to_hex(md5(cast(coalesce(cast(edfi_student_sped_associations.student_reference.student_unique_id as \n    string\n), '') || '-' || coalesce(cast(edfi_student_sped_associations.school_year as \n    string\n), '') as \n    string\n)))                                                                       AS student_key,\n    edfi_student_sped_associations.school_year                                  AS school_year,\n    edfi_student_sped_associations.begin_date                                   AS begin_date,\n    edfi_student_sped_associations.end_date                                     AS end_date,\n    edfi_programs.program_name                                                  AS program_name\nFROM `gcp-proj-id`.`dev_staging`.`stg_edfi_student_special_education_program_associations` edfi_student_sped_associations\nLEFT JOIN `gcp-proj-id`.`dev_staging`.`stg_edfi_programs` edfi_programs\n    ON edfi_student_sped_associations.school_year = edfi_programs.school_year\n    AND edfi_student_sped_associations.program_reference.program_type_descriptor = edfi_programs.program_type_descriptor\n    AND edfi_student_sped_associations.program_reference.education_organization_id = edfi_programs.education_organization_reference.education_organization_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_core`.`dim_student_program`"}, "model.project.dim_grading_period": {"raw_sql": "{{\r\n  config(\r\n    labels = {'analytics_middle_tier': 'yes'}\r\n  )\r\n}}\r\n\r\n\r\nWITH unique_records AS (\r\n    SELECT DISTINCT\r\n        student_section_association_reference.session_name,\r\n        grading_period_reference.school_id,\r\n        grading_period_reference.school_year,\r\n        grading_period_reference.grading_period_descriptor,\r\n        grading_period_reference.period_sequence\r\n    FROM {{ ref('stg_edfi_grades') }} grades\r\n\r\n),\r\n\r\ngrades_grading_periods_unioned AS (\r\n\r\n    SELECT\r\n        {{ dbt_utils.surrogate_key([\r\n            'unique_records.school_id',\r\n            'unique_records.school_year',\r\n            'unique_records.grading_period_descriptor',\r\n            'unique_records.period_sequence'\r\n        ]) }}                                               AS grading_period_key,\r\n        {{ dbt_utils.surrogate_key([\r\n            'unique_records.school_id',\r\n            'unique_records.school_year',\r\n            'unique_records.session_name'\r\n        ]) }}                                               AS session_key,\r\n        {{ dbt_utils.surrogate_key([\r\n            'unique_records.school_id',\r\n            'unique_records.school_year'\r\n        ]) }}                                               AS school_key,\r\n        unique_records.school_year                          AS school_year,\r\n        grading_periods.grading_period_descriptor           AS grading_period_description,\r\n        grading_periods.period_sequence                     AS period_sequence,\r\n        grading_periods.begin_date                          AS grading_period_begin_date,\r\n        grading_periods.end_date                            AS grading_period_end_date,\r\n        grading_periods.total_instructional_days            AS total_instructional_days\r\n    FROM unique_records\r\n    LEFT JOIN {{ ref('stg_edfi_grading_periods') }} grading_periods\r\n        ON unique_records.school_id = grading_periods.school_reference.school_id\r\n        AND unique_records.school_year = grading_periods.school_year_type_reference.school_year\r\n        AND unique_records.grading_period_descriptor = grading_periods.grading_period_descriptor\r\n        AND unique_records.period_sequence = grading_periods.period_sequence\r\n\r\n    UNION ALL\r\n\r\n    SELECT\r\n        {{ dbt_utils.surrogate_key([\r\n            'grading_periods.school_reference.school_id',\r\n            'grading_periods.school_year_type_reference.school_year',\r\n            'grading_periods.grading_period_descriptor',\r\n            'grading_periods.period_sequence'\r\n        ]) }}                                                                                   AS grading_period_key,\r\n        {{ dbt_utils.surrogate_key([\r\n            'sessions.school_reference.school_id',\r\n            'sessions.school_year_type_reference.school_year',\r\n            'sessions.session_name'\r\n        ]) }}                                                                                   AS session_key,\r\n        {{ dbt_utils.surrogate_key([\r\n            'sessions.school_reference.school_id',\r\n            'sessions.school_year_type_reference.school_year'\r\n        ]) }}                                                                                   AS school_key,\r\n        sessions.school_year_type_reference.school_year                                         AS school_year,\r\n        grading_periods.grading_period_descriptor                                               AS grading_period_description,\r\n        grading_periods.period_sequence                                                         AS period_sequence,\r\n        grading_periods.begin_date                                                              AS grading_period_begin_date,\r\n        grading_periods.end_date                                                                AS grading_period_end_date,\r\n        grading_periods.total_instructional_days                                                AS total_instructional_day\r\n    FROM {{ ref('stg_edfi_sessions') }} sessions\r\n    LEFT JOIN UNNEST(sessions.grading_periods) sessions_grading_periods\r\n    LEFT JOIN {{ ref('stg_edfi_school_year_types') }} school_year_types\r\n        ON sessions.school_year_type_reference.school_year = school_year_types.school_year\r\n    LEFT JOIN {{ ref('stg_edfi_grading_periods') }} grading_periods\r\n        ON sessions.school_year_type_reference.school_year = grading_periods.school_year\r\n        AND sessions_grading_periods.grading_period_reference.grading_period_descriptor = grading_periods.grading_period_descriptor\r\n        AND sessions_grading_periods.grading_period_reference.period_sequence = grading_periods.period_sequence\r\n        AND sessions_grading_periods.grading_period_reference.school_id = grading_periods.school_reference.school_id\r\n    WHERE sessions_grading_periods.grading_period_reference.grading_period_descriptor != ''\r\n\r\n)\r\n\r\nSELECT DISTINCT\r\n    grading_period_key,\r\n    session_key,\r\n    school_key,\r\n    school_year,\r\n    grading_period_description,\r\n    period_sequence,\r\n    grading_period_begin_date,\r\n    grading_period_end_date,\r\n    total_instructional_days\r\nFROM grades_grading_periods_unioned", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.project.stg_edfi_grades", "model.project.stg_edfi_grading_periods", "model.project.stg_edfi_sessions", "model.project.stg_edfi_school_year_types", "model.project.stg_edfi_grading_periods"]}, "config": {"enabled": true, "alias": null, "schema": "core", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"analytics_middle_tier": "yes"}, "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_core", "fqn": ["project", "marts", "core", "dim_grading_period"], "unique_id": "model.project.dim_grading_period", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "marts/core/dim_grading_period.sql", "original_file_path": "models/marts/core/dim_grading_period.sql", "name": "dim_grading_period", "alias": "dim_grading_period", "checksum": {"name": "sha256", "checksum": "e09741d4baa5e0285f2157189e51457398bfb802155b5174b26b2740401ec464"}, "tags": ["amt"], "refs": [["stg_edfi_grades"], ["stg_edfi_grading_periods"], ["stg_edfi_sessions"], ["stg_edfi_school_year_types"], ["stg_edfi_grading_periods"]], "sources": [], "description": "# Grading period dim\n\nGrain: one row per school per grading period", "columns": {"grading_period_key": {"name": "grading_period_key", "description": "Primary key for dimension table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_key": {"name": "school_key", "description": "Foreign key to `dim_school`", "meta": {}, "data_type": null, "quote": null, "tags": []}, "grading_period_description": {"name": "grading_period_description", "description": "Grading period descriptor code value", "meta": {}, "data_type": null, "quote": null, "tags": []}, "period_sequence": {"name": "period_sequence", "description": "The sequential order of this period relative to other periods", "meta": {}, "data_type": null, "quote": null, "tags": []}, "grading_period_begin_date_key": {"name": "grading_period_begin_date_key", "description": "Month, day, and year of the first day of the grading period", "meta": {}, "data_type": null, "quote": null, "tags": []}, "grading_period_end_date_key": {"name": "grading_period_end_date_key", "description": "Month, day, and year of the last day of the grading period", "meta": {}, "data_type": null, "quote": null, "tags": []}, "number_of_days": {"name": "number_of_days", "description": "Total days available for educational instruction during the grading period", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/marts/core/core.yml", "compiled_path": "target/compiled/project/models/marts/core/dim_grading_period.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "tags": "amt", "schema": "core", "labels": {"analytics_middle_tier": "yes"}}, "created_at": 1643419470.5086813, "compiled_sql": "\n\n\nWITH unique_records AS (\n    SELECT DISTINCT\n        student_section_association_reference.session_name,\n        grading_period_reference.school_id,\n        grading_period_reference.school_year,\n        grading_period_reference.grading_period_descriptor,\n        grading_period_reference.period_sequence\n    FROM `gcp-proj-id`.`dev_staging`.`stg_edfi_grades` grades\n\n),\n\ngrades_grading_periods_unioned AS (\n\n    SELECT\n        to_hex(md5(cast(coalesce(cast(unique_records.school_id as \n    string\n), '') || '-' || coalesce(cast(unique_records.school_year as \n    string\n), '') || '-' || coalesce(cast(unique_records.grading_period_descriptor as \n    string\n), '') || '-' || coalesce(cast(unique_records.period_sequence as \n    string\n), '') as \n    string\n)))                                               AS grading_period_key,\n        to_hex(md5(cast(coalesce(cast(unique_records.school_id as \n    string\n), '') || '-' || coalesce(cast(unique_records.school_year as \n    string\n), '') || '-' || coalesce(cast(unique_records.session_name as \n    string\n), '') as \n    string\n)))                                               AS session_key,\n        to_hex(md5(cast(coalesce(cast(unique_records.school_id as \n    string\n), '') || '-' || coalesce(cast(unique_records.school_year as \n    string\n), '') as \n    string\n)))                                               AS school_key,\n        unique_records.school_year                          AS school_year,\n        grading_periods.grading_period_descriptor           AS grading_period_description,\n        grading_periods.period_sequence                     AS period_sequence,\n        grading_periods.begin_date                          AS grading_period_begin_date,\n        grading_periods.end_date                            AS grading_period_end_date,\n        grading_periods.total_instructional_days            AS total_instructional_days\n    FROM unique_records\n    LEFT JOIN `gcp-proj-id`.`dev_staging`.`stg_edfi_grading_periods` grading_periods\n        ON unique_records.school_id = grading_periods.school_reference.school_id\n        AND unique_records.school_year = grading_periods.school_year_type_reference.school_year\n        AND unique_records.grading_period_descriptor = grading_periods.grading_period_descriptor\n        AND unique_records.period_sequence = grading_periods.period_sequence\n\n    UNION ALL\n\n    SELECT\n        to_hex(md5(cast(coalesce(cast(grading_periods.school_reference.school_id as \n    string\n), '') || '-' || coalesce(cast(grading_periods.school_year_type_reference.school_year as \n    string\n), '') || '-' || coalesce(cast(grading_periods.grading_period_descriptor as \n    string\n), '') || '-' || coalesce(cast(grading_periods.period_sequence as \n    string\n), '') as \n    string\n)))                                                                                   AS grading_period_key,\n        to_hex(md5(cast(coalesce(cast(sessions.school_reference.school_id as \n    string\n), '') || '-' || coalesce(cast(sessions.school_year_type_reference.school_year as \n    string\n), '') || '-' || coalesce(cast(sessions.session_name as \n    string\n), '') as \n    string\n)))                                                                                   AS session_key,\n        to_hex(md5(cast(coalesce(cast(sessions.school_reference.school_id as \n    string\n), '') || '-' || coalesce(cast(sessions.school_year_type_reference.school_year as \n    string\n), '') as \n    string\n)))                                                                                   AS school_key,\n        sessions.school_year_type_reference.school_year                                         AS school_year,\n        grading_periods.grading_period_descriptor                                               AS grading_period_description,\n        grading_periods.period_sequence                                                         AS period_sequence,\n        grading_periods.begin_date                                                              AS grading_period_begin_date,\n        grading_periods.end_date                                                                AS grading_period_end_date,\n        grading_periods.total_instructional_days                                                AS total_instructional_day\n    FROM `gcp-proj-id`.`dev_staging`.`stg_edfi_sessions` sessions\n    LEFT JOIN UNNEST(sessions.grading_periods) sessions_grading_periods\n    LEFT JOIN `gcp-proj-id`.`dev_staging`.`stg_edfi_school_year_types` school_year_types\n        ON sessions.school_year_type_reference.school_year = school_year_types.school_year\n    LEFT JOIN `gcp-proj-id`.`dev_staging`.`stg_edfi_grading_periods` grading_periods\n        ON sessions.school_year_type_reference.school_year = grading_periods.school_year\n        AND sessions_grading_periods.grading_period_reference.grading_period_descriptor = grading_periods.grading_period_descriptor\n        AND sessions_grading_periods.grading_period_reference.period_sequence = grading_periods.period_sequence\n        AND sessions_grading_periods.grading_period_reference.school_id = grading_periods.school_reference.school_id\n    WHERE sessions_grading_periods.grading_period_reference.grading_period_descriptor != ''\n\n)\n\nSELECT DISTINCT\n    grading_period_key,\n    session_key,\n    school_key,\n    school_year,\n    grading_period_description,\n    period_sequence,\n    grading_period_begin_date,\n    grading_period_end_date,\n    total_instructional_days\nFROM grades_grading_periods_unioned", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_core`.`dim_grading_period`"}, "model.project.dim_school": {"raw_sql": "{{\r\n  config(\r\n    labels = {'analytics_middle_tier': 'yes'}\r\n  )\r\n}}\r\n\r\n\r\nSELECT\r\n    {{ dbt_utils.surrogate_key([\r\n        'schools.school_id',\r\n        'schools.school_year'\r\n    ]) }}                                   AS school_key,\r\n    {{ dbt_utils.surrogate_key([\r\n        'leas.local_education_agency_id',\r\n        'leas.school_year'\r\n    ]) }}                                   AS local_education_agency_key,\r\n    schools.school_year                     AS school_year,\r\n    schools.school_id                       AS school_id,\r\n    schools.name_of_institution             AS school_name,\r\n    schools.school_type_descriptor          AS school_type,\r\n    leas.name_of_institution                AS local_education_agency_name\r\nFROM {{ ref('stg_edfi_schools') }} schools\r\nLEFT JOIN {{ ref('stg_edfi_local_education_agencies') }} leas\r\n    ON schools.school_year = leas.school_year\r\n    AND leas.local_education_agency_id = schools.local_education_agency_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.project.stg_edfi_schools", "model.project.stg_edfi_local_education_agencies"]}, "config": {"enabled": true, "alias": null, "schema": "core", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"analytics_middle_tier": "yes"}, "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_core", "fqn": ["project", "marts", "core", "dim_school"], "unique_id": "model.project.dim_school", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "marts/core/dim_school.sql", "original_file_path": "models/marts/core/dim_school.sql", "name": "dim_school", "alias": "dim_school", "checksum": {"name": "sha256", "checksum": "5285d04ed80be065375859c81bc099ac0b171f3314c5da17929986252602022b"}, "tags": ["amt"], "refs": [["stg_edfi_schools"], ["stg_edfi_local_education_agencies"]], "sources": [], "description": "# School dim\n\nGrain: one row per school per school year", "columns": {"school_key": {"name": "school_key", "description": "Primary key for dimension table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "local_education_agency_key": {"name": "local_education_agency_key", "description": "Foreign key to `dim_local_education_agency`", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_id": {"name": "school_id", "description": "School unique identifier", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_name": {"name": "school_name", "description": "The name assigned to a school.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_type": {"name": "school_type", "description": "The type of education institution as classified by its primary focus.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "local_education_agency_name": {"name": "local_education_agency_name", "description": "The name assigned to a local education agency.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/marts/core/core.yml", "compiled_path": "target/compiled/project/models/marts/core/dim_school.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "tags": "amt", "schema": "core", "labels": {"analytics_middle_tier": "yes"}}, "created_at": 1643419470.5128434, "compiled_sql": "\n\n\nSELECT\n    to_hex(md5(cast(coalesce(cast(schools.school_id as \n    string\n), '') || '-' || coalesce(cast(schools.school_year as \n    string\n), '') as \n    string\n)))                                   AS school_key,\n    to_hex(md5(cast(coalesce(cast(leas.local_education_agency_id as \n    string\n), '') || '-' || coalesce(cast(leas.school_year as \n    string\n), '') as \n    string\n)))                                   AS local_education_agency_key,\n    schools.school_year                     AS school_year,\n    schools.school_id                       AS school_id,\n    schools.name_of_institution             AS school_name,\n    schools.school_type_descriptor          AS school_type,\n    leas.name_of_institution                AS local_education_agency_name\nFROM `gcp-proj-id`.`dev_staging`.`stg_edfi_schools` schools\nLEFT JOIN `gcp-proj-id`.`dev_staging`.`stg_edfi_local_education_agencies` leas\n    ON schools.school_year = leas.school_year\n    AND leas.local_education_agency_id = schools.local_education_agency_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_core`.`dim_school`"}, "model.project.dim_local_education_agency": {"raw_sql": "{{\r\n  config(\r\n    labels = {'analytics_middle_tier': 'yes'}\r\n  )\r\n}}\r\n\r\n\r\nSELECT\r\n    {{ dbt_utils.surrogate_key([\r\n        'local_education_agency_id',\r\n        'school_year'\r\n    ]) }}                               AS local_education_agency_key,\r\n    school_year                         AS school_year,\r\n    local_education_agency_id           AS local_education_agency_id,\r\n    name_of_institution                 AS local_education_agency_name\r\nFROM {{ ref('stg_edfi_local_education_agencies') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.project.stg_edfi_local_education_agencies"]}, "config": {"enabled": true, "alias": null, "schema": "core", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"analytics_middle_tier": "yes"}, "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_core", "fqn": ["project", "marts", "core", "dim_local_education_agency"], "unique_id": "model.project.dim_local_education_agency", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "marts/core/dim_local_education_agency.sql", "original_file_path": "models/marts/core/dim_local_education_agency.sql", "name": "dim_local_education_agency", "alias": "dim_local_education_agency", "checksum": {"name": "sha256", "checksum": "a47a9f86d95f0c3d72eea1377d8286068effe0b5e0db1be94c77f0efbdcf75c9"}, "tags": ["amt"], "refs": [["stg_edfi_local_education_agencies"]], "sources": [], "description": "# Local education agency dim\n\nGrain: one row per local education agency", "columns": {"local_education_agency_key": {"name": "local_education_agency_key", "description": "Primary key for dimension table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "local_education_agency_id": {"name": "local_education_agency_id", "description": "Unique identifier for local education agency", "meta": {}, "data_type": null, "quote": null, "tags": []}, "local_education_agency_name": {"name": "local_education_agency_name", "description": "The name assigned to a local education agency.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/marts/core/core.yml", "compiled_path": "target/compiled/project/models/marts/core/dim_local_education_agency.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "tags": "amt", "schema": "core", "labels": {"analytics_middle_tier": "yes"}}, "created_at": 1643419470.5105367, "compiled_sql": "\n\n\nSELECT\n    to_hex(md5(cast(coalesce(cast(local_education_agency_id as \n    string\n), '') || '-' || coalesce(cast(school_year as \n    string\n), '') as \n    string\n)))                               AS local_education_agency_key,\n    school_year                         AS school_year,\n    local_education_agency_id           AS local_education_agency_id,\n    name_of_institution                 AS local_education_agency_name\nFROM `gcp-proj-id`.`dev_staging`.`stg_edfi_local_education_agencies`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_core`.`dim_local_education_agency`"}, "model.project.dim_section": {"raw_sql": "{{\n  config(\n    labels = {'analytics_middle_tier': 'yes'}\n  )\n}}\n\n\nSELECT\n    {{ dbt_utils.surrogate_key([\n        'sections.course_offering_reference.school_id',\n        'sections.course_offering_reference.school_year',\n        'sections.course_offering_reference.session_name',\n        'sections.course_offering_reference.local_course_code',\n        'sections.section_identifier'\n    ]) }}                                                       AS section_key,\n    {{ dbt_utils.surrogate_key([\n        'stg_edfi_schools.local_education_agency_id',\n        'sections.course_offering_reference.school_year'\n    ]) }}                                                       AS local_education_agency_key,\n    {{ dbt_utils.surrogate_key([\n        'sections.course_offering_reference.school_id',\n        'sections.course_offering_reference.school_year'\n    ]) }}                                                       AS school_key,\n    {{ dbt_utils.surrogate_key([\n        'sections.course_offering_reference.school_id',\n        'sections.course_offering_reference.school_year',\n        'sections.course_offering_reference.session_name'\n    ]) }}                                                       AS session_key,\n    sections.section_identifier                                 AS section_identifier,\n    COALESCE(\n        sections.section_name,\n        CONCAT(\n            course_offering_reference.local_course_code, \"-\",\n            sessions.session_name\n        )\n    )                                                           AS section_name,\n    sessions.session_name                                       AS session_name,\n    course_offering_reference.local_course_code                 AS local_course_code,\n    courses.course_title                                        AS course_title,\n    courses.course_gpa_applicability_descriptor                 AS course_gpa_applicability,\n    course_offerings.session_reference.school_year              AS school_year,\n    sections.available_credits                                  AS available_credits\nFROM {{ ref('stg_edfi_sections') }} sections\nCROSS JOIN UNNEST(sections.class_periods) AS class_period\nLEFT JOIN {{ ref('stg_edfi_schools') }} stg_edfi_schools\n    ON sections.course_offering_reference.school_id = stg_edfi_schools.school_id\nLEFT JOIN {{ ref('stg_edfi_course_offerings') }} course_offerings\n    ON sections.school_year = course_offerings.school_year\n    AND course_offerings.local_course_code = sections.course_offering_reference.local_course_code\n    AND course_offerings.school_reference.school_id = sections.course_offering_reference.school_id\n    AND course_offerings.session_reference.school_year = sections.course_offering_reference.school_year\n    AND course_offerings.session_reference.session_name = sections.course_offering_reference.session_name\nLEFT JOIN {{ ref('stg_edfi_courses') }} courses\n    ON course_offerings.school_year = courses.school_year\n    AND courses.course_code = course_offerings.course_reference.course_code\n    AND courses.education_organization_reference.education_organization_id = course_offerings.course_reference.education_organization_id\nLEFT JOIN {{ ref('stg_edfi_sessions') }} sessions\n    ON course_offerings.session_reference.school_id = sessions.school_reference.school_id\n    AND course_offerings.session_reference.school_year = sessions.school_year_type_reference.school_year\n    AND course_offerings.session_reference.session_name = sessions.session_name", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.project.stg_edfi_sections", "model.project.stg_edfi_schools", "model.project.stg_edfi_course_offerings", "model.project.stg_edfi_courses", "model.project.stg_edfi_sessions"]}, "config": {"enabled": true, "alias": null, "schema": "core", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"analytics_middle_tier": "yes"}, "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_core", "fqn": ["project", "marts", "core", "dim_section"], "unique_id": "model.project.dim_section", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "marts/core/dim_section.sql", "original_file_path": "models/marts/core/dim_section.sql", "name": "dim_section", "alias": "dim_section", "checksum": {"name": "sha256", "checksum": "a3ace9779e03a4f5d6813f69636c60b40f43887042213bbb5134b1be0c4ac18c"}, "tags": ["amt"], "refs": [["stg_edfi_sections"], ["stg_edfi_schools"], ["stg_edfi_course_offerings"], ["stg_edfi_courses"], ["stg_edfi_sessions"]], "sources": [], "description": "# Section dim\n\nGrain: one row per section per school\n\n---------------------------\nDifferences from Ed-Fi AMT\n* Removes `description`\n* Adds `section_identifier` to allow for a natural key for section id", "columns": {"section_key": {"name": "section_key", "description": "Primary key for dimension table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "local_education_agency_key": {"name": "local_education_agency_key", "description": "Foreign key to `dim_local_education_agency`", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_key": {"name": "school_key", "description": "Foreign key to `dim_school`", "meta": {}, "data_type": null, "quote": null, "tags": []}, "session_key": {"name": "session_key", "description": "Foreign key to `dim_session`", "meta": {}, "data_type": null, "quote": null, "tags": []}, "section_identifier": {"name": "section_identifier", "description": "Section unique identifier", "meta": {}, "data_type": null, "quote": null, "tags": []}, "section_name": {"name": "section_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "session_name": {"name": "session_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "local_course_code": {"name": "local_course_code", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "course_title": {"name": "course_title", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_year": {"name": "school_year", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/marts/core/core.yml", "compiled_path": "target/compiled/project/models/marts/core/dim_section.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "tags": "amt", "schema": "core", "labels": {"analytics_middle_tier": "yes"}}, "created_at": 1643419470.5161464, "compiled_sql": "\n\n\nSELECT\n    to_hex(md5(cast(coalesce(cast(sections.course_offering_reference.school_id as \n    string\n), '') || '-' || coalesce(cast(sections.course_offering_reference.school_year as \n    string\n), '') || '-' || coalesce(cast(sections.course_offering_reference.session_name as \n    string\n), '') || '-' || coalesce(cast(sections.course_offering_reference.local_course_code as \n    string\n), '') || '-' || coalesce(cast(sections.section_identifier as \n    string\n), '') as \n    string\n)))                                                       AS section_key,\n    to_hex(md5(cast(coalesce(cast(stg_edfi_schools.local_education_agency_id as \n    string\n), '') || '-' || coalesce(cast(sections.course_offering_reference.school_year as \n    string\n), '') as \n    string\n)))                                                       AS local_education_agency_key,\n    to_hex(md5(cast(coalesce(cast(sections.course_offering_reference.school_id as \n    string\n), '') || '-' || coalesce(cast(sections.course_offering_reference.school_year as \n    string\n), '') as \n    string\n)))                                                       AS school_key,\n    to_hex(md5(cast(coalesce(cast(sections.course_offering_reference.school_id as \n    string\n), '') || '-' || coalesce(cast(sections.course_offering_reference.school_year as \n    string\n), '') || '-' || coalesce(cast(sections.course_offering_reference.session_name as \n    string\n), '') as \n    string\n)))                                                       AS session_key,\n    sections.section_identifier                                 AS section_identifier,\n    COALESCE(\n        sections.section_name,\n        CONCAT(\n            course_offering_reference.local_course_code, \"-\",\n            sessions.session_name\n        )\n    )                                                           AS section_name,\n    sessions.session_name                                       AS session_name,\n    course_offering_reference.local_course_code                 AS local_course_code,\n    courses.course_title                                        AS course_title,\n    courses.course_gpa_applicability_descriptor                 AS course_gpa_applicability,\n    course_offerings.session_reference.school_year              AS school_year,\n    sections.available_credits                                  AS available_credits\nFROM `gcp-proj-id`.`dev_staging`.`stg_edfi_sections` sections\nCROSS JOIN UNNEST(sections.class_periods) AS class_period\nLEFT JOIN `gcp-proj-id`.`dev_staging`.`stg_edfi_schools` stg_edfi_schools\n    ON sections.course_offering_reference.school_id = stg_edfi_schools.school_id\nLEFT JOIN `gcp-proj-id`.`dev_staging`.`stg_edfi_course_offerings` course_offerings\n    ON sections.school_year = course_offerings.school_year\n    AND course_offerings.local_course_code = sections.course_offering_reference.local_course_code\n    AND course_offerings.school_reference.school_id = sections.course_offering_reference.school_id\n    AND course_offerings.session_reference.school_year = sections.course_offering_reference.school_year\n    AND course_offerings.session_reference.session_name = sections.course_offering_reference.session_name\nLEFT JOIN `gcp-proj-id`.`dev_staging`.`stg_edfi_courses` courses\n    ON course_offerings.school_year = courses.school_year\n    AND courses.course_code = course_offerings.course_reference.course_code\n    AND courses.education_organization_reference.education_organization_id = course_offerings.course_reference.education_organization_id\nLEFT JOIN `gcp-proj-id`.`dev_staging`.`stg_edfi_sessions` sessions\n    ON course_offerings.session_reference.school_id = sessions.school_reference.school_id\n    AND course_offerings.session_reference.school_year = sessions.school_year_type_reference.school_year\n    AND course_offerings.session_reference.session_name = sessions.session_name", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_core`.`dim_section`"}, "model.project.dim_session": {"raw_sql": "SELECT\n    {{ dbt_utils.surrogate_key([\n        'sessions.school_reference.school_id',\n        'sessions.school_year_type_reference.school_year',\n        'sessions.session_name'\n    ]) }}                                                                                   AS session_key,\n    {{ dbt_utils.surrogate_key([\n        'sessions.school_reference.school_id',\n        'sessions.school_year_type_reference.school_year'\n    ]) }}                                                                                   AS school_key,\n    sessions.school_year_type_reference.school_year                                         AS school_year,\n    school_year_types.school_year_description                                               AS school_year_name,\n    sessions.session_name                                                                   AS session_name,\n    sessions.term_descriptor                                                                AS term_name,\n    sessions.total_instructional_days                                                       AS total_instructional_days,\n    sessions.begin_date                                                                     AS session_begin_date,\n    sessions.end_date                                                                       AS session_end_date\nFROM {{ ref('stg_edfi_sessions') }} sessions\nLEFT JOIN {{ ref('stg_edfi_school_year_types') }} school_year_types\n    ON sessions.school_year_type_reference.school_year = school_year_types.school_year", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.project.stg_edfi_sessions", "model.project.stg_edfi_school_year_types"]}, "config": {"enabled": true, "alias": null, "schema": "core", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_core", "fqn": ["project", "marts", "core", "dim_session"], "unique_id": "model.project.dim_session", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "marts/core/dim_session.sql", "original_file_path": "models/marts/core/dim_session.sql", "name": "dim_session", "alias": "dim_session", "checksum": {"name": "sha256", "checksum": "b7020dda738bf1d3a8f0f5a8e4a913aac048e0d849d6f2c5b155f3190afa7646"}, "tags": ["amt"], "refs": [["stg_edfi_sessions"], ["stg_edfi_school_year_types"]], "sources": [], "description": "# Session dim\n\nGrain: one row per school per session\n\n---------------------------\nDifferences from Ed-Fi AMT\n* Adds `total_instructional_days`\n* Adds `session_begin_date`\n* Adds `session_end_date`", "columns": {"session_key": {"name": "session_key", "description": "Primary key for dimension table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_key": {"name": "school_key", "description": "Foreign key to `dim_school`", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_year": {"name": "school_year", "description": "Four-digit school year", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_year_name": {"name": "school_year_name", "description": "School year name (ie. 2021-2022)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "session_name": {"name": "session_name", "description": "Session name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "term_name": {"name": "term_name", "description": "Ed-Fi term descriptor", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_instructional_days": {"name": "total_instructional_days", "description": "Number of instructional days for the sesssion", "meta": {}, "data_type": null, "quote": null, "tags": []}, "session_begin_date": {"name": "session_begin_date", "description": "Session begin date", "meta": {}, "data_type": null, "quote": null, "tags": []}, "session_end_date": {"name": "session_end_date", "description": "Session end date", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/marts/core/core.yml", "compiled_path": "target/compiled/project/models/marts/core/dim_session.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "tags": "amt", "schema": "core"}, "created_at": 1643419470.5190833, "compiled_sql": "SELECT\n    to_hex(md5(cast(coalesce(cast(sessions.school_reference.school_id as \n    string\n), '') || '-' || coalesce(cast(sessions.school_year_type_reference.school_year as \n    string\n), '') || '-' || coalesce(cast(sessions.session_name as \n    string\n), '') as \n    string\n)))                                                                                   AS session_key,\n    to_hex(md5(cast(coalesce(cast(sessions.school_reference.school_id as \n    string\n), '') || '-' || coalesce(cast(sessions.school_year_type_reference.school_year as \n    string\n), '') as \n    string\n)))                                                                                   AS school_key,\n    sessions.school_year_type_reference.school_year                                         AS school_year,\n    school_year_types.school_year_description                                               AS school_year_name,\n    sessions.session_name                                                                   AS session_name,\n    sessions.term_descriptor                                                                AS term_name,\n    sessions.total_instructional_days                                                       AS total_instructional_days,\n    sessions.begin_date                                                                     AS session_begin_date,\n    sessions.end_date                                                                       AS session_end_date\nFROM `gcp-proj-id`.`dev_staging`.`stg_edfi_sessions` sessions\nLEFT JOIN `gcp-proj-id`.`dev_staging`.`stg_edfi_school_year_types` school_year_types\n    ON sessions.school_year_type_reference.school_year = school_year_types.school_year", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_core`.`dim_session`"}, "model.project.dim_demographic": {"raw_sql": "{{\r\n  config(\r\n    labels = {'analytics_middle_tier': 'yes'}\r\n  )\r\n}}\r\n\r\n\r\nSELECT DISTINCT\r\n    {{ dbt_utils.surrogate_key([\r\n        'school_year_types.school_year',\r\n        'descriptors.code_value'\r\n    ]) }}                                                                     AS demographic_key,\r\n    'CohortYear'                                                              AS demographic_parent,\r\n    CONCAT(school_year_types.school_year, '-', descriptors.short_description) AS demographic_label\r\nFROM {{ ref('stg_edfi_school_year_types') }} school_year_types\r\nCROSS JOIN {{ ref('stg_edfi_descriptors') }} descriptors\r\nWHERE descriptors.namespace LIKE '%CohortTypeDescriptor'\r\n\r\nUNION ALL\r\n\r\nSELECT DISTINCT\r\n    {{ dbt_utils.surrogate_key([\r\n        'descriptors.code_value'\r\n    ]) }}                                       AS demographic_key,\r\n    'Language'                                  AS demographic_parent,\r\n    descriptors.short_description               AS demographic_label\r\nFROM {{ ref('stg_edfi_descriptors') }} descriptors\r\nWHERE descriptors.namespace LIKE '%LanguageDescriptor'\r\n\r\nUNION ALL\r\n\r\nSELECT DISTINCT\r\n    {{ dbt_utils.surrogate_key([\r\n        'descriptors.code_value'\r\n    ]) }}                                     AS demographic_key,\r\n    'LanguageUse'                             AS demographic_parent,\r\n    descriptors.short_description             AS demographic_label\r\nFROM  {{ ref('stg_edfi_descriptors') }} descriptors\r\nWHERE descriptors.namespace LIKE '%LanguageUseDescriptor'\r\n\r\nUNION ALL\r\n\r\nSELECT DISTINCT\r\n    {{ dbt_utils.surrogate_key([\r\n        'descriptors.code_value'\r\n    ]) }}                                   AS demographic_key,\r\n    'Race'                                  AS demographic_parent,\r\n    descriptors.short_description           AS demographic_label\r\nFROM {{ ref('stg_edfi_descriptors') }} descriptors\r\nWHERE descriptors.namespace LIKE '%RaceDescriptor'", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.project.stg_edfi_school_year_types", "model.project.stg_edfi_descriptors", "model.project.stg_edfi_descriptors", "model.project.stg_edfi_descriptors", "model.project.stg_edfi_descriptors"]}, "config": {"enabled": true, "alias": null, "schema": "core", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"analytics_middle_tier": "yes"}, "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_core", "fqn": ["project", "marts", "core", "dim_demographic"], "unique_id": "model.project.dim_demographic", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "marts/core/dim_demographic.sql", "original_file_path": "models/marts/core/dim_demographic.sql", "name": "dim_demographic", "alias": "dim_demographic", "checksum": {"name": "sha256", "checksum": "06861c8d4e6e37dbea61631ed3dffba7915e4716f0e6b1a38a5bbc6afbe0ed06"}, "tags": ["amt"], "refs": [["stg_edfi_school_year_types"], ["stg_edfi_descriptors"], ["stg_edfi_descriptors"], ["stg_edfi_descriptors"], ["stg_edfi_descriptors"]], "sources": [], "description": "# Demographic dim\n\nGrain: one row per descriptor parent key and descriptor\n\nThis table is usually joined to the student demographic bridge tables.\n\n---------------------------\nDifferences from Ed-Fi AMT\n* The descriptor's short description is used in place of code value for the demographic label\n* Renames `demographic_parent_key` to `demographic_parent`", "columns": {"demographic_key": {"name": "demographic_key", "description": "Primary key for dimension table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "demographic_parent": {"name": "demographic_parent", "description": "Descriptor parent. For example, 'RaceDescriptors' will show 'Race'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "demographic_label": {"name": "demographic_label", "description": "Short description of the descriptor", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/marts/core/core.yml", "compiled_path": "target/compiled/project/models/marts/core/dim_demographic.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "tags": "amt", "schema": "core", "labels": {"analytics_middle_tier": "yes"}}, "created_at": 1643419470.506246, "compiled_sql": "\n\n\nSELECT DISTINCT\n    to_hex(md5(cast(coalesce(cast(school_year_types.school_year as \n    string\n), '') || '-' || coalesce(cast(descriptors.code_value as \n    string\n), '') as \n    string\n)))                                                                     AS demographic_key,\n    'CohortYear'                                                              AS demographic_parent,\n    CONCAT(school_year_types.school_year, '-', descriptors.short_description) AS demographic_label\nFROM `gcp-proj-id`.`dev_staging`.`stg_edfi_school_year_types` school_year_types\nCROSS JOIN `gcp-proj-id`.`dev_staging`.`stg_edfi_descriptors` descriptors\nWHERE descriptors.namespace LIKE '%CohortTypeDescriptor'\n\nUNION ALL\n\nSELECT DISTINCT\n    to_hex(md5(cast(coalesce(cast(descriptors.code_value as \n    string\n), '') as \n    string\n)))                                       AS demographic_key,\n    'Language'                                  AS demographic_parent,\n    descriptors.short_description               AS demographic_label\nFROM `gcp-proj-id`.`dev_staging`.`stg_edfi_descriptors` descriptors\nWHERE descriptors.namespace LIKE '%LanguageDescriptor'\n\nUNION ALL\n\nSELECT DISTINCT\n    to_hex(md5(cast(coalesce(cast(descriptors.code_value as \n    string\n), '') as \n    string\n)))                                     AS demographic_key,\n    'LanguageUse'                             AS demographic_parent,\n    descriptors.short_description             AS demographic_label\nFROM  `gcp-proj-id`.`dev_staging`.`stg_edfi_descriptors` descriptors\nWHERE descriptors.namespace LIKE '%LanguageUseDescriptor'\n\nUNION ALL\n\nSELECT DISTINCT\n    to_hex(md5(cast(coalesce(cast(descriptors.code_value as \n    string\n), '') as \n    string\n)))                                   AS demographic_key,\n    'Race'                                  AS demographic_parent,\n    descriptors.short_description           AS demographic_label\nFROM `gcp-proj-id`.`dev_staging`.`stg_edfi_descriptors` descriptors\nWHERE descriptors.namespace LIKE '%RaceDescriptor'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_core`.`dim_demographic`"}, "model.project.dim_student": {"raw_sql": "WITH school_year_end_dates AS (\n\n    SELECT\n        school_year_type_reference.school_year,\n        school_reference.school_id,\n        MAX(end_date) AS school_year_end_date\n    FROM {{ ref('stg_edfi_sessions') }}\n    GROUP BY 1, 2\n\n\n),\n\nactive_enrollments AS (\n\n    SELECT\n        student_school_associations.student_reference.student_unique_id            AS student_unique_id,\n        student_school_associations.school_year_type_reference.school_year         AS school_year,\n        'Yes'                                                                      AS is_actively_enrolled\n    FROM {{ ref('stg_edfi_student_school_associations') }} student_school_associations\n    LEFT JOIN school_year_end_dates\n        ON student_school_associations.school_year_type_reference.school_year = school_year_end_dates.school_year\n        AND student_school_associations.school_reference.school_id = school_year_end_dates.school_id\n    WHERE\n        student_school_associations.exit_withdraw_date IS NULL\n        OR (\n            -- active enrollment for current year\n            CURRENT_DATE >= student_school_associations.entry_date\n            AND CURRENT_DATE < student_school_associations.exit_withdraw_date\n        )\n        -- if student exited a previous year on the final day of the session\n        -- replace school_year_end_dates.school_year_end_date with DATE 'YYYY-MM-DD' if MAX session end date does\n        -- not represent school year end date\n        OR student_school_associations.exit_withdraw_date >= school_year_end_dates.school_year_end_date\n\n),\n\nstudent_grade_level_ranked AS (\n\n    SELECT\n        school_year_type_reference.school_year,\n        student_reference.student_unique_id,\n        {{ convert_grade_level_to_short_label('entry_grade_level_descriptor') }}     AS grade_level,\n        {{ convert_grade_level_to_id('entry_grade_level_descriptor') }}              AS grade_level_id,\n        ROW_NUMBER() OVER (\n            PARTITION BY\n                student_reference.student_unique_id,\n                school_year_type_reference.school_year\n            ORDER BY\n                school_year_type_reference.school_year DESC,\n                student_reference.student_unique_id,\n                entry_date DESC\n        ) AS rank,\n    FROM {{ ref('stg_edfi_student_school_associations') }}\n\n),\n\nstudent_grade_level AS (\n\n    SELECT * FROM student_grade_level_ranked WHERE rank = 1\n\n)\n\nSELECT DISTINCT\n    {{ dbt_utils.surrogate_key([\n            'students.student_unique_id',\n            'students.school_year'\n    ]) }}                                                           AS student_key,\n    students.school_year                                            AS school_year,\n    students.student_unique_id                                      AS student_unique_id,\n    students.first_name                                             AS student_first_name,\n    students.middle_name                                            AS student_middle_name,\n    students.last_surname                                           AS student_last_surname,\n    CONCAT(\n        students.last_surname, ', ',\n        students.first_name, ' ',\n        COALESCE(LEFT(students.middle_name, 1), '')\n    )                                                               AS student_display_name,\n    seoa.electronic_mail[SAFE_OFFSET(0)].address                    AS email,\n    IFNULL(active_enrollments.is_actively_enrolled, 'No')           AS is_actively_enrolled,\n    student_grade_level.grade_level                                 AS grade_level,\n    student_grade_level.grade_level_id                              AS grade_level_id,\n    COALESCE(\n        seoa.limited_english_proficiency_descriptor,\n        'Not applicable'\n    )                                                               AS limited_english_proficiency,\n    IF(\n        seoa.limited_english_proficiency_descriptor = \"Limited\",\n        \"Yes\",\n        \"No\"\n    )                                                               AS is_english_language_learner,\n    IF (\n        edfi_programs.program_name IS NOT NULL,\n        \"Yes\",\n        \"No\"\n    )                                                               AS in_special_education_program,\n    IF(seoa.hispanic_latino_ethnicity IS TRUE, 'Yes', 'No')         AS is_hispanic,\n    CASE\n        WHEN seoa.hispanic_latino_ethnicity IS TRUE THEN 'Hispanic or Latino'\n        WHEN ARRAY_LENGTH(seoa.races) > 1 THEN 'Two or more races'\n        WHEN EXISTS(SELECT * FROM UNNEST(races) AS race WHERE race.race_descriptor = 'Asian') THEN 'Asian'\n        WHEN EXISTS(SELECT * FROM UNNEST(races) AS race WHERE race.race_descriptor = 'White') THEN 'White'\n        WHEN EXISTS(SELECT * FROM UNNEST(races) AS race WHERE race.race_descriptor = 'Choose Not to Respond') THEN 'Choose Not to Respond'\n        WHEN EXISTS(SELECT * FROM UNNEST(races) AS race WHERE race.race_descriptor = 'American Indian - Alaska Native') THEN 'American Indian - Alaska Native'\n        WHEN EXISTS(SELECT * FROM UNNEST(races) AS race WHERE race.race_descriptor = 'Black - African American') THEN 'Black - African American'\n        WHEN EXISTS(SELECT * FROM UNNEST(races) AS race WHERE race.race_descriptor = 'Native Hawaiian - Pacific Islander') THEN 'Native Hawaiian - Pacific Islander'\n        ELSE 'Unknown'\n    END                                                             AS race_and_ethnicity_roll_up,\n    seoa.sex_descriptor                                             AS gender,\n    students.birth_date                                             AS birth_date\nFROM {{ ref('stg_edfi_students') }} students\nLEFT JOIN {{ ref('stg_edfi_student_education_organization_associations') }} seoa \n    ON students.student_unique_id = seoa.student_reference.student_unique_id\n    AND students.school_year = seoa.school_year\nLEFT JOIN {{ ref('stg_edfi_student_special_education_program_associations') }} edfi_student_sped_associations\n    ON students.school_year = edfi_student_sped_associations.school_year\n    AND seoa.education_organization_reference.education_organization_id = edfi_student_sped_associations.program_reference.education_organization_id\n    AND students.student_unique_id = edfi_student_sped_associations.student_reference.student_unique_id\nLEFT JOIN {{ ref('stg_edfi_programs') }} edfi_programs\n    ON edfi_student_sped_associations.school_year = edfi_programs.school_year\n    AND edfi_student_sped_associations.program_reference.program_type_descriptor = edfi_programs.program_type_descriptor\n    AND edfi_student_sped_associations.program_reference.education_organization_id = edfi_programs.education_organization_reference.education_organization_id\n    AND edfi_programs.program_name = \"Special Education\"\nLEFT JOIN active_enrollments\n    ON students.student_unique_id = active_enrollments.student_unique_id\n    AND students.school_year = active_enrollments.school_year\nLEFT JOIN student_grade_level\n    ON students.student_unique_id = student_grade_level.student_unique_id\n    AND students.school_year = student_grade_level.school_year", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.project.convert_grade_level_to_short_label", "macro.project.convert_grade_level_to_id", "macro.dbt_utils.surrogate_key"], "nodes": ["model.project.stg_edfi_sessions", "model.project.stg_edfi_student_school_associations", "model.project.stg_edfi_student_school_associations", "model.project.stg_edfi_students", "model.project.stg_edfi_student_education_organization_associations", "model.project.stg_edfi_student_special_education_program_associations", "model.project.stg_edfi_programs"]}, "config": {"enabled": true, "alias": null, "schema": "core", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_core", "fqn": ["project", "marts", "core", "dim_student"], "unique_id": "model.project.dim_student", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "marts/core/dim_student.sql", "original_file_path": "models/marts/core/dim_student.sql", "name": "dim_student", "alias": "dim_student", "checksum": {"name": "sha256", "checksum": "932b68efa5e1087dfa52ef6ab66a267ad86dc7dc08012d0f11589703ddd815ff"}, "tags": ["amt"], "refs": [["stg_edfi_sessions"], ["stg_edfi_student_school_associations"], ["stg_edfi_student_school_associations"], ["stg_edfi_students"], ["stg_edfi_student_education_organization_associations"], ["stg_edfi_student_special_education_program_associations"], ["stg_edfi_programs"]], "sources": [], "description": "# Student dim\n\nGrain: one record per student\n\nEd-Fi's Analytics Middle Tier provides two student dims related to the student's LEA association and the student's school association. This dim combines those two dims to provide one student dim that can be used downstream. If a student has multiple school enrollments, only their most recent will show in this dim.", "columns": {"student_key": {"name": "student_key", "description": "Primary key for dimension table. This surrogate key is based on the student's unique id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_year": {"name": "school_year", "description": "School year", "meta": {}, "data_type": null, "quote": null, "tags": []}, "student_unique_id": {"name": "student_unique_id", "description": "Student unique identifier", "meta": {}, "data_type": null, "quote": null, "tags": []}, "student_last_surname": {"name": "student_last_surname", "description": "The name borne in common by members of a family.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "student_first_name": {"name": "student_first_name", "description": "A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "student_display_name": {"name": "student_display_name", "description": "Concatenation of student's last name, first name, and first letter of middle name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "Student email", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_enrollment_date": {"name": "school_enrollment_date", "description": "The date the student began their school enrollment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_exit_date": {"name": "school_exit_date", "description": "Typically the day after the student concluded their final day of enrollment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_enrolled_at_school": {"name": "is_enrolled_at_school", "description": "0 or 1 depending on if the student holds an active enrollment at the school", "meta": {}, "data_type": null, "quote": null, "tags": []}, "grade_level": {"name": "grade_level", "description": "Grade level label", "meta": {}, "data_type": null, "quote": null, "tags": []}, "grade_level_id": {"name": "grade_level_id", "description": "Grade level id useful for sorting dropdowns in bi tools", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gender": {"name": "gender", "description": "The student's gender as last reported to the education organization", "meta": {}, "data_type": null, "quote": null, "tags": []}, "limited_english_proficiency": {"name": "limited_english_proficiency", "description": "An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_english_language_learner": {"name": "is_english_language_learner", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "in_special_education_program": {"name": "in_special_education_program", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_hispanic": {"name": "is_hispanic", "description": "An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race, as last reported to the education organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "race": {"name": "race", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "race_and_ethnicity_roll_up": {"name": "race_and_ethnicity_roll_up", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/marts/core/core.yml", "compiled_path": "target/compiled/project/models/marts/core/dim_student.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "tags": "amt", "schema": "core"}, "created_at": 1643419470.524988, "compiled_sql": "WITH school_year_end_dates AS (\n\n    SELECT\n        school_year_type_reference.school_year,\n        school_reference.school_id,\n        MAX(end_date) AS school_year_end_date\n    FROM `gcp-proj-id`.`dev_staging`.`stg_edfi_sessions`\n    GROUP BY 1, 2\n\n\n),\n\nactive_enrollments AS (\n\n    SELECT\n        student_school_associations.student_reference.student_unique_id            AS student_unique_id,\n        student_school_associations.school_year_type_reference.school_year         AS school_year,\n        'Yes'                                                                      AS is_actively_enrolled\n    FROM `gcp-proj-id`.`dev_staging`.`stg_edfi_student_school_associations` student_school_associations\n    LEFT JOIN school_year_end_dates\n        ON student_school_associations.school_year_type_reference.school_year = school_year_end_dates.school_year\n        AND student_school_associations.school_reference.school_id = school_year_end_dates.school_id\n    WHERE\n        student_school_associations.exit_withdraw_date IS NULL\n        OR (\n            -- active enrollment for current year\n            CURRENT_DATE >= student_school_associations.entry_date\n            AND CURRENT_DATE < student_school_associations.exit_withdraw_date\n        )\n        -- if student exited a previous year on the final day of the session\n        -- replace school_year_end_dates.school_year_end_date with DATE 'YYYY-MM-DD' if MAX session end date does\n        -- not represent school year end date\n        OR student_school_associations.exit_withdraw_date >= school_year_end_dates.school_year_end_date\n\n),\n\nstudent_grade_level_ranked AS (\n\n    SELECT\n        school_year_type_reference.school_year,\n        student_reference.student_unique_id,\n        \n    CASE entry_grade_level_descriptor\n        WHEN 'Infant/toddler'            THEN 'Infant'\n        WHEN 'Preschool/Prekindergarten' THEN 'PreK'\n        WHEN 'Kindergarten'              THEN 'K'\n        WHEN 'First grade'               THEN '1'\n        WHEN 'Second grade'              THEN '2'\n        WHEN 'Third grade'               THEN '3'\n        WHEN 'Fourth grade'              THEN '4'\n        WHEN 'Fifth grade'               THEN '5'\n        WHEN 'Sixth grade'               THEN '6'\n        WHEN 'Seventh grade'             THEN '7'\n        WHEN 'Eighth grade'              THEN '8'\n        WHEN 'Ninth grade'               THEN '9'\n        WHEN 'Tenth grade'               THEN '10'\n        WHEN 'Eleventh grade'            THEN '11'\n        WHEN 'Twelfth grade'             THEN '12'\n        ELSE '999999999'\n    END\n     AS grade_level,\n        \n    CASE entry_grade_level_descriptor\n        WHEN 'Infant/toddler'            THEN -3\n        WHEN 'Preschool/Prekindergarten' THEN -2\n        WHEN 'Kindergarten'              THEN -1\n        WHEN 'First grade'               THEN 1\n        WHEN 'Second grade'              THEN 2\n        WHEN 'Third grade'               THEN 3\n        WHEN 'Fourth grade'              THEN 4\n        WHEN 'Fifth grade'               THEN 5\n        WHEN 'Sixth grade'               THEN 6\n        WHEN 'Seventh grade'             THEN 7\n        WHEN 'Eighth grade'              THEN 8\n        WHEN 'Ninth grade'               THEN 9\n        WHEN 'Tenth grade'               THEN 10\n        WHEN 'Eleventh grade'            THEN 11\n        WHEN 'Twelfth grade'             THEN 12\n        ELSE 999999999\n    END\n              AS grade_level_id,\n        ROW_NUMBER() OVER (\n            PARTITION BY\n                student_reference.student_unique_id,\n                school_year_type_reference.school_year\n            ORDER BY\n                school_year_type_reference.school_year DESC,\n                student_reference.student_unique_id,\n                entry_date DESC\n        ) AS rank,\n    FROM `gcp-proj-id`.`dev_staging`.`stg_edfi_student_school_associations`\n\n),\n\nstudent_grade_level AS (\n\n    SELECT * FROM student_grade_level_ranked WHERE rank = 1\n\n)\n\nSELECT DISTINCT\n    to_hex(md5(cast(coalesce(cast(students.student_unique_id as \n    string\n), '') || '-' || coalesce(cast(students.school_year as \n    string\n), '') as \n    string\n)))                                                           AS student_key,\n    students.school_year                                            AS school_year,\n    students.student_unique_id                                      AS student_unique_id,\n    students.first_name                                             AS student_first_name,\n    students.middle_name                                            AS student_middle_name,\n    students.last_surname                                           AS student_last_surname,\n    CONCAT(\n        students.last_surname, ', ',\n        students.first_name, ' ',\n        COALESCE(LEFT(students.middle_name, 1), '')\n    )                                                               AS student_display_name,\n    seoa.electronic_mail[SAFE_OFFSET(0)].address                    AS email,\n    IFNULL(active_enrollments.is_actively_enrolled, 'No')           AS is_actively_enrolled,\n    student_grade_level.grade_level                                 AS grade_level,\n    student_grade_level.grade_level_id                              AS grade_level_id,\n    COALESCE(\n        seoa.limited_english_proficiency_descriptor,\n        'Not applicable'\n    )                                                               AS limited_english_proficiency,\n    IF(\n        seoa.limited_english_proficiency_descriptor = \"Limited\",\n        \"Yes\",\n        \"No\"\n    )                                                               AS is_english_language_learner,\n    IF (\n        edfi_programs.program_name IS NOT NULL,\n        \"Yes\",\n        \"No\"\n    )                                                               AS in_special_education_program,\n    IF(seoa.hispanic_latino_ethnicity IS TRUE, 'Yes', 'No')         AS is_hispanic,\n    CASE\n        WHEN seoa.hispanic_latino_ethnicity IS TRUE THEN 'Hispanic or Latino'\n        WHEN ARRAY_LENGTH(seoa.races) > 1 THEN 'Two or more races'\n        WHEN EXISTS(SELECT * FROM UNNEST(races) AS race WHERE race.race_descriptor = 'Asian') THEN 'Asian'\n        WHEN EXISTS(SELECT * FROM UNNEST(races) AS race WHERE race.race_descriptor = 'White') THEN 'White'\n        WHEN EXISTS(SELECT * FROM UNNEST(races) AS race WHERE race.race_descriptor = 'Choose Not to Respond') THEN 'Choose Not to Respond'\n        WHEN EXISTS(SELECT * FROM UNNEST(races) AS race WHERE race.race_descriptor = 'American Indian - Alaska Native') THEN 'American Indian - Alaska Native'\n        WHEN EXISTS(SELECT * FROM UNNEST(races) AS race WHERE race.race_descriptor = 'Black - African American') THEN 'Black - African American'\n        WHEN EXISTS(SELECT * FROM UNNEST(races) AS race WHERE race.race_descriptor = 'Native Hawaiian - Pacific Islander') THEN 'Native Hawaiian - Pacific Islander'\n        ELSE 'Unknown'\n    END                                                             AS race_and_ethnicity_roll_up,\n    seoa.sex_descriptor                                             AS gender,\n    students.birth_date                                             AS birth_date\nFROM `gcp-proj-id`.`dev_staging`.`stg_edfi_students` students\nLEFT JOIN `gcp-proj-id`.`dev_staging`.`stg_edfi_student_education_organization_associations` seoa \n    ON students.student_unique_id = seoa.student_reference.student_unique_id\n    AND students.school_year = seoa.school_year\nLEFT JOIN `gcp-proj-id`.`dev_staging`.`stg_edfi_student_special_education_program_associations` edfi_student_sped_associations\n    ON students.school_year = edfi_student_sped_associations.school_year\n    AND seoa.education_organization_reference.education_organization_id = edfi_student_sped_associations.program_reference.education_organization_id\n    AND students.student_unique_id = edfi_student_sped_associations.student_reference.student_unique_id\nLEFT JOIN `gcp-proj-id`.`dev_staging`.`stg_edfi_programs` edfi_programs\n    ON edfi_student_sped_associations.school_year = edfi_programs.school_year\n    AND edfi_student_sped_associations.program_reference.program_type_descriptor = edfi_programs.program_type_descriptor\n    AND edfi_student_sped_associations.program_reference.education_organization_id = edfi_programs.education_organization_reference.education_organization_id\n    AND edfi_programs.program_name = \"Special Education\"\nLEFT JOIN active_enrollments\n    ON students.student_unique_id = active_enrollments.student_unique_id\n    AND students.school_year = active_enrollments.school_year\nLEFT JOIN student_grade_level\n    ON students.student_unique_id = student_grade_level.student_unique_id\n    AND students.school_year = student_grade_level.school_year", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_core`.`dim_student`"}, "model.project.is_chronically_absent": {"raw_sql": "WITH student_attendance AS (\r\n\r\n    SELECT\r\n        student_key                                     AS student_key,\r\n        school_key                                      AS school_key,\r\n        school_year                                     AS school_year,\r\n        SUM(event_duration)                             AS sum_of_absences,\r\n        {# SUM(reported_as_absent_from_school) AS sum_of_absences, #} -- alternative if event duration is not used \r\n        COUNT(1)                                        AS number_of_days_enrolled,\r\n        (COUNT(1) - SUM(event_duration)) / COUNT(1)     AS average_daily_attendance\r\n    FROM {{ ref('fct_student_attendance') }}\r\n    GROUP BY 1, 2, 3\r\n\r\n)\r\n\r\nSELECT\r\n    student_attendance.school_year                                                     AS school_year,\r\n    student_attendance.school_key                                                      AS school_key,\r\n    student_attendance.student_key                                                     AS student_key,\r\n    IF(student_attendance.sum_of_absences >= 15, 1, 0)                                 AS is_chronically_absent,\r\n    IF(student_attendance.average_daily_attendance < 0.92, 1, 0)                       AS early_warning,\r\n    dim_local_education_agency.local_education_agency_name                             AS local_education_agency_name,\r\n    dim_school.school_name                                      AS school_name,\r\n    dim_student.student_last_surname                            AS student_last_surname,\r\n    dim_student.student_first_name                              AS student_first_name,\r\n    dim_student.student_display_name                            AS student_display_name,\r\n    dim_student.is_actively_enrolled                            AS is_actively_enrolled,\r\n    dim_student.grade_level                                     AS grade_level,\r\n    dim_student.gender                                          AS gender,\r\n    dim_student.limited_english_proficiency                     AS limited_english_proficiency,\r\n    dim_student.is_english_language_learner                     AS is_english_language_learner,\r\n    dim_student.in_special_education_program                    AS in_special_education_program,\r\n    dim_student.is_hispanic                                     AS is_hispanic,\r\n    dim_student.race_and_ethnicity_roll_up                      AS race_and_ethnicity_roll_up\r\nFROM student_attendance\r\nLEFT JOIN {{ ref('dim_student') }} dim_student\r\n    ON student_attendance.student_key = dim_student.student_key\r\nLEFT JOIN {{ ref('dim_school') }} dim_school\r\n    ON student_attendance.school_key = dim_school.school_key\r\nLEFT JOIN {{ ref('dim_local_education_agency') }} dim_local_education_agency\r\n    ON dim_school.local_education_agency_key = dim_local_education_agency.local_education_agency_key", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.project.fct_student_attendance", "model.project.dim_student", "model.project.dim_school", "model.project.dim_local_education_agency"]}, "config": {"enabled": true, "alias": null, "schema": "attendance", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "materialization": "view", "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_attendance", "fqn": ["project", "metrics", "is_chronically_absent"], "unique_id": "model.project.is_chronically_absent", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "metrics/is_chronically_absent.sql", "original_file_path": "models/metrics/is_chronically_absent.sql", "name": "is_chronically_absent", "alias": "is_chronically_absent", "checksum": {"name": "sha256", "checksum": "3035f526c71c822e81ec6e74e653b260e1f196010cc36576ae13793909b82dd4"}, "tags": [], "refs": [["fct_student_attendance"], ["dim_student"], ["dim_school"], ["dim_local_education_agency"]], "sources": [], "description": "Flags a student as chronically absent if they have 15 or more absensces. This data model will also give an early warning indicator if their average daily attendance is below 92%\n", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/metrics/metrics.yml", "compiled_path": "target/compiled/project/models/metrics/is_chronically_absent.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}}, "created_at": 1643419470.6346686, "compiled_sql": "WITH student_attendance AS (\n\n    SELECT\n        student_key                                     AS student_key,\n        school_key                                      AS school_key,\n        school_year                                     AS school_year,\n        SUM(event_duration)                             AS sum_of_absences,\n         -- alternative if event duration is not used \n        COUNT(1)                                        AS number_of_days_enrolled,\n        (COUNT(1) - SUM(event_duration)) / COUNT(1)     AS average_daily_attendance\n    FROM `gcp-proj-id`.`dev_attendance`.`fct_student_attendance`\n    GROUP BY 1, 2, 3\n\n)\n\nSELECT\n    student_attendance.school_year                                                     AS school_year,\n    student_attendance.school_key                                                      AS school_key,\n    student_attendance.student_key                                                     AS student_key,\n    IF(student_attendance.sum_of_absences >= 15, 1, 0)                                 AS is_chronically_absent,\n    IF(student_attendance.average_daily_attendance < 0.92, 1, 0)                       AS early_warning,\n    dim_local_education_agency.local_education_agency_name                             AS local_education_agency_name,\n    dim_school.school_name                                      AS school_name,\n    dim_student.student_last_surname                            AS student_last_surname,\n    dim_student.student_first_name                              AS student_first_name,\n    dim_student.student_display_name                            AS student_display_name,\n    dim_student.is_actively_enrolled                            AS is_actively_enrolled,\n    dim_student.grade_level                                     AS grade_level,\n    dim_student.gender                                          AS gender,\n    dim_student.limited_english_proficiency                     AS limited_english_proficiency,\n    dim_student.is_english_language_learner                     AS is_english_language_learner,\n    dim_student.in_special_education_program                    AS in_special_education_program,\n    dim_student.is_hispanic                                     AS is_hispanic,\n    dim_student.race_and_ethnicity_roll_up                      AS race_and_ethnicity_roll_up\nFROM student_attendance\nLEFT JOIN `gcp-proj-id`.`dev_core`.`dim_student` dim_student\n    ON student_attendance.student_key = dim_student.student_key\nLEFT JOIN `gcp-proj-id`.`dev_core`.`dim_school` dim_school\n    ON student_attendance.school_key = dim_school.school_key\nLEFT JOIN `gcp-proj-id`.`dev_core`.`dim_local_education_agency` dim_local_education_agency\n    ON dim_school.local_education_agency_key = dim_local_education_agency.local_education_agency_key", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_attendance`.`is_chronically_absent`"}, "model.project.current_gpa": {"raw_sql": "WITH grades AS (\n\n    SELECT\n        *,\n        {{ get_unweighted_gpa_point('letter_grade_earned') }} AS unweighted_gpa_point\n    FROM {{ ref('rpt_student_section_grade') }} rpt_student_section_grade\n    WHERE\n        is_current_grading_period IS TRUE\n        AND is_currently_enrolled_in_section = 'Yes'\n        AND course_gpa_applicability = 'Applicable'\n\n),\n\ngpa_points AS (\n\n    SELECT\n        *,\n        unweighted_gpa_point * available_credits AS unweighted_gpa_points\n    FROM grades\n\n)\n\nSELECT\n    school_name                                         AS school_name,\n    student_unique_id                                   AS student_unique_id,\n    student_display_name                                AS student_display_name,\n    school_year                                         AS school_year,\n    local_education_agency_name                         AS local_education_agency_name,\n    is_actively_enrolled                                AS is_actively_enrolled,\n    grade_level                                         AS grade_level,\n    grade_level_id                                      AS grade_level_id,\n    gender                                              AS gender,\n    limited_english_proficiency                         AS limited_english_proficiency,\n    is_english_language_learner                         AS is_english_language_learner,\n    in_special_education_program                        AS in_special_education_program,\n    is_hispanic                                         AS is_hispanic,\n    race_and_ethnicity_roll_up                          AS race_and_ethnicity_roll_up,\n    grading_period_description                          AS grading_period_description,\n    SUM(unweighted_gpa_points) / SUM(available_credits) AS unweighted_current_gpa\nFROM gpa_points\nGROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.project.get_unweighted_gpa_point"], "nodes": ["model.project.rpt_student_section_grade"]}, "config": {"enabled": true, "alias": null, "schema": "grades", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "materialization": "view", "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_grades", "fqn": ["project", "metrics", "current_gpa"], "unique_id": "model.project.current_gpa", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "metrics/current_gpa.sql", "original_file_path": "models/metrics/current_gpa.sql", "name": "current_gpa", "alias": "current_gpa", "checksum": {"name": "sha256", "checksum": "098813e4f6abf8f6508e9e61ca3c4eb4ac06da5b8094139588c221cc48bfa694"}, "tags": [], "refs": [["rpt_student_section_grade"]], "sources": [], "description": "Unweighted GPA taking into account grades from the current grading period and active section enrollments\n", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/metrics/metrics.yml", "compiled_path": "target/compiled/project/models/metrics/current_gpa.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}}, "created_at": 1643419470.6364324, "compiled_sql": "WITH grades AS (\n\n    SELECT\n        *,\n        \n    CASE letter_grade_earned\n        WHEN 'A+'   THEN 4.4\n        WHEN 'A'    THEN 4\n        WHEN 'A-'   THEN 3.7\n        WHEN 'B+'   THEN 3.4\n        WHEN 'B'    THEN 3\n        WHEN 'B-'   THEN 2.7\n        WHEN 'C+'   THEN 2.4\n        WHEN 'C'    THEN 2\n        WHEN 'C-'   THEN 1.7\n        WHEN 'D+'   THEN 1.4\n        WHEN 'D'    THEN 1.4\n        WHEN 'D-'   THEN 0.6\n        WHEN 'F'    THEN 0\n        ELSE NULL\n    END\n AS unweighted_gpa_point\n    FROM `gcp-proj-id`.`dev_grades`.`rpt_student_section_grade` rpt_student_section_grade\n    WHERE\n        is_current_grading_period IS TRUE\n        AND is_currently_enrolled_in_section = 'Yes'\n        AND course_gpa_applicability = 'Applicable'\n\n),\n\ngpa_points AS (\n\n    SELECT\n        *,\n        unweighted_gpa_point * available_credits AS unweighted_gpa_points\n    FROM grades\n\n)\n\nSELECT\n    school_name                                         AS school_name,\n    student_unique_id                                   AS student_unique_id,\n    student_display_name                                AS student_display_name,\n    school_year                                         AS school_year,\n    local_education_agency_name                         AS local_education_agency_name,\n    is_actively_enrolled                                AS is_actively_enrolled,\n    grade_level                                         AS grade_level,\n    grade_level_id                                      AS grade_level_id,\n    gender                                              AS gender,\n    limited_english_proficiency                         AS limited_english_proficiency,\n    is_english_language_learner                         AS is_english_language_learner,\n    in_special_education_program                        AS in_special_education_program,\n    is_hispanic                                         AS is_hispanic,\n    race_and_ethnicity_roll_up                          AS race_and_ethnicity_roll_up,\n    grading_period_description                          AS grading_period_description,\n    SUM(unweighted_gpa_points) / SUM(available_credits) AS unweighted_current_gpa\nFROM gpa_points\nGROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_grades`.`current_gpa`"}, "model.project.stg_edfi_objective_assessments": {"raw_sql": "WITH parsed_data AS (\r\n\r\n    SELECT\r\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\r\n        JSON_VALUE(data, '$.id') AS id,\r\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\r\n        JSON_VALUE(data, '$.identificationCode') AS identification_code,\r\n        SPLIT(JSON_VALUE(data, \"$.academicSubjectDescriptor\"), '#')[OFFSET(1)] AS academic_subject_descriptor,\r\n        JSON_VALUE(data, '$.description') AS description,\r\n        CAST(JSON_VALUE(data, '$.maxRawScore') AS float64) AS max_raw_score,\r\n        CAST(JSON_VALUE(data, '$.percentOfAssessment') AS float64) AS percent_of_assessment,\r\n        JSON_VALUE(data, '$.nomenclature') AS nomenclature,\r\n        STRUCT(\r\n            JSON_VALUE(data, '$.assessmentReference.assessmentIdentifier') AS assessment_identifier,\r\n            JSON_VALUE(data, '$.assessmentReference.namespace') AS namespace\r\n        ) AS assessment_reference,\r\n        STRUCT(\r\n            JSON_VALUE(data, '$.parentObjectiveAssessmentReference.assessmentIdentifier') AS assessment_identifier,\r\n            JSON_VALUE(data, '$.parentObjectiveAssessmentReference.identificationCode') AS identification_code,\r\n            JSON_VALUE(data, '$.parentObjectiveAssessmentReference.namespace') AS namespace\r\n        ) AS parent_objective_assessment_reference,\r\n        ARRAY(\r\n            SELECT AS STRUCT \r\n                JSON_VALUE(assessment_items, '$.assessmentItemReference.assessmentIdentifier') AS assessment_identifier,\r\n                JSON_VALUE(assessment_items, '$.assessmentItemReference.identificationCode') AS identification_code,\r\n                JSON_VALUE(assessment_items, '$.assessmentItemReference.namespace') AS namespace\r\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.assessmentItems\")) assessment_items \r\n        ) AS assessment_items,\r\n        ARRAY(\r\n            SELECT AS STRUCT\r\n                STRUCT(\r\n                    JSON_VALUE(learning_objectives, '$.learningObjectiveReference.learningObjectiveId') AS learning_objective_id,\r\n                    JSON_VALUE(learning_objectives, '$.learningObjectiveReference.namespace') AS namespace\r\n                ) AS learning_objective_reference\r\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.learningObjectives\")) learning_objectives \r\n        ) AS learning_objectives,\r\n        ARRAY(\r\n            SELECT AS STRUCT\r\n                STRUCT(\r\n                    JSON_VALUE(learning_standards, '$.learningStandardReference.learningStandardId') AS learning_standard_id\r\n                ) AS learning_standard_reference \r\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.learningStandards\")) learning_standards\r\n        ) AS learning_standards,\r\n        ARRAY(\r\n            SELECT AS STRUCT \r\n                SPLIT(JSON_VALUE(performance_levels, \"$.assessmentReportingMethodDescriptor\"), '#')[OFFSET(1)] AS assessment_reporting_method_descriptor,\r\n                SPLIT(JSON_VALUE(performance_levels, \"$.performanceLevelDescriptor\"), '#')[OFFSET(1)] AS performance_level_descriptor,\r\n                SPLIT(JSON_VALUE(performance_levels, \"$.resultDatatypeTypeDescriptor\"), '#')[OFFSET(1)] AS result_datatype_type_descriptor,\r\n                JSON_VALUE(performance_levels, \"$.maximumScore\") AS maximum_score,\r\n                JSON_VALUE(performance_levels, \"$.minimumScore\") AS minimum_score\r\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.performanceLevels\")) performance_levels \r\n        ) AS performance_levels,\r\n        ARRAY(\r\n            SELECT AS STRUCT \r\n                SPLIT(JSON_VALUE(scores, \"$.assessmentReportingMethodDescriptor\"), '#')[OFFSET(1)] AS assessment_reporting_method_descriptor,\r\n                SPLIT(JSON_VALUE(scores, \"$.resultDatatypeTypeDescriptor\"), '#')[OFFSET(1)] AS result_datatype_type_descriptor,\r\n                JSON_VALUE(scores, \"$.maximumScore\") AS maximum_score,\r\n                JSON_VALUE(scores, \"$.minimumScore\") AS minimum_score\r\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.scores\")) scores \r\n        ) AS scores\r\n    FROM {{ source('staging', 'base_edfi_objective_assessments') }}\r\n\r\n),\r\n\r\nranked AS (\r\n\r\n    SELECT\r\n        ROW_NUMBER() OVER (\r\n            PARTITION BY\r\n                school_year,\r\n                identification_code,\r\n                assessment_reference.assessment_identifier,\r\n                assessment_reference.namespace\r\n            ORDER BY school_year DESC, extracted_timestamp DESC\r\n        ) AS rank,\r\n        *\r\n    FROM parsed_data\r\n\r\n)\r\n\r\nSELECT * EXCEPT (extracted_timestamp, rank)\r\nFROM ranked\r\nWHERE\r\n    rank = 1\r\n    AND id NOT IN (\r\n        SELECT id FROM {{ ref('stg_edfi_deletes') }} edfi_deletes\r\n        WHERE ranked.school_year = edfi_deletes.school_year\r\n    )", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.project.staging.base_edfi_objective_assessments", "model.project.stg_edfi_deletes"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_objective_assessments"], "unique_id": "model.project.stg_edfi_objective_assessments", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "staging/edfi/stg_edfi_objective_assessments.sql", "original_file_path": "models/staging/edfi/stg_edfi_objective_assessments.sql", "name": "stg_edfi_objective_assessments", "alias": "stg_edfi_objective_assessments", "checksum": {"name": "sha256", "checksum": "ce4fafc89bc06c71e838b0c999070ed586f096a2e60a4033ede5dd05da67b387"}, "tags": ["amt"], "refs": [["stg_edfi_deletes"]], "sources": [["staging", "base_edfi_objective_assessments"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_objective_assessments.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "amt", "labels": {"edfi_version": "5_3"}}, "created_at": 1643419470.2559855, "compiled_sql": "WITH parsed_data AS (\n\n    SELECT\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n        JSON_VALUE(data, '$.id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        JSON_VALUE(data, '$.identificationCode') AS identification_code,\n        SPLIT(JSON_VALUE(data, \"$.academicSubjectDescriptor\"), '#')[OFFSET(1)] AS academic_subject_descriptor,\n        JSON_VALUE(data, '$.description') AS description,\n        CAST(JSON_VALUE(data, '$.maxRawScore') AS float64) AS max_raw_score,\n        CAST(JSON_VALUE(data, '$.percentOfAssessment') AS float64) AS percent_of_assessment,\n        JSON_VALUE(data, '$.nomenclature') AS nomenclature,\n        STRUCT(\n            JSON_VALUE(data, '$.assessmentReference.assessmentIdentifier') AS assessment_identifier,\n            JSON_VALUE(data, '$.assessmentReference.namespace') AS namespace\n        ) AS assessment_reference,\n        STRUCT(\n            JSON_VALUE(data, '$.parentObjectiveAssessmentReference.assessmentIdentifier') AS assessment_identifier,\n            JSON_VALUE(data, '$.parentObjectiveAssessmentReference.identificationCode') AS identification_code,\n            JSON_VALUE(data, '$.parentObjectiveAssessmentReference.namespace') AS namespace\n        ) AS parent_objective_assessment_reference,\n        ARRAY(\n            SELECT AS STRUCT \n                JSON_VALUE(assessment_items, '$.assessmentItemReference.assessmentIdentifier') AS assessment_identifier,\n                JSON_VALUE(assessment_items, '$.assessmentItemReference.identificationCode') AS identification_code,\n                JSON_VALUE(assessment_items, '$.assessmentItemReference.namespace') AS namespace\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.assessmentItems\")) assessment_items \n        ) AS assessment_items,\n        ARRAY(\n            SELECT AS STRUCT\n                STRUCT(\n                    JSON_VALUE(learning_objectives, '$.learningObjectiveReference.learningObjectiveId') AS learning_objective_id,\n                    JSON_VALUE(learning_objectives, '$.learningObjectiveReference.namespace') AS namespace\n                ) AS learning_objective_reference\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.learningObjectives\")) learning_objectives \n        ) AS learning_objectives,\n        ARRAY(\n            SELECT AS STRUCT\n                STRUCT(\n                    JSON_VALUE(learning_standards, '$.learningStandardReference.learningStandardId') AS learning_standard_id\n                ) AS learning_standard_reference \n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.learningStandards\")) learning_standards\n        ) AS learning_standards,\n        ARRAY(\n            SELECT AS STRUCT \n                SPLIT(JSON_VALUE(performance_levels, \"$.assessmentReportingMethodDescriptor\"), '#')[OFFSET(1)] AS assessment_reporting_method_descriptor,\n                SPLIT(JSON_VALUE(performance_levels, \"$.performanceLevelDescriptor\"), '#')[OFFSET(1)] AS performance_level_descriptor,\n                SPLIT(JSON_VALUE(performance_levels, \"$.resultDatatypeTypeDescriptor\"), '#')[OFFSET(1)] AS result_datatype_type_descriptor,\n                JSON_VALUE(performance_levels, \"$.maximumScore\") AS maximum_score,\n                JSON_VALUE(performance_levels, \"$.minimumScore\") AS minimum_score\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.performanceLevels\")) performance_levels \n        ) AS performance_levels,\n        ARRAY(\n            SELECT AS STRUCT \n                SPLIT(JSON_VALUE(scores, \"$.assessmentReportingMethodDescriptor\"), '#')[OFFSET(1)] AS assessment_reporting_method_descriptor,\n                SPLIT(JSON_VALUE(scores, \"$.resultDatatypeTypeDescriptor\"), '#')[OFFSET(1)] AS result_datatype_type_descriptor,\n                JSON_VALUE(scores, \"$.maximumScore\") AS maximum_score,\n                JSON_VALUE(scores, \"$.minimumScore\") AS minimum_score\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.scores\")) scores \n        ) AS scores\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_objective_assessments`\n\n),\n\nranked AS (\n\n    SELECT\n        ROW_NUMBER() OVER (\n            PARTITION BY\n                school_year,\n                identification_code,\n                assessment_reference.assessment_identifier,\n                assessment_reference.namespace\n            ORDER BY school_year DESC, extracted_timestamp DESC\n        ) AS rank,\n        *\n    FROM parsed_data\n\n)\n\nSELECT * EXCEPT (extracted_timestamp, rank)\nFROM ranked\nWHERE\n    rank = 1\n    AND id NOT IN (\n        SELECT id FROM `gcp-proj-id`.`dev_staging`.`stg_edfi_deletes` edfi_deletes\n        WHERE ranked.school_year = edfi_deletes.school_year\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_staging`.`stg_edfi_objective_assessments`"}, "model.project.stg_edfi_assessments": {"raw_sql": "WITH parsed_data AS (\r\n\r\n    SELECT\r\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\r\n        JSON_VALUE(data, '$.id') AS id,\r\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\r\n        JSON_VALUE(data, '$.assessmentIdentifier') AS assessment_identifier,\r\n        JSON_VALUE(data, '$.assessmentFamily') AS assessment_family,\r\n        JSON_VALUE(data, '$.assessmentForm') AS assessment_form,\r\n        JSON_VALUE(data, '$.assessmentTitle') AS assessment_title,\r\n        CAST(JSON_VALUE(data, '$.assessmentVersion') AS int64) AS assessment_version,\r\n        CAST(JSON_VALUE(data, '$.maxRawScore') AS float64) AS max_raw_score,\r\n        JSON_VALUE(data, '$.namespace') AS namespace,\r\n        JSON_VALUE(data, '$.nomenclature') AS nomenclature,\r\n        CAST(JSON_VALUE(data, \"$.adaptiveAssessment\") AS BOOL) AS adaptive_assessment,\r\n        SPLIT(JSON_VALUE(data, \"$.assessmentCategoryDescriptor\"), '#')[OFFSET(1)] AS assessment_category_descriptor,\r\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, \"$.revisionDate\")) AS revision_date,\r\n        STRUCT(\r\n            JSON_VALUE(data, '$.educationOrganizationReference.educationOrganizationId') AS education_organization_id\r\n        ) AS education_organization_reference,\r\n        ARRAY(\r\n            SELECT AS STRUCT \r\n                SPLIT(JSON_VALUE(academic_subjects, \"$.academicSubjectDescriptor\"), '#')[OFFSET(1)] AS academic_subject_descriptor,\r\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.academicSubjects\")) academic_subjects \r\n        ) AS academic_subjects,\r\n        ARRAY(\r\n            SELECT AS STRUCT \r\n                SPLIT(JSON_VALUE(grade_levels, \"$.gradeLevelDescriptor\"), '#')[OFFSET(1)] AS grade_level_descriptor\r\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.assessedGradeLevels\")) grade_levels \r\n        ) AS assessed_grade_levels,\r\n        ARRAY(\r\n            SELECT AS STRUCT \r\n                SPLIT(JSON_VALUE(codes, \"$.assessmentIdentificationSystemDescriptor\"), '#')[OFFSET(1)] AS assessment_identification_system_descriptor,\r\n                JSON_VALUE(codes, \"$.assigningOrganizationIdentificationCode\") AS assigning_organization_identification_code,\r\n                JSON_VALUE(codes, \"$.identificationCode\") AS identification_code\r\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.identificationCodes\")) codes \r\n        ) AS identification_codes,\r\n        ARRAY(\r\n            SELECT AS STRUCT \r\n                SPLIT(JSON_VALUE(languages, \"$.languageDescriptor\"), '#')[OFFSET(1)] AS language_descriptor,\r\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.languages\")) languages \r\n        ) AS languages,\r\n        ARRAY(\r\n            SELECT AS STRUCT \r\n                SPLIT(JSON_VALUE(performance_levels, \"$.assessmentReportingMethodDescriptor\"), '#')[OFFSET(1)] AS assessment_reporting_method_descriptor,\r\n                SPLIT(JSON_VALUE(performance_levels, \"$.performanceLevelDescriptor\"), '#')[OFFSET(1)] AS performance_level_descriptor,\r\n                SPLIT(JSON_VALUE(performance_levels, \"$.resultDatatypeTypeDescriptor\"), '#')[OFFSET(1)] AS result_datatype_type_descriptor,\r\n                JSON_VALUE(performance_levels, \"$.maximumScore\") AS maximum_score,\r\n                JSON_VALUE(performance_levels, \"$.minimumScore\") AS minimum_score\r\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.performanceLevels\")) performance_levels \r\n        ) AS performance_levels,\r\n        ARRAY(\r\n            SELECT AS STRUCT \r\n                SPLIT(JSON_VALUE(period, \"$.assessmentPeriodDescriptor\"), '#')[OFFSET(1)] AS assessment_period_descriptor,\r\n                PARSE_DATE('%Y-%m-%d', JSON_VALUE(period, \"$.beginDate\")) AS begin_date,\r\n                PARSE_DATE('%Y-%m-%d', JSON_VALUE(period, \"$.endDate\")) AS end_date\r\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.period\")) period \r\n        ) AS period,\r\n        ARRAY(\r\n            SELECT AS STRUCT \r\n                SPLIT(JSON_VALUE(platform_types, \"$.platformTypeDescriptor\"), '#')[OFFSET(1)] AS platform_type_descriptor,\r\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.platformTypes\")) platform_types \r\n        ) AS platform_types,\r\n        ARRAY(\r\n            SELECT AS STRUCT \r\n                SPLIT(JSON_VALUE(scores, \"$.assessmentReportingMethodDescriptor\"), '#')[OFFSET(1)] AS assessment_reporting_method_descriptor,\r\n                SPLIT(JSON_VALUE(scores, \"$.resultDatatypeTypeDescriptor\"), '#')[OFFSET(1)] AS result_datatype_type_descriptor,\r\n                JSON_VALUE(scores, \"$.maximumScore\") AS maximum_score,\r\n                JSON_VALUE(scores, \"$.minimumScore\") AS minimum_score\r\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.scores\")) scores \r\n        ) AS scores,\r\n        ARRAY(\r\n            SELECT AS STRUCT\r\n                JSON_VALUE(sections, '$.sectionReference.localCourseCode') AS local_course_code,\r\n                JSON_VALUE(sections, '$.sectionReference.schoolId') AS school_id,\r\n                JSON_VALUE(sections, '$.sectionReference.schoolYear') AS school_year,\r\n                JSON_VALUE(sections, '$.sectionReference.sectionIdentifier') AS section_identifier,\r\n                JSON_VALUE(sections, '$.sectionReference.sessionName') AS session_name\r\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.sections\")) sections \r\n        ) AS sections\r\n    FROM {{ source('staging', 'base_edfi_assessments') }}\r\n\r\n),\r\n\r\nranked AS (\r\n\r\n    SELECT\r\n        ROW_NUMBER() OVER (\r\n            PARTITION BY\r\n                school_year,\r\n                assessment_identifier,\r\n                namespace\r\n            ORDER BY school_year DESC, extracted_timestamp DESC\r\n        ) AS rank,\r\n        *\r\n    FROM parsed_data\r\n\r\n)\r\n\r\nSELECT * EXCEPT (extracted_timestamp, rank)\r\nFROM ranked\r\nWHERE\r\n    rank = 1\r\n    AND id NOT IN (\r\n        SELECT id FROM {{ ref('stg_edfi_deletes') }} edfi_deletes\r\n        WHERE ranked.school_year = edfi_deletes.school_year\r\n    )", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.project.staging.base_edfi_assessments", "model.project.stg_edfi_deletes"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_assessments"], "unique_id": "model.project.stg_edfi_assessments", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "staging/edfi/stg_edfi_assessments.sql", "original_file_path": "models/staging/edfi/stg_edfi_assessments.sql", "name": "stg_edfi_assessments", "alias": "stg_edfi_assessments", "checksum": {"name": "sha256", "checksum": "913e52635e22c3a2a8cfaf6fd177df8b6fc246460f9a110713fe708fdbc93c6b"}, "tags": ["amt"], "refs": [["stg_edfi_deletes"]], "sources": [["staging", "base_edfi_assessments"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_assessments.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "amt", "labels": {"edfi_version": "5_3"}}, "created_at": 1643419470.258602, "compiled_sql": "WITH parsed_data AS (\n\n    SELECT\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n        JSON_VALUE(data, '$.id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        JSON_VALUE(data, '$.assessmentIdentifier') AS assessment_identifier,\n        JSON_VALUE(data, '$.assessmentFamily') AS assessment_family,\n        JSON_VALUE(data, '$.assessmentForm') AS assessment_form,\n        JSON_VALUE(data, '$.assessmentTitle') AS assessment_title,\n        CAST(JSON_VALUE(data, '$.assessmentVersion') AS int64) AS assessment_version,\n        CAST(JSON_VALUE(data, '$.maxRawScore') AS float64) AS max_raw_score,\n        JSON_VALUE(data, '$.namespace') AS namespace,\n        JSON_VALUE(data, '$.nomenclature') AS nomenclature,\n        CAST(JSON_VALUE(data, \"$.adaptiveAssessment\") AS BOOL) AS adaptive_assessment,\n        SPLIT(JSON_VALUE(data, \"$.assessmentCategoryDescriptor\"), '#')[OFFSET(1)] AS assessment_category_descriptor,\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, \"$.revisionDate\")) AS revision_date,\n        STRUCT(\n            JSON_VALUE(data, '$.educationOrganizationReference.educationOrganizationId') AS education_organization_id\n        ) AS education_organization_reference,\n        ARRAY(\n            SELECT AS STRUCT \n                SPLIT(JSON_VALUE(academic_subjects, \"$.academicSubjectDescriptor\"), '#')[OFFSET(1)] AS academic_subject_descriptor,\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.academicSubjects\")) academic_subjects \n        ) AS academic_subjects,\n        ARRAY(\n            SELECT AS STRUCT \n                SPLIT(JSON_VALUE(grade_levels, \"$.gradeLevelDescriptor\"), '#')[OFFSET(1)] AS grade_level_descriptor\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.assessedGradeLevels\")) grade_levels \n        ) AS assessed_grade_levels,\n        ARRAY(\n            SELECT AS STRUCT \n                SPLIT(JSON_VALUE(codes, \"$.assessmentIdentificationSystemDescriptor\"), '#')[OFFSET(1)] AS assessment_identification_system_descriptor,\n                JSON_VALUE(codes, \"$.assigningOrganizationIdentificationCode\") AS assigning_organization_identification_code,\n                JSON_VALUE(codes, \"$.identificationCode\") AS identification_code\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.identificationCodes\")) codes \n        ) AS identification_codes,\n        ARRAY(\n            SELECT AS STRUCT \n                SPLIT(JSON_VALUE(languages, \"$.languageDescriptor\"), '#')[OFFSET(1)] AS language_descriptor,\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.languages\")) languages \n        ) AS languages,\n        ARRAY(\n            SELECT AS STRUCT \n                SPLIT(JSON_VALUE(performance_levels, \"$.assessmentReportingMethodDescriptor\"), '#')[OFFSET(1)] AS assessment_reporting_method_descriptor,\n                SPLIT(JSON_VALUE(performance_levels, \"$.performanceLevelDescriptor\"), '#')[OFFSET(1)] AS performance_level_descriptor,\n                SPLIT(JSON_VALUE(performance_levels, \"$.resultDatatypeTypeDescriptor\"), '#')[OFFSET(1)] AS result_datatype_type_descriptor,\n                JSON_VALUE(performance_levels, \"$.maximumScore\") AS maximum_score,\n                JSON_VALUE(performance_levels, \"$.minimumScore\") AS minimum_score\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.performanceLevels\")) performance_levels \n        ) AS performance_levels,\n        ARRAY(\n            SELECT AS STRUCT \n                SPLIT(JSON_VALUE(period, \"$.assessmentPeriodDescriptor\"), '#')[OFFSET(1)] AS assessment_period_descriptor,\n                PARSE_DATE('%Y-%m-%d', JSON_VALUE(period, \"$.beginDate\")) AS begin_date,\n                PARSE_DATE('%Y-%m-%d', JSON_VALUE(period, \"$.endDate\")) AS end_date\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.period\")) period \n        ) AS period,\n        ARRAY(\n            SELECT AS STRUCT \n                SPLIT(JSON_VALUE(platform_types, \"$.platformTypeDescriptor\"), '#')[OFFSET(1)] AS platform_type_descriptor,\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.platformTypes\")) platform_types \n        ) AS platform_types,\n        ARRAY(\n            SELECT AS STRUCT \n                SPLIT(JSON_VALUE(scores, \"$.assessmentReportingMethodDescriptor\"), '#')[OFFSET(1)] AS assessment_reporting_method_descriptor,\n                SPLIT(JSON_VALUE(scores, \"$.resultDatatypeTypeDescriptor\"), '#')[OFFSET(1)] AS result_datatype_type_descriptor,\n                JSON_VALUE(scores, \"$.maximumScore\") AS maximum_score,\n                JSON_VALUE(scores, \"$.minimumScore\") AS minimum_score\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.scores\")) scores \n        ) AS scores,\n        ARRAY(\n            SELECT AS STRUCT\n                JSON_VALUE(sections, '$.sectionReference.localCourseCode') AS local_course_code,\n                JSON_VALUE(sections, '$.sectionReference.schoolId') AS school_id,\n                JSON_VALUE(sections, '$.sectionReference.schoolYear') AS school_year,\n                JSON_VALUE(sections, '$.sectionReference.sectionIdentifier') AS section_identifier,\n                JSON_VALUE(sections, '$.sectionReference.sessionName') AS session_name\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.sections\")) sections \n        ) AS sections\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_assessments`\n\n),\n\nranked AS (\n\n    SELECT\n        ROW_NUMBER() OVER (\n            PARTITION BY\n                school_year,\n                assessment_identifier,\n                namespace\n            ORDER BY school_year DESC, extracted_timestamp DESC\n        ) AS rank,\n        *\n    FROM parsed_data\n\n)\n\nSELECT * EXCEPT (extracted_timestamp, rank)\nFROM ranked\nWHERE\n    rank = 1\n    AND id NOT IN (\n        SELECT id FROM `gcp-proj-id`.`dev_staging`.`stg_edfi_deletes` edfi_deletes\n        WHERE ranked.school_year = edfi_deletes.school_year\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_staging`.`stg_edfi_assessments`"}, "model.project.stg_edfi_school_year_types": {"raw_sql": "SELECT DISTINCT\r\n    CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\r\n    JSON_VALUE(data, '$.schoolYearDescription') AS school_year_description\r\nFROM {{ source('staging', 'base_edfi_school_year_types') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.project.staging.base_edfi_school_year_types"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_school_year_types"], "unique_id": "model.project.stg_edfi_school_year_types", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "staging/edfi/stg_edfi_school_year_types.sql", "original_file_path": "models/staging/edfi/stg_edfi_school_year_types.sql", "name": "stg_edfi_school_year_types", "alias": "stg_edfi_school_year_types", "checksum": {"name": "sha256", "checksum": "789b30b08b614a614417490e6b1b1ef85f4622a5e0ac4e781094e1e3b7efe3f8"}, "tags": ["amt"], "refs": [], "sources": [["staging", "base_edfi_school_year_types"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_school_year_types.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "amt", "labels": {"edfi_version": "5_3"}}, "created_at": 1643419470.26112, "compiled_sql": "SELECT DISTINCT\n    CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n    JSON_VALUE(data, '$.schoolYearDescription') AS school_year_description\nFROM `gcp-proj-id`.`dev_staging`.`base_edfi_school_year_types`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_staging`.`stg_edfi_school_year_types`"}, "model.project.stg_edfi_staff_school_associations": {"raw_sql": "WITH parsed_data AS (\r\n\r\n    SELECT\r\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\r\n        JSON_VALUE(data, '$.id') AS id,\r\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\r\n        STRUCT(\r\n            JSON_VALUE(data, '$.staffReference.staffUniqueId') AS staff_unique_id\r\n        ) AS staff_reference,\r\n        STRUCT(\r\n            JSON_VALUE(data, '$.schoolReference.schoolId') AS school_id\r\n        ) AS school_reference,\r\n        STRUCT(\r\n            CAST(JSON_VALUE(data, '$.schoolYearTypeReference.schoolYear') AS int64) AS school_year\r\n        ) AS school_year_type_reference,\r\n        STRUCT(\r\n            JSON_VALUE(data, '$.calendarReference.calendarCode') AS calendar_code,\r\n            JSON_VALUE(data, '$.calendarReference.schoolId') AS school_id,\r\n            CAST(JSON_VALUE(data, '$.calendarReference.schoolYear') AS int64) AS school_year\r\n        ) AS calendar_reference,\r\n        SPLIT(JSON_VALUE(data, \"$.programAssignmentDescriptor\"), '#')[OFFSET(1)] AS program_assignment_descriptor,\r\n        ARRAY(\r\n            SELECT AS STRUCT \r\n                SPLIT(JSON_VALUE(academic_subjects, \"$.academicSubjectDescriptor\"), '#')[OFFSET(1)] AS academic_subject_descriptor,\r\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.academicSubjects\")) academic_subjects \r\n        ) AS academic_subjects,\r\n        ARRAY(\r\n            SELECT AS STRUCT \r\n                SPLIT(JSON_VALUE(grade_levels, \"$.gradeLevelDescriptor\"), '#')[OFFSET(1)] AS grade_level_descriptor,\r\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.gradeLevels\")) grade_levels \r\n        ) AS grade_levels,\r\n    FROM {{ source('staging', 'base_edfi_staff_school_associations') }}\r\n\r\n),\r\n\r\nranked AS (\r\n\r\n    SELECT\r\n        ROW_NUMBER() OVER (\r\n            PARTITION BY\r\n                school_year,\r\n                school_reference.school_id,\r\n                staff_reference.staff_unique_id,\r\n                program_assignment_descriptor\r\n            ORDER BY school_year DESC, extracted_timestamp DESC\r\n        ) AS rank,\r\n        *\r\n    FROM parsed_data\r\n\r\n)\r\n\r\nSELECT * EXCEPT (extracted_timestamp, rank, school_year),\r\n    COALESCE(school_year_type_reference.school_year, school_year) AS school_year\r\nFROM ranked\r\nWHERE\r\n    rank = 1\r\n    AND id NOT IN (\r\n        SELECT id FROM {{ ref('stg_edfi_deletes') }} edfi_deletes\r\n        WHERE ranked.school_year = edfi_deletes.school_year\r\n    )", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.project.staging.base_edfi_staff_school_associations", "model.project.stg_edfi_deletes"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_staff_school_associations"], "unique_id": "model.project.stg_edfi_staff_school_associations", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "staging/edfi/stg_edfi_staff_school_associations.sql", "original_file_path": "models/staging/edfi/stg_edfi_staff_school_associations.sql", "name": "stg_edfi_staff_school_associations", "alias": "stg_edfi_staff_school_associations", "checksum": {"name": "sha256", "checksum": "d7a1e317a6d83aba2b4811e8ca00bfec644db441435b9e85c0cd3ed226a097e3"}, "tags": ["amt"], "refs": [["stg_edfi_deletes"]], "sources": [["staging", "base_edfi_staff_school_associations"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_staff_school_associations.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "amt", "labels": {"edfi_version": "5_3"}}, "created_at": 1643419470.2632604, "compiled_sql": "WITH parsed_data AS (\n\n    SELECT\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n        JSON_VALUE(data, '$.id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        STRUCT(\n            JSON_VALUE(data, '$.staffReference.staffUniqueId') AS staff_unique_id\n        ) AS staff_reference,\n        STRUCT(\n            JSON_VALUE(data, '$.schoolReference.schoolId') AS school_id\n        ) AS school_reference,\n        STRUCT(\n            CAST(JSON_VALUE(data, '$.schoolYearTypeReference.schoolYear') AS int64) AS school_year\n        ) AS school_year_type_reference,\n        STRUCT(\n            JSON_VALUE(data, '$.calendarReference.calendarCode') AS calendar_code,\n            JSON_VALUE(data, '$.calendarReference.schoolId') AS school_id,\n            CAST(JSON_VALUE(data, '$.calendarReference.schoolYear') AS int64) AS school_year\n        ) AS calendar_reference,\n        SPLIT(JSON_VALUE(data, \"$.programAssignmentDescriptor\"), '#')[OFFSET(1)] AS program_assignment_descriptor,\n        ARRAY(\n            SELECT AS STRUCT \n                SPLIT(JSON_VALUE(academic_subjects, \"$.academicSubjectDescriptor\"), '#')[OFFSET(1)] AS academic_subject_descriptor,\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.academicSubjects\")) academic_subjects \n        ) AS academic_subjects,\n        ARRAY(\n            SELECT AS STRUCT \n                SPLIT(JSON_VALUE(grade_levels, \"$.gradeLevelDescriptor\"), '#')[OFFSET(1)] AS grade_level_descriptor,\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.gradeLevels\")) grade_levels \n        ) AS grade_levels,\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_staff_school_associations`\n\n),\n\nranked AS (\n\n    SELECT\n        ROW_NUMBER() OVER (\n            PARTITION BY\n                school_year,\n                school_reference.school_id,\n                staff_reference.staff_unique_id,\n                program_assignment_descriptor\n            ORDER BY school_year DESC, extracted_timestamp DESC\n        ) AS rank,\n        *\n    FROM parsed_data\n\n)\n\nSELECT * EXCEPT (extracted_timestamp, rank, school_year),\n    COALESCE(school_year_type_reference.school_year, school_year) AS school_year\nFROM ranked\nWHERE\n    rank = 1\n    AND id NOT IN (\n        SELECT id FROM `gcp-proj-id`.`dev_staging`.`stg_edfi_deletes` edfi_deletes\n        WHERE ranked.school_year = edfi_deletes.school_year\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_staging`.`stg_edfi_staff_school_associations`"}, "model.project.stg_edfi_parents": {"raw_sql": "WITH parsed_data AS (\r\n\r\n    SELECT\r\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\r\n        JSON_VALUE(data, '$.id') AS id,\r\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\r\n        JSON_VALUE(data, '$.parentUniqueId') AS parent_unique_id,\r\n        JSON_VALUE(data, '$.lastSurname') AS last_surname,\r\n        JSON_VALUE(data, '$.middleName') AS middle_name,\r\n        JSON_VALUE(data, '$.firstName') AS first_name,\r\n        STRUCT(\r\n            JSON_VALUE(data, '$.personReference.personId') AS person_id,\r\n            SPLIT(JSON_VALUE(data, \"$.personReference.sourceSystemDescriptor\"), '#')[OFFSET(1)] AS source_system_descriptor\r\n        ) AS person_reference,\r\n        JSON_VALUE(data, '$.generationCodeSuffix') AS generation_code_suffix,\r\n        ARRAY(\r\n            SELECT AS STRUCT \r\n                SPLIT(JSON_VALUE(electronic_mails, '$.electronicMailTypeDescriptor'), '#')[OFFSET(1)] AS electronic_mail_type_descriptor,\r\n                JSON_VALUE(electronic_mails, \"$.electronicMailAddress\") AS electronic_mail_address,\r\n                CAST(JSON_VALUE(electronic_mails, \"$.doNotPublishIndicator\") AS BOOL) AS do_not_publish_indicator\r\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.electronicMails\")) electronic_mails \r\n        ) AS electronic_mails,\r\n        ARRAY(\r\n            SELECT AS STRUCT \r\n                SPLIT(JSON_VALUE(addresses, '$.addressTypeDescriptor'), '#')[OFFSET(1)] AS address_type_descriptor,\r\n                SPLIT(JSON_VALUE(addresses, '$.stateAbbreviationDescriptor'), '#')[OFFSET(1)] AS state_abbreviation_descriptor,\r\n                JSON_VALUE(addresses, \"$.city\") AS city,\r\n                JSON_VALUE(addresses, \"$.postalCode\") AS postal_code,\r\n                JSON_VALUE(addresses, \"$.streetNumberName\") AS street_number_name,\r\n                SPLIT(JSON_VALUE(addresses, '$.localeDescriptor'), '#')[OFFSET(1)] AS locale_descriptor,\r\n                JSON_VALUE(addresses, \"$.apartmentRoomSuiteNumber\") AS apartment_room_suite_number,\r\n                JSON_VALUE(addresses, \"$.buildingSiteNumber\") AS building_site_number,\r\n                JSON_VALUE(addresses, \"$.congressionalDistrict\") AS congressional_district,\r\n                JSON_VALUE(addresses, \"$.countyFIPSCode\") AS county_fips_code,\r\n                CAST(JSON_VALUE(addresses, \"$.doNotPublishIndicator\") AS BOOL) AS do_not_publish_indicator,\r\n                JSON_VALUE(addresses, \"$.latitude\") AS latitude,\r\n                JSON_VALUE(addresses, \"$.longitude\") AS longitude,\r\n                JSON_VALUE(addresses, \"$.nameOfCounty\") AS name_of_county,\r\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.addresses\")) addresses \r\n        ) AS addresses,\r\n        ARRAY(\r\n            SELECT AS STRUCT \r\n                SPLIT(JSON_VALUE(telephones, '$.telephoneNumberTypeDescriptor'), '#')[OFFSET(1)] AS telephone_number_type_descriptor,\r\n                JSON_VALUE(telephones, \"$.telephoneNumber\") AS telephone_number,\r\n                CAST(JSON_VALUE(telephones, \"$.doNotPublishIndicator\") AS BOOL) AS do_not_publish_indicator,\r\n                CAST(JSON_VALUE(telephones, \"$.orderOfPriority\") AS int64) AS order_of_priority,\r\n                CAST(JSON_VALUE(telephones, \"$.textMessageCapabilityIndicator\") AS BOOL) AS text_message_capability_indicator\r\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.telephones\")) telephones \r\n        ) AS telephones,\r\n    FROM {{ source('staging', 'base_edfi_parents') }}\r\n\r\n),\r\n\r\nranked AS (\r\n\r\n    SELECT\r\n        ROW_NUMBER() OVER (\r\n            PARTITION BY\r\n                school_year,\r\n                parent_unique_id\r\n            ORDER BY school_year DESC, extracted_timestamp DESC\r\n        ) AS rank,\r\n        *\r\n    FROM parsed_data\r\n\r\n)\r\n\r\nSELECT * EXCEPT (extracted_timestamp, rank)\r\nFROM ranked\r\nWHERE\r\n    rank = 1\r\n    AND id NOT IN (\r\n        SELECT id FROM {{ ref('stg_edfi_deletes') }} edfi_deletes\r\n        WHERE ranked.school_year = edfi_deletes.school_year\r\n    )", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.project.staging.base_edfi_parents", "model.project.stg_edfi_deletes"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_parents"], "unique_id": "model.project.stg_edfi_parents", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "staging/edfi/stg_edfi_parents.sql", "original_file_path": "models/staging/edfi/stg_edfi_parents.sql", "name": "stg_edfi_parents", "alias": "stg_edfi_parents", "checksum": {"name": "sha256", "checksum": "178b428fabbb29d4c65ee752b6a654edb737799ff2ab9bfdeaebd3a2c0028e96"}, "tags": ["amt"], "refs": [["stg_edfi_deletes"]], "sources": [["staging", "base_edfi_parents"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_parents.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "amt", "labels": {"edfi_version": "5_3"}}, "created_at": 1643419470.2657285, "compiled_sql": "WITH parsed_data AS (\n\n    SELECT\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n        JSON_VALUE(data, '$.id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        JSON_VALUE(data, '$.parentUniqueId') AS parent_unique_id,\n        JSON_VALUE(data, '$.lastSurname') AS last_surname,\n        JSON_VALUE(data, '$.middleName') AS middle_name,\n        JSON_VALUE(data, '$.firstName') AS first_name,\n        STRUCT(\n            JSON_VALUE(data, '$.personReference.personId') AS person_id,\n            SPLIT(JSON_VALUE(data, \"$.personReference.sourceSystemDescriptor\"), '#')[OFFSET(1)] AS source_system_descriptor\n        ) AS person_reference,\n        JSON_VALUE(data, '$.generationCodeSuffix') AS generation_code_suffix,\n        ARRAY(\n            SELECT AS STRUCT \n                SPLIT(JSON_VALUE(electronic_mails, '$.electronicMailTypeDescriptor'), '#')[OFFSET(1)] AS electronic_mail_type_descriptor,\n                JSON_VALUE(electronic_mails, \"$.electronicMailAddress\") AS electronic_mail_address,\n                CAST(JSON_VALUE(electronic_mails, \"$.doNotPublishIndicator\") AS BOOL) AS do_not_publish_indicator\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.electronicMails\")) electronic_mails \n        ) AS electronic_mails,\n        ARRAY(\n            SELECT AS STRUCT \n                SPLIT(JSON_VALUE(addresses, '$.addressTypeDescriptor'), '#')[OFFSET(1)] AS address_type_descriptor,\n                SPLIT(JSON_VALUE(addresses, '$.stateAbbreviationDescriptor'), '#')[OFFSET(1)] AS state_abbreviation_descriptor,\n                JSON_VALUE(addresses, \"$.city\") AS city,\n                JSON_VALUE(addresses, \"$.postalCode\") AS postal_code,\n                JSON_VALUE(addresses, \"$.streetNumberName\") AS street_number_name,\n                SPLIT(JSON_VALUE(addresses, '$.localeDescriptor'), '#')[OFFSET(1)] AS locale_descriptor,\n                JSON_VALUE(addresses, \"$.apartmentRoomSuiteNumber\") AS apartment_room_suite_number,\n                JSON_VALUE(addresses, \"$.buildingSiteNumber\") AS building_site_number,\n                JSON_VALUE(addresses, \"$.congressionalDistrict\") AS congressional_district,\n                JSON_VALUE(addresses, \"$.countyFIPSCode\") AS county_fips_code,\n                CAST(JSON_VALUE(addresses, \"$.doNotPublishIndicator\") AS BOOL) AS do_not_publish_indicator,\n                JSON_VALUE(addresses, \"$.latitude\") AS latitude,\n                JSON_VALUE(addresses, \"$.longitude\") AS longitude,\n                JSON_VALUE(addresses, \"$.nameOfCounty\") AS name_of_county,\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.addresses\")) addresses \n        ) AS addresses,\n        ARRAY(\n            SELECT AS STRUCT \n                SPLIT(JSON_VALUE(telephones, '$.telephoneNumberTypeDescriptor'), '#')[OFFSET(1)] AS telephone_number_type_descriptor,\n                JSON_VALUE(telephones, \"$.telephoneNumber\") AS telephone_number,\n                CAST(JSON_VALUE(telephones, \"$.doNotPublishIndicator\") AS BOOL) AS do_not_publish_indicator,\n                CAST(JSON_VALUE(telephones, \"$.orderOfPriority\") AS int64) AS order_of_priority,\n                CAST(JSON_VALUE(telephones, \"$.textMessageCapabilityIndicator\") AS BOOL) AS text_message_capability_indicator\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.telephones\")) telephones \n        ) AS telephones,\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_parents`\n\n),\n\nranked AS (\n\n    SELECT\n        ROW_NUMBER() OVER (\n            PARTITION BY\n                school_year,\n                parent_unique_id\n            ORDER BY school_year DESC, extracted_timestamp DESC\n        ) AS rank,\n        *\n    FROM parsed_data\n\n)\n\nSELECT * EXCEPT (extracted_timestamp, rank)\nFROM ranked\nWHERE\n    rank = 1\n    AND id NOT IN (\n        SELECT id FROM `gcp-proj-id`.`dev_staging`.`stg_edfi_deletes` edfi_deletes\n        WHERE ranked.school_year = edfi_deletes.school_year\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_staging`.`stg_edfi_parents`"}, "model.project.stg_edfi_student_education_organization_associations": {"raw_sql": "WITH parsed_data AS (\r\n\r\n    SELECT\r\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\r\n        JSON_VALUE(data, '$.id') AS id,\r\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\r\n        STRUCT(\r\n            JSON_VALUE(data, '$.educationOrganizationReference.educationOrganizationId') AS education_organization_id\r\n        ) AS education_organization_reference,\r\n        STRUCT(\r\n            JSON_VALUE(data, '$.studentReference.studentUniqueId') AS student_unique_id\r\n        ) AS student_reference,\r\n        ARRAY(\r\n            SELECT AS STRUCT \r\n                JSON_VALUE(email, \"$.electronicMailAddress\") AS address,\r\n                SPLIT(JSON_VALUE(email, \"$.electronicMailTypeDescriptor\"), '#')[OFFSET(1)] AS type_descriptor,\r\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.electronicMails\")) email \r\n        ) AS electronic_mail,\r\n        SPLIT(JSON_VALUE(data, '$.limitedEnglishProficiencyDescriptor'), '#')[OFFSET(1)] AS limited_english_proficiency_descriptor,\r\n        CAST(JSON_VALUE(data, '$.hispanicLatinoEthnicity') AS BOOL) AS hispanic_latino_ethnicity,\r\n        SPLIT(JSON_VALUE(data, '$.sexDescriptor'), '#')[OFFSET(1)] AS sex_descriptor,\r\n        ARRAY(\r\n            SELECT AS STRUCT \r\n                JSON_VALUE(student_indicators, \"$.indicatorName\") AS name,\r\n                JSON_VALUE(student_indicators, \"$.designatedBy\") AS designated_by,\r\n                JSON_VALUE(student_indicators, \"$.indicator\") AS indicator,\r\n                JSON_VALUE(student_indicators, \"$.indicatorGroup\") AS indicator_group,\r\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.studentIndicators\")) student_indicators \r\n        ) AS student_indicators,\r\n        ARRAY(\r\n            SELECT AS STRUCT \r\n                SPLIT(JSON_VALUE(cohort_years, '$.cohortYearTypeDescriptor'), '#')[OFFSET(1)] AS cohort_type_descriptor,\r\n                SPLIT(JSON_VALUE(cohort_years, '$.termDescriptor'), '#')[OFFSET(1)] AS term_descriptor,\r\n                JSON_VALUE(cohort_years, \"$.schoolYearTypeReference.schoolYear\") AS school_year,\r\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.cohortYears\")) cohort_years \r\n        ) AS cohort_years,\r\n        ARRAY(\r\n            SELECT AS STRUCT \r\n                SPLIT(JSON_VALUE(disabilities, '$.disabilityDescriptor'), '#')[OFFSET(1)] AS disability_descriptor,\r\n                SPLIT(JSON_VALUE(disabilities, '$.disabilityDeterminationSourceTypeDescriptor'), '#')[OFFSET(1)] AS disability_determination_source_type_descriptor,\r\n                JSON_VALUE(disabilities, \"$.disabilityDiagnosis\") AS disability_diagnosis,\r\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.disabilities\")) disabilities \r\n        ) AS disabilities,\r\n        ARRAY(\r\n            SELECT AS STRUCT \r\n                SPLIT(JSON_VALUE(languages, '$.languageDescriptor'), '#')[OFFSET(1)] AS language_descriptor,\r\n                ARRAY(\r\n                    SELECT AS STRUCT \r\n                        SPLIT(JSON_VALUE(uses, '$.languageUseDescriptor'), '#')[OFFSET(1)] AS language_use_descriptor\r\n                    FROM UNNEST(JSON_QUERY_ARRAY(languages, '$.uses')) AS uses\r\n                ) AS uses\r\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.languages\")) languages \r\n        ) AS languages,\r\n        ARRAY(\r\n            SELECT AS STRUCT \r\n                SPLIT(JSON_VALUE(races, \"$.raceDescriptor\"), '#')[OFFSET(1)] AS race_descriptor\r\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.races\")) races \r\n        ) AS races,\r\n    FROM {{ source('staging', 'base_edfi_student_education_organization_associations') }}\r\n\r\n),\r\n\r\nranked AS (\r\n\r\n    SELECT\r\n        ROW_NUMBER() OVER (\r\n            PARTITION BY\r\n                school_year,\r\n                education_organization_reference.education_organization_id,\r\n                student_reference.student_unique_id\r\n            ORDER BY school_year DESC, extracted_timestamp DESC\r\n        ) AS rank,\r\n        *\r\n    FROM parsed_data\r\n\r\n)\r\n\r\nSELECT * EXCEPT (extracted_timestamp, rank)\r\nFROM ranked\r\nWHERE\r\n    rank = 1\r\n    AND id NOT IN (\r\n        SELECT id FROM {{ ref('stg_edfi_deletes') }} edfi_deletes\r\n        WHERE ranked.school_year = edfi_deletes.school_year\r\n    )", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.project.staging.base_edfi_student_education_organization_associations", "model.project.stg_edfi_deletes"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_student_education_organization_associations"], "unique_id": "model.project.stg_edfi_student_education_organization_associations", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "staging/edfi/stg_edfi_student_education_organization_associations.sql", "original_file_path": "models/staging/edfi/stg_edfi_student_education_organization_associations.sql", "name": "stg_edfi_student_education_organization_associations", "alias": "stg_edfi_student_education_organization_associations", "checksum": {"name": "sha256", "checksum": "a68ee81c53fd95780bee21eed5de8ecca0c4d5a760b33872c45bd5e80ed76145"}, "tags": ["amt"], "refs": [["stg_edfi_deletes"]], "sources": [["staging", "base_edfi_student_education_organization_associations"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_student_education_organization_associations.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "amt", "labels": {"edfi_version": "5_3"}}, "created_at": 1643419470.2681174, "compiled_sql": "WITH parsed_data AS (\n\n    SELECT\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n        JSON_VALUE(data, '$.id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        STRUCT(\n            JSON_VALUE(data, '$.educationOrganizationReference.educationOrganizationId') AS education_organization_id\n        ) AS education_organization_reference,\n        STRUCT(\n            JSON_VALUE(data, '$.studentReference.studentUniqueId') AS student_unique_id\n        ) AS student_reference,\n        ARRAY(\n            SELECT AS STRUCT \n                JSON_VALUE(email, \"$.electronicMailAddress\") AS address,\n                SPLIT(JSON_VALUE(email, \"$.electronicMailTypeDescriptor\"), '#')[OFFSET(1)] AS type_descriptor,\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.electronicMails\")) email \n        ) AS electronic_mail,\n        SPLIT(JSON_VALUE(data, '$.limitedEnglishProficiencyDescriptor'), '#')[OFFSET(1)] AS limited_english_proficiency_descriptor,\n        CAST(JSON_VALUE(data, '$.hispanicLatinoEthnicity') AS BOOL) AS hispanic_latino_ethnicity,\n        SPLIT(JSON_VALUE(data, '$.sexDescriptor'), '#')[OFFSET(1)] AS sex_descriptor,\n        ARRAY(\n            SELECT AS STRUCT \n                JSON_VALUE(student_indicators, \"$.indicatorName\") AS name,\n                JSON_VALUE(student_indicators, \"$.designatedBy\") AS designated_by,\n                JSON_VALUE(student_indicators, \"$.indicator\") AS indicator,\n                JSON_VALUE(student_indicators, \"$.indicatorGroup\") AS indicator_group,\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.studentIndicators\")) student_indicators \n        ) AS student_indicators,\n        ARRAY(\n            SELECT AS STRUCT \n                SPLIT(JSON_VALUE(cohort_years, '$.cohortYearTypeDescriptor'), '#')[OFFSET(1)] AS cohort_type_descriptor,\n                SPLIT(JSON_VALUE(cohort_years, '$.termDescriptor'), '#')[OFFSET(1)] AS term_descriptor,\n                JSON_VALUE(cohort_years, \"$.schoolYearTypeReference.schoolYear\") AS school_year,\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.cohortYears\")) cohort_years \n        ) AS cohort_years,\n        ARRAY(\n            SELECT AS STRUCT \n                SPLIT(JSON_VALUE(disabilities, '$.disabilityDescriptor'), '#')[OFFSET(1)] AS disability_descriptor,\n                SPLIT(JSON_VALUE(disabilities, '$.disabilityDeterminationSourceTypeDescriptor'), '#')[OFFSET(1)] AS disability_determination_source_type_descriptor,\n                JSON_VALUE(disabilities, \"$.disabilityDiagnosis\") AS disability_diagnosis,\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.disabilities\")) disabilities \n        ) AS disabilities,\n        ARRAY(\n            SELECT AS STRUCT \n                SPLIT(JSON_VALUE(languages, '$.languageDescriptor'), '#')[OFFSET(1)] AS language_descriptor,\n                ARRAY(\n                    SELECT AS STRUCT \n                        SPLIT(JSON_VALUE(uses, '$.languageUseDescriptor'), '#')[OFFSET(1)] AS language_use_descriptor\n                    FROM UNNEST(JSON_QUERY_ARRAY(languages, '$.uses')) AS uses\n                ) AS uses\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.languages\")) languages \n        ) AS languages,\n        ARRAY(\n            SELECT AS STRUCT \n                SPLIT(JSON_VALUE(races, \"$.raceDescriptor\"), '#')[OFFSET(1)] AS race_descriptor\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.races\")) races \n        ) AS races,\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_student_education_organization_associations`\n\n),\n\nranked AS (\n\n    SELECT\n        ROW_NUMBER() OVER (\n            PARTITION BY\n                school_year,\n                education_organization_reference.education_organization_id,\n                student_reference.student_unique_id\n            ORDER BY school_year DESC, extracted_timestamp DESC\n        ) AS rank,\n        *\n    FROM parsed_data\n\n)\n\nSELECT * EXCEPT (extracted_timestamp, rank)\nFROM ranked\nWHERE\n    rank = 1\n    AND id NOT IN (\n        SELECT id FROM `gcp-proj-id`.`dev_staging`.`stg_edfi_deletes` edfi_deletes\n        WHERE ranked.school_year = edfi_deletes.school_year\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_staging`.`stg_edfi_student_education_organization_associations`"}, "model.project.stg_edfi_courses": {"raw_sql": "WITH parsed_data AS (\r\n\r\n    SELECT\r\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\r\n        JSON_VALUE(data, '$.id') AS id,\r\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\r\n        JSON_VALUE(data, '$.courseCode') AS course_code,\r\n        JSON_VALUE(data, '$.courseTitle') AS course_title,\r\n        JSON_VALUE(data, '$.courseDescription') AS course_description,\r\n        SPLIT(JSON_VALUE(data, \"$.academicSubjectDescriptor\"), '#')[OFFSET(1)] AS academic_subject_descriptor,\r\n        SPLIT(JSON_VALUE(data, \"$.careerPathwayDescriptor\"), '#')[OFFSET(1)] AS career_pathway_descriptor,\r\n        SPLIT(JSON_VALUE(data, \"$.courseDefinedByDescriptor\"), '#')[OFFSET(1)] AS course_defined_by_descriptor,\r\n        SPLIT(JSON_VALUE(data, \"$.courseGPAApplicabilityDescriptor\"), '#')[OFFSET(1)] AS course_gpa_applicability_descriptor,\r\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, \"$.dateCourseAdopted\")) AS date_course_adopted,\r\n        CAST(JSON_VALUE(data, \"$.highSchoolCourseRequirement\") AS BOOL) AS high_school_course_requirement,\r\n        CAST(JSON_VALUE(data, \"$.maxCompletionsForCredit\") AS float64) AS max_completions_for_credit,\r\n        CAST(JSON_VALUE(data, \"$.maximumAvailableCreditConversion\") AS float64) AS maximum_available_credit_conversion,\r\n        CAST(JSON_VALUE(data, \"$.maximumAvailableCredits\") AS float64) AS maximum_available_credits,\r\n        CAST(JSON_VALUE(data, \"$.minimumAvailableCreditConversion\") AS float64) AS minimum_available_credit_conversion,\r\n        CAST(JSON_VALUE(data, \"$.minimumAvailableCredits\") AS float64) AS minimum_available_credits,\r\n        CAST(JSON_VALUE(data, \"$.numberOfParts\") AS int64) AS number_of_parts,\r\n        STRUCT(\r\n            JSON_VALUE(data, '$.educationOrganizationReference.educationOrganizationId') AS education_organization_id\r\n        ) AS education_organization_reference,\r\n        ARRAY(\r\n            SELECT AS STRUCT \r\n                SPLIT(JSON_VALUE(levels, \"$.competencyLevelDescriptor\"), '#')[OFFSET(1)] AS competency_level_descriptor,\r\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.competencyLevels\")) levels \r\n        ) AS competency_levels,\r\n        ARRAY(\r\n            SELECT AS STRUCT \r\n                SPLIT(JSON_VALUE(codes, \"$.identificationCodes.courseIdentificationSystemDescriptor\"), '#')[OFFSET(1)] AS course_identification_system_descriptor,\r\n                SPLIT(JSON_VALUE(codes, \"$.identificationCodes.assigningOrganizationIdentificationCode\"), '#')[OFFSET(1)] AS assigning_organization_identification_code,\r\n                JSON_VALUE(codes, \"$.identificationCodes.courseCatalogURL\") AS course_catalog_url,\r\n                JSON_VALUE(codes, \"$.identificationCodes.identificationCode\") AS identification_code\r\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.identificationCodes\")) codes \r\n        ) AS identification_codes\r\n    FROM {{ source('staging', 'base_edfi_courses') }}\r\n\r\n),\r\n\r\nranked AS (\r\n\r\n    SELECT\r\n        ROW_NUMBER() OVER (\r\n            PARTITION BY\r\n                school_year,\r\n                education_organization_reference.education_organization_id,\r\n                course_code\r\n            ORDER BY school_year DESC, extracted_timestamp DESC\r\n        ) AS rank,\r\n        *\r\n    FROM parsed_data\r\n\r\n)\r\n\r\nSELECT * EXCEPT (extracted_timestamp, rank)\r\nFROM ranked\r\nWHERE\r\n    rank = 1\r\n    AND id NOT IN (\r\n        SELECT id FROM {{ ref('stg_edfi_deletes') }} edfi_deletes\r\n        WHERE ranked.school_year = edfi_deletes.school_year\r\n    )", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.project.staging.base_edfi_courses", "model.project.stg_edfi_deletes"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_courses"], "unique_id": "model.project.stg_edfi_courses", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "staging/edfi/stg_edfi_courses.sql", "original_file_path": "models/staging/edfi/stg_edfi_courses.sql", "name": "stg_edfi_courses", "alias": "stg_edfi_courses", "checksum": {"name": "sha256", "checksum": "6d8940554cc035f16e497064a28ac6d8d694471fbeb299f942664024f7b7a4c7"}, "tags": ["amt"], "refs": [["stg_edfi_deletes"]], "sources": [["staging", "base_edfi_courses"]], "description": "This educational entity represents the organization of subject matter and related learning experiences provided for the instruction of students on a regular or systematic basis.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/staging/edfi/stg_edfi.yml", "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_courses.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "amt", "labels": {"edfi_version": "5_3"}}, "created_at": 1643419470.6664882, "compiled_sql": "WITH parsed_data AS (\n\n    SELECT\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n        JSON_VALUE(data, '$.id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        JSON_VALUE(data, '$.courseCode') AS course_code,\n        JSON_VALUE(data, '$.courseTitle') AS course_title,\n        JSON_VALUE(data, '$.courseDescription') AS course_description,\n        SPLIT(JSON_VALUE(data, \"$.academicSubjectDescriptor\"), '#')[OFFSET(1)] AS academic_subject_descriptor,\n        SPLIT(JSON_VALUE(data, \"$.careerPathwayDescriptor\"), '#')[OFFSET(1)] AS career_pathway_descriptor,\n        SPLIT(JSON_VALUE(data, \"$.courseDefinedByDescriptor\"), '#')[OFFSET(1)] AS course_defined_by_descriptor,\n        SPLIT(JSON_VALUE(data, \"$.courseGPAApplicabilityDescriptor\"), '#')[OFFSET(1)] AS course_gpa_applicability_descriptor,\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, \"$.dateCourseAdopted\")) AS date_course_adopted,\n        CAST(JSON_VALUE(data, \"$.highSchoolCourseRequirement\") AS BOOL) AS high_school_course_requirement,\n        CAST(JSON_VALUE(data, \"$.maxCompletionsForCredit\") AS float64) AS max_completions_for_credit,\n        CAST(JSON_VALUE(data, \"$.maximumAvailableCreditConversion\") AS float64) AS maximum_available_credit_conversion,\n        CAST(JSON_VALUE(data, \"$.maximumAvailableCredits\") AS float64) AS maximum_available_credits,\n        CAST(JSON_VALUE(data, \"$.minimumAvailableCreditConversion\") AS float64) AS minimum_available_credit_conversion,\n        CAST(JSON_VALUE(data, \"$.minimumAvailableCredits\") AS float64) AS minimum_available_credits,\n        CAST(JSON_VALUE(data, \"$.numberOfParts\") AS int64) AS number_of_parts,\n        STRUCT(\n            JSON_VALUE(data, '$.educationOrganizationReference.educationOrganizationId') AS education_organization_id\n        ) AS education_organization_reference,\n        ARRAY(\n            SELECT AS STRUCT \n                SPLIT(JSON_VALUE(levels, \"$.competencyLevelDescriptor\"), '#')[OFFSET(1)] AS competency_level_descriptor,\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.competencyLevels\")) levels \n        ) AS competency_levels,\n        ARRAY(\n            SELECT AS STRUCT \n                SPLIT(JSON_VALUE(codes, \"$.identificationCodes.courseIdentificationSystemDescriptor\"), '#')[OFFSET(1)] AS course_identification_system_descriptor,\n                SPLIT(JSON_VALUE(codes, \"$.identificationCodes.assigningOrganizationIdentificationCode\"), '#')[OFFSET(1)] AS assigning_organization_identification_code,\n                JSON_VALUE(codes, \"$.identificationCodes.courseCatalogURL\") AS course_catalog_url,\n                JSON_VALUE(codes, \"$.identificationCodes.identificationCode\") AS identification_code\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.identificationCodes\")) codes \n        ) AS identification_codes\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_courses`\n\n),\n\nranked AS (\n\n    SELECT\n        ROW_NUMBER() OVER (\n            PARTITION BY\n                school_year,\n                education_organization_reference.education_organization_id,\n                course_code\n            ORDER BY school_year DESC, extracted_timestamp DESC\n        ) AS rank,\n        *\n    FROM parsed_data\n\n)\n\nSELECT * EXCEPT (extracted_timestamp, rank)\nFROM ranked\nWHERE\n    rank = 1\n    AND id NOT IN (\n        SELECT id FROM `gcp-proj-id`.`dev_staging`.`stg_edfi_deletes` edfi_deletes\n        WHERE ranked.school_year = edfi_deletes.school_year\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_staging`.`stg_edfi_courses`"}, "model.project.stg_edfi_sessions": {"raw_sql": "WITH parsed_data AS (\r\n\r\n    SELECT\r\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\r\n        JSON_VALUE(data, '$.id') AS id,\r\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\r\n        JSON_VALUE(data, '$.sessionName') AS session_name,\r\n        STRUCT(\r\n            JSON_VALUE(data, '$.schoolReference.schoolId') AS school_id\r\n        ) AS school_reference,\r\n        STRUCT(\r\n            CAST(JSON_VALUE(data, '$.schoolYearTypeReference.schoolYear') AS int64) AS school_year\r\n        ) AS school_year_type_reference,\r\n        SPLIT(JSON_VALUE(data, \"$.termDescriptor\"), '#')[OFFSET(1)] AS term_descriptor,\r\n        CAST(JSON_VALUE(data, \"$.totalInstructionalDays\") AS int64) AS total_instructional_days,\r\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, \"$.beginDate\")) AS begin_date,\r\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, \"$.endDate\")) AS end_date,\r\n        ARRAY(\r\n            SELECT AS STRUCT\r\n                STRUCT(\r\n                    SPLIT(JSON_VALUE(grading_periods, '$.gradingPeriodReference.gradingPeriodDescriptor'), '#')[OFFSET(1)] AS grading_period_descriptor,\r\n                    CAST(JSON_VALUE(grading_periods, \"$.gradingPeriodReference.periodSequence\") AS int64) AS period_sequence,\r\n                    JSON_VALUE(grading_periods, \"$.gradingPeriodReference.schoolId\") AS school_id,\r\n                    JSON_VALUE(grading_periods, \"$.gradingPeriodReference.schoolYear\") AS school_year\r\n                ) AS grading_period_reference\r\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.gradingPeriods\")) grading_periods \r\n        ) AS grading_periods\r\n    FROM {{ source('staging', 'base_edfi_sessions') }}\r\n\r\n),\r\n\r\nranked AS (\r\n\r\n    SELECT\r\n        ROW_NUMBER() OVER (\r\n            PARTITION BY\r\n                school_year,\r\n                school_year_type_reference.school_year,\r\n                school_reference.school_id,\r\n                session_name\r\n            ORDER BY school_year DESC, extracted_timestamp DESC\r\n        ) AS rank,\r\n        *\r\n    FROM parsed_data\r\n\r\n)\r\n\r\nSELECT * EXCEPT (extracted_timestamp, rank, school_year),\r\n    COALESCE(school_year_type_reference.school_year, school_year) AS school_year\r\nFROM ranked\r\nWHERE\r\n    rank = 1\r\n    AND id NOT IN (\r\n        SELECT id FROM {{ ref('stg_edfi_deletes') }} edfi_deletes\r\n        WHERE ranked.school_year = edfi_deletes.school_year\r\n    )", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.project.staging.base_edfi_sessions", "model.project.stg_edfi_deletes"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_sessions"], "unique_id": "model.project.stg_edfi_sessions", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "staging/edfi/stg_edfi_sessions.sql", "original_file_path": "models/staging/edfi/stg_edfi_sessions.sql", "name": "stg_edfi_sessions", "alias": "stg_edfi_sessions", "checksum": {"name": "sha256", "checksum": "cfb25ce36a80d5e3997689a2f39e7955e90732d00d6a6df26f925af65d3eb55c"}, "tags": ["amt"], "refs": [["stg_edfi_deletes"]], "sources": [["staging", "base_edfi_sessions"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_sessions.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "amt", "labels": {"edfi_version": "5_3"}}, "created_at": 1643419470.2730887, "compiled_sql": "WITH parsed_data AS (\n\n    SELECT\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n        JSON_VALUE(data, '$.id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        JSON_VALUE(data, '$.sessionName') AS session_name,\n        STRUCT(\n            JSON_VALUE(data, '$.schoolReference.schoolId') AS school_id\n        ) AS school_reference,\n        STRUCT(\n            CAST(JSON_VALUE(data, '$.schoolYearTypeReference.schoolYear') AS int64) AS school_year\n        ) AS school_year_type_reference,\n        SPLIT(JSON_VALUE(data, \"$.termDescriptor\"), '#')[OFFSET(1)] AS term_descriptor,\n        CAST(JSON_VALUE(data, \"$.totalInstructionalDays\") AS int64) AS total_instructional_days,\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, \"$.beginDate\")) AS begin_date,\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, \"$.endDate\")) AS end_date,\n        ARRAY(\n            SELECT AS STRUCT\n                STRUCT(\n                    SPLIT(JSON_VALUE(grading_periods, '$.gradingPeriodReference.gradingPeriodDescriptor'), '#')[OFFSET(1)] AS grading_period_descriptor,\n                    CAST(JSON_VALUE(grading_periods, \"$.gradingPeriodReference.periodSequence\") AS int64) AS period_sequence,\n                    JSON_VALUE(grading_periods, \"$.gradingPeriodReference.schoolId\") AS school_id,\n                    JSON_VALUE(grading_periods, \"$.gradingPeriodReference.schoolYear\") AS school_year\n                ) AS grading_period_reference\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.gradingPeriods\")) grading_periods \n        ) AS grading_periods\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_sessions`\n\n),\n\nranked AS (\n\n    SELECT\n        ROW_NUMBER() OVER (\n            PARTITION BY\n                school_year,\n                school_year_type_reference.school_year,\n                school_reference.school_id,\n                session_name\n            ORDER BY school_year DESC, extracted_timestamp DESC\n        ) AS rank,\n        *\n    FROM parsed_data\n\n)\n\nSELECT * EXCEPT (extracted_timestamp, rank, school_year),\n    COALESCE(school_year_type_reference.school_year, school_year) AS school_year\nFROM ranked\nWHERE\n    rank = 1\n    AND id NOT IN (\n        SELECT id FROM `gcp-proj-id`.`dev_staging`.`stg_edfi_deletes` edfi_deletes\n        WHERE ranked.school_year = edfi_deletes.school_year\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_staging`.`stg_edfi_sessions`"}, "model.project.stg_edfi_student_parent_associations": {"raw_sql": "WITH parsed_data AS (\r\n\r\n    SELECT\r\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\r\n        JSON_VALUE(data, '$.id') AS id,\r\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\r\n        STRUCT(\r\n            JSON_VALUE(data, '$.parentReference.parentUniqueId') AS parent_unique_id\r\n        ) AS parent_reference,\r\n        STRUCT(\r\n            JSON_VALUE(data, '$.studentReference.studentUniqueId') AS student_unique_id\r\n        ) AS student_reference,\r\n        CAST(JSON_VALUE(data, '$.contactPriority') AS int64) AS contact_priority,\r\n        JSON_VALUE(data, '$.contactRestrictions') AS contact_restrictions,\r\n        CAST(JSON_VALUE(data, '$.emergencyContactStatus') AS BOOL) AS emergency_contact_status,\r\n        CAST(JSON_VALUE(data, '$.legalGuardian') AS BOOL) AS legal_guardian,\r\n        CAST(JSON_VALUE(data, '$.livesWith') AS BOOL) AS lives_with,\r\n        CAST(JSON_VALUE(data, '$.primaryContactStatus') AS BOOL) AS primary_contact_status,\r\n        SPLIT(JSON_VALUE(data, '$.relationDescriptor'), '#')[OFFSET(1)] AS relation_descriptor\r\n    FROM {{ source('staging', 'base_edfi_student_parent_associations') }}\r\n\r\n),\r\n\r\nranked AS (\r\n\r\n    SELECT\r\n        ROW_NUMBER() OVER (\r\n            PARTITION BY\r\n                school_year,\r\n                parent_reference.parent_unique_id,\r\n                student_reference.student_unique_id\r\n            ORDER BY school_year DESC, extracted_timestamp DESC\r\n        ) AS rank,\r\n        *\r\n    FROM parsed_data\r\n\r\n)\r\n\r\nSELECT * EXCEPT (extracted_timestamp, rank)\r\nFROM ranked\r\nWHERE\r\n    rank = 1\r\n    AND id NOT IN (\r\n        SELECT id FROM {{ ref('stg_edfi_deletes') }} edfi_deletes\r\n        WHERE ranked.school_year = edfi_deletes.school_year\r\n    )", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.project.staging.base_edfi_student_parent_associations", "model.project.stg_edfi_deletes"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_student_parent_associations"], "unique_id": "model.project.stg_edfi_student_parent_associations", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "staging/edfi/stg_edfi_student_parent_associations.sql", "original_file_path": "models/staging/edfi/stg_edfi_student_parent_associations.sql", "name": "stg_edfi_student_parent_associations", "alias": "stg_edfi_student_parent_associations", "checksum": {"name": "sha256", "checksum": "721730b933f554bef1499be49dfe2ee11dae4cc81b9c630e2a05b4b9bf0d8b9d"}, "tags": ["amt"], "refs": [["stg_edfi_deletes"]], "sources": [["staging", "base_edfi_student_parent_associations"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_student_parent_associations.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "amt", "labels": {"edfi_version": "5_3"}}, "created_at": 1643419470.2754958, "compiled_sql": "WITH parsed_data AS (\n\n    SELECT\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n        JSON_VALUE(data, '$.id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        STRUCT(\n            JSON_VALUE(data, '$.parentReference.parentUniqueId') AS parent_unique_id\n        ) AS parent_reference,\n        STRUCT(\n            JSON_VALUE(data, '$.studentReference.studentUniqueId') AS student_unique_id\n        ) AS student_reference,\n        CAST(JSON_VALUE(data, '$.contactPriority') AS int64) AS contact_priority,\n        JSON_VALUE(data, '$.contactRestrictions') AS contact_restrictions,\n        CAST(JSON_VALUE(data, '$.emergencyContactStatus') AS BOOL) AS emergency_contact_status,\n        CAST(JSON_VALUE(data, '$.legalGuardian') AS BOOL) AS legal_guardian,\n        CAST(JSON_VALUE(data, '$.livesWith') AS BOOL) AS lives_with,\n        CAST(JSON_VALUE(data, '$.primaryContactStatus') AS BOOL) AS primary_contact_status,\n        SPLIT(JSON_VALUE(data, '$.relationDescriptor'), '#')[OFFSET(1)] AS relation_descriptor\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_student_parent_associations`\n\n),\n\nranked AS (\n\n    SELECT\n        ROW_NUMBER() OVER (\n            PARTITION BY\n                school_year,\n                parent_reference.parent_unique_id,\n                student_reference.student_unique_id\n            ORDER BY school_year DESC, extracted_timestamp DESC\n        ) AS rank,\n        *\n    FROM parsed_data\n\n)\n\nSELECT * EXCEPT (extracted_timestamp, rank)\nFROM ranked\nWHERE\n    rank = 1\n    AND id NOT IN (\n        SELECT id FROM `gcp-proj-id`.`dev_staging`.`stg_edfi_deletes` edfi_deletes\n        WHERE ranked.school_year = edfi_deletes.school_year\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_staging`.`stg_edfi_student_parent_associations`"}, "model.project.stg_edfi_student_section_associations": {"raw_sql": "WITH parsed_data AS (\r\n\r\n    SELECT\r\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\r\n        JSON_VALUE(data, '$.id') AS id,\r\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\r\n        STRUCT(\r\n            JSON_VALUE(data, '$.studentReference.studentUniqueId') AS student_unique_id\r\n        ) AS student_reference,\r\n        STRUCT(\r\n            JSON_VALUE(data, '$.sectionReference.localCourseCode') AS local_course_code,\r\n            JSON_VALUE(data, '$.sectionReference.schoolId') AS school_id,\r\n            CAST(JSON_VALUE(data, '$.sectionReference.schoolYear') AS int64) AS school_year,\r\n            JSON_VALUE(data, '$.sectionReference.sectionIdentifier') AS section_identifier,\r\n            JSON_VALUE(data, '$.sectionReference.sessionName') AS session_name\r\n        ) AS section_reference,\r\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, \"$.beginDate\")) AS begin_date,\r\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, \"$.endDate\")) AS end_date,\r\n        SPLIT(JSON_VALUE(data, \"$.attemptStatusDescriptor\"), '#')[OFFSET(1)] AS attempt_status_descriptor,\r\n        CAST(JSON_VALUE(data, '$.homeroomIndicator') AS BOOL) AS homeroom_indicator,\r\n        SPLIT(JSON_VALUE(data, \"$.repeatIdentifierDescriptor\"), '#')[OFFSET(1)] AS repeat_identifier_descriptor,\r\n        CAST(JSON_VALUE(data, '$.teacherStudentDataLinkExclusion') AS BOOL) AS teacher_student_data_link_exclusion\r\n    FROM {{ source('staging', 'base_edfi_student_section_associations') }}\r\n\r\n),\r\n\r\nranked AS (\r\n\r\n    SELECT\r\n        ROW_NUMBER() OVER (\r\n            PARTITION BY\r\n                school_year,\r\n                section_reference.school_year,\r\n                section_reference.school_id,\r\n                section_reference.session_name,\r\n                section_reference.local_course_code,\r\n                section_reference.section_identifier,\r\n                student_reference.student_unique_id,\r\n                begin_date\r\n            ORDER BY school_year DESC, extracted_timestamp DESC\r\n        ) AS rank,\r\n        *\r\n    FROM parsed_data\r\n\r\n)\r\n\r\nSELECT * EXCEPT (extracted_timestamp, rank, school_year),\r\n    COALESCE(section_reference.school_year, school_year) AS school_year\r\nFROM ranked\r\nWHERE\r\n    rank = 1\r\n    AND id NOT IN (\r\n        SELECT id FROM {{ ref('stg_edfi_deletes') }} edfi_deletes\r\n        WHERE ranked.school_year = edfi_deletes.school_year\r\n    )", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.project.staging.base_edfi_student_section_associations", "model.project.stg_edfi_deletes"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_student_section_associations"], "unique_id": "model.project.stg_edfi_student_section_associations", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "staging/edfi/stg_edfi_student_section_associations.sql", "original_file_path": "models/staging/edfi/stg_edfi_student_section_associations.sql", "name": "stg_edfi_student_section_associations", "alias": "stg_edfi_student_section_associations", "checksum": {"name": "sha256", "checksum": "a9091c8ee8f318d05d3b565fccc8062f4a7fb37bc49bfed491563573da73e50e"}, "tags": ["amt"], "refs": [["stg_edfi_deletes"]], "sources": [["staging", "base_edfi_student_section_associations"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_student_section_associations.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "amt", "labels": {"edfi_version": "5_3"}}, "created_at": 1643419470.2777717, "compiled_sql": "WITH parsed_data AS (\n\n    SELECT\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n        JSON_VALUE(data, '$.id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        STRUCT(\n            JSON_VALUE(data, '$.studentReference.studentUniqueId') AS student_unique_id\n        ) AS student_reference,\n        STRUCT(\n            JSON_VALUE(data, '$.sectionReference.localCourseCode') AS local_course_code,\n            JSON_VALUE(data, '$.sectionReference.schoolId') AS school_id,\n            CAST(JSON_VALUE(data, '$.sectionReference.schoolYear') AS int64) AS school_year,\n            JSON_VALUE(data, '$.sectionReference.sectionIdentifier') AS section_identifier,\n            JSON_VALUE(data, '$.sectionReference.sessionName') AS session_name\n        ) AS section_reference,\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, \"$.beginDate\")) AS begin_date,\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, \"$.endDate\")) AS end_date,\n        SPLIT(JSON_VALUE(data, \"$.attemptStatusDescriptor\"), '#')[OFFSET(1)] AS attempt_status_descriptor,\n        CAST(JSON_VALUE(data, '$.homeroomIndicator') AS BOOL) AS homeroom_indicator,\n        SPLIT(JSON_VALUE(data, \"$.repeatIdentifierDescriptor\"), '#')[OFFSET(1)] AS repeat_identifier_descriptor,\n        CAST(JSON_VALUE(data, '$.teacherStudentDataLinkExclusion') AS BOOL) AS teacher_student_data_link_exclusion\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_student_section_associations`\n\n),\n\nranked AS (\n\n    SELECT\n        ROW_NUMBER() OVER (\n            PARTITION BY\n                school_year,\n                section_reference.school_year,\n                section_reference.school_id,\n                section_reference.session_name,\n                section_reference.local_course_code,\n                section_reference.section_identifier,\n                student_reference.student_unique_id,\n                begin_date\n            ORDER BY school_year DESC, extracted_timestamp DESC\n        ) AS rank,\n        *\n    FROM parsed_data\n\n)\n\nSELECT * EXCEPT (extracted_timestamp, rank, school_year),\n    COALESCE(section_reference.school_year, school_year) AS school_year\nFROM ranked\nWHERE\n    rank = 1\n    AND id NOT IN (\n        SELECT id FROM `gcp-proj-id`.`dev_staging`.`stg_edfi_deletes` edfi_deletes\n        WHERE ranked.school_year = edfi_deletes.school_year\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_staging`.`stg_edfi_student_section_associations`"}, "model.project.stg_edfi_student_section_attendance_events": {"raw_sql": "WITH parsed_data AS (\r\n\r\n    SELECT\r\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\r\n        JSON_VALUE(data, '$.id') AS id,\r\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\r\n        STRUCT(\r\n            JSON_VALUE(data, '$.studentReference.studentUniqueId') AS student_unique_id\r\n        ) AS student_reference,\r\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, '$.eventDate')) AS event_date,\r\n        STRUCT(\r\n            JSON_VALUE(data, '$.sectionReference.localCourseCode') AS local_course_code,\r\n            JSON_VALUE(data, '$.sectionReference.schoolId') AS school_id,\r\n            CAST(JSON_VALUE(data, '$.sectionReference.schoolYear') AS int64) AS school_year,\r\n            JSON_VALUE(data, '$.sectionReference.sectionIdentifier') AS section_identifier,\r\n            JSON_VALUE(data, '$.sectionReference.sessionName') AS session_name\r\n        ) AS section_reference,\r\n        ARRAY(\r\n            SELECT AS STRUCT \r\n                STRUCT(\r\n                    JSON_VALUE(class_periods, \"$.classPeriodReference.classPeriodName\") AS class_period_name,\r\n                    JSON_VALUE(class_periods, '$.classPeriodReference.schoolId') AS school_id\r\n                ) AS class_period_reference\r\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.classPeriods\")) class_periods \r\n        ) AS class_periods,\r\n        JSON_VALUE(data, '$.arrivalTime') AS arrival_time,\r\n        JSON_VALUE(data, '$.departureTime') AS departure_time,\r\n        JSON_VALUE(data, '$.attendanceEventReason') AS attendance_event_reason,\r\n        CAST(JSON_VALUE(data, '$.eventDuration') AS float64) AS event_duration,\r\n        CAST(JSON_VALUE(data, '$.sectionAttendanceDuration') AS float64) AS section_attendance_duration,\r\n        SPLIT(JSON_VALUE(data, '$.attendanceEventCategoryDescriptor'), '#')[OFFSET(1)] AS attendance_event_category_descriptor,\r\n        SPLIT(JSON_VALUE(data, '$.educationalEnvironmentDescriptor'), '#')[OFFSET(1)] AS educational_environment_descriptor,\r\n    FROM {{ source('staging', 'base_edfi_student_section_attendance_events') }}\r\n\r\n),\r\n\r\nranked AS (\r\n\r\n    SELECT\r\n        ROW_NUMBER() OVER (\r\n            PARTITION BY\r\n                school_year,\r\n                section_reference.school_year,\r\n                section_reference.school_id,\r\n                section_reference.session_name,\r\n                section_reference.local_course_code,\r\n                section_reference.section_identifier,\r\n                student_reference.student_unique_id,\r\n                event_date,\r\n                attendance_event_category_descriptor\r\n            ORDER BY school_year DESC, extracted_timestamp DESC\r\n        ) AS rank,\r\n        *\r\n    FROM parsed_data\r\n\r\n)\r\n\r\nSELECT * EXCEPT (extracted_timestamp, rank, school_year),\r\n    COALESCE(section_reference.school_year, school_year) AS school_year\r\nFROM ranked\r\nWHERE\r\n    rank = 1\r\n    AND id NOT IN (\r\n        SELECT id FROM {{ ref('stg_edfi_deletes') }} edfi_deletes\r\n        WHERE ranked.school_year = edfi_deletes.school_year\r\n    )", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.project.staging.base_edfi_student_section_attendance_events", "model.project.stg_edfi_deletes"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_student_section_attendance_events"], "unique_id": "model.project.stg_edfi_student_section_attendance_events", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "staging/edfi/stg_edfi_student_section_attendance_events.sql", "original_file_path": "models/staging/edfi/stg_edfi_student_section_attendance_events.sql", "name": "stg_edfi_student_section_attendance_events", "alias": "stg_edfi_student_section_attendance_events", "checksum": {"name": "sha256", "checksum": "3bcf8a644856553cc61e4f08b2fce5a6e423295343e0191a48f8164a9cd9e226"}, "tags": ["amt"], "refs": [["stg_edfi_deletes"]], "sources": [["staging", "base_edfi_student_section_attendance_events"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_student_section_attendance_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "amt", "labels": {"edfi_version": "5_3"}}, "created_at": 1643419470.2800517, "compiled_sql": "WITH parsed_data AS (\n\n    SELECT\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n        JSON_VALUE(data, '$.id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        STRUCT(\n            JSON_VALUE(data, '$.studentReference.studentUniqueId') AS student_unique_id\n        ) AS student_reference,\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, '$.eventDate')) AS event_date,\n        STRUCT(\n            JSON_VALUE(data, '$.sectionReference.localCourseCode') AS local_course_code,\n            JSON_VALUE(data, '$.sectionReference.schoolId') AS school_id,\n            CAST(JSON_VALUE(data, '$.sectionReference.schoolYear') AS int64) AS school_year,\n            JSON_VALUE(data, '$.sectionReference.sectionIdentifier') AS section_identifier,\n            JSON_VALUE(data, '$.sectionReference.sessionName') AS session_name\n        ) AS section_reference,\n        ARRAY(\n            SELECT AS STRUCT \n                STRUCT(\n                    JSON_VALUE(class_periods, \"$.classPeriodReference.classPeriodName\") AS class_period_name,\n                    JSON_VALUE(class_periods, '$.classPeriodReference.schoolId') AS school_id\n                ) AS class_period_reference\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.classPeriods\")) class_periods \n        ) AS class_periods,\n        JSON_VALUE(data, '$.arrivalTime') AS arrival_time,\n        JSON_VALUE(data, '$.departureTime') AS departure_time,\n        JSON_VALUE(data, '$.attendanceEventReason') AS attendance_event_reason,\n        CAST(JSON_VALUE(data, '$.eventDuration') AS float64) AS event_duration,\n        CAST(JSON_VALUE(data, '$.sectionAttendanceDuration') AS float64) AS section_attendance_duration,\n        SPLIT(JSON_VALUE(data, '$.attendanceEventCategoryDescriptor'), '#')[OFFSET(1)] AS attendance_event_category_descriptor,\n        SPLIT(JSON_VALUE(data, '$.educationalEnvironmentDescriptor'), '#')[OFFSET(1)] AS educational_environment_descriptor,\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_student_section_attendance_events`\n\n),\n\nranked AS (\n\n    SELECT\n        ROW_NUMBER() OVER (\n            PARTITION BY\n                school_year,\n                section_reference.school_year,\n                section_reference.school_id,\n                section_reference.session_name,\n                section_reference.local_course_code,\n                section_reference.section_identifier,\n                student_reference.student_unique_id,\n                event_date,\n                attendance_event_category_descriptor\n            ORDER BY school_year DESC, extracted_timestamp DESC\n        ) AS rank,\n        *\n    FROM parsed_data\n\n)\n\nSELECT * EXCEPT (extracted_timestamp, rank, school_year),\n    COALESCE(section_reference.school_year, school_year) AS school_year\nFROM ranked\nWHERE\n    rank = 1\n    AND id NOT IN (\n        SELECT id FROM `gcp-proj-id`.`dev_staging`.`stg_edfi_deletes` edfi_deletes\n        WHERE ranked.school_year = edfi_deletes.school_year\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_staging`.`stg_edfi_student_section_attendance_events`"}, "model.project.stg_edfi_grades": {"raw_sql": "WITH parsed_data AS (\r\n\r\n    SELECT\r\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\r\n        JSON_VALUE(data, '$.id') AS id,\r\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\r\n        CAST(JSON_VALUE(data, '$.numericGradeEarned') AS float64) AS numeric_grade_earned,\r\n        JSON_VALUE(data, '$.letterGradeEarned') AS letter_grade_earned,\r\n        SPLIT(JSON_VALUE(data, '$.performanceBaseConversionDescriptor'), '#')[OFFSET(1)] AS performance_base_conversion_descriptor, \r\n        SPLIT(JSON_VALUE(data, '$.gradeTypeDescriptor'), '#')[OFFSET(1)] AS grade_type_descriptor, \r\n        JSON_VALUE(data, '$.diagnosticStatement') AS diagnostic_statement,\r\n        STRUCT(\r\n            SPLIT(JSON_VALUE(data, '$.gradingPeriodReference.gradingPeriodDescriptor'), '#')[OFFSET(1)] AS grading_period_descriptor,\r\n            CAST(JSON_VALUE(data, '$.gradingPeriodReference.periodSequence') AS int64) AS period_sequence,\r\n            JSON_VALUE(data, '$.gradingPeriodReference.schoolId') AS school_id,\r\n            CAST(JSON_VALUE(data, '$.gradingPeriodReference.schoolYear') AS int64) AS school_year\r\n        ) AS grading_period_reference,\r\n        STRUCT(\r\n            EXTRACT(DATE FROM PARSE_TIMESTAMP('%Y-%m-%dT%TZ', JSON_VALUE(data, '$.studentSectionAssociationReference.beginDate'))) AS begin_date,\r\n            JSON_VALUE(data, '$.studentSectionAssociationReference.localCourseCode') AS local_course_code,\r\n            JSON_VALUE(data, '$.studentSectionAssociationReference.schoolId') AS school_id,\r\n            JSON_VALUE(data, '$.studentSectionAssociationReference.schoolYear') AS school_year,\r\n            JSON_VALUE(data, '$.studentSectionAssociationReference.sectionIdentifier') AS section_identifier,\r\n            JSON_VALUE(data, '$.studentSectionAssociationReference.sessionName') AS session_name,\r\n            JSON_VALUE(data, '$.studentSectionAssociationReference.studentUniqueId') AS student_unique_id\r\n        ) AS student_section_association_reference\r\n    FROM {{ source('staging', 'base_edfi_grades') }}\r\n\r\n),\r\n\r\nranked AS (\r\n\r\n    SELECT\r\n        ROW_NUMBER() OVER (\r\n            PARTITION BY\r\n                school_year,\r\n                grading_period_reference.school_year,\r\n                grading_period_reference.grading_period_descriptor,\r\n                grading_period_reference.period_sequence,\r\n                student_section_association_reference.school_year,\r\n                student_section_association_reference.school_id,\r\n                student_section_association_reference.session_name,\r\n                student_section_association_reference.local_course_code,\r\n                student_section_association_reference.section_identifier,\r\n                student_section_association_reference.student_unique_id,\r\n                student_section_association_reference.begin_date,\r\n                grade_type_descriptor\r\n            ORDER BY school_year DESC, extracted_timestamp DESC\r\n        ) AS rank,\r\n        *\r\n    FROM parsed_data\r\n\r\n)\r\n\r\nSELECT * EXCEPT (extracted_timestamp, rank, school_year),\r\n    COALESCE(grading_period_reference.school_year, school_year) AS school_year\r\nFROM ranked\r\nWHERE\r\n    rank = 1\r\n    AND id NOT IN (\r\n        SELECT id FROM {{ ref('stg_edfi_deletes') }} edfi_deletes\r\n        WHERE ranked.school_year = edfi_deletes.school_year\r\n    )", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.project.staging.base_edfi_grades", "model.project.stg_edfi_deletes"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_grades"], "unique_id": "model.project.stg_edfi_grades", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "staging/edfi/stg_edfi_grades.sql", "original_file_path": "models/staging/edfi/stg_edfi_grades.sql", "name": "stg_edfi_grades", "alias": "stg_edfi_grades", "checksum": {"name": "sha256", "checksum": "aa69f525e2c24ce0ecc3bd0bd880f90695ad602dfa7b0ed55994d9cb4e1796ff"}, "tags": ["amt"], "refs": [["stg_edfi_deletes"]], "sources": [["staging", "base_edfi_grades"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_grades.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "amt", "labels": {"edfi_version": "5_3"}}, "created_at": 1643419470.2825296, "compiled_sql": "WITH parsed_data AS (\n\n    SELECT\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n        JSON_VALUE(data, '$.id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        CAST(JSON_VALUE(data, '$.numericGradeEarned') AS float64) AS numeric_grade_earned,\n        JSON_VALUE(data, '$.letterGradeEarned') AS letter_grade_earned,\n        SPLIT(JSON_VALUE(data, '$.performanceBaseConversionDescriptor'), '#')[OFFSET(1)] AS performance_base_conversion_descriptor, \n        SPLIT(JSON_VALUE(data, '$.gradeTypeDescriptor'), '#')[OFFSET(1)] AS grade_type_descriptor, \n        JSON_VALUE(data, '$.diagnosticStatement') AS diagnostic_statement,\n        STRUCT(\n            SPLIT(JSON_VALUE(data, '$.gradingPeriodReference.gradingPeriodDescriptor'), '#')[OFFSET(1)] AS grading_period_descriptor,\n            CAST(JSON_VALUE(data, '$.gradingPeriodReference.periodSequence') AS int64) AS period_sequence,\n            JSON_VALUE(data, '$.gradingPeriodReference.schoolId') AS school_id,\n            CAST(JSON_VALUE(data, '$.gradingPeriodReference.schoolYear') AS int64) AS school_year\n        ) AS grading_period_reference,\n        STRUCT(\n            EXTRACT(DATE FROM PARSE_TIMESTAMP('%Y-%m-%dT%TZ', JSON_VALUE(data, '$.studentSectionAssociationReference.beginDate'))) AS begin_date,\n            JSON_VALUE(data, '$.studentSectionAssociationReference.localCourseCode') AS local_course_code,\n            JSON_VALUE(data, '$.studentSectionAssociationReference.schoolId') AS school_id,\n            JSON_VALUE(data, '$.studentSectionAssociationReference.schoolYear') AS school_year,\n            JSON_VALUE(data, '$.studentSectionAssociationReference.sectionIdentifier') AS section_identifier,\n            JSON_VALUE(data, '$.studentSectionAssociationReference.sessionName') AS session_name,\n            JSON_VALUE(data, '$.studentSectionAssociationReference.studentUniqueId') AS student_unique_id\n        ) AS student_section_association_reference\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_grades`\n\n),\n\nranked AS (\n\n    SELECT\n        ROW_NUMBER() OVER (\n            PARTITION BY\n                school_year,\n                grading_period_reference.school_year,\n                grading_period_reference.grading_period_descriptor,\n                grading_period_reference.period_sequence,\n                student_section_association_reference.school_year,\n                student_section_association_reference.school_id,\n                student_section_association_reference.session_name,\n                student_section_association_reference.local_course_code,\n                student_section_association_reference.section_identifier,\n                student_section_association_reference.student_unique_id,\n                student_section_association_reference.begin_date,\n                grade_type_descriptor\n            ORDER BY school_year DESC, extracted_timestamp DESC\n        ) AS rank,\n        *\n    FROM parsed_data\n\n)\n\nSELECT * EXCEPT (extracted_timestamp, rank, school_year),\n    COALESCE(grading_period_reference.school_year, school_year) AS school_year\nFROM ranked\nWHERE\n    rank = 1\n    AND id NOT IN (\n        SELECT id FROM `gcp-proj-id`.`dev_staging`.`stg_edfi_deletes` edfi_deletes\n        WHERE ranked.school_year = edfi_deletes.school_year\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_staging`.`stg_edfi_grades`"}, "model.project.stg_edfi_course_offerings": {"raw_sql": "WITH parsed_data AS (\r\n\r\n    SELECT\r\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\r\n        JSON_VALUE(data, '$.id') AS id,\r\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\r\n        JSON_VALUE(data, '$.localCourseCode') AS local_course_code,\r\n        JSON_VALUE(data, '$.localCourseTitle') AS local_course_title,\r\n        STRUCT(\r\n            JSON_VALUE(data, '$.courseReference.courseCode') AS course_code,\r\n            JSON_VALUE(data, '$.courseReference.educationOrganizationId') AS education_organization_id\r\n        ) AS course_reference,\r\n        STRUCT(\r\n            JSON_VALUE(data, '$.schoolReference.schoolId') AS school_id\r\n        ) AS school_reference,\r\n        STRUCT(\r\n            JSON_VALUE(data, '$.sessionReference.schoolId') AS school_id,\r\n            CAST(JSON_VALUE(data, '$.sessionReference.schoolYear') AS int64) AS school_year,\r\n            JSON_VALUE(data, '$.sessionReference.sessionName') AS session_name\r\n        ) AS session_reference,\r\n    FROM {{ source('staging', 'base_edfi_course_offerings') }}\r\n\r\n),\r\n\r\nranked AS (\r\n\r\n    SELECT\r\n        ROW_NUMBER() OVER (\r\n            PARTITION BY\r\n                school_year,\r\n                session_reference.school_year,\r\n                session_reference.school_id,\r\n                session_reference.session_name,\r\n                local_course_code\r\n            ORDER BY school_year DESC, extracted_timestamp DESC\r\n        ) AS rank,\r\n        *\r\n    FROM parsed_data\r\n\r\n)\r\n\r\nSELECT * EXCEPT (extracted_timestamp, rank, school_year),\r\n    COALESCE(session_reference.school_year, school_year) AS school_year\r\nFROM ranked\r\nWHERE\r\n    rank = 1\r\n    AND id NOT IN (\r\n        SELECT id FROM {{ ref('stg_edfi_deletes') }} edfi_deletes\r\n        WHERE ranked.school_year = edfi_deletes.school_year\r\n    )", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.project.staging.base_edfi_course_offerings", "model.project.stg_edfi_deletes"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_course_offerings"], "unique_id": "model.project.stg_edfi_course_offerings", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "staging/edfi/stg_edfi_course_offerings.sql", "original_file_path": "models/staging/edfi/stg_edfi_course_offerings.sql", "name": "stg_edfi_course_offerings", "alias": "stg_edfi_course_offerings", "checksum": {"name": "sha256", "checksum": "49157e84702c3b79d1c555dfdba22e0138711c339d8098e8185bd1543414b6fb"}, "tags": ["amt"], "refs": [["stg_edfi_deletes"]], "sources": [["staging", "base_edfi_course_offerings"]], "description": "This entity represents an entry in the course catalog of available courses offered by the school during a session.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/staging/edfi/stg_edfi.yml", "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_course_offerings.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "amt", "labels": {"edfi_version": "5_3"}}, "created_at": 1643419470.6661386, "compiled_sql": "WITH parsed_data AS (\n\n    SELECT\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n        JSON_VALUE(data, '$.id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        JSON_VALUE(data, '$.localCourseCode') AS local_course_code,\n        JSON_VALUE(data, '$.localCourseTitle') AS local_course_title,\n        STRUCT(\n            JSON_VALUE(data, '$.courseReference.courseCode') AS course_code,\n            JSON_VALUE(data, '$.courseReference.educationOrganizationId') AS education_organization_id\n        ) AS course_reference,\n        STRUCT(\n            JSON_VALUE(data, '$.schoolReference.schoolId') AS school_id\n        ) AS school_reference,\n        STRUCT(\n            JSON_VALUE(data, '$.sessionReference.schoolId') AS school_id,\n            CAST(JSON_VALUE(data, '$.sessionReference.schoolYear') AS int64) AS school_year,\n            JSON_VALUE(data, '$.sessionReference.sessionName') AS session_name\n        ) AS session_reference,\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_course_offerings`\n\n),\n\nranked AS (\n\n    SELECT\n        ROW_NUMBER() OVER (\n            PARTITION BY\n                school_year,\n                session_reference.school_year,\n                session_reference.school_id,\n                session_reference.session_name,\n                local_course_code\n            ORDER BY school_year DESC, extracted_timestamp DESC\n        ) AS rank,\n        *\n    FROM parsed_data\n\n)\n\nSELECT * EXCEPT (extracted_timestamp, rank, school_year),\n    COALESCE(session_reference.school_year, school_year) AS school_year\nFROM ranked\nWHERE\n    rank = 1\n    AND id NOT IN (\n        SELECT id FROM `gcp-proj-id`.`dev_staging`.`stg_edfi_deletes` edfi_deletes\n        WHERE ranked.school_year = edfi_deletes.school_year\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_staging`.`stg_edfi_course_offerings`"}, "model.project.stg_edfi_grading_periods": {"raw_sql": "WITH parsed_data AS (\r\n\r\n    SELECT\r\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\r\n        JSON_VALUE(data, '$.id') AS id,\r\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\r\n        SPLIT(JSON_VALUE(data, \"$.gradingPeriodDescriptor\"), '#')[OFFSET(1)] AS grading_period_descriptor,\r\n        CAST(JSON_VALUE(data, \"$.periodSequence\") AS int64) AS period_sequence,\r\n        STRUCT(\r\n            JSON_VALUE(data, '$.schoolReference.schoolId') AS school_id\r\n        ) AS school_reference,\r\n        STRUCT(\r\n            CAST(JSON_VALUE(data, '$.schoolYearTypeReference.schoolYear') AS int64) AS school_year\r\n        ) AS school_year_type_reference,\r\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, \"$.beginDate\")) AS begin_date,\r\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, \"$.endDate\")) AS end_date,\r\n        CAST(JSON_VALUE(data, \"$.totalInstructionalDays\") AS int64) AS total_instructional_days\r\n    FROM {{ source('staging', 'base_edfi_grading_periods') }}\r\n\r\n),\r\n\r\nranked AS (\r\n\r\n    SELECT\r\n        ROW_NUMBER() OVER (\r\n            PARTITION BY\r\n                school_year,\r\n                school_year_type_reference.school_year,\r\n                school_reference.school_id,\r\n                grading_period_descriptor,\r\n                period_sequence\r\n            ORDER BY school_year DESC, extracted_timestamp DESC\r\n        ) AS rank,\r\n        *\r\n    FROM parsed_data\r\n\r\n)\r\n\r\nSELECT * EXCEPT (extracted_timestamp, rank, school_year),\r\n    COALESCE(school_year_type_reference.school_year, school_year) AS school_year\r\nFROM ranked\r\nWHERE\r\n    rank = 1\r\n    AND id NOT IN (\r\n        SELECT id FROM {{ ref('stg_edfi_deletes') }} edfi_deletes\r\n        WHERE ranked.school_year = edfi_deletes.school_year\r\n    )", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.project.staging.base_edfi_grading_periods", "model.project.stg_edfi_deletes"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_grading_periods"], "unique_id": "model.project.stg_edfi_grading_periods", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "staging/edfi/stg_edfi_grading_periods.sql", "original_file_path": "models/staging/edfi/stg_edfi_grading_periods.sql", "name": "stg_edfi_grading_periods", "alias": "stg_edfi_grading_periods", "checksum": {"name": "sha256", "checksum": "a0344ad703beb14136a5c364acc0685c9330b21ce27e8aaf6d02bce1eb276bda"}, "tags": ["amt"], "refs": [["stg_edfi_deletes"]], "sources": [["staging", "base_edfi_grading_periods"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_grading_periods.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "amt", "labels": {"edfi_version": "5_3"}}, "created_at": 1643419470.287127, "compiled_sql": "WITH parsed_data AS (\n\n    SELECT\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n        JSON_VALUE(data, '$.id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        SPLIT(JSON_VALUE(data, \"$.gradingPeriodDescriptor\"), '#')[OFFSET(1)] AS grading_period_descriptor,\n        CAST(JSON_VALUE(data, \"$.periodSequence\") AS int64) AS period_sequence,\n        STRUCT(\n            JSON_VALUE(data, '$.schoolReference.schoolId') AS school_id\n        ) AS school_reference,\n        STRUCT(\n            CAST(JSON_VALUE(data, '$.schoolYearTypeReference.schoolYear') AS int64) AS school_year\n        ) AS school_year_type_reference,\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, \"$.beginDate\")) AS begin_date,\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, \"$.endDate\")) AS end_date,\n        CAST(JSON_VALUE(data, \"$.totalInstructionalDays\") AS int64) AS total_instructional_days\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_grading_periods`\n\n),\n\nranked AS (\n\n    SELECT\n        ROW_NUMBER() OVER (\n            PARTITION BY\n                school_year,\n                school_year_type_reference.school_year,\n                school_reference.school_id,\n                grading_period_descriptor,\n                period_sequence\n            ORDER BY school_year DESC, extracted_timestamp DESC\n        ) AS rank,\n        *\n    FROM parsed_data\n\n)\n\nSELECT * EXCEPT (extracted_timestamp, rank, school_year),\n    COALESCE(school_year_type_reference.school_year, school_year) AS school_year\nFROM ranked\nWHERE\n    rank = 1\n    AND id NOT IN (\n        SELECT id FROM `gcp-proj-id`.`dev_staging`.`stg_edfi_deletes` edfi_deletes\n        WHERE ranked.school_year = edfi_deletes.school_year\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_staging`.`stg_edfi_grading_periods`"}, "model.project.stg_edfi_programs": {"raw_sql": "WITH parsed_data AS (\r\n\r\n    SELECT\r\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\r\n        JSON_VALUE(data, '$.id') AS id,\r\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\r\n        JSON_VALUE(data, '$.programName') AS program_name,\r\n        JSON_VALUE(data, '$.programId') AS program_id,\r\n        SPLIT(JSON_VALUE(data, '$.programTypeDescriptor'), '#')[OFFSET(1)] AS program_type_descriptor,\r\n        STRUCT(\r\n            JSON_VALUE(data, '$.educationOrganizationReference.educationOrganizationId') AS education_organization_id\r\n        ) AS education_organization_reference,\r\n        ARRAY(\r\n            SELECT AS STRUCT \r\n                SPLIT(JSON_VALUE(services, \"$.serviceDescriptor\"), '#')[OFFSET(1)] AS service_descriptor,\r\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.services\")) services \r\n        ) AS services,\r\n        ARRAY(\r\n            SELECT AS STRUCT \r\n                SPLIT(JSON_VALUE(sponsors, \"$.programSponsorDescriptor\"), '#')[OFFSET(1)] AS program_sponsor_descriptor,\r\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.sponsors\")) sponsors \r\n        ) AS sponsors,\r\n        ARRAY(\r\n            SELECT AS STRUCT \r\n                SPLIT(JSON_VALUE(characteristics, \"$.programCharacteristicDescriptor\"), '#')[OFFSET(1)] AS program_characteristic_descriptor,\r\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.characteristics\")) characteristics \r\n        ) AS characteristics,\r\n        ARRAY(\r\n            SELECT AS STRUCT\r\n                STRUCT(\r\n                    JSON_VALUE(learning_objectives, '$.learningObjectiveReference.learningObjectiveId') AS learning_objective_id,\r\n                    JSON_VALUE(learning_objectives, '$.learningObjectiveReference.namespace') AS namespace\r\n                ) AS learning_objective_reference\r\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.learningObjectives\")) learning_objectives \r\n        ) AS learning_objectives,\r\n        ARRAY(\r\n                SELECT AS STRUCT\r\n                    STRUCT(\r\n                        JSON_VALUE(learning_standards, '$.learningStandardReference.learningStandardId') AS learning_standard_id\r\n                    ) AS learning_standard_reference\r\n                FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.learningStandards\")) learning_standards\r\n        ) AS learning_standards,\r\n        JSON_VALUE(data, '$.schoolId') AS school_id,\r\n        JSON_VALUE(data, '$.nameOfInstitution') AS name_of_institution,\r\n        SPLIT(JSON_VALUE(data, '$.schoolTypeDescriptor'), '#')[OFFSET(1)] AS school_type_descriptor,\r\n    FROM {{ source('staging', 'base_edfi_programs') }}\r\n\r\n),\r\n\r\nranked AS (\r\n\r\n    SELECT\r\n        ROW_NUMBER() OVER (\r\n            PARTITION BY\r\n                school_year,\r\n                education_organization_reference.education_organization_id,\r\n                program_name,\r\n                program_type_descriptor\r\n            ORDER BY school_year DESC, extracted_timestamp DESC\r\n        ) AS rank,\r\n        *\r\n    FROM parsed_data\r\n\r\n)\r\n\r\nSELECT * EXCEPT (extracted_timestamp, rank)\r\nFROM ranked\r\nWHERE\r\n    rank = 1\r\n    AND id NOT IN (\r\n        SELECT id FROM {{ ref('stg_edfi_deletes') }} edfi_deletes\r\n        WHERE ranked.school_year = edfi_deletes.school_year\r\n    )", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.project.staging.base_edfi_programs", "model.project.stg_edfi_deletes"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_programs"], "unique_id": "model.project.stg_edfi_programs", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "staging/edfi/stg_edfi_programs.sql", "original_file_path": "models/staging/edfi/stg_edfi_programs.sql", "name": "stg_edfi_programs", "alias": "stg_edfi_programs", "checksum": {"name": "sha256", "checksum": "7d70f5ce7709129cc0110237913d6601a00715dfd40afbed571fc1aa7e91fc19"}, "tags": ["amt"], "refs": [["stg_edfi_deletes"]], "sources": [["staging", "base_edfi_programs"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_programs.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "amt", "labels": {"edfi_version": "5_3"}}, "created_at": 1643419470.2896907, "compiled_sql": "WITH parsed_data AS (\n\n    SELECT\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n        JSON_VALUE(data, '$.id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        JSON_VALUE(data, '$.programName') AS program_name,\n        JSON_VALUE(data, '$.programId') AS program_id,\n        SPLIT(JSON_VALUE(data, '$.programTypeDescriptor'), '#')[OFFSET(1)] AS program_type_descriptor,\n        STRUCT(\n            JSON_VALUE(data, '$.educationOrganizationReference.educationOrganizationId') AS education_organization_id\n        ) AS education_organization_reference,\n        ARRAY(\n            SELECT AS STRUCT \n                SPLIT(JSON_VALUE(services, \"$.serviceDescriptor\"), '#')[OFFSET(1)] AS service_descriptor,\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.services\")) services \n        ) AS services,\n        ARRAY(\n            SELECT AS STRUCT \n                SPLIT(JSON_VALUE(sponsors, \"$.programSponsorDescriptor\"), '#')[OFFSET(1)] AS program_sponsor_descriptor,\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.sponsors\")) sponsors \n        ) AS sponsors,\n        ARRAY(\n            SELECT AS STRUCT \n                SPLIT(JSON_VALUE(characteristics, \"$.programCharacteristicDescriptor\"), '#')[OFFSET(1)] AS program_characteristic_descriptor,\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.characteristics\")) characteristics \n        ) AS characteristics,\n        ARRAY(\n            SELECT AS STRUCT\n                STRUCT(\n                    JSON_VALUE(learning_objectives, '$.learningObjectiveReference.learningObjectiveId') AS learning_objective_id,\n                    JSON_VALUE(learning_objectives, '$.learningObjectiveReference.namespace') AS namespace\n                ) AS learning_objective_reference\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.learningObjectives\")) learning_objectives \n        ) AS learning_objectives,\n        ARRAY(\n                SELECT AS STRUCT\n                    STRUCT(\n                        JSON_VALUE(learning_standards, '$.learningStandardReference.learningStandardId') AS learning_standard_id\n                    ) AS learning_standard_reference\n                FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.learningStandards\")) learning_standards\n        ) AS learning_standards,\n        JSON_VALUE(data, '$.schoolId') AS school_id,\n        JSON_VALUE(data, '$.nameOfInstitution') AS name_of_institution,\n        SPLIT(JSON_VALUE(data, '$.schoolTypeDescriptor'), '#')[OFFSET(1)] AS school_type_descriptor,\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_programs`\n\n),\n\nranked AS (\n\n    SELECT\n        ROW_NUMBER() OVER (\n            PARTITION BY\n                school_year,\n                education_organization_reference.education_organization_id,\n                program_name,\n                program_type_descriptor\n            ORDER BY school_year DESC, extracted_timestamp DESC\n        ) AS rank,\n        *\n    FROM parsed_data\n\n)\n\nSELECT * EXCEPT (extracted_timestamp, rank)\nFROM ranked\nWHERE\n    rank = 1\n    AND id NOT IN (\n        SELECT id FROM `gcp-proj-id`.`dev_staging`.`stg_edfi_deletes` edfi_deletes\n        WHERE ranked.school_year = edfi_deletes.school_year\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_staging`.`stg_edfi_programs`"}, "model.project.stg_edfi_student_school_attendance_events": {"raw_sql": "WITH parsed_data AS (\r\n\r\n    SELECT\r\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\r\n        JSON_VALUE(data, '$.id') AS id,\r\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\r\n        STRUCT(\r\n            JSON_VALUE(data, '$.studentReference.studentUniqueId') AS student_unique_id\r\n        ) AS student_reference,\r\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, '$.eventDate')) AS event_date,\r\n        STRUCT(\r\n            JSON_VALUE(data, '$.schoolReference.schoolId') AS school_id\r\n        ) AS school_reference,\r\n        STRUCT(\r\n            JSON_VALUE(data, '$.sessionReference.schoolId') AS school_id,\r\n            CAST(JSON_VALUE(data, '$.sessionReference.schoolYear') AS int64) AS school_year,\r\n            JSON_VALUE(data, '$.sessionReference.sessionName') AS session_name\r\n        ) AS session_reference,\r\n        JSON_VALUE(data, '$.arrivalTime') AS arrival_time,\r\n        JSON_VALUE(data, '$.attendanceEventReason') AS attendance_event_reason,\r\n        JSON_VALUE(data, '$.departureTime') AS departure_time,\r\n        CAST(JSON_VALUE(data, '$.eventDuration') AS float64) AS event_duration,\r\n        CAST(JSON_VALUE(data, '$.schoolAttendanceDuration') AS float64) AS school_attendance_duration,\r\n        SPLIT(JSON_VALUE(data, '$.attendanceEventCategoryDescriptor'), '#')[OFFSET(1)] AS attendance_event_category_descriptor,\r\n        SPLIT(JSON_VALUE(data, '$.educationalEnvironmentDescriptor'), '#')[OFFSET(1)] AS educational_environment_descriptor,\r\n    FROM {{ source('staging', 'base_edfi_student_school_attendance_events') }}\r\n\r\n),\r\n\r\nranked AS (\r\n\r\n    SELECT\r\n        ROW_NUMBER() OVER (\r\n            PARTITION BY\r\n                school_year,\r\n                session_reference.school_year,\r\n                session_reference.school_id,\r\n                session_reference.session_name,\r\n                student_reference.student_unique_id,\r\n                event_date,\r\n                attendance_event_category_descriptor\r\n            ORDER BY school_year DESC, extracted_timestamp DESC\r\n        ) AS rank,\r\n        *\r\n    FROM parsed_data\r\n\r\n)\r\n\r\nSELECT * EXCEPT (extracted_timestamp, rank, school_year),\r\n    COALESCE(session_reference.school_year, school_year) AS school_year\r\nFROM ranked\r\nWHERE\r\n    rank = 1\r\n    AND id NOT IN (\r\n        SELECT id FROM {{ ref('stg_edfi_deletes') }} edfi_deletes\r\n        WHERE ranked.school_year = edfi_deletes.school_year\r\n    )", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.project.staging.base_edfi_student_school_attendance_events", "model.project.stg_edfi_deletes"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_student_school_attendance_events"], "unique_id": "model.project.stg_edfi_student_school_attendance_events", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "staging/edfi/stg_edfi_student_school_attendance_events.sql", "original_file_path": "models/staging/edfi/stg_edfi_student_school_attendance_events.sql", "name": "stg_edfi_student_school_attendance_events", "alias": "stg_edfi_student_school_attendance_events", "checksum": {"name": "sha256", "checksum": "9f054e786c19186ac1e6cd3d1746cb0d6e93705cc0e4ce43b059a487fa51da5b"}, "tags": ["amt"], "refs": [["stg_edfi_deletes"]], "sources": [["staging", "base_edfi_student_school_attendance_events"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_student_school_attendance_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "amt", "labels": {"edfi_version": "5_3"}}, "created_at": 1643419470.292212, "compiled_sql": "WITH parsed_data AS (\n\n    SELECT\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n        JSON_VALUE(data, '$.id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        STRUCT(\n            JSON_VALUE(data, '$.studentReference.studentUniqueId') AS student_unique_id\n        ) AS student_reference,\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, '$.eventDate')) AS event_date,\n        STRUCT(\n            JSON_VALUE(data, '$.schoolReference.schoolId') AS school_id\n        ) AS school_reference,\n        STRUCT(\n            JSON_VALUE(data, '$.sessionReference.schoolId') AS school_id,\n            CAST(JSON_VALUE(data, '$.sessionReference.schoolYear') AS int64) AS school_year,\n            JSON_VALUE(data, '$.sessionReference.sessionName') AS session_name\n        ) AS session_reference,\n        JSON_VALUE(data, '$.arrivalTime') AS arrival_time,\n        JSON_VALUE(data, '$.attendanceEventReason') AS attendance_event_reason,\n        JSON_VALUE(data, '$.departureTime') AS departure_time,\n        CAST(JSON_VALUE(data, '$.eventDuration') AS float64) AS event_duration,\n        CAST(JSON_VALUE(data, '$.schoolAttendanceDuration') AS float64) AS school_attendance_duration,\n        SPLIT(JSON_VALUE(data, '$.attendanceEventCategoryDescriptor'), '#')[OFFSET(1)] AS attendance_event_category_descriptor,\n        SPLIT(JSON_VALUE(data, '$.educationalEnvironmentDescriptor'), '#')[OFFSET(1)] AS educational_environment_descriptor,\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_student_school_attendance_events`\n\n),\n\nranked AS (\n\n    SELECT\n        ROW_NUMBER() OVER (\n            PARTITION BY\n                school_year,\n                session_reference.school_year,\n                session_reference.school_id,\n                session_reference.session_name,\n                student_reference.student_unique_id,\n                event_date,\n                attendance_event_category_descriptor\n            ORDER BY school_year DESC, extracted_timestamp DESC\n        ) AS rank,\n        *\n    FROM parsed_data\n\n)\n\nSELECT * EXCEPT (extracted_timestamp, rank, school_year),\n    COALESCE(session_reference.school_year, school_year) AS school_year\nFROM ranked\nWHERE\n    rank = 1\n    AND id NOT IN (\n        SELECT id FROM `gcp-proj-id`.`dev_staging`.`stg_edfi_deletes` edfi_deletes\n        WHERE ranked.school_year = edfi_deletes.school_year\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_staging`.`stg_edfi_student_school_attendance_events`"}, "model.project.stg_edfi_local_education_agencies": {"raw_sql": "WITH parsed_data AS (\r\n\r\n    SELECT\r\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\r\n        JSON_VALUE(data, '$.id') AS id,\r\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\r\n        JSON_VALUE(data, '$.localEducationAgencyId') AS local_education_agency_id,\r\n        JSON_VALUE(data, '$.nameOfInstitution') AS name_of_institution\r\n    FROM {{ source('staging', 'base_edfi_local_education_agencies') }}\r\n\r\n),\r\n\r\nranked AS (\r\n\r\n    SELECT\r\n        ROW_NUMBER() OVER (\r\n            PARTITION BY\r\n                school_year,\r\n                local_education_agency_id\r\n            ORDER BY school_year DESC, extracted_timestamp DESC\r\n        ) AS rank,\r\n        *\r\n    FROM parsed_data\r\n\r\n)\r\n\r\nSELECT * EXCEPT (extracted_timestamp, rank)\r\nFROM ranked\r\nWHERE\r\n    rank = 1\r\n    AND id NOT IN (\r\n        SELECT id FROM {{ ref('stg_edfi_deletes') }} edfi_deletes\r\n        WHERE ranked.school_year = edfi_deletes.school_year\r\n    )", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.project.staging.base_edfi_local_education_agencies", "model.project.stg_edfi_deletes"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_local_education_agencies"], "unique_id": "model.project.stg_edfi_local_education_agencies", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "staging/edfi/stg_edfi_local_education_agencies.sql", "original_file_path": "models/staging/edfi/stg_edfi_local_education_agencies.sql", "name": "stg_edfi_local_education_agencies", "alias": "stg_edfi_local_education_agencies", "checksum": {"name": "sha256", "checksum": "33a8bacacf71c9eec92362299020e170dc2d477b3855315f779a6a859f7ed2d4"}, "tags": ["amt"], "refs": [["stg_edfi_deletes"]], "sources": [["staging", "base_edfi_local_education_agencies"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/staging/edfi/stg_edfi.yml", "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_local_education_agencies.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "amt", "labels": {"edfi_version": "5_3"}}, "created_at": 1643419470.6668875, "compiled_sql": "WITH parsed_data AS (\n\n    SELECT\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n        JSON_VALUE(data, '$.id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        JSON_VALUE(data, '$.localEducationAgencyId') AS local_education_agency_id,\n        JSON_VALUE(data, '$.nameOfInstitution') AS name_of_institution\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_local_education_agencies`\n\n),\n\nranked AS (\n\n    SELECT\n        ROW_NUMBER() OVER (\n            PARTITION BY\n                school_year,\n                local_education_agency_id\n            ORDER BY school_year DESC, extracted_timestamp DESC\n        ) AS rank,\n        *\n    FROM parsed_data\n\n)\n\nSELECT * EXCEPT (extracted_timestamp, rank)\nFROM ranked\nWHERE\n    rank = 1\n    AND id NOT IN (\n        SELECT id FROM `gcp-proj-id`.`dev_staging`.`stg_edfi_deletes` edfi_deletes\n        WHERE ranked.school_year = edfi_deletes.school_year\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_staging`.`stg_edfi_local_education_agencies`"}, "model.project.stg_edfi_staff_education_organization_assignment_associations": {"raw_sql": "WITH parsed_data AS (\r\n\r\n    SELECT\r\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\r\n        JSON_VALUE(data, '$.id') AS id,\r\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\r\n        STRUCT(\r\n            JSON_VALUE(data, '$.staffReference.staffUniqueId') AS staff_unique_id\r\n        ) AS staff_reference,\r\n        SPLIT(JSON_VALUE(data, \"$.staffClassificationDescriptor\"), '#')[OFFSET(1)] AS staff_classification_descriptor,\r\n        STRUCT(\r\n            JSON_VALUE(data, '$.educationOrganizationReference.educationOrganizationId') AS education_organization_id\r\n        ) AS education_organization_reference,\r\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, '$.beginDate')) AS begin_date,\r\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, '$.endDate')) AS end_date\r\n    FROM {{ source('staging', 'base_edfi_staff_education_organization_assignment_associations') }}\r\n\r\n),\r\n\r\nranked AS (\r\n\r\n    SELECT\r\n        ROW_NUMBER() OVER (\r\n            PARTITION BY\r\n                school_year,\r\n                education_organization_reference.education_organization_id,\r\n                staff_reference.staff_unique_id,\r\n                staff_classification_descriptor,\r\n                begin_date\r\n            ORDER BY school_year DESC, extracted_timestamp DESC\r\n        ) AS rank,\r\n        *\r\n    FROM parsed_data\r\n\r\n)\r\n\r\nSELECT * EXCEPT (extracted_timestamp, rank)\r\nFROM ranked\r\nWHERE\r\n    rank = 1\r\n    AND id NOT IN (\r\n        SELECT id FROM {{ ref('stg_edfi_deletes') }} edfi_deletes\r\n        WHERE ranked.school_year = edfi_deletes.school_year\r\n    )", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.project.staging.base_edfi_staff_education_organization_assignment_associations", "model.project.stg_edfi_deletes"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_staff_education_organization_assignment_associations"], "unique_id": "model.project.stg_edfi_staff_education_organization_assignment_associations", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "staging/edfi/stg_edfi_staff_education_organization_assignment_associations.sql", "original_file_path": "models/staging/edfi/stg_edfi_staff_education_organization_assignment_associations.sql", "name": "stg_edfi_staff_education_organization_assignment_associations", "alias": "stg_edfi_staff_education_organization_assignment_associations", "checksum": {"name": "sha256", "checksum": "dfbfd1e862b91c7eebc82367fa8b3d7251a3f9644585264a57faf5ddee8d5f48"}, "tags": ["amt"], "refs": [["stg_edfi_deletes"]], "sources": [["staging", "base_edfi_staff_education_organization_assignment_associations"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_staff_education_organization_assignment_associations.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "amt", "labels": {"edfi_version": "5_3"}}, "created_at": 1643419470.2970972, "compiled_sql": "WITH parsed_data AS (\n\n    SELECT\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n        JSON_VALUE(data, '$.id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        STRUCT(\n            JSON_VALUE(data, '$.staffReference.staffUniqueId') AS staff_unique_id\n        ) AS staff_reference,\n        SPLIT(JSON_VALUE(data, \"$.staffClassificationDescriptor\"), '#')[OFFSET(1)] AS staff_classification_descriptor,\n        STRUCT(\n            JSON_VALUE(data, '$.educationOrganizationReference.educationOrganizationId') AS education_organization_id\n        ) AS education_organization_reference,\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, '$.beginDate')) AS begin_date,\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, '$.endDate')) AS end_date\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_staff_education_organization_assignment_associations`\n\n),\n\nranked AS (\n\n    SELECT\n        ROW_NUMBER() OVER (\n            PARTITION BY\n                school_year,\n                education_organization_reference.education_organization_id,\n                staff_reference.staff_unique_id,\n                staff_classification_descriptor,\n                begin_date\n            ORDER BY school_year DESC, extracted_timestamp DESC\n        ) AS rank,\n        *\n    FROM parsed_data\n\n)\n\nSELECT * EXCEPT (extracted_timestamp, rank)\nFROM ranked\nWHERE\n    rank = 1\n    AND id NOT IN (\n        SELECT id FROM `gcp-proj-id`.`dev_staging`.`stg_edfi_deletes` edfi_deletes\n        WHERE ranked.school_year = edfi_deletes.school_year\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_staging`.`stg_edfi_staff_education_organization_assignment_associations`"}, "model.project.stg_edfi_discipline_incidents": {"raw_sql": "WITH parsed_data AS (\r\n    SELECT\r\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\r\n        JSON_VALUE(data, '$.id') AS id,\r\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\r\n        JSON_VALUE(data, '$.incidentIdentifier') AS incident_identifier,\r\n        JSON_VALUE(data, '$.caseNumber') AS case_number,\r\n        CAST(JSON_VALUE(data, '$.incidentCost') AS float64) AS incident_cost,\r\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, '$.incidentDate')) AS incident_date,\r\n        JSON_VALUE(data, '$.incidentDescription') AS incident_description,\r\n        SPLIT(JSON_VALUE(data, '$.incidentLocationDescriptor'), '#')[OFFSET(1)] AS incident_location_descriptor,\r\n        JSON_VALUE(data, '$.incidentTime') AS incident_time,\r\n        CAST(JSON_VALUE(data, '$.reportedToLawEnforcement') AS BOOL) AS reported_to_law_enforcement,\r\n        SPLIT(JSON_VALUE(data, '$.reporterDescriptionDescriptor'), '#')[OFFSET(1)] AS reporter_description_descriptor,\r\n        JSON_VALUE(data, '$.reporterName') AS reporter_name,\r\n        STRUCT(\r\n            JSON_VALUE(data, '$.schoolReference.schoolId') AS school_id\r\n        ) AS school_reference,\r\n        STRUCT(\r\n            JSON_VALUE(data, '$.staffReference.staffUniqueId') AS staff_unique_id\r\n        ) AS staff_reference,\r\n        ARRAY(\r\n            SELECT AS STRUCT \r\n                SPLIT(JSON_VALUE(behaviors, '$.behaviorDescriptor'), '#')[OFFSET(1)] AS behavior_descriptor,\r\n                JSON_VALUE(behaviors, \"$.behaviorDetailedDescription\") AS behavior_detailed_description\r\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.behaviors\")) behaviors \r\n        ) AS behaviors,\r\n        ARRAY(\r\n            SELECT AS STRUCT \r\n                SPLIT(JSON_VALUE(external_participants, '$.disciplineIncidentParticipationCodeDescriptor'), '#')[OFFSET(1)] AS discipline_incident_participation_code_descriptor,\r\n                JSON_VALUE(external_participants, \"$.firstName\") AS first_name,\r\n                JSON_VALUE(external_participants, \"$.lastSurname\") AS last_surname\r\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.externalParticipants\")) external_participants \r\n        ) AS external_participants,\r\n    FROM {{ source('staging', 'base_edfi_discipline_incidents') }}\r\n\r\n),\r\n\r\nranked AS (\r\n\r\n    SELECT\r\n        ROW_NUMBER() OVER (\r\n            PARTITION BY\r\n                school_year,\r\n                school_reference.school_id,\r\n                incident_identifier\r\n            ORDER BY school_year DESC, extracted_timestamp DESC\r\n        ) AS rank,\r\n        *\r\n    FROM parsed_data\r\n\r\n)\r\n\r\nSELECT * EXCEPT (extracted_timestamp, rank)\r\nFROM ranked\r\nWHERE\r\n    rank = 1\r\n    AND id NOT IN (\r\n        SELECT id FROM {{ ref('stg_edfi_deletes') }} edfi_deletes\r\n        WHERE ranked.school_year = edfi_deletes.school_year\r\n    )", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.project.staging.base_edfi_discipline_incidents", "model.project.stg_edfi_deletes"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_discipline_incidents"], "unique_id": "model.project.stg_edfi_discipline_incidents", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "staging/edfi/stg_edfi_discipline_incidents.sql", "original_file_path": "models/staging/edfi/stg_edfi_discipline_incidents.sql", "name": "stg_edfi_discipline_incidents", "alias": "stg_edfi_discipline_incidents", "checksum": {"name": "sha256", "checksum": "dc5cb84256cdc6f90dc6f1e535e745907778983be95398276544398590aab6b2"}, "tags": ["amt"], "refs": [["stg_edfi_deletes"]], "sources": [["staging", "base_edfi_discipline_incidents"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_discipline_incidents.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "amt", "labels": {"edfi_version": "5_3"}}, "created_at": 1643419470.2998056, "compiled_sql": "WITH parsed_data AS (\n    SELECT\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n        JSON_VALUE(data, '$.id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        JSON_VALUE(data, '$.incidentIdentifier') AS incident_identifier,\n        JSON_VALUE(data, '$.caseNumber') AS case_number,\n        CAST(JSON_VALUE(data, '$.incidentCost') AS float64) AS incident_cost,\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, '$.incidentDate')) AS incident_date,\n        JSON_VALUE(data, '$.incidentDescription') AS incident_description,\n        SPLIT(JSON_VALUE(data, '$.incidentLocationDescriptor'), '#')[OFFSET(1)] AS incident_location_descriptor,\n        JSON_VALUE(data, '$.incidentTime') AS incident_time,\n        CAST(JSON_VALUE(data, '$.reportedToLawEnforcement') AS BOOL) AS reported_to_law_enforcement,\n        SPLIT(JSON_VALUE(data, '$.reporterDescriptionDescriptor'), '#')[OFFSET(1)] AS reporter_description_descriptor,\n        JSON_VALUE(data, '$.reporterName') AS reporter_name,\n        STRUCT(\n            JSON_VALUE(data, '$.schoolReference.schoolId') AS school_id\n        ) AS school_reference,\n        STRUCT(\n            JSON_VALUE(data, '$.staffReference.staffUniqueId') AS staff_unique_id\n        ) AS staff_reference,\n        ARRAY(\n            SELECT AS STRUCT \n                SPLIT(JSON_VALUE(behaviors, '$.behaviorDescriptor'), '#')[OFFSET(1)] AS behavior_descriptor,\n                JSON_VALUE(behaviors, \"$.behaviorDetailedDescription\") AS behavior_detailed_description\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.behaviors\")) behaviors \n        ) AS behaviors,\n        ARRAY(\n            SELECT AS STRUCT \n                SPLIT(JSON_VALUE(external_participants, '$.disciplineIncidentParticipationCodeDescriptor'), '#')[OFFSET(1)] AS discipline_incident_participation_code_descriptor,\n                JSON_VALUE(external_participants, \"$.firstName\") AS first_name,\n                JSON_VALUE(external_participants, \"$.lastSurname\") AS last_surname\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.externalParticipants\")) external_participants \n        ) AS external_participants,\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_discipline_incidents`\n\n),\n\nranked AS (\n\n    SELECT\n        ROW_NUMBER() OVER (\n            PARTITION BY\n                school_year,\n                school_reference.school_id,\n                incident_identifier\n            ORDER BY school_year DESC, extracted_timestamp DESC\n        ) AS rank,\n        *\n    FROM parsed_data\n\n)\n\nSELECT * EXCEPT (extracted_timestamp, rank)\nFROM ranked\nWHERE\n    rank = 1\n    AND id NOT IN (\n        SELECT id FROM `gcp-proj-id`.`dev_staging`.`stg_edfi_deletes` edfi_deletes\n        WHERE ranked.school_year = edfi_deletes.school_year\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_staging`.`stg_edfi_discipline_incidents`"}, "model.project.stg_edfi_student_school_associations": {"raw_sql": "WITH parsed_data AS (\r\n\r\n    SELECT\r\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\r\n        JSON_VALUE(data, '$.id') AS id,\r\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\r\n        STRUCT(\r\n            JSON_VALUE(data, '$.schoolReference.schoolId') AS school_id\r\n        ) AS school_reference,\r\n        STRUCT(\r\n            JSON_VALUE(data, '$.studentReference.studentUniqueId') AS student_unique_id\r\n        ) AS student_reference,\r\n        STRUCT(\r\n            CAST(JSON_VALUE(data, '$.schoolYearTypeReference.schoolYear') AS int64) AS school_year\r\n        ) AS school_year_type_reference,\r\n        SPLIT(JSON_VALUE(data, '$.entryTypeDescriptor'), '#')[OFFSET(1)] AS entry_type_descriptor,\r\n        SPLIT(JSON_VALUE(data, '$.entryGradeLevelDescriptor'), '#')[OFFSET(1)] AS entry_grade_level_descriptor,\r\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, '$.entryDate')) AS entry_date,\r\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, '$.exitWithdrawDate')) AS exit_withdraw_date,\r\n        SPLIT(JSON_VALUE(data, '$.exitWithdrawTypeDescriptor'), '#')[OFFSET(1)] AS exit_withdraw_type_descriptor,\r\n        CAST(JSON_VALUE(data, '$.fullTimeEquivalency') AS int64) AS full_time_equivalency,\r\n        CAST(JSON_VALUE(data, '$.primarySchool') AS BOOL) AS primary_school,\r\n        CAST(JSON_VALUE(data, '$.repeatGradeIndicator') AS BOOL) AS repeat_grade_indicator,\r\n        CAST(JSON_VALUE(data, '$.schoolChoiceTransfer') AS BOOL) AS school_choice_transfer,\r\n        CAST(JSON_VALUE(data, '$.termCompletionIndicator') AS BOOL) AS term_completion_indicator\r\n    FROM {{ source('staging', 'base_edfi_student_school_associations') }}\r\n\r\n),\r\n\r\nranked AS (\r\n\r\n    SELECT\r\n        ROW_NUMBER() OVER (\r\n            PARTITION BY\r\n                school_year,\r\n                school_reference.school_id,\r\n                entry_date,\r\n                student_reference.student_unique_id\r\n            ORDER BY school_year DESC, extracted_timestamp DESC\r\n        ) AS rank,\r\n        *\r\n    FROM parsed_data\r\n\r\n)\r\n\r\nSELECT * EXCEPT (extracted_timestamp, rank)\r\nFROM ranked\r\nWHERE\r\n    rank = 1\r\n    AND id NOT IN (\r\n        SELECT id FROM {{ ref('stg_edfi_deletes') }} edfi_deletes\r\n        WHERE ranked.school_year = edfi_deletes.school_year\r\n    )", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.project.staging.base_edfi_student_school_associations", "model.project.stg_edfi_deletes"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_student_school_associations"], "unique_id": "model.project.stg_edfi_student_school_associations", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "staging/edfi/stg_edfi_student_school_associations.sql", "original_file_path": "models/staging/edfi/stg_edfi_student_school_associations.sql", "name": "stg_edfi_student_school_associations", "alias": "stg_edfi_student_school_associations", "checksum": {"name": "sha256", "checksum": "f9ae0e85399b738849ed299b464f1386d9a9b386f7e6e0cb3d23b63df2ef1a18"}, "tags": ["amt"], "refs": [["stg_edfi_deletes"]], "sources": [["staging", "base_edfi_student_school_associations"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_student_school_associations.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "amt", "labels": {"edfi_version": "5_3"}}, "created_at": 1643419470.3021522, "compiled_sql": "WITH parsed_data AS (\n\n    SELECT\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n        JSON_VALUE(data, '$.id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        STRUCT(\n            JSON_VALUE(data, '$.schoolReference.schoolId') AS school_id\n        ) AS school_reference,\n        STRUCT(\n            JSON_VALUE(data, '$.studentReference.studentUniqueId') AS student_unique_id\n        ) AS student_reference,\n        STRUCT(\n            CAST(JSON_VALUE(data, '$.schoolYearTypeReference.schoolYear') AS int64) AS school_year\n        ) AS school_year_type_reference,\n        SPLIT(JSON_VALUE(data, '$.entryTypeDescriptor'), '#')[OFFSET(1)] AS entry_type_descriptor,\n        SPLIT(JSON_VALUE(data, '$.entryGradeLevelDescriptor'), '#')[OFFSET(1)] AS entry_grade_level_descriptor,\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, '$.entryDate')) AS entry_date,\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, '$.exitWithdrawDate')) AS exit_withdraw_date,\n        SPLIT(JSON_VALUE(data, '$.exitWithdrawTypeDescriptor'), '#')[OFFSET(1)] AS exit_withdraw_type_descriptor,\n        CAST(JSON_VALUE(data, '$.fullTimeEquivalency') AS int64) AS full_time_equivalency,\n        CAST(JSON_VALUE(data, '$.primarySchool') AS BOOL) AS primary_school,\n        CAST(JSON_VALUE(data, '$.repeatGradeIndicator') AS BOOL) AS repeat_grade_indicator,\n        CAST(JSON_VALUE(data, '$.schoolChoiceTransfer') AS BOOL) AS school_choice_transfer,\n        CAST(JSON_VALUE(data, '$.termCompletionIndicator') AS BOOL) AS term_completion_indicator\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_student_school_associations`\n\n),\n\nranked AS (\n\n    SELECT\n        ROW_NUMBER() OVER (\n            PARTITION BY\n                school_year,\n                school_reference.school_id,\n                entry_date,\n                student_reference.student_unique_id\n            ORDER BY school_year DESC, extracted_timestamp DESC\n        ) AS rank,\n        *\n    FROM parsed_data\n\n)\n\nSELECT * EXCEPT (extracted_timestamp, rank)\nFROM ranked\nWHERE\n    rank = 1\n    AND id NOT IN (\n        SELECT id FROM `gcp-proj-id`.`dev_staging`.`stg_edfi_deletes` edfi_deletes\n        WHERE ranked.school_year = edfi_deletes.school_year\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_staging`.`stg_edfi_student_school_associations`"}, "model.project.stg_edfi_student_special_education_program_associations": {"raw_sql": "WITH parsed_data AS (\r\n\r\n    SELECT\r\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\r\n        JSON_VALUE(data, '$.id') AS id,\r\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\r\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, \"$.beginDate\")) AS begin_date,\r\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, \"$.endDate\")) AS end_date,\r\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, \"$.iepBeginDate\")) AS iep_begin_date,\r\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, \"$.iepEndDate\")) AS iep_end_date,\r\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, \"$.iepReviewDate\")) AS iep_review_date,\r\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, \"$.lastEvaluationDate\")) AS last_evaluation_date,\r\n        CAST(JSON_VALUE(data, '$.ideaEligibility') AS BOOL) idea_eligibility,\r\n        CAST(JSON_VALUE(data, '$.medicallyFragile') AS BOOL) medically_fragile,\r\n        CAST(JSON_VALUE(data, '$.multiplyDisabled') AS BOOL) multiply_disabled,\r\n        CAST(JSON_VALUE(data, '$.servedOutsideOfRegularSession') AS BOOL) served_outside_of_regular_session,\r\n        SPLIT(JSON_VALUE(data, \"$.reasonExitedDescriptor\"), '#')[OFFSET(1)] AS reason_exited_descriptor,\r\n        SPLIT(JSON_VALUE(data, \"$.specialEducationSettingDescriptor\"), '#')[OFFSET(1)] AS special_education_setting_descriptor,\r\n        CAST(JSON_VALUE(data, '$.schoolHoursPerWeek') AS float64) AS school_hours_per_week,\r\n        CAST(JSON_VALUE(data, '$.specialEducationHoursPerWeek') AS float64) AS special_education_hours_per_week,\r\n        STRUCT(\r\n            JSON_VALUE(data, '$.educationOrganizationReference.educationOrganizationId') AS education_organization_id\r\n        ) AS education_organization_reference,\r\n        STRUCT(\r\n            JSON_VALUE(data, '$.programReference.educationOrganizationId') AS education_organization_id,\r\n            JSON_VALUE(data, '$.programReference.programName') AS program_name,\r\n            SPLIT(JSON_VALUE(data, \"$.programReference.programTypeDescriptor\"), '#')[OFFSET(1)] AS program_type_descriptor\r\n        ) AS program_reference,\r\n        STRUCT(\r\n            JSON_VALUE(data, '$.studentReference.studentUniqueId') AS student_unique_id\r\n        ) AS student_reference,\r\n        ARRAY(\r\n            SELECT AS STRUCT \r\n                SPLIT(JSON_VALUE(disabilities, \"$.disabilityDescriptor\"), '#')[OFFSET(1)] AS disability_descriptor,\r\n                SPLIT(JSON_VALUE(disabilities, \"$.disabilityDeterminationSourceTypeDescriptor\"), '#')[OFFSET(1)] AS disability_determination_source_type_descriptor,\r\n                JSON_VALUE(disabilities, '$.disabilityDiagnosis') AS disability_diagnosis,\r\n                CAST(JSON_VALUE(disabilities, '$.orderOfDisability') AS int64) AS order_of_disability\r\n                -- designations array\r\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.disabilities\")) disabilities \r\n        ) AS disabilities,\r\n        STRUCT(\r\n            SPLIT(JSON_VALUE(data, \"$.participationStatusDescriptor\"), '#')[OFFSET(1)] AS participation_status_descriptor,\r\n            JSON_VALUE(data, '$.designatedBy') AS designated_by,\r\n            PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, \"$.statusBeginDate\")) AS status_begin_date,\r\n            PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, \"$.statusEndDate\")) AS status_end_date\r\n        ) AS participation_status,\r\n        ARRAY(\r\n            SELECT AS STRUCT \r\n                SPLIT(JSON_VALUE(statuses, \"$.participationStatusDescriptor\"), '#')[OFFSET(1)] AS participation_status_descriptor,\r\n                JSON_VALUE(statuses, '$.designatedBy') AS designated_by,\r\n                PARSE_DATE('%Y-%m-%d', JSON_VALUE(statuses, \"$.statusBeginDate\")) AS status_begin_date,\r\n                PARSE_DATE('%Y-%m-%d', JSON_VALUE(statuses, \"$.statusEndDate\")) AS status_end_date\r\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.programParticipationStatuses\")) statuses \r\n        ) AS program_participation_statuses,\r\n    FROM {{ source('staging', 'base_edfi_student_special_education_program_associations') }}\r\n\r\n),\r\n\r\nranked AS (\r\n\r\n    SELECT\r\n        ROW_NUMBER() OVER (\r\n            PARTITION BY\r\n                school_year,\r\n                education_organization_reference.education_organization_id,\r\n                program_reference.education_organization_id,\r\n                program_reference.program_name,\r\n                program_reference.program_type_descriptor,\r\n                student_reference.student_unique_id,\r\n                begin_date\r\n            ORDER BY school_year DESC, extracted_timestamp DESC\r\n        ) AS rank,\r\n        *\r\n    FROM parsed_data\r\n\r\n)\r\n\r\nSELECT * EXCEPT (extracted_timestamp, rank)\r\nFROM ranked\r\nWHERE\r\n    rank = 1\r\n    AND id NOT IN (\r\n        SELECT id FROM {{ ref('stg_edfi_deletes') }} edfi_deletes\r\n        WHERE ranked.school_year = edfi_deletes.school_year\r\n    )", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.project.staging.base_edfi_student_special_education_program_associations", "model.project.stg_edfi_deletes"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_student_special_education_program_associations"], "unique_id": "model.project.stg_edfi_student_special_education_program_associations", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "staging/edfi/stg_edfi_student_special_education_program_associations.sql", "original_file_path": "models/staging/edfi/stg_edfi_student_special_education_program_associations.sql", "name": "stg_edfi_student_special_education_program_associations", "alias": "stg_edfi_student_special_education_program_associations", "checksum": {"name": "sha256", "checksum": "1f1077e4d26c1ee5dc8761479833df0c9aeab5776d339b7c2e7336fc842f98b9"}, "tags": ["amt"], "refs": [["stg_edfi_deletes"]], "sources": [["staging", "base_edfi_student_special_education_program_associations"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_student_special_education_program_associations.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "amt", "labels": {"edfi_version": "5_3"}}, "created_at": 1643419470.3045895, "compiled_sql": "WITH parsed_data AS (\n\n    SELECT\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n        JSON_VALUE(data, '$.id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, \"$.beginDate\")) AS begin_date,\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, \"$.endDate\")) AS end_date,\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, \"$.iepBeginDate\")) AS iep_begin_date,\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, \"$.iepEndDate\")) AS iep_end_date,\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, \"$.iepReviewDate\")) AS iep_review_date,\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, \"$.lastEvaluationDate\")) AS last_evaluation_date,\n        CAST(JSON_VALUE(data, '$.ideaEligibility') AS BOOL) idea_eligibility,\n        CAST(JSON_VALUE(data, '$.medicallyFragile') AS BOOL) medically_fragile,\n        CAST(JSON_VALUE(data, '$.multiplyDisabled') AS BOOL) multiply_disabled,\n        CAST(JSON_VALUE(data, '$.servedOutsideOfRegularSession') AS BOOL) served_outside_of_regular_session,\n        SPLIT(JSON_VALUE(data, \"$.reasonExitedDescriptor\"), '#')[OFFSET(1)] AS reason_exited_descriptor,\n        SPLIT(JSON_VALUE(data, \"$.specialEducationSettingDescriptor\"), '#')[OFFSET(1)] AS special_education_setting_descriptor,\n        CAST(JSON_VALUE(data, '$.schoolHoursPerWeek') AS float64) AS school_hours_per_week,\n        CAST(JSON_VALUE(data, '$.specialEducationHoursPerWeek') AS float64) AS special_education_hours_per_week,\n        STRUCT(\n            JSON_VALUE(data, '$.educationOrganizationReference.educationOrganizationId') AS education_organization_id\n        ) AS education_organization_reference,\n        STRUCT(\n            JSON_VALUE(data, '$.programReference.educationOrganizationId') AS education_organization_id,\n            JSON_VALUE(data, '$.programReference.programName') AS program_name,\n            SPLIT(JSON_VALUE(data, \"$.programReference.programTypeDescriptor\"), '#')[OFFSET(1)] AS program_type_descriptor\n        ) AS program_reference,\n        STRUCT(\n            JSON_VALUE(data, '$.studentReference.studentUniqueId') AS student_unique_id\n        ) AS student_reference,\n        ARRAY(\n            SELECT AS STRUCT \n                SPLIT(JSON_VALUE(disabilities, \"$.disabilityDescriptor\"), '#')[OFFSET(1)] AS disability_descriptor,\n                SPLIT(JSON_VALUE(disabilities, \"$.disabilityDeterminationSourceTypeDescriptor\"), '#')[OFFSET(1)] AS disability_determination_source_type_descriptor,\n                JSON_VALUE(disabilities, '$.disabilityDiagnosis') AS disability_diagnosis,\n                CAST(JSON_VALUE(disabilities, '$.orderOfDisability') AS int64) AS order_of_disability\n                -- designations array\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.disabilities\")) disabilities \n        ) AS disabilities,\n        STRUCT(\n            SPLIT(JSON_VALUE(data, \"$.participationStatusDescriptor\"), '#')[OFFSET(1)] AS participation_status_descriptor,\n            JSON_VALUE(data, '$.designatedBy') AS designated_by,\n            PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, \"$.statusBeginDate\")) AS status_begin_date,\n            PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, \"$.statusEndDate\")) AS status_end_date\n        ) AS participation_status,\n        ARRAY(\n            SELECT AS STRUCT \n                SPLIT(JSON_VALUE(statuses, \"$.participationStatusDescriptor\"), '#')[OFFSET(1)] AS participation_status_descriptor,\n                JSON_VALUE(statuses, '$.designatedBy') AS designated_by,\n                PARSE_DATE('%Y-%m-%d', JSON_VALUE(statuses, \"$.statusBeginDate\")) AS status_begin_date,\n                PARSE_DATE('%Y-%m-%d', JSON_VALUE(statuses, \"$.statusEndDate\")) AS status_end_date\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.programParticipationStatuses\")) statuses \n        ) AS program_participation_statuses,\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_student_special_education_program_associations`\n\n),\n\nranked AS (\n\n    SELECT\n        ROW_NUMBER() OVER (\n            PARTITION BY\n                school_year,\n                education_organization_reference.education_organization_id,\n                program_reference.education_organization_id,\n                program_reference.program_name,\n                program_reference.program_type_descriptor,\n                student_reference.student_unique_id,\n                begin_date\n            ORDER BY school_year DESC, extracted_timestamp DESC\n        ) AS rank,\n        *\n    FROM parsed_data\n\n)\n\nSELECT * EXCEPT (extracted_timestamp, rank)\nFROM ranked\nWHERE\n    rank = 1\n    AND id NOT IN (\n        SELECT id FROM `gcp-proj-id`.`dev_staging`.`stg_edfi_deletes` edfi_deletes\n        WHERE ranked.school_year = edfi_deletes.school_year\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_staging`.`stg_edfi_student_special_education_program_associations`"}, "model.project.stg_edfi_calendar_dates": {"raw_sql": "WITH parsed_data AS (\r\n\r\n    SELECT\r\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\r\n        JSON_VALUE(data, '$.id') AS id,\r\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\r\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, '$.date')) AS date,\r\n        ARRAY(\r\n            SELECT AS STRUCT \r\n                SPLIT(JSON_VALUE(calendar_events, \"$.calendarEventDescriptor\"), '#')[OFFSET(1)] AS calendar_event_descriptor\r\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.calendarEvents\")) calendar_events \r\n        ) AS calendar_events,\r\n        STRUCT(\r\n            JSON_VALUE(data, '$.calendarReference.calendarCode') AS calendar_code,\r\n            JSON_VALUE(data, '$.calendarReference.schoolId') AS school_id,\r\n            CAST(JSON_VALUE(data, '$.calendarReference.schoolYear') AS int64) AS school_year\r\n        ) AS calendar_reference\r\n    FROM {{ source('staging', 'base_edfi_calendar_dates') }}\r\n\r\n),\r\n\r\nranked AS (\r\n\r\n    SELECT\r\n        ROW_NUMBER() OVER (\r\n            PARTITION BY\r\n                school_year,\r\n                calendar_reference.school_year,\r\n                calendar_reference.school_id,\r\n                calendar_reference.calendar_code,\r\n                date \r\n            ORDER BY school_year DESC, extracted_timestamp DESC\r\n        ) AS rank,\r\n        *\r\n    FROM parsed_data\r\n\r\n)\r\n\r\nSELECT * EXCEPT (extracted_timestamp, rank, school_year),\r\n    COALESCE(calendar_reference.school_year, school_year) AS school_year\r\nFROM ranked\r\nWHERE\r\n    rank = 1\r\n    AND id NOT IN (\r\n        SELECT id FROM {{ ref('stg_edfi_deletes') }} edfi_deletes\r\n        WHERE ranked.school_year = edfi_deletes.school_year\r\n    )", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.project.staging.base_edfi_calendar_dates", "model.project.stg_edfi_deletes"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_calendar_dates"], "unique_id": "model.project.stg_edfi_calendar_dates", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "staging/edfi/stg_edfi_calendar_dates.sql", "original_file_path": "models/staging/edfi/stg_edfi_calendar_dates.sql", "name": "stg_edfi_calendar_dates", "alias": "stg_edfi_calendar_dates", "checksum": {"name": "sha256", "checksum": "50558cc6981bc037f73d56969b940b61af2d2cc4ecc99ea47ba78a1a58899151"}, "tags": ["amt"], "refs": [["stg_edfi_deletes"]], "sources": [["staging", "base_edfi_calendar_dates"]], "description": "The type of scheduled or unscheduled event for the day.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/staging/edfi/stg_edfi.yml", "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_calendar_dates.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "amt", "labels": {"edfi_version": "5_3"}}, "created_at": 1643419470.6657813, "compiled_sql": "WITH parsed_data AS (\n\n    SELECT\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n        JSON_VALUE(data, '$.id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, '$.date')) AS date,\n        ARRAY(\n            SELECT AS STRUCT \n                SPLIT(JSON_VALUE(calendar_events, \"$.calendarEventDescriptor\"), '#')[OFFSET(1)] AS calendar_event_descriptor\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.calendarEvents\")) calendar_events \n        ) AS calendar_events,\n        STRUCT(\n            JSON_VALUE(data, '$.calendarReference.calendarCode') AS calendar_code,\n            JSON_VALUE(data, '$.calendarReference.schoolId') AS school_id,\n            CAST(JSON_VALUE(data, '$.calendarReference.schoolYear') AS int64) AS school_year\n        ) AS calendar_reference\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_calendar_dates`\n\n),\n\nranked AS (\n\n    SELECT\n        ROW_NUMBER() OVER (\n            PARTITION BY\n                school_year,\n                calendar_reference.school_year,\n                calendar_reference.school_id,\n                calendar_reference.calendar_code,\n                date \n            ORDER BY school_year DESC, extracted_timestamp DESC\n        ) AS rank,\n        *\n    FROM parsed_data\n\n)\n\nSELECT * EXCEPT (extracted_timestamp, rank, school_year),\n    COALESCE(calendar_reference.school_year, school_year) AS school_year\nFROM ranked\nWHERE\n    rank = 1\n    AND id NOT IN (\n        SELECT id FROM `gcp-proj-id`.`dev_staging`.`stg_edfi_deletes` edfi_deletes\n        WHERE ranked.school_year = edfi_deletes.school_year\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_staging`.`stg_edfi_calendar_dates`"}, "model.project.stg_edfi_schools": {"raw_sql": "WITH parsed_data AS (\r\n\r\n    SELECT\r\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\r\n        JSON_VALUE(data, '$.id') AS id,\r\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\r\n        JSON_VALUE(data, '$.localEducationAgencyReference.localEducationAgencyId') AS local_education_agency_id,\r\n        JSON_VALUE(data, '$.schoolId') AS school_id,\r\n        JSON_VALUE(data, '$.nameOfInstitution') AS name_of_institution,\r\n        SPLIT(JSON_VALUE(data, '$.schoolTypeDescriptor'), '#')[OFFSET(1)] AS school_type_descriptor,\r\n    FROM {{ source('staging', 'base_edfi_schools') }}\r\n\r\n),\r\n\r\nranked AS (\r\n\r\n    SELECT\r\n        ROW_NUMBER() OVER (\r\n            PARTITION BY school_year, school_id\r\n            ORDER BY school_year DESC, extracted_timestamp DESC\r\n        ) AS rank,\r\n        *\r\n    FROM parsed_data\r\n\r\n)\r\n\r\nSELECT * EXCEPT (extracted_timestamp, rank)\r\nFROM ranked\r\nWHERE\r\n    rank = 1\r\n    AND id NOT IN (\r\n        SELECT id FROM {{ ref('stg_edfi_deletes') }} edfi_deletes\r\n        WHERE ranked.school_year = edfi_deletes.school_year\r\n    )", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.project.staging.base_edfi_schools", "model.project.stg_edfi_deletes"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_schools"], "unique_id": "model.project.stg_edfi_schools", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "staging/edfi/stg_edfi_schools.sql", "original_file_path": "models/staging/edfi/stg_edfi_schools.sql", "name": "stg_edfi_schools", "alias": "stg_edfi_schools", "checksum": {"name": "sha256", "checksum": "fea507678f21b15f122b25424c31dbfa604f0af762755a79e0bec9918e000d20"}, "tags": ["amt"], "refs": [["stg_edfi_deletes"]], "sources": [["staging", "base_edfi_schools"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/staging/edfi/stg_edfi.yml", "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_schools.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "amt", "labels": {"edfi_version": "5_3"}}, "created_at": 1643419470.6672888, "compiled_sql": "WITH parsed_data AS (\n\n    SELECT\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n        JSON_VALUE(data, '$.id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        JSON_VALUE(data, '$.localEducationAgencyReference.localEducationAgencyId') AS local_education_agency_id,\n        JSON_VALUE(data, '$.schoolId') AS school_id,\n        JSON_VALUE(data, '$.nameOfInstitution') AS name_of_institution,\n        SPLIT(JSON_VALUE(data, '$.schoolTypeDescriptor'), '#')[OFFSET(1)] AS school_type_descriptor,\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_schools`\n\n),\n\nranked AS (\n\n    SELECT\n        ROW_NUMBER() OVER (\n            PARTITION BY school_year, school_id\n            ORDER BY school_year DESC, extracted_timestamp DESC\n        ) AS rank,\n        *\n    FROM parsed_data\n\n)\n\nSELECT * EXCEPT (extracted_timestamp, rank)\nFROM ranked\nWHERE\n    rank = 1\n    AND id NOT IN (\n        SELECT id FROM `gcp-proj-id`.`dev_staging`.`stg_edfi_deletes` edfi_deletes\n        WHERE ranked.school_year = edfi_deletes.school_year\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_staging`.`stg_edfi_schools`"}, "model.project.stg_edfi_staff_section_associations": {"raw_sql": "WITH parsed_data AS (\r\n\r\n    SELECT\r\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\r\n        JSON_VALUE(data, '$.id') AS id,\r\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\r\n        STRUCT(\r\n            JSON_VALUE(data, '$.staffReference.staffUniqueId') AS staff_unique_id\r\n        ) AS staff_reference,\r\n        STRUCT(\r\n            JSON_VALUE(data, '$.sectionReference.localCourseCode') AS local_course_code,\r\n            JSON_VALUE(data, '$.sectionReference.schoolId') AS school_id,\r\n            CAST(JSON_VALUE(data, '$.sectionReference.schoolYear') AS int64) AS school_year,\r\n            JSON_VALUE(data, '$.sectionReference.sectionIdentifier') AS section_identifier,\r\n            JSON_VALUE(data, '$.sectionReference.sessionName') AS session_name\r\n        ) AS section_reference,\r\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, \"$.beginDate\")) AS begin_date,\r\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, \"$.endDate\")) AS end_date,\r\n        SPLIT(JSON_VALUE(data, \"$.classroomPositionDescriptor\"), '#')[OFFSET(1)] AS classroom_position_descriptor,\r\n        CAST(JSON_VALUE(data, '$.highlyQualifiedTeacher') AS BOOL) AS highly_qualified_teacher,\r\n        JSON_VALUE(data, '$.percentageContribution') AS percentage_contribution\r\n    FROM {{ source('staging', 'base_edfi_staff_section_associations') }}\r\n\r\n),\r\n\r\nranked AS (\r\n\r\n    SELECT\r\n        ROW_NUMBER() OVER (\r\n            PARTITION BY\r\n                school_year,\r\n                section_reference.school_year,\r\n                section_reference.school_id,\r\n                section_reference.session_name,\r\n                section_reference.local_course_code,\r\n                section_reference.section_identifier,\r\n                staff_reference.staff_unique_id\r\n            ORDER BY school_year DESC, extracted_timestamp DESC\r\n        ) AS rank,\r\n        *\r\n    FROM parsed_data\r\n\r\n)\r\n\r\nSELECT * EXCEPT (extracted_timestamp, rank, school_year),\r\n    COALESCE(section_reference.school_year, school_year) AS school_year\r\nFROM ranked\r\nWHERE\r\n    rank = 1\r\n    AND id NOT IN (\r\n        SELECT id FROM {{ ref('stg_edfi_deletes') }} edfi_deletes\r\n        WHERE ranked.school_year = edfi_deletes.school_year\r\n    )", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.project.staging.base_edfi_staff_section_associations", "model.project.stg_edfi_deletes"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_staff_section_associations"], "unique_id": "model.project.stg_edfi_staff_section_associations", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "staging/edfi/stg_edfi_staff_section_associations.sql", "original_file_path": "models/staging/edfi/stg_edfi_staff_section_associations.sql", "name": "stg_edfi_staff_section_associations", "alias": "stg_edfi_staff_section_associations", "checksum": {"name": "sha256", "checksum": "3c7186003187abbdc29697bdbcf824384a45eb427542c87dacd2ee46c12f30ee"}, "tags": ["amt"], "refs": [["stg_edfi_deletes"]], "sources": [["staging", "base_edfi_staff_section_associations"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_staff_section_associations.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "amt", "labels": {"edfi_version": "5_3"}}, "created_at": 1643419470.3119752, "compiled_sql": "WITH parsed_data AS (\n\n    SELECT\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n        JSON_VALUE(data, '$.id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        STRUCT(\n            JSON_VALUE(data, '$.staffReference.staffUniqueId') AS staff_unique_id\n        ) AS staff_reference,\n        STRUCT(\n            JSON_VALUE(data, '$.sectionReference.localCourseCode') AS local_course_code,\n            JSON_VALUE(data, '$.sectionReference.schoolId') AS school_id,\n            CAST(JSON_VALUE(data, '$.sectionReference.schoolYear') AS int64) AS school_year,\n            JSON_VALUE(data, '$.sectionReference.sectionIdentifier') AS section_identifier,\n            JSON_VALUE(data, '$.sectionReference.sessionName') AS session_name\n        ) AS section_reference,\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, \"$.beginDate\")) AS begin_date,\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, \"$.endDate\")) AS end_date,\n        SPLIT(JSON_VALUE(data, \"$.classroomPositionDescriptor\"), '#')[OFFSET(1)] AS classroom_position_descriptor,\n        CAST(JSON_VALUE(data, '$.highlyQualifiedTeacher') AS BOOL) AS highly_qualified_teacher,\n        JSON_VALUE(data, '$.percentageContribution') AS percentage_contribution\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_staff_section_associations`\n\n),\n\nranked AS (\n\n    SELECT\n        ROW_NUMBER() OVER (\n            PARTITION BY\n                school_year,\n                section_reference.school_year,\n                section_reference.school_id,\n                section_reference.session_name,\n                section_reference.local_course_code,\n                section_reference.section_identifier,\n                staff_reference.staff_unique_id\n            ORDER BY school_year DESC, extracted_timestamp DESC\n        ) AS rank,\n        *\n    FROM parsed_data\n\n)\n\nSELECT * EXCEPT (extracted_timestamp, rank, school_year),\n    COALESCE(section_reference.school_year, school_year) AS school_year\nFROM ranked\nWHERE\n    rank = 1\n    AND id NOT IN (\n        SELECT id FROM `gcp-proj-id`.`dev_staging`.`stg_edfi_deletes` edfi_deletes\n        WHERE ranked.school_year = edfi_deletes.school_year\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_staging`.`stg_edfi_staff_section_associations`"}, "model.project.stg_edfi_student_assessments": {"raw_sql": "WITH parsed_data AS (\r\n\r\n    SELECT\r\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\r\n        JSON_VALUE(data, '$.id') AS id,\r\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\r\n        JSON_VALUE(data, '$.studentAssessmentIdentifier') AS student_assessment_identifier,\r\n        EXTRACT(DATE FROM PARSE_TIMESTAMP('%Y-%m-%dT%TZ', JSON_VALUE(data, '$.administrationDate'))) AS administration_date,\r\n        -- administrationEndDate\r\n        SPLIT(JSON_VALUE(data, \"$.administrationEnvironmentDescriptor\"), '#')[OFFSET(1)] AS administration_environment_descriptor,\r\n        SPLIT(JSON_VALUE(data, \"$.administrationLanguageDescriptor\"), '#')[OFFSET(1)] AS administration_language_descriptor,\r\n        SPLIT(JSON_VALUE(data, \"$.eventCircumstanceDescriptor\"), '#')[OFFSET(1)] AS event_circumstance_descriptor,\r\n        SPLIT(JSON_VALUE(data, \"$.platformTypeDescriptor\"), '#')[OFFSET(1)] AS platform_type_descriptor,\r\n        SPLIT(JSON_VALUE(data, \"$.reasonNotTestedDescriptor\"), '#')[OFFSET(1)] AS reason_not_tested_descriptor,\r\n        SPLIT(JSON_VALUE(data, \"$.retestIndicatorDescriptor\"), '#')[OFFSET(1)] AS retest_indicator_descriptor,\r\n        SPLIT(JSON_VALUE(data, \"$.whenAssessedGradeLevelDescriptor\"), '#')[OFFSET(1)] AS when_assessed_grade_level_descriptor,\r\n        JSON_VALUE(data, '$.eventDescription') AS event_description,\r\n        JSON_VALUE(data, '$.serialNumber') AS serial_number,\r\n        STRUCT(\r\n            JSON_VALUE(data, '$.assessmentReference.assessmentIdentifier') AS assessment_identifier,\r\n            JSON_VALUE(data, '$.assessmentReference.namespace') AS namespace\r\n        ) AS assessment_reference,\r\n        STRUCT(\r\n            CAST(JSON_VALUE(data, '$.schoolYearTypeReference.schoolYear') AS int64) AS school_year\r\n        ) AS school_year_type_reference,\r\n        STRUCT(\r\n            JSON_VALUE(data, '$.studentReference.studentUniqueId') AS student_unique_id\r\n        ) AS student_reference,\r\n        ARRAY(\r\n            SELECT AS STRUCT \r\n                SPLIT(JSON_VALUE(score_results, \"$.assessmentReportingMethodDescriptor\"), '#')[OFFSET(1)] AS assessment_reporting_method_descriptor,\r\n                SPLIT(JSON_VALUE(score_results, \"$.resultDatatypeTypeDescriptor\"), '#')[OFFSET(1)] AS result_datatype_type_descriptor,\r\n                JSON_VALUE(score_results, '$.result') AS result\r\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.scoreResults\")) score_results \r\n        ) AS score_results,\r\n        ARRAY(\r\n            SELECT AS STRUCT \r\n                SPLIT(JSON_VALUE(accommodations, \"$.accommodationDescriptor\"), '#')[OFFSET(1)] AS accommodation_descriptor,\r\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.accommodations\")) accommodations \r\n        ) AS accommodations,\r\n        ARRAY(\r\n            SELECT AS STRUCT \r\n                SPLIT(JSON_VALUE(items, \"$.assessmentItemResultDescriptor\"), '#')[OFFSET(1)] AS assessment_item_result_descriptor,\r\n                SPLIT(JSON_VALUE(items, \"$.responseIndicatorDescriptor\"), '#')[OFFSET(1)] AS response_indicator_descriptor,\r\n                JSON_VALUE(items, '$.assessmentResponse') AS assessment_response,\r\n                JSON_VALUE(items, '$.descriptiveFeedback') AS descriptive_feedback,\r\n                CAST(JSON_VALUE(items, '$.rawScoreResult') AS float64) AS raw_score_result,\r\n                JSON_VALUE(items, '$.timeAssessed') AS time_assessed\r\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.items\")) items \r\n        ) AS items,\r\n        ARRAY(\r\n            SELECT AS STRUCT \r\n                SPLIT(JSON_VALUE(performance_levels, \"$.assessmentReportingMethodDescriptor\"), '#')[OFFSET(1)] AS assessment_reporting_method_descriptor,\r\n                SPLIT(JSON_VALUE(performance_levels, \"$.performanceLevelDescriptor\"), '#')[OFFSET(1)] AS performance_level_descriptor,\r\n                CAST(JSON_VALUE(performance_levels, \"$.performanceLevelMet\") AS BOOL) AS performance_level_met\r\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.performanceLevels\")) performance_levels \r\n        ) AS performance_levels,\r\n        ARRAY(\r\n                SELECT AS STRUCT\r\n                    STRUCT(\r\n                            JSON_VALUE(assessments, '$.objectiveAssessmentReference.assessmentIdentifier') AS assessment_identifier,\r\n                            JSON_VALUE(assessments, '$.objectiveAssessmentReference.identificationCode') AS identification_code,\r\n                            JSON_VALUE(assessments, '$.objectiveAssessmentReference.namespace') AS namespace\r\n                    ) AS objective_assessment_reference,\r\n                    ARRAY(\r\n                        SELECT AS STRUCT \r\n                            SPLIT(JSON_VALUE(performance_levels, \"$.assessmentReportingMethodDescriptor\"), '#')[OFFSET(1)] AS assessment_reporting_method_descriptor,\r\n                            SPLIT(JSON_VALUE(performance_levels, \"$.performanceLevelDescriptor\"), '#')[OFFSET(1)] AS performance_level_descriptor,\r\n                            CAST(JSON_VALUE(performance_levels, \"$.performanceLevelMet\") AS BOOL) AS performance_level_met\r\n                        FROM UNNEST(JSON_QUERY_ARRAY(assessments, \"$.performanceLevels\")) performance_levels \r\n                    ) AS performance_levels,\r\n                    ARRAY(\r\n                        SELECT AS STRUCT \r\n                            SPLIT(JSON_VALUE(score_results, \"$.assessmentReportingMethodDescriptor\"), '#')[OFFSET(1)] AS assessment_reporting_method_descriptor,\r\n                            SPLIT(JSON_VALUE(score_results, \"$.resultDatatypeTypeDescriptor\"), '#')[OFFSET(1)] AS result_datatype_type_descriptor,\r\n                            JSON_VALUE(score_results, '$.result') AS result\r\n                        FROM UNNEST(JSON_QUERY_ARRAY(assessments, \"$.scoreResults\")) score_results \r\n                    ) AS score_results\r\n                FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.studentObjectiveAssessments\")) assessments\r\n        ) AS student_objective_assessments,\r\n    FROM {{ source('staging', 'base_edfi_student_assessments') }}\r\n\r\n),\r\n\r\nranked AS (\r\n\r\n    SELECT\r\n        ROW_NUMBER() OVER (\r\n            PARTITION BY\r\n                school_year,\r\n                assessment_reference.assessment_identifier,\r\n                assessment_reference.namespace,\r\n                student_assessment_identifier,\r\n                student_reference.student_unique_id\r\n            ORDER BY school_year DESC, extracted_timestamp DESC\r\n        ) AS rank,\r\n        *\r\n    FROM parsed_data\r\n\r\n)\r\n\r\nSELECT * EXCEPT (extracted_timestamp, rank)\r\nFROM ranked\r\nWHERE\r\n    rank = 1\r\n    AND id NOT IN (\r\n        SELECT id FROM {{ ref('stg_edfi_deletes') }} edfi_deletes\r\n        WHERE ranked.school_year = edfi_deletes.school_year\r\n    )", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.project.staging.base_edfi_student_assessments", "model.project.stg_edfi_deletes"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_student_assessments"], "unique_id": "model.project.stg_edfi_student_assessments", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "staging/edfi/stg_edfi_student_assessments.sql", "original_file_path": "models/staging/edfi/stg_edfi_student_assessments.sql", "name": "stg_edfi_student_assessments", "alias": "stg_edfi_student_assessments", "checksum": {"name": "sha256", "checksum": "92b55e9f84539773adc6461b1c3e5220308d73ebc48bbb7ca1ea1d2c58746ab0"}, "tags": ["amt"], "refs": [["stg_edfi_deletes"]], "sources": [["staging", "base_edfi_student_assessments"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_student_assessments.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "amt", "labels": {"edfi_version": "5_3"}}, "created_at": 1643419470.3142445, "compiled_sql": "WITH parsed_data AS (\n\n    SELECT\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n        JSON_VALUE(data, '$.id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        JSON_VALUE(data, '$.studentAssessmentIdentifier') AS student_assessment_identifier,\n        EXTRACT(DATE FROM PARSE_TIMESTAMP('%Y-%m-%dT%TZ', JSON_VALUE(data, '$.administrationDate'))) AS administration_date,\n        -- administrationEndDate\n        SPLIT(JSON_VALUE(data, \"$.administrationEnvironmentDescriptor\"), '#')[OFFSET(1)] AS administration_environment_descriptor,\n        SPLIT(JSON_VALUE(data, \"$.administrationLanguageDescriptor\"), '#')[OFFSET(1)] AS administration_language_descriptor,\n        SPLIT(JSON_VALUE(data, \"$.eventCircumstanceDescriptor\"), '#')[OFFSET(1)] AS event_circumstance_descriptor,\n        SPLIT(JSON_VALUE(data, \"$.platformTypeDescriptor\"), '#')[OFFSET(1)] AS platform_type_descriptor,\n        SPLIT(JSON_VALUE(data, \"$.reasonNotTestedDescriptor\"), '#')[OFFSET(1)] AS reason_not_tested_descriptor,\n        SPLIT(JSON_VALUE(data, \"$.retestIndicatorDescriptor\"), '#')[OFFSET(1)] AS retest_indicator_descriptor,\n        SPLIT(JSON_VALUE(data, \"$.whenAssessedGradeLevelDescriptor\"), '#')[OFFSET(1)] AS when_assessed_grade_level_descriptor,\n        JSON_VALUE(data, '$.eventDescription') AS event_description,\n        JSON_VALUE(data, '$.serialNumber') AS serial_number,\n        STRUCT(\n            JSON_VALUE(data, '$.assessmentReference.assessmentIdentifier') AS assessment_identifier,\n            JSON_VALUE(data, '$.assessmentReference.namespace') AS namespace\n        ) AS assessment_reference,\n        STRUCT(\n            CAST(JSON_VALUE(data, '$.schoolYearTypeReference.schoolYear') AS int64) AS school_year\n        ) AS school_year_type_reference,\n        STRUCT(\n            JSON_VALUE(data, '$.studentReference.studentUniqueId') AS student_unique_id\n        ) AS student_reference,\n        ARRAY(\n            SELECT AS STRUCT \n                SPLIT(JSON_VALUE(score_results, \"$.assessmentReportingMethodDescriptor\"), '#')[OFFSET(1)] AS assessment_reporting_method_descriptor,\n                SPLIT(JSON_VALUE(score_results, \"$.resultDatatypeTypeDescriptor\"), '#')[OFFSET(1)] AS result_datatype_type_descriptor,\n                JSON_VALUE(score_results, '$.result') AS result\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.scoreResults\")) score_results \n        ) AS score_results,\n        ARRAY(\n            SELECT AS STRUCT \n                SPLIT(JSON_VALUE(accommodations, \"$.accommodationDescriptor\"), '#')[OFFSET(1)] AS accommodation_descriptor,\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.accommodations\")) accommodations \n        ) AS accommodations,\n        ARRAY(\n            SELECT AS STRUCT \n                SPLIT(JSON_VALUE(items, \"$.assessmentItemResultDescriptor\"), '#')[OFFSET(1)] AS assessment_item_result_descriptor,\n                SPLIT(JSON_VALUE(items, \"$.responseIndicatorDescriptor\"), '#')[OFFSET(1)] AS response_indicator_descriptor,\n                JSON_VALUE(items, '$.assessmentResponse') AS assessment_response,\n                JSON_VALUE(items, '$.descriptiveFeedback') AS descriptive_feedback,\n                CAST(JSON_VALUE(items, '$.rawScoreResult') AS float64) AS raw_score_result,\n                JSON_VALUE(items, '$.timeAssessed') AS time_assessed\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.items\")) items \n        ) AS items,\n        ARRAY(\n            SELECT AS STRUCT \n                SPLIT(JSON_VALUE(performance_levels, \"$.assessmentReportingMethodDescriptor\"), '#')[OFFSET(1)] AS assessment_reporting_method_descriptor,\n                SPLIT(JSON_VALUE(performance_levels, \"$.performanceLevelDescriptor\"), '#')[OFFSET(1)] AS performance_level_descriptor,\n                CAST(JSON_VALUE(performance_levels, \"$.performanceLevelMet\") AS BOOL) AS performance_level_met\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.performanceLevels\")) performance_levels \n        ) AS performance_levels,\n        ARRAY(\n                SELECT AS STRUCT\n                    STRUCT(\n                            JSON_VALUE(assessments, '$.objectiveAssessmentReference.assessmentIdentifier') AS assessment_identifier,\n                            JSON_VALUE(assessments, '$.objectiveAssessmentReference.identificationCode') AS identification_code,\n                            JSON_VALUE(assessments, '$.objectiveAssessmentReference.namespace') AS namespace\n                    ) AS objective_assessment_reference,\n                    ARRAY(\n                        SELECT AS STRUCT \n                            SPLIT(JSON_VALUE(performance_levels, \"$.assessmentReportingMethodDescriptor\"), '#')[OFFSET(1)] AS assessment_reporting_method_descriptor,\n                            SPLIT(JSON_VALUE(performance_levels, \"$.performanceLevelDescriptor\"), '#')[OFFSET(1)] AS performance_level_descriptor,\n                            CAST(JSON_VALUE(performance_levels, \"$.performanceLevelMet\") AS BOOL) AS performance_level_met\n                        FROM UNNEST(JSON_QUERY_ARRAY(assessments, \"$.performanceLevels\")) performance_levels \n                    ) AS performance_levels,\n                    ARRAY(\n                        SELECT AS STRUCT \n                            SPLIT(JSON_VALUE(score_results, \"$.assessmentReportingMethodDescriptor\"), '#')[OFFSET(1)] AS assessment_reporting_method_descriptor,\n                            SPLIT(JSON_VALUE(score_results, \"$.resultDatatypeTypeDescriptor\"), '#')[OFFSET(1)] AS result_datatype_type_descriptor,\n                            JSON_VALUE(score_results, '$.result') AS result\n                        FROM UNNEST(JSON_QUERY_ARRAY(assessments, \"$.scoreResults\")) score_results \n                    ) AS score_results\n                FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.studentObjectiveAssessments\")) assessments\n        ) AS student_objective_assessments,\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_student_assessments`\n\n),\n\nranked AS (\n\n    SELECT\n        ROW_NUMBER() OVER (\n            PARTITION BY\n                school_year,\n                assessment_reference.assessment_identifier,\n                assessment_reference.namespace,\n                student_assessment_identifier,\n                student_reference.student_unique_id\n            ORDER BY school_year DESC, extracted_timestamp DESC\n        ) AS rank,\n        *\n    FROM parsed_data\n\n)\n\nSELECT * EXCEPT (extracted_timestamp, rank)\nFROM ranked\nWHERE\n    rank = 1\n    AND id NOT IN (\n        SELECT id FROM `gcp-proj-id`.`dev_staging`.`stg_edfi_deletes` edfi_deletes\n        WHERE ranked.school_year = edfi_deletes.school_year\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_staging`.`stg_edfi_student_assessments`"}, "model.project.stg_edfi_deletes": {"raw_sql": "{%\r\n    set tables = [\r\n        \"base_edfi_assessments_deletes\",\r\n        \"base_edfi_local_education_agencies_deletes\",\r\n        \"base_edfi_objective_assessments_deletes\",\r\n        \"base_edfi_schools_deletes\",\r\n        \"base_edfi_students_deletes\",\r\n        \"base_edfi_student_education_organization_associations_deletes\",\r\n        \"base_edfi_student_school_associations_deletes\",\r\n        \"base_edfi_calendars_deletes\",\r\n        \"base_edfi_calendars_deletes\",\r\n        \"base_edfi_calendar_dates_deletes\",\r\n        \"base_edfi_courses_deletes\",\r\n        \"base_edfi_course_offerings_deletes\",\r\n        \"base_edfi_discipline_actions_deletes\",\r\n        \"base_edfi_discipline_incident_deletes\",\r\n        \"base_edfi_grades_deletes\",\r\n        \"base_edfi_grading_periods_deletes\",\r\n        \"base_edfi_staff_discipline_incident_associations_deletes\",\r\n        \"base_edfi_student_discipline_incident_associations_deletes\",\r\n        \"base_edfi_parents_deletes\",\r\n        \"base_edfi_programs_deletes\",\r\n        \"base_edfi_sections_deletes\",\r\n        \"base_edfi_staffs_deletes\",\r\n        \"base_edfi_staff_education_organization_assignment_associations_deletes\",\r\n        \"base_edfi_staff_school_associations_deletes\",\r\n        \"base_edfi_staff_section_associations_deletes\",\r\n        \"base_edfi_student_assessments_deletes\",\r\n        \"base_edfi_student_parent_associations_deletes\",\r\n        \"base_edfi_student_program_associations_deletes\",\r\n        \"base_edfi_student_school_attendance_events_deletes\",\r\n        \"base_edfi_student_section_associations_deletes\",\r\n        \"base_edfi_student_section_attendance_events_deletes\",\r\n        \"base_edfi_student_special_education_program_associations_deletes\",\r\n        \"base_edfi_sessions_deletes\",\r\n        \"base_edfi_cohort_type_descriptors_deletes\",\r\n        \"base_edfi_disability_descriptors_deletes\",\r\n        \"base_edfi_language_descriptors_deletes\",\r\n        \"base_edfi_language_use_descriptors_deletes\",\r\n        \"base_edfi_race_descriptors_deletes\"\r\n    ]\r\n%}\r\n\r\n\r\n{% for table in tables %}\r\n\r\n    SELECT\r\n        JSON_VALUE(data, '$.Id') AS id,\r\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\r\n        JSON_VALUE(data, '$.ChangeVersion') AS change_version,\r\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\r\n    FROM {{ source('staging', table) }}\r\n    {% if not loop.last %} UNION ALL {% endif %}\r\n\r\n{% endfor %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.project.staging.base_edfi_assessments_deletes", "source.project.staging.base_edfi_local_education_agencies_deletes", "source.project.staging.base_edfi_objective_assessments_deletes", "source.project.staging.base_edfi_schools_deletes", "source.project.staging.base_edfi_students_deletes", "source.project.staging.base_edfi_student_education_organization_associations_deletes", "source.project.staging.base_edfi_student_school_associations_deletes", "source.project.staging.base_edfi_calendars_deletes", "source.project.staging.base_edfi_calendars_deletes", "source.project.staging.base_edfi_calendar_dates_deletes", "source.project.staging.base_edfi_courses_deletes", "source.project.staging.base_edfi_course_offerings_deletes", "source.project.staging.base_edfi_discipline_actions_deletes", "source.project.staging.base_edfi_discipline_incident_deletes", "source.project.staging.base_edfi_grades_deletes", "source.project.staging.base_edfi_grading_periods_deletes", "source.project.staging.base_edfi_staff_discipline_incident_associations_deletes", "source.project.staging.base_edfi_student_discipline_incident_associations_deletes", "source.project.staging.base_edfi_parents_deletes", "source.project.staging.base_edfi_programs_deletes", "source.project.staging.base_edfi_sections_deletes", "source.project.staging.base_edfi_staffs_deletes", "source.project.staging.base_edfi_staff_education_organization_assignment_associations_deletes", "source.project.staging.base_edfi_staff_school_associations_deletes", "source.project.staging.base_edfi_staff_section_associations_deletes", "source.project.staging.base_edfi_student_assessments_deletes", "source.project.staging.base_edfi_student_parent_associations_deletes", "source.project.staging.base_edfi_student_program_associations_deletes", "source.project.staging.base_edfi_student_school_attendance_events_deletes", "source.project.staging.base_edfi_student_section_associations_deletes", "source.project.staging.base_edfi_student_section_attendance_events_deletes", "source.project.staging.base_edfi_student_special_education_program_associations_deletes", "source.project.staging.base_edfi_sessions_deletes", "source.project.staging.base_edfi_cohort_type_descriptors_deletes", "source.project.staging.base_edfi_disability_descriptors_deletes", "source.project.staging.base_edfi_language_descriptors_deletes", "source.project.staging.base_edfi_language_use_descriptors_deletes", "source.project.staging.base_edfi_race_descriptors_deletes"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_deletes"], "unique_id": "model.project.stg_edfi_deletes", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "staging/edfi/stg_edfi_deletes.sql", "original_file_path": "models/staging/edfi/stg_edfi_deletes.sql", "name": "stg_edfi_deletes", "alias": "stg_edfi_deletes", "checksum": {"name": "sha256", "checksum": "6a4ed650d31e25c64633ea2d8d827d7c9b5ec9d2051c05f92655cb80e6ab5fd9"}, "tags": ["amt"], "refs": [], "sources": [["staging", "base_edfi_assessments_deletes"], ["staging", "base_edfi_local_education_agencies_deletes"], ["staging", "base_edfi_objective_assessments_deletes"], ["staging", "base_edfi_schools_deletes"], ["staging", "base_edfi_students_deletes"], ["staging", "base_edfi_student_education_organization_associations_deletes"], ["staging", "base_edfi_student_school_associations_deletes"], ["staging", "base_edfi_calendars_deletes"], ["staging", "base_edfi_calendars_deletes"], ["staging", "base_edfi_calendar_dates_deletes"], ["staging", "base_edfi_courses_deletes"], ["staging", "base_edfi_course_offerings_deletes"], ["staging", "base_edfi_discipline_actions_deletes"], ["staging", "base_edfi_discipline_incident_deletes"], ["staging", "base_edfi_grades_deletes"], ["staging", "base_edfi_grading_periods_deletes"], ["staging", "base_edfi_staff_discipline_incident_associations_deletes"], ["staging", "base_edfi_student_discipline_incident_associations_deletes"], ["staging", "base_edfi_parents_deletes"], ["staging", "base_edfi_programs_deletes"], ["staging", "base_edfi_sections_deletes"], ["staging", "base_edfi_staffs_deletes"], ["staging", "base_edfi_staff_education_organization_assignment_associations_deletes"], ["staging", "base_edfi_staff_school_associations_deletes"], ["staging", "base_edfi_staff_section_associations_deletes"], ["staging", "base_edfi_student_assessments_deletes"], ["staging", "base_edfi_student_parent_associations_deletes"], ["staging", "base_edfi_student_program_associations_deletes"], ["staging", "base_edfi_student_school_attendance_events_deletes"], ["staging", "base_edfi_student_section_associations_deletes"], ["staging", "base_edfi_student_section_attendance_events_deletes"], ["staging", "base_edfi_student_special_education_program_associations_deletes"], ["staging", "base_edfi_sessions_deletes"], ["staging", "base_edfi_cohort_type_descriptors_deletes"], ["staging", "base_edfi_disability_descriptors_deletes"], ["staging", "base_edfi_language_descriptors_deletes"], ["staging", "base_edfi_language_use_descriptors_deletes"], ["staging", "base_edfi_race_descriptors_deletes"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_deletes.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "amt", "labels": {"edfi_version": "5_3"}}, "created_at": 1643419470.316583, "compiled_sql": "\n\n\n\n\n    SELECT\n        JSON_VALUE(data, '$.Id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        JSON_VALUE(data, '$.ChangeVersion') AS change_version,\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_assessments_deletes`\n     UNION ALL \n\n\n\n    SELECT\n        JSON_VALUE(data, '$.Id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        JSON_VALUE(data, '$.ChangeVersion') AS change_version,\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_local_education_agencies_deletes`\n     UNION ALL \n\n\n\n    SELECT\n        JSON_VALUE(data, '$.Id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        JSON_VALUE(data, '$.ChangeVersion') AS change_version,\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_objective_assessments_deletes`\n     UNION ALL \n\n\n\n    SELECT\n        JSON_VALUE(data, '$.Id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        JSON_VALUE(data, '$.ChangeVersion') AS change_version,\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_schools_deletes`\n     UNION ALL \n\n\n\n    SELECT\n        JSON_VALUE(data, '$.Id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        JSON_VALUE(data, '$.ChangeVersion') AS change_version,\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_students_deletes`\n     UNION ALL \n\n\n\n    SELECT\n        JSON_VALUE(data, '$.Id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        JSON_VALUE(data, '$.ChangeVersion') AS change_version,\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_student_education_organization_associations_deletes`\n     UNION ALL \n\n\n\n    SELECT\n        JSON_VALUE(data, '$.Id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        JSON_VALUE(data, '$.ChangeVersion') AS change_version,\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_student_school_associations_deletes`\n     UNION ALL \n\n\n\n    SELECT\n        JSON_VALUE(data, '$.Id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        JSON_VALUE(data, '$.ChangeVersion') AS change_version,\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_calendars_deletes`\n     UNION ALL \n\n\n\n    SELECT\n        JSON_VALUE(data, '$.Id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        JSON_VALUE(data, '$.ChangeVersion') AS change_version,\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_calendars_deletes`\n     UNION ALL \n\n\n\n    SELECT\n        JSON_VALUE(data, '$.Id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        JSON_VALUE(data, '$.ChangeVersion') AS change_version,\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_calendar_dates_deletes`\n     UNION ALL \n\n\n\n    SELECT\n        JSON_VALUE(data, '$.Id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        JSON_VALUE(data, '$.ChangeVersion') AS change_version,\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_courses_deletes`\n     UNION ALL \n\n\n\n    SELECT\n        JSON_VALUE(data, '$.Id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        JSON_VALUE(data, '$.ChangeVersion') AS change_version,\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_course_offerings_deletes`\n     UNION ALL \n\n\n\n    SELECT\n        JSON_VALUE(data, '$.Id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        JSON_VALUE(data, '$.ChangeVersion') AS change_version,\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_discipline_actions_deletes`\n     UNION ALL \n\n\n\n    SELECT\n        JSON_VALUE(data, '$.Id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        JSON_VALUE(data, '$.ChangeVersion') AS change_version,\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_discipline_incident_deletes`\n     UNION ALL \n\n\n\n    SELECT\n        JSON_VALUE(data, '$.Id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        JSON_VALUE(data, '$.ChangeVersion') AS change_version,\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_grades_deletes`\n     UNION ALL \n\n\n\n    SELECT\n        JSON_VALUE(data, '$.Id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        JSON_VALUE(data, '$.ChangeVersion') AS change_version,\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_grading_periods_deletes`\n     UNION ALL \n\n\n\n    SELECT\n        JSON_VALUE(data, '$.Id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        JSON_VALUE(data, '$.ChangeVersion') AS change_version,\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_staff_discipline_incident_associations_deletes`\n     UNION ALL \n\n\n\n    SELECT\n        JSON_VALUE(data, '$.Id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        JSON_VALUE(data, '$.ChangeVersion') AS change_version,\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_student_discipline_incident_associations_deletes`\n     UNION ALL \n\n\n\n    SELECT\n        JSON_VALUE(data, '$.Id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        JSON_VALUE(data, '$.ChangeVersion') AS change_version,\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_parents_deletes`\n     UNION ALL \n\n\n\n    SELECT\n        JSON_VALUE(data, '$.Id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        JSON_VALUE(data, '$.ChangeVersion') AS change_version,\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_programs_deletes`\n     UNION ALL \n\n\n\n    SELECT\n        JSON_VALUE(data, '$.Id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        JSON_VALUE(data, '$.ChangeVersion') AS change_version,\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_sections_deletes`\n     UNION ALL \n\n\n\n    SELECT\n        JSON_VALUE(data, '$.Id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        JSON_VALUE(data, '$.ChangeVersion') AS change_version,\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_staffs_deletes`\n     UNION ALL \n\n\n\n    SELECT\n        JSON_VALUE(data, '$.Id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        JSON_VALUE(data, '$.ChangeVersion') AS change_version,\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_staff_education_organization_assignment_associations_deletes`\n     UNION ALL \n\n\n\n    SELECT\n        JSON_VALUE(data, '$.Id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        JSON_VALUE(data, '$.ChangeVersion') AS change_version,\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_staff_school_associations_deletes`\n     UNION ALL \n\n\n\n    SELECT\n        JSON_VALUE(data, '$.Id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        JSON_VALUE(data, '$.ChangeVersion') AS change_version,\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_staff_section_associations_deletes`\n     UNION ALL \n\n\n\n    SELECT\n        JSON_VALUE(data, '$.Id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        JSON_VALUE(data, '$.ChangeVersion') AS change_version,\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_student_assessments_deletes`\n     UNION ALL \n\n\n\n    SELECT\n        JSON_VALUE(data, '$.Id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        JSON_VALUE(data, '$.ChangeVersion') AS change_version,\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_student_parent_associations_deletes`\n     UNION ALL \n\n\n\n    SELECT\n        JSON_VALUE(data, '$.Id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        JSON_VALUE(data, '$.ChangeVersion') AS change_version,\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_student_program_associations_deletes`\n     UNION ALL \n\n\n\n    SELECT\n        JSON_VALUE(data, '$.Id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        JSON_VALUE(data, '$.ChangeVersion') AS change_version,\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_student_school_attendance_events_deletes`\n     UNION ALL \n\n\n\n    SELECT\n        JSON_VALUE(data, '$.Id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        JSON_VALUE(data, '$.ChangeVersion') AS change_version,\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_student_section_associations_deletes`\n     UNION ALL \n\n\n\n    SELECT\n        JSON_VALUE(data, '$.Id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        JSON_VALUE(data, '$.ChangeVersion') AS change_version,\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_student_section_attendance_events_deletes`\n     UNION ALL \n\n\n\n    SELECT\n        JSON_VALUE(data, '$.Id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        JSON_VALUE(data, '$.ChangeVersion') AS change_version,\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_student_special_education_program_associations_deletes`\n     UNION ALL \n\n\n\n    SELECT\n        JSON_VALUE(data, '$.Id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        JSON_VALUE(data, '$.ChangeVersion') AS change_version,\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_sessions_deletes`\n     UNION ALL \n\n\n\n    SELECT\n        JSON_VALUE(data, '$.Id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        JSON_VALUE(data, '$.ChangeVersion') AS change_version,\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_cohort_type_descriptors_deletes`\n     UNION ALL \n\n\n\n    SELECT\n        JSON_VALUE(data, '$.Id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        JSON_VALUE(data, '$.ChangeVersion') AS change_version,\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_disability_descriptors_deletes`\n     UNION ALL \n\n\n\n    SELECT\n        JSON_VALUE(data, '$.Id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        JSON_VALUE(data, '$.ChangeVersion') AS change_version,\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_language_descriptors_deletes`\n     UNION ALL \n\n\n\n    SELECT\n        JSON_VALUE(data, '$.Id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        JSON_VALUE(data, '$.ChangeVersion') AS change_version,\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_language_use_descriptors_deletes`\n     UNION ALL \n\n\n\n    SELECT\n        JSON_VALUE(data, '$.Id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        JSON_VALUE(data, '$.ChangeVersion') AS change_version,\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_race_descriptors_deletes`\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_staging`.`stg_edfi_deletes`"}, "model.project.stg_edfi_descriptors": {"raw_sql": "{%\r\n    set tables = [{\"table\": \"base_edfi_cohort_type_descriptors\", \"descriptorId\": \"cohortTypeDescriptorId\"},\r\n    {\"table\": \"base_edfi_disability_descriptors\", \"descriptorId\": \"disabilityDescriptorId\" },\r\n    {\"table\": \"base_edfi_language_descriptors\", \"descriptorId\": \"languageDescriptorId\" }, \r\n    {\"table\": \"base_edfi_language_use_descriptors\", \"descriptorId\": \"languageUseDescriptorId\" }, \r\n    {\"table\": \"base_edfi_race_descriptors\", \"descriptorId\": \"raceDescriptorId\" }, \r\n    {\"table\": \"base_edfi_grading_period_descriptors\", \"descriptorId\": \"gradingPeriodDescriptorId\" }]\r\n%}\r\n\r\n\r\nWITH parsed_data AS (\r\n\r\n    {% for table in tables %}\r\n        SELECT\r\n            JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\r\n            JSON_VALUE(data, '$.id') AS id,\r\n            CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\r\n            JSON_VALUE(data, '$.codeValue') AS code_value,\r\n            JSON_VALUE(data, '{{ \"$.\" ~ table[\"descriptorId\"] }}') AS descriptor_id,\r\n            JSON_VALUE(data, '$.description') AS description,\r\n            JSON_VALUE(data, '$.namespace') AS namespace,\r\n            JSON_VALUE(data, '$.shortDescription') AS short_description\r\n        FROM {{ source('staging', table['table']) }}\r\n        {% if not loop.last %} UNION ALL {% endif %}\r\n    {% endfor %}\r\n\r\n),\r\n\r\nranked AS (\r\n\r\n    SELECT\r\n        ROW_NUMBER() OVER (\r\n            PARTITION BY\r\n                school_year,\r\n                namespace,\r\n                code_value\r\n            ORDER BY school_year DESC, extracted_timestamp DESC\r\n        ) AS rank,\r\n        *\r\n    FROM parsed_data\r\n\r\n)\r\n\r\nSELECT DISTINCT * EXCEPT (extracted_timestamp, rank)\r\nFROM ranked\r\nWHERE\r\n    rank = 1\r\n    AND id NOT IN (\r\n        SELECT id FROM {{ ref('stg_edfi_deletes') }} edfi_deletes\r\n        WHERE ranked.school_year = edfi_deletes.school_year\r\n    )", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.project.staging.base_edfi_cohort_type_descriptors", "source.project.staging.base_edfi_disability_descriptors", "source.project.staging.base_edfi_language_descriptors", "source.project.staging.base_edfi_language_use_descriptors", "source.project.staging.base_edfi_race_descriptors", "source.project.staging.base_edfi_grading_period_descriptors", "model.project.stg_edfi_deletes"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_descriptors"], "unique_id": "model.project.stg_edfi_descriptors", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "staging/edfi/stg_edfi_descriptors.sql", "original_file_path": "models/staging/edfi/stg_edfi_descriptors.sql", "name": "stg_edfi_descriptors", "alias": "stg_edfi_descriptors", "checksum": {"name": "sha256", "checksum": "c5a508be1c5531cf68e082452b89046d3a1bccfcac935576a8c1853d15a5d989"}, "tags": ["amt"], "refs": [["stg_edfi_deletes"]], "sources": [["staging", "base_edfi_cohort_type_descriptors"], ["staging", "base_edfi_disability_descriptors"], ["staging", "base_edfi_language_descriptors"], ["staging", "base_edfi_language_use_descriptors"], ["staging", "base_edfi_race_descriptors"], ["staging", "base_edfi_grading_period_descriptors"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_descriptors.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "amt", "labels": {"edfi_version": "5_3"}}, "created_at": 1643419470.3236766, "compiled_sql": "\n\n\nWITH parsed_data AS (\n\n    \n        SELECT\n            JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n            JSON_VALUE(data, '$.id') AS id,\n            CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n            JSON_VALUE(data, '$.codeValue') AS code_value,\n            JSON_VALUE(data, '$.cohortTypeDescriptorId') AS descriptor_id,\n            JSON_VALUE(data, '$.description') AS description,\n            JSON_VALUE(data, '$.namespace') AS namespace,\n            JSON_VALUE(data, '$.shortDescription') AS short_description\n        FROM `gcp-proj-id`.`dev_staging`.`base_edfi_cohort_type_descriptors`\n         UNION ALL \n    \n        SELECT\n            JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n            JSON_VALUE(data, '$.id') AS id,\n            CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n            JSON_VALUE(data, '$.codeValue') AS code_value,\n            JSON_VALUE(data, '$.disabilityDescriptorId') AS descriptor_id,\n            JSON_VALUE(data, '$.description') AS description,\n            JSON_VALUE(data, '$.namespace') AS namespace,\n            JSON_VALUE(data, '$.shortDescription') AS short_description\n        FROM `gcp-proj-id`.`dev_staging`.`base_edfi_disability_descriptors`\n         UNION ALL \n    \n        SELECT\n            JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n            JSON_VALUE(data, '$.id') AS id,\n            CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n            JSON_VALUE(data, '$.codeValue') AS code_value,\n            JSON_VALUE(data, '$.languageDescriptorId') AS descriptor_id,\n            JSON_VALUE(data, '$.description') AS description,\n            JSON_VALUE(data, '$.namespace') AS namespace,\n            JSON_VALUE(data, '$.shortDescription') AS short_description\n        FROM `gcp-proj-id`.`dev_staging`.`base_edfi_language_descriptors`\n         UNION ALL \n    \n        SELECT\n            JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n            JSON_VALUE(data, '$.id') AS id,\n            CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n            JSON_VALUE(data, '$.codeValue') AS code_value,\n            JSON_VALUE(data, '$.languageUseDescriptorId') AS descriptor_id,\n            JSON_VALUE(data, '$.description') AS description,\n            JSON_VALUE(data, '$.namespace') AS namespace,\n            JSON_VALUE(data, '$.shortDescription') AS short_description\n        FROM `gcp-proj-id`.`dev_staging`.`base_edfi_language_use_descriptors`\n         UNION ALL \n    \n        SELECT\n            JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n            JSON_VALUE(data, '$.id') AS id,\n            CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n            JSON_VALUE(data, '$.codeValue') AS code_value,\n            JSON_VALUE(data, '$.raceDescriptorId') AS descriptor_id,\n            JSON_VALUE(data, '$.description') AS description,\n            JSON_VALUE(data, '$.namespace') AS namespace,\n            JSON_VALUE(data, '$.shortDescription') AS short_description\n        FROM `gcp-proj-id`.`dev_staging`.`base_edfi_race_descriptors`\n         UNION ALL \n    \n        SELECT\n            JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n            JSON_VALUE(data, '$.id') AS id,\n            CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n            JSON_VALUE(data, '$.codeValue') AS code_value,\n            JSON_VALUE(data, '$.gradingPeriodDescriptorId') AS descriptor_id,\n            JSON_VALUE(data, '$.description') AS description,\n            JSON_VALUE(data, '$.namespace') AS namespace,\n            JSON_VALUE(data, '$.shortDescription') AS short_description\n        FROM `gcp-proj-id`.`dev_staging`.`base_edfi_grading_period_descriptors`\n        \n    \n\n),\n\nranked AS (\n\n    SELECT\n        ROW_NUMBER() OVER (\n            PARTITION BY\n                school_year,\n                namespace,\n                code_value\n            ORDER BY school_year DESC, extracted_timestamp DESC\n        ) AS rank,\n        *\n    FROM parsed_data\n\n)\n\nSELECT DISTINCT * EXCEPT (extracted_timestamp, rank)\nFROM ranked\nWHERE\n    rank = 1\n    AND id NOT IN (\n        SELECT id FROM `gcp-proj-id`.`dev_staging`.`stg_edfi_deletes` edfi_deletes\n        WHERE ranked.school_year = edfi_deletes.school_year\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_staging`.`stg_edfi_descriptors`"}, "model.project.stg_edfi_sections": {"raw_sql": "WITH parsed_data AS (\r\n\r\n    SELECT\r\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\r\n        JSON_VALUE(data, '$.id') AS id,\r\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\r\n        JSON_VALUE(data, '$.sectionIdentifier') AS section_identifier,\r\n        JSON_VALUE(data, '$.sectionName') AS section_name,\r\n        STRUCT(\r\n            JSON_VALUE(data, '$.courseOfferingReference.localCourseCode') AS local_course_code,\r\n            JSON_VALUE(data, '$.courseOfferingReference.schoolId') AS school_id,\r\n            CAST(JSON_VALUE(data, '$.courseOfferingReference.schoolYear') AS int64) AS school_year,\r\n            JSON_VALUE(data, '$.courseOfferingReference.sessionName') AS session_name\r\n        ) AS course_offering_reference,\r\n        CAST(JSON_VALUE(data, '$.availableCreditConversion') AS float64) AS available_credit_conversion,\r\n        CAST(JSON_VALUE(data, '$.availableCredits') AS float64) AS available_credits,\r\n        SPLIT(JSON_VALUE(data, '$.availableCreditTypeDescriptor'), '#')[OFFSET(1)] AS available_credit_type_descriptor,\r\n        SPLIT(JSON_VALUE(data, '$.educationalEnvironmentDescriptor'), '#')[OFFSET(1)] AS educational_environment_descriptor,\r\n        STRUCT(\r\n            JSON_VALUE(data, '$.locationReference.classroomIdentificationCode') AS classroom_identification_code,\r\n            JSON_VALUE(data, '$.locationReference.schoolId') AS school_id\r\n        ) AS location_reference,\r\n        STRUCT(\r\n            JSON_VALUE(data, '$.locationSchoolReference.schoolId') AS school_id\r\n        ) AS location_school_reference,\r\n        ARRAY(\r\n            SELECT AS STRUCT \r\n                STRUCT(\r\n                    JSON_VALUE(class_periods, \"$.classPeriodReference.classPeriodName\") AS class_period_name,\r\n                    JSON_VALUE(class_periods, '$.classPeriodReference.schoolId') AS school_id\r\n                ) AS class_period_reference\r\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.classPeriods\")) class_periods \r\n        ) AS class_periods,\r\n    FROM {{ source('staging', 'base_edfi_sections') }}\r\n\r\n),\r\n\r\nranked AS (\r\n\r\n    SELECT\r\n        ROW_NUMBER() OVER (\r\n            PARTITION BY\r\n                school_year,\r\n                course_offering_reference.school_year,\r\n                course_offering_reference.school_id,\r\n                course_offering_reference.session_name,\r\n                course_offering_reference.local_course_code,\r\n                section_identifier\r\n            ORDER BY school_year DESC, extracted_timestamp DESC\r\n        ) AS rank,\r\n        *\r\n    FROM parsed_data\r\n\r\n)\r\n\r\nSELECT * EXCEPT (extracted_timestamp, rank, school_year),\r\n    COALESCE(course_offering_reference.school_year, school_year) AS school_year\r\nFROM ranked\r\nWHERE\r\n    rank = 1\r\n    AND id NOT IN (\r\n        SELECT id FROM {{ ref('stg_edfi_deletes') }} edfi_deletes\r\n        WHERE ranked.school_year = edfi_deletes.school_year\r\n    )", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.project.staging.base_edfi_sections", "model.project.stg_edfi_deletes"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_sections"], "unique_id": "model.project.stg_edfi_sections", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "staging/edfi/stg_edfi_sections.sql", "original_file_path": "models/staging/edfi/stg_edfi_sections.sql", "name": "stg_edfi_sections", "alias": "stg_edfi_sections", "checksum": {"name": "sha256", "checksum": "d6955fc08fb83a066001d493350ea64f3fc9117d934e5b05b39e4e42594d7ad4"}, "tags": ["amt"], "refs": [["stg_edfi_deletes"]], "sources": [["staging", "base_edfi_sections"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_sections.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "amt", "labels": {"edfi_version": "5_3"}}, "created_at": 1643419470.3305042, "compiled_sql": "WITH parsed_data AS (\n\n    SELECT\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n        JSON_VALUE(data, '$.id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        JSON_VALUE(data, '$.sectionIdentifier') AS section_identifier,\n        JSON_VALUE(data, '$.sectionName') AS section_name,\n        STRUCT(\n            JSON_VALUE(data, '$.courseOfferingReference.localCourseCode') AS local_course_code,\n            JSON_VALUE(data, '$.courseOfferingReference.schoolId') AS school_id,\n            CAST(JSON_VALUE(data, '$.courseOfferingReference.schoolYear') AS int64) AS school_year,\n            JSON_VALUE(data, '$.courseOfferingReference.sessionName') AS session_name\n        ) AS course_offering_reference,\n        CAST(JSON_VALUE(data, '$.availableCreditConversion') AS float64) AS available_credit_conversion,\n        CAST(JSON_VALUE(data, '$.availableCredits') AS float64) AS available_credits,\n        SPLIT(JSON_VALUE(data, '$.availableCreditTypeDescriptor'), '#')[OFFSET(1)] AS available_credit_type_descriptor,\n        SPLIT(JSON_VALUE(data, '$.educationalEnvironmentDescriptor'), '#')[OFFSET(1)] AS educational_environment_descriptor,\n        STRUCT(\n            JSON_VALUE(data, '$.locationReference.classroomIdentificationCode') AS classroom_identification_code,\n            JSON_VALUE(data, '$.locationReference.schoolId') AS school_id\n        ) AS location_reference,\n        STRUCT(\n            JSON_VALUE(data, '$.locationSchoolReference.schoolId') AS school_id\n        ) AS location_school_reference,\n        ARRAY(\n            SELECT AS STRUCT \n                STRUCT(\n                    JSON_VALUE(class_periods, \"$.classPeriodReference.classPeriodName\") AS class_period_name,\n                    JSON_VALUE(class_periods, '$.classPeriodReference.schoolId') AS school_id\n                ) AS class_period_reference\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.classPeriods\")) class_periods \n        ) AS class_periods,\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_sections`\n\n),\n\nranked AS (\n\n    SELECT\n        ROW_NUMBER() OVER (\n            PARTITION BY\n                school_year,\n                course_offering_reference.school_year,\n                course_offering_reference.school_id,\n                course_offering_reference.session_name,\n                course_offering_reference.local_course_code,\n                section_identifier\n            ORDER BY school_year DESC, extracted_timestamp DESC\n        ) AS rank,\n        *\n    FROM parsed_data\n\n)\n\nSELECT * EXCEPT (extracted_timestamp, rank, school_year),\n    COALESCE(course_offering_reference.school_year, school_year) AS school_year\nFROM ranked\nWHERE\n    rank = 1\n    AND id NOT IN (\n        SELECT id FROM `gcp-proj-id`.`dev_staging`.`stg_edfi_deletes` edfi_deletes\n        WHERE ranked.school_year = edfi_deletes.school_year\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_staging`.`stg_edfi_sections`"}, "model.project.stg_edfi_student_program_associations": {"raw_sql": "WITH parsed_data AS (\r\n\r\n    SELECT\r\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\r\n        JSON_VALUE(data, '$.id') AS id,\r\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\r\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, \"$.beginDate\")) AS begin_date,\r\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, \"$.endDate\")) AS end_date,\r\n        STRUCT(\r\n            JSON_VALUE(data, '$.educationOrganizationReference.educationOrganizationId') AS education_organization_id\r\n        ) AS education_organization_reference,\r\n        SPLIT(JSON_VALUE(data, \"$.reasonExitedDescriptor\"), '#')[OFFSET(1)] AS reason_exited_descriptor,\r\n        CAST(JSON_VALUE(data, '$.servedOutsideOfRegularSession') AS BOOL) served_outside_of_regular_session,\r\n        STRUCT(\r\n            JSON_VALUE(data, '$.programReference.educationOrganizationId') AS education_organization_id,\r\n            JSON_VALUE(data, '$.programReference.programName') AS program_name,\r\n            SPLIT(JSON_VALUE(data, \"$.programReference.programTypeDescriptor\"), '#')[OFFSET(1)] AS program_type_descriptor\r\n        ) AS program_reference,\r\n        STRUCT(\r\n            JSON_VALUE(data, '$.studentReference.studentUniqueId') AS student_unique_id\r\n        ) AS student_reference,\r\n        STRUCT(\r\n            SPLIT(JSON_VALUE(data, \"$.participationStatus.participationStatusDescriptor\"), '#')[OFFSET(1)] AS participation_status_descriptor,\r\n            JSON_VALUE(data, '$.participationStatus.designatedBy') AS designated_by,\r\n            PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, \"$.participationStatus.statusBeginDate\")) AS status_begin_date,\r\n            PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, \"$.participationStatus.statusEndDate\")) AS status_end_date\r\n        ) AS participation_status,\r\n        ARRAY(\r\n            SELECT AS STRUCT \r\n                SPLIT(JSON_VALUE(statuses, \"$.participationStatusDescriptor\"), '#')[OFFSET(1)] AS participation_status_descriptor,\r\n                JSON_VALUE(statuses, '$.designatedBy') AS designated_by,\r\n                PARSE_DATE('%Y-%m-%d', JSON_VALUE(statuses, \"$.statusBeginDate\")) AS status_begin_date,\r\n                PARSE_DATE('%Y-%m-%d', JSON_VALUE(statuses, \"$.statusEndDate\")) AS status_end_date\r\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.programParticipationStatuses\")) statuses \r\n        ) AS program_participation_statuses,\r\n        ARRAY(\r\n            SELECT AS STRUCT \r\n                SPLIT(JSON_VALUE(services, \"$.serviceDescriptor\"), '#')[OFFSET(1)] AS service_descriptor,\r\n                CAST(JSON_VALUE(services, '$.primaryIndicator') AS BOOL) primary_indicator,\r\n                PARSE_DATE('%Y-%m-%d', JSON_VALUE(services, \"$.statusBeginDate\")) AS status_begin_date,\r\n                PARSE_DATE('%Y-%m-%d', JSON_VALUE(services, \"$.statusEndDate\")) AS status_end_date\r\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.services\")) services \r\n        ) AS services\r\n    FROM {{ source('staging', 'base_edfi_student_program_associations') }}\r\n\r\n),\r\n\r\nranked AS (\r\n\r\n    SELECT\r\n        ROW_NUMBER() OVER (\r\n            PARTITION BY\r\n                school_year,\r\n                education_organization_reference.education_organization_id,\r\n                program_reference.education_organization_id,\r\n                program_reference.program_name,\r\n                program_reference.program_type_descriptor,\r\n                student_reference.student_unique_id,\r\n                begin_date\r\n            ORDER BY school_year DESC, extracted_timestamp DESC\r\n        ) AS rank,\r\n        *\r\n    FROM parsed_data\r\n\r\n)\r\n\r\nSELECT * EXCEPT (extracted_timestamp, rank)\r\nFROM ranked\r\nWHERE\r\n    rank = 1\r\n    AND id NOT IN (\r\n        SELECT id FROM {{ ref('stg_edfi_deletes') }} edfi_deletes\r\n        WHERE ranked.school_year = edfi_deletes.school_year\r\n    )", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.project.staging.base_edfi_student_program_associations", "model.project.stg_edfi_deletes"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_student_program_associations"], "unique_id": "model.project.stg_edfi_student_program_associations", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "staging/edfi/stg_edfi_student_program_associations.sql", "original_file_path": "models/staging/edfi/stg_edfi_student_program_associations.sql", "name": "stg_edfi_student_program_associations", "alias": "stg_edfi_student_program_associations", "checksum": {"name": "sha256", "checksum": "8f85b31b2da767ff081cb16202126b394a4398e67b287b7c0f49286461825fe0"}, "tags": ["amt"], "refs": [["stg_edfi_deletes"]], "sources": [["staging", "base_edfi_student_program_associations"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_student_program_associations.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "amt", "labels": {"edfi_version": "5_3"}}, "created_at": 1643419470.3333037, "compiled_sql": "WITH parsed_data AS (\n\n    SELECT\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n        JSON_VALUE(data, '$.id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, \"$.beginDate\")) AS begin_date,\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, \"$.endDate\")) AS end_date,\n        STRUCT(\n            JSON_VALUE(data, '$.educationOrganizationReference.educationOrganizationId') AS education_organization_id\n        ) AS education_organization_reference,\n        SPLIT(JSON_VALUE(data, \"$.reasonExitedDescriptor\"), '#')[OFFSET(1)] AS reason_exited_descriptor,\n        CAST(JSON_VALUE(data, '$.servedOutsideOfRegularSession') AS BOOL) served_outside_of_regular_session,\n        STRUCT(\n            JSON_VALUE(data, '$.programReference.educationOrganizationId') AS education_organization_id,\n            JSON_VALUE(data, '$.programReference.programName') AS program_name,\n            SPLIT(JSON_VALUE(data, \"$.programReference.programTypeDescriptor\"), '#')[OFFSET(1)] AS program_type_descriptor\n        ) AS program_reference,\n        STRUCT(\n            JSON_VALUE(data, '$.studentReference.studentUniqueId') AS student_unique_id\n        ) AS student_reference,\n        STRUCT(\n            SPLIT(JSON_VALUE(data, \"$.participationStatus.participationStatusDescriptor\"), '#')[OFFSET(1)] AS participation_status_descriptor,\n            JSON_VALUE(data, '$.participationStatus.designatedBy') AS designated_by,\n            PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, \"$.participationStatus.statusBeginDate\")) AS status_begin_date,\n            PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, \"$.participationStatus.statusEndDate\")) AS status_end_date\n        ) AS participation_status,\n        ARRAY(\n            SELECT AS STRUCT \n                SPLIT(JSON_VALUE(statuses, \"$.participationStatusDescriptor\"), '#')[OFFSET(1)] AS participation_status_descriptor,\n                JSON_VALUE(statuses, '$.designatedBy') AS designated_by,\n                PARSE_DATE('%Y-%m-%d', JSON_VALUE(statuses, \"$.statusBeginDate\")) AS status_begin_date,\n                PARSE_DATE('%Y-%m-%d', JSON_VALUE(statuses, \"$.statusEndDate\")) AS status_end_date\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.programParticipationStatuses\")) statuses \n        ) AS program_participation_statuses,\n        ARRAY(\n            SELECT AS STRUCT \n                SPLIT(JSON_VALUE(services, \"$.serviceDescriptor\"), '#')[OFFSET(1)] AS service_descriptor,\n                CAST(JSON_VALUE(services, '$.primaryIndicator') AS BOOL) primary_indicator,\n                PARSE_DATE('%Y-%m-%d', JSON_VALUE(services, \"$.statusBeginDate\")) AS status_begin_date,\n                PARSE_DATE('%Y-%m-%d', JSON_VALUE(services, \"$.statusEndDate\")) AS status_end_date\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.services\")) services \n        ) AS services\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_student_program_associations`\n\n),\n\nranked AS (\n\n    SELECT\n        ROW_NUMBER() OVER (\n            PARTITION BY\n                school_year,\n                education_organization_reference.education_organization_id,\n                program_reference.education_organization_id,\n                program_reference.program_name,\n                program_reference.program_type_descriptor,\n                student_reference.student_unique_id,\n                begin_date\n            ORDER BY school_year DESC, extracted_timestamp DESC\n        ) AS rank,\n        *\n    FROM parsed_data\n\n)\n\nSELECT * EXCEPT (extracted_timestamp, rank)\nFROM ranked\nWHERE\n    rank = 1\n    AND id NOT IN (\n        SELECT id FROM `gcp-proj-id`.`dev_staging`.`stg_edfi_deletes` edfi_deletes\n        WHERE ranked.school_year = edfi_deletes.school_year\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_staging`.`stg_edfi_student_program_associations`"}, "model.project.stg_edfi_students": {"raw_sql": "WITH parsed_data AS (\r\n\r\n    SELECT\r\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\r\n        JSON_VALUE(data, '$.id') AS id,\r\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\r\n        JSON_VALUE(data, '$.studentUniqueId') AS student_unique_id,\r\n        JSON_VALUE(data, '$.lastSurname') AS last_surname,\r\n        JSON_VALUE(data, '$.middleName') AS middle_name,\r\n        JSON_VALUE(data, '$.firstName') AS first_name,\r\n        JSON_VALUE(data, '$.generationCodeSuffix') AS generation_code_suffix,\r\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, '$.birthDate')) AS birth_date,\r\n        JSON_VALUE(data, '$.birthCity') AS birth_city,\r\n        SPLIT(JSON_VALUE(data, \"$.birthCountryDescriptor\"), '#')[OFFSET(1)] AS birth_country_descriptor,\r\n        JSON_VALUE(data, '$.birthInternationalProvince') AS birth_international_province,\r\n        STRUCT(\r\n            JSON_VALUE(data, '$.personReference.personId') AS person_id,\r\n            SPLIT(JSON_VALUE(data, \"$.personReference.sourceSystemDescriptor\"), '#')[OFFSET(1)] AS source_system_descriptor\r\n        ) AS person_reference,\r\n    FROM {{ source('staging', 'base_edfi_students') }}\r\n\r\n),\r\n\r\nranked AS (\r\n\r\n    SELECT\r\n        ROW_NUMBER() OVER (\r\n            PARTITION BY school_year, student_unique_id\r\n            ORDER BY school_year DESC, extracted_timestamp DESC\r\n        ) AS rank,\r\n        *\r\n    FROM parsed_data\r\n\r\n)\r\n\r\nSELECT * EXCEPT (extracted_timestamp, rank)\r\nFROM ranked\r\nWHERE\r\n    rank = 1\r\n    AND id NOT IN (\r\n        SELECT id FROM {{ ref('stg_edfi_deletes') }} edfi_deletes\r\n        WHERE ranked.school_year = edfi_deletes.school_year\r\n    )", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.project.staging.base_edfi_students", "model.project.stg_edfi_deletes"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_students"], "unique_id": "model.project.stg_edfi_students", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "staging/edfi/stg_edfi_students.sql", "original_file_path": "models/staging/edfi/stg_edfi_students.sql", "name": "stg_edfi_students", "alias": "stg_edfi_students", "checksum": {"name": "sha256", "checksum": "1732f3948092c395bb6f880279b418445c0bd7c09f03f9215e20c1f1e4856f90"}, "tags": ["amt"], "refs": [["stg_edfi_deletes"]], "sources": [["staging", "base_edfi_students"]], "description": "This entity represents an individual for whom instruction, services, and/or care are provided in an early childhood, elementary, or secondary educational program under the jurisdiction of a school, education agency or other institution or program. A student is a person who has been enrolled in a school or other educational institution.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "project://models/staging/edfi/stg_edfi.yml", "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_students.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "amt", "labels": {"edfi_version": "5_3"}}, "created_at": 1643419470.6676824, "compiled_sql": "WITH parsed_data AS (\n\n    SELECT\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n        JSON_VALUE(data, '$.id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        JSON_VALUE(data, '$.studentUniqueId') AS student_unique_id,\n        JSON_VALUE(data, '$.lastSurname') AS last_surname,\n        JSON_VALUE(data, '$.middleName') AS middle_name,\n        JSON_VALUE(data, '$.firstName') AS first_name,\n        JSON_VALUE(data, '$.generationCodeSuffix') AS generation_code_suffix,\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, '$.birthDate')) AS birth_date,\n        JSON_VALUE(data, '$.birthCity') AS birth_city,\n        SPLIT(JSON_VALUE(data, \"$.birthCountryDescriptor\"), '#')[OFFSET(1)] AS birth_country_descriptor,\n        JSON_VALUE(data, '$.birthInternationalProvince') AS birth_international_province,\n        STRUCT(\n            JSON_VALUE(data, '$.personReference.personId') AS person_id,\n            SPLIT(JSON_VALUE(data, \"$.personReference.sourceSystemDescriptor\"), '#')[OFFSET(1)] AS source_system_descriptor\n        ) AS person_reference,\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_students`\n\n),\n\nranked AS (\n\n    SELECT\n        ROW_NUMBER() OVER (\n            PARTITION BY school_year, student_unique_id\n            ORDER BY school_year DESC, extracted_timestamp DESC\n        ) AS rank,\n        *\n    FROM parsed_data\n\n)\n\nSELECT * EXCEPT (extracted_timestamp, rank)\nFROM ranked\nWHERE\n    rank = 1\n    AND id NOT IN (\n        SELECT id FROM `gcp-proj-id`.`dev_staging`.`stg_edfi_deletes` edfi_deletes\n        WHERE ranked.school_year = edfi_deletes.school_year\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_staging`.`stg_edfi_students`"}, "model.project.stg_edfi_calendars": {"raw_sql": "WITH parsed_data AS (\r\n\r\n    SELECT\r\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\r\n        JSON_VALUE(data, '$.id') AS id,\r\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\r\n        JSON_VALUE(data, '$.calendarCode') AS calendar_code,\r\n        STRUCT(\r\n            JSON_VALUE(data, '$.schoolReference.schoolId') AS school_id\r\n        ) AS school_reference,\r\n        STRUCT(\r\n            CAST(JSON_VALUE(data, '$.schoolYearTypeReference.schoolYear') AS int64) AS school_year\r\n        ) AS school_year_type_reference,\r\n        SPLIT(JSON_VALUE(data, \"$.calendarTypeDescriptor\"), '#')[OFFSET(1)] AS calendar_type_descriptor,\r\n        ARRAY(\r\n            SELECT AS STRUCT \r\n                SPLIT(JSON_VALUE(grade_levels, \"$.gradeLevelDescriptor\"), '#')[OFFSET(1)] AS grade_level_descriptor\r\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.gradeLevels\")) grade_levels \r\n        ) AS grade_levels\r\n    FROM {{ source('staging', 'base_edfi_calendars') }}\r\n\r\n),\r\n\r\nranked AS (\r\n\r\n    SELECT\r\n        ROW_NUMBER() OVER (\r\n            PARTITION BY\r\n                school_year,\r\n                school_year_type_reference.school_year,\r\n                school_reference.school_id,\r\n                calendar_code\r\n            ORDER BY school_year DESC, extracted_timestamp DESC\r\n        ) AS rank,\r\n        *\r\n    FROM parsed_data\r\n\r\n)\r\n\r\nSELECT * EXCEPT (extracted_timestamp, rank, school_year),\r\n    COALESCE(school_year_type_reference.school_year, school_year) AS school_year\r\nFROM ranked\r\nWHERE\r\n    rank = 1\r\n    AND id NOT IN (\r\n        SELECT id FROM {{ ref('stg_edfi_deletes') }} edfi_deletes\r\n        WHERE ranked.school_year = edfi_deletes.school_year\r\n    )", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.project.staging.base_edfi_calendars", "model.project.stg_edfi_deletes"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_calendars"], "unique_id": "model.project.stg_edfi_calendars", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "staging/edfi/stg_edfi_calendars.sql", "original_file_path": "models/staging/edfi/stg_edfi_calendars.sql", "name": "stg_edfi_calendars", "alias": "stg_edfi_calendars", "checksum": {"name": "sha256", "checksum": "5cfb9bc1369a9a9c24533138eeb68061c8475293673359fa4f398eb9241dd684"}, "tags": ["amt"], "refs": [["stg_edfi_deletes"]], "sources": [["staging", "base_edfi_calendars"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_calendars.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "amt", "labels": {"edfi_version": "5_3"}}, "created_at": 1643419470.3383572, "compiled_sql": "WITH parsed_data AS (\n\n    SELECT\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n        JSON_VALUE(data, '$.id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        JSON_VALUE(data, '$.calendarCode') AS calendar_code,\n        STRUCT(\n            JSON_VALUE(data, '$.schoolReference.schoolId') AS school_id\n        ) AS school_reference,\n        STRUCT(\n            CAST(JSON_VALUE(data, '$.schoolYearTypeReference.schoolYear') AS int64) AS school_year\n        ) AS school_year_type_reference,\n        SPLIT(JSON_VALUE(data, \"$.calendarTypeDescriptor\"), '#')[OFFSET(1)] AS calendar_type_descriptor,\n        ARRAY(\n            SELECT AS STRUCT \n                SPLIT(JSON_VALUE(grade_levels, \"$.gradeLevelDescriptor\"), '#')[OFFSET(1)] AS grade_level_descriptor\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.gradeLevels\")) grade_levels \n        ) AS grade_levels\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_calendars`\n\n),\n\nranked AS (\n\n    SELECT\n        ROW_NUMBER() OVER (\n            PARTITION BY\n                school_year,\n                school_year_type_reference.school_year,\n                school_reference.school_id,\n                calendar_code\n            ORDER BY school_year DESC, extracted_timestamp DESC\n        ) AS rank,\n        *\n    FROM parsed_data\n\n)\n\nSELECT * EXCEPT (extracted_timestamp, rank, school_year),\n    COALESCE(school_year_type_reference.school_year, school_year) AS school_year\nFROM ranked\nWHERE\n    rank = 1\n    AND id NOT IN (\n        SELECT id FROM `gcp-proj-id`.`dev_staging`.`stg_edfi_deletes` edfi_deletes\n        WHERE ranked.school_year = edfi_deletes.school_year\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_staging`.`stg_edfi_calendars`"}, "model.project.stg_edfi_staffs": {"raw_sql": "WITH parsed_data AS (\r\n\r\n    SELECT\r\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\r\n        JSON_VALUE(data, '$.id') AS id,\r\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\r\n        JSON_VALUE(data, '$.staffUniqueId') AS staff_unique_id,\r\n        JSON_VALUE(data, '$.lastSurname') AS last_surname,\r\n        JSON_VALUE(data, '$.middleName') AS middle_name,\r\n        JSON_VALUE(data, '$.firstName') AS first_name,\r\n        STRUCT(\r\n            JSON_VALUE(data, '$.personReference.personId') AS person_id,\r\n            SPLIT(JSON_VALUE(data, \"$.personReference.sourceSystemDescriptor\"), '#')[OFFSET(1)] AS source_system_descriptor\r\n        ) AS person_reference,\r\n        JSON_VALUE(data, '$.generationCodeSuffix') AS generation_code_suffix,\r\n        JSON_VALUE(data, '$.loginId') AS login_id,\r\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, '$.birthDate')) AS birth_date,\r\n        SPLIT(JSON_VALUE(data, \"$.citizenshipStatusDescriptor\"), '#')[OFFSET(1)] AS citizenship_status_descriptor,\r\n        SPLIT(JSON_VALUE(data, \"$.highestCompletedLevelOfEducationDescriptor\"), '#')[OFFSET(1)] AS highest_completed_level_of_education_descriptor,\r\n        CAST(JSON_VALUE(data, \"$.highlyQualifiedTeacher\") AS BOOL) AS highly_qualified_teacher,\r\n        CAST(JSON_VALUE(data, \"$.hispanicLatinoEthnicity\") AS BOOL) AS hispanic_latino_ethnicity,\r\n        ARRAY(\r\n            SELECT AS STRUCT \r\n                SPLIT(JSON_VALUE(electronic_mails, '$.electronicMailTypeDescriptor'), '#')[OFFSET(1)] AS electronic_mail_type_descriptor,\r\n                JSON_VALUE(electronic_mails, \"$.electronicMailAddress\") AS electronic_mail_address,\r\n                CAST(JSON_VALUE(electronic_mails, \"$.doNotPublishIndicator\") AS BOOL) AS do_not_publish_indicator\r\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.electronicMails\")) electronic_mails \r\n        ) AS electronic_mails,\r\n        ARRAY(\r\n            SELECT AS STRUCT \r\n                SPLIT(JSON_VALUE(codes, '$.staffIdentificationSystemDescriptor'), '#')[OFFSET(1)] AS staff_identification_system_descriptor,\r\n                JSON_VALUE(codes, \"$.assigningOrganizationIdentificationCode\") AS assigning_organization_identification_code,\r\n                JSON_VALUE(codes, \"$.identificationCode\") AS identification_code\r\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.identificationCodes\")) codes \r\n        ) AS identification_codes,\r\n        ARRAY(\r\n            SELECT AS STRUCT \r\n                SPLIT(JSON_VALUE(descriptors, '$.ancestryEthnicOriginDescriptor'), '#')[OFFSET(1)] AS ancestry_ethnic_origin_descriptor,\r\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.ancestry_ethnic_origins\")) descriptors \r\n        ) AS ancestry_ethnic_origins,\r\n        ARRAY(\r\n            SELECT AS STRUCT \r\n                SPLIT(JSON_VALUE(races, '$.raceDescriptor'), '#')[OFFSET(1)] AS race_descriptor,\r\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.races\")) races \r\n        ) AS races\r\n    FROM {{ source('staging', 'base_edfi_staffs') }}\r\n\r\n),\r\n\r\nranked AS (\r\n\r\n    SELECT\r\n        ROW_NUMBER() OVER (\r\n            PARTITION BY\r\n                school_year,\r\n                staff_unique_id\r\n            ORDER BY school_year DESC, extracted_timestamp DESC\r\n        ) AS rank,\r\n        *\r\n    FROM parsed_data\r\n\r\n)\r\n\r\nSELECT * EXCEPT (extracted_timestamp, rank)\r\nFROM ranked\r\nWHERE\r\n    rank = 1\r\n    AND id NOT IN (\r\n        SELECT id FROM {{ ref('stg_edfi_deletes') }} edfi_deletes\r\n        WHERE ranked.school_year = edfi_deletes.school_year\r\n    )", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.project.staging.base_edfi_staffs", "model.project.stg_edfi_deletes"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_staffs"], "unique_id": "model.project.stg_edfi_staffs", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "staging/edfi/stg_edfi_staffs.sql", "original_file_path": "models/staging/edfi/stg_edfi_staffs.sql", "name": "stg_edfi_staffs", "alias": "stg_edfi_staffs", "checksum": {"name": "sha256", "checksum": "ceae1f998ec5fea13c9f5f77b22af99cc5b03b48f6a714b0e32244f540bf1f34"}, "tags": ["amt"], "refs": [["stg_edfi_deletes"]], "sources": [["staging", "base_edfi_staffs"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_staffs.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "amt", "labels": {"edfi_version": "5_3"}}, "created_at": 1643419470.3406646, "compiled_sql": "WITH parsed_data AS (\n\n    SELECT\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n        JSON_VALUE(data, '$.id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        JSON_VALUE(data, '$.staffUniqueId') AS staff_unique_id,\n        JSON_VALUE(data, '$.lastSurname') AS last_surname,\n        JSON_VALUE(data, '$.middleName') AS middle_name,\n        JSON_VALUE(data, '$.firstName') AS first_name,\n        STRUCT(\n            JSON_VALUE(data, '$.personReference.personId') AS person_id,\n            SPLIT(JSON_VALUE(data, \"$.personReference.sourceSystemDescriptor\"), '#')[OFFSET(1)] AS source_system_descriptor\n        ) AS person_reference,\n        JSON_VALUE(data, '$.generationCodeSuffix') AS generation_code_suffix,\n        JSON_VALUE(data, '$.loginId') AS login_id,\n        PARSE_DATE('%Y-%m-%d', JSON_VALUE(data, '$.birthDate')) AS birth_date,\n        SPLIT(JSON_VALUE(data, \"$.citizenshipStatusDescriptor\"), '#')[OFFSET(1)] AS citizenship_status_descriptor,\n        SPLIT(JSON_VALUE(data, \"$.highestCompletedLevelOfEducationDescriptor\"), '#')[OFFSET(1)] AS highest_completed_level_of_education_descriptor,\n        CAST(JSON_VALUE(data, \"$.highlyQualifiedTeacher\") AS BOOL) AS highly_qualified_teacher,\n        CAST(JSON_VALUE(data, \"$.hispanicLatinoEthnicity\") AS BOOL) AS hispanic_latino_ethnicity,\n        ARRAY(\n            SELECT AS STRUCT \n                SPLIT(JSON_VALUE(electronic_mails, '$.electronicMailTypeDescriptor'), '#')[OFFSET(1)] AS electronic_mail_type_descriptor,\n                JSON_VALUE(electronic_mails, \"$.electronicMailAddress\") AS electronic_mail_address,\n                CAST(JSON_VALUE(electronic_mails, \"$.doNotPublishIndicator\") AS BOOL) AS do_not_publish_indicator\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.electronicMails\")) electronic_mails \n        ) AS electronic_mails,\n        ARRAY(\n            SELECT AS STRUCT \n                SPLIT(JSON_VALUE(codes, '$.staffIdentificationSystemDescriptor'), '#')[OFFSET(1)] AS staff_identification_system_descriptor,\n                JSON_VALUE(codes, \"$.assigningOrganizationIdentificationCode\") AS assigning_organization_identification_code,\n                JSON_VALUE(codes, \"$.identificationCode\") AS identification_code\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.identificationCodes\")) codes \n        ) AS identification_codes,\n        ARRAY(\n            SELECT AS STRUCT \n                SPLIT(JSON_VALUE(descriptors, '$.ancestryEthnicOriginDescriptor'), '#')[OFFSET(1)] AS ancestry_ethnic_origin_descriptor,\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.ancestry_ethnic_origins\")) descriptors \n        ) AS ancestry_ethnic_origins,\n        ARRAY(\n            SELECT AS STRUCT \n                SPLIT(JSON_VALUE(races, '$.raceDescriptor'), '#')[OFFSET(1)] AS race_descriptor,\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.races\")) races \n        ) AS races\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_staffs`\n\n),\n\nranked AS (\n\n    SELECT\n        ROW_NUMBER() OVER (\n            PARTITION BY\n                school_year,\n                staff_unique_id\n            ORDER BY school_year DESC, extracted_timestamp DESC\n        ) AS rank,\n        *\n    FROM parsed_data\n\n)\n\nSELECT * EXCEPT (extracted_timestamp, rank)\nFROM ranked\nWHERE\n    rank = 1\n    AND id NOT IN (\n        SELECT id FROM `gcp-proj-id`.`dev_staging`.`stg_edfi_deletes` edfi_deletes\n        WHERE ranked.school_year = edfi_deletes.school_year\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_staging`.`stg_edfi_staffs`"}, "model.project.stg_edfi_student_discipline_incident_associations": {"raw_sql": "WITH parsed_data AS (\r\n\r\n    SELECT\r\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\r\n        JSON_VALUE(data, '$.id') AS id,\r\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\r\n        STRUCT(\r\n            JSON_VALUE(data, '$.disciplineIncidentReference.incidentIdentifier') AS incident_identifier,\r\n            JSON_VALUE(data, '$.disciplineIncidentReference.schoolId') AS school_id\r\n        ) AS discipline_incident_reference,\r\n        SPLIT(JSON_VALUE(data, '$.studentParticipationCodeDescriptor'), '#')[OFFSET(1)] AS student_participation_code_descriptor,\r\n        STRUCT(\r\n            JSON_VALUE(data, '$.studentReference.studentUniqueId') AS student_unique_id\r\n        ) AS student_reference,\r\n        ARRAY(\r\n            SELECT AS STRUCT \r\n                SPLIT(JSON_VALUE(behaviors, '$.behaviorDescriptor'), '#')[OFFSET(1)] AS behavior_descriptor,\r\n                JSON_VALUE(behaviors, \"$.behaviorDetailedDescription\") AS behavior_detailed_description\r\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.behaviors\")) behaviors \r\n        ) AS behaviors\r\n    FROM {{ source('staging', 'base_edfi_student_discipline_incident_associations') }}\r\n\r\n),\r\n\r\nranked AS (\r\n\r\n    SELECT\r\n        ROW_NUMBER() OVER (\r\n            PARTITION BY\r\n                school_year,\r\n                discipline_incident_reference.school_id,\r\n                discipline_incident_reference.incident_identifier,\r\n                student_reference.student_unique_id\r\n            ORDER BY school_year DESC, extracted_timestamp DESC\r\n        ) AS rank,\r\n        *\r\n    FROM parsed_data\r\n\r\n)\r\n\r\nSELECT * EXCEPT (extracted_timestamp, rank)\r\nFROM ranked\r\nWHERE\r\n    rank = 1\r\n    AND id NOT IN (\r\n        SELECT id FROM {{ ref('stg_edfi_deletes') }} edfi_deletes\r\n        WHERE ranked.school_year = edfi_deletes.school_year\r\n    )", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.project.staging.base_edfi_student_discipline_incident_associations", "model.project.stg_edfi_deletes"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["amt"], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "database": "gcp-proj-id", "schema": "dev_staging", "fqn": ["project", "staging", "edfi", "stg_edfi_student_discipline_incident_associations"], "unique_id": "model.project.stg_edfi_student_discipline_incident_associations", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "staging/edfi/stg_edfi_student_discipline_incident_associations.sql", "original_file_path": "models/staging/edfi/stg_edfi_student_discipline_incident_associations.sql", "name": "stg_edfi_student_discipline_incident_associations", "alias": "stg_edfi_student_discipline_incident_associations", "checksum": {"name": "sha256", "checksum": "b93f3f5d8ba3008bc03541b3d3a1ac485025894612ffec9af67de209e096c7e6"}, "tags": ["amt"], "refs": [["stg_edfi_deletes"]], "sources": [["staging", "base_edfi_student_discipline_incident_associations"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_student_discipline_incident_associations.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "amt", "labels": {"edfi_version": "5_3"}}, "created_at": 1643419470.3432922, "compiled_sql": "WITH parsed_data AS (\n\n    SELECT\n        JSON_VALUE(data, '$.extractedTimestamp') AS extracted_timestamp,\n        JSON_VALUE(data, '$.id') AS id,\n        CAST(JSON_VALUE(data, '$.schoolYear') AS int64) school_year,\n        STRUCT(\n            JSON_VALUE(data, '$.disciplineIncidentReference.incidentIdentifier') AS incident_identifier,\n            JSON_VALUE(data, '$.disciplineIncidentReference.schoolId') AS school_id\n        ) AS discipline_incident_reference,\n        SPLIT(JSON_VALUE(data, '$.studentParticipationCodeDescriptor'), '#')[OFFSET(1)] AS student_participation_code_descriptor,\n        STRUCT(\n            JSON_VALUE(data, '$.studentReference.studentUniqueId') AS student_unique_id\n        ) AS student_reference,\n        ARRAY(\n            SELECT AS STRUCT \n                SPLIT(JSON_VALUE(behaviors, '$.behaviorDescriptor'), '#')[OFFSET(1)] AS behavior_descriptor,\n                JSON_VALUE(behaviors, \"$.behaviorDetailedDescription\") AS behavior_detailed_description\n            FROM UNNEST(JSON_QUERY_ARRAY(data, \"$.behaviors\")) behaviors \n        ) AS behaviors\n    FROM `gcp-proj-id`.`dev_staging`.`base_edfi_student_discipline_incident_associations`\n\n),\n\nranked AS (\n\n    SELECT\n        ROW_NUMBER() OVER (\n            PARTITION BY\n                school_year,\n                discipline_incident_reference.school_id,\n                discipline_incident_reference.incident_identifier,\n                student_reference.student_unique_id\n            ORDER BY school_year DESC, extracted_timestamp DESC\n        ) AS rank,\n        *\n    FROM parsed_data\n\n)\n\nSELECT * EXCEPT (extracted_timestamp, rank)\nFROM ranked\nWHERE\n    rank = 1\n    AND id NOT IN (\n        SELECT id FROM `gcp-proj-id`.`dev_staging`.`stg_edfi_deletes` edfi_deletes\n        WHERE ranked.school_year = edfi_deletes.school_year\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`gcp-proj-id`.`dev_staging`.`stg_edfi_student_discipline_incident_associations`"}, "test.project.not_null_fct_student_section_grade_student_key.cc4059fd96": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "student_key", "model": "{{ get_where_subquery(ref('fct_student_section_grade')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.fct_student_section_grade"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "grades", "not_null_fct_student_section_grade_student_key"], "unique_id": "test.project.not_null_fct_student_section_grade_student_key.cc4059fd96", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "not_null_fct_student_section_grade_student_key.sql", "original_file_path": "models/marts/grades/grades.yml", "name": "not_null_fct_student_section_grade_student_key", "alias": "not_null_fct_student_section_grade_student_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_student_section_grade"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/grades/grades.yml/not_null_fct_student_section_grade_student_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1643419470.4142528, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-proj-id`.`dev_grades`.`fct_student_section_grade`\nwhere student_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "student_key", "file_key_name": "models.fct_student_section_grade"}, "test.project.relationships_fct_student_section_grade_student_section_key__student_section_key__ref_dim_student_section_.4e7c6c131b": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_student_sect_597a72227fe93b0e99146089c512a907\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_student_section')", "field": "student_section_key", "column_name": "student_section_key", "model": "{{ get_where_subquery(ref('fct_student_section_grade')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_student_section", "model.project.fct_student_section_grade"]}, "config": {"enabled": true, "alias": "relationships_fct_student_sect_597a72227fe93b0e99146089c512a907", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "grades", "relationships_fct_student_section_grade_student_section_key__student_section_key__ref_dim_student_section_"], "unique_id": "test.project.relationships_fct_student_section_grade_student_section_key__student_section_key__ref_dim_student_section_.4e7c6c131b", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "relationships_fct_student_sect_597a72227fe93b0e99146089c512a907.sql", "original_file_path": "models/marts/grades/grades.yml", "name": "relationships_fct_student_section_grade_student_section_key__student_section_key__ref_dim_student_section_", "alias": "relationships_fct_student_sect_597a72227fe93b0e99146089c512a907", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_student_section"], ["fct_student_section_grade"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/grades/grades.yml/relationships_fct_student_sect_597a72227fe93b0e99146089c512a907.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fct_student_sect_597a72227fe93b0e99146089c512a907"}, "created_at": 1643419470.4160078, "compiled_sql": "\n    \n    \n\nwith child as (\n    select student_section_key as from_field\n    from `gcp-proj-id`.`dev_grades`.`fct_student_section_grade`\n    where student_section_key is not null\n),\n\nparent as (\n    select student_section_key as to_field\n    from `gcp-proj-id`.`dev_core`.`dim_student_section`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "student_section_key", "file_key_name": "models.fct_student_section_grade"}, "test.project.not_null_fct_student_section_grade_letter_grade_earned.14c0fe6021": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "letter_grade_earned", "model": "{{ get_where_subquery(ref('fct_student_section_grade')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.fct_student_section_grade"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "grades", "not_null_fct_student_section_grade_letter_grade_earned"], "unique_id": "test.project.not_null_fct_student_section_grade_letter_grade_earned.14c0fe6021", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "not_null_fct_student_section_grade_letter_grade_earned.sql", "original_file_path": "models/marts/grades/grades.yml", "name": "not_null_fct_student_section_grade_letter_grade_earned", "alias": "not_null_fct_student_section_grade_letter_grade_earned", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_student_section_grade"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/grades/grades.yml/not_null_fct_student_section_grade_letter_grade_earned.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1643419470.4256573, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-proj-id`.`dev_grades`.`fct_student_section_grade`\nwhere letter_grade_earned is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "letter_grade_earned", "file_key_name": "models.fct_student_section_grade"}, "test.project.dbt_utils_expression_is_true_fct_student_section_grade_numeric_grade_earned_0.144140aea3": {"raw_sql": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_f_a00a47d0ec0454b18653d19e928733eb\") }}", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "numeric_grade_earned >= 0", "model": "{{ get_where_subquery(ref('fct_student_section_grade')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.project.fct_student_section_grade"]}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_f_a00a47d0ec0454b18653d19e928733eb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "grades", "dbt_utils_expression_is_true_fct_student_section_grade_numeric_grade_earned_0"], "unique_id": "test.project.dbt_utils_expression_is_true_fct_student_section_grade_numeric_grade_earned_0.144140aea3", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "dbt_utils_expression_is_true_f_a00a47d0ec0454b18653d19e928733eb.sql", "original_file_path": "models/marts/grades/grades.yml", "name": "dbt_utils_expression_is_true_fct_student_section_grade_numeric_grade_earned_0", "alias": "dbt_utils_expression_is_true_f_a00a47d0ec0454b18653d19e928733eb", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_student_section_grade"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/grades/grades.yml/dbt_utils_expression_is_true_f_a00a47d0ec0454b18653d19e928733eb.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_expression_is_true_f_a00a47d0ec0454b18653d19e928733eb"}, "created_at": 1643419470.42721, "compiled_sql": "\n\nwith meet_condition as (\n    select * from `gcp-proj-id`.`dev_grades`.`fct_student_section_grade` where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(numeric_grade_earned >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.fct_student_section_grade"}, "test.project.relationships_fct_student_attendance_student_key__student_key__ref_dim_student_.902b20eb5a": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_student_atte_97f050ce2f6cd6a21383bb14e9543885\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_student')", "field": "student_key", "column_name": "student_key", "model": "{{ get_where_subquery(ref('fct_student_attendance')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_student", "model.project.fct_student_attendance"]}, "config": {"enabled": true, "alias": "relationships_fct_student_atte_97f050ce2f6cd6a21383bb14e9543885", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "attendance", "relationships_fct_student_attendance_student_key__student_key__ref_dim_student_"], "unique_id": "test.project.relationships_fct_student_attendance_student_key__student_key__ref_dim_student_.902b20eb5a", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "relationships_fct_student_atte_97f050ce2f6cd6a21383bb14e9543885.sql", "original_file_path": "models/marts/attendance/attendance.yml", "name": "relationships_fct_student_attendance_student_key__student_key__ref_dim_student_", "alias": "relationships_fct_student_atte_97f050ce2f6cd6a21383bb14e9543885", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_student"], ["fct_student_attendance"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/attendance/attendance.yml/relationships_fct_student_atte_97f050ce2f6cd6a21383bb14e9543885.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fct_student_atte_97f050ce2f6cd6a21383bb14e9543885"}, "created_at": 1643419470.4389634, "compiled_sql": "\n    \n    \n\nwith child as (\n    select student_key as from_field\n    from `gcp-proj-id`.`dev_attendance`.`fct_student_attendance`\n    where student_key is not null\n),\n\nparent as (\n    select student_key as to_field\n    from `gcp-proj-id`.`dev_core`.`dim_student`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "student_key", "file_key_name": "models.fct_student_attendance"}, "test.project.relationships_fct_student_attendance_school_key__school_key__ref_dim_school_.a425d4b0e7": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_student_atte_89f0134bdd72be3d225343748fa5e823\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_school')", "field": "school_key", "column_name": "school_key", "model": "{{ get_where_subquery(ref('fct_student_attendance')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_school", "model.project.fct_student_attendance"]}, "config": {"enabled": true, "alias": "relationships_fct_student_atte_89f0134bdd72be3d225343748fa5e823", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "attendance", "relationships_fct_student_attendance_school_key__school_key__ref_dim_school_"], "unique_id": "test.project.relationships_fct_student_attendance_school_key__school_key__ref_dim_school_.a425d4b0e7", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "relationships_fct_student_atte_89f0134bdd72be3d225343748fa5e823.sql", "original_file_path": "models/marts/attendance/attendance.yml", "name": "relationships_fct_student_attendance_school_key__school_key__ref_dim_school_", "alias": "relationships_fct_student_atte_89f0134bdd72be3d225343748fa5e823", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_school"], ["fct_student_attendance"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/attendance/attendance.yml/relationships_fct_student_atte_89f0134bdd72be3d225343748fa5e823.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fct_student_atte_89f0134bdd72be3d225343748fa5e823"}, "created_at": 1643419470.443212, "compiled_sql": "\n    \n    \n\nwith child as (\n    select school_key as from_field\n    from `gcp-proj-id`.`dev_attendance`.`fct_student_attendance`\n    where school_key is not null\n),\n\nparent as (\n    select school_key as to_field\n    from `gcp-proj-id`.`dev_core`.`dim_school`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "school_key", "file_key_name": "models.fct_student_attendance"}, "test.project.not_null_fct_student_attendance_school_year.c69c139be1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "school_year", "model": "{{ get_where_subquery(ref('fct_student_attendance')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.fct_student_attendance"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "attendance", "not_null_fct_student_attendance_school_year"], "unique_id": "test.project.not_null_fct_student_attendance_school_year.c69c139be1", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "not_null_fct_student_attendance_school_year.sql", "original_file_path": "models/marts/attendance/attendance.yml", "name": "not_null_fct_student_attendance_school_year", "alias": "not_null_fct_student_attendance_school_year", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_student_attendance"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/attendance/attendance.yml/not_null_fct_student_attendance_school_year.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1643419470.447424, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-proj-id`.`dev_attendance`.`fct_student_attendance`\nwhere school_year is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "school_year", "file_key_name": "models.fct_student_attendance"}, "test.project.not_null_fct_student_attendance_date.1c7057eb63": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('fct_student_attendance')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.fct_student_attendance"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "attendance", "not_null_fct_student_attendance_date"], "unique_id": "test.project.not_null_fct_student_attendance_date.1c7057eb63", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "not_null_fct_student_attendance_date.sql", "original_file_path": "models/marts/attendance/attendance.yml", "name": "not_null_fct_student_attendance_date", "alias": "not_null_fct_student_attendance_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_student_attendance"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/attendance/attendance.yml/not_null_fct_student_attendance_date.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1643419470.4490159, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-proj-id`.`dev_attendance`.`fct_student_attendance`\nwhere date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date", "file_key_name": "models.fct_student_attendance"}, "test.project.not_null_fct_student_attendance_school_attendance_event_category_descriptor.be3ab06fa8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_fct_student_attendanc_d9a013f35bc62a03a0069287b90a3061\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "school_attendance_event_category_descriptor", "model": "{{ get_where_subquery(ref('fct_student_attendance')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.fct_student_attendance"]}, "config": {"enabled": true, "alias": "not_null_fct_student_attendanc_d9a013f35bc62a03a0069287b90a3061", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "attendance", "not_null_fct_student_attendance_school_attendance_event_category_descriptor"], "unique_id": "test.project.not_null_fct_student_attendance_school_attendance_event_category_descriptor.be3ab06fa8", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "not_null_fct_student_attendanc_d9a013f35bc62a03a0069287b90a3061.sql", "original_file_path": "models/marts/attendance/attendance.yml", "name": "not_null_fct_student_attendance_school_attendance_event_category_descriptor", "alias": "not_null_fct_student_attendanc_d9a013f35bc62a03a0069287b90a3061", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_student_attendance"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/attendance/attendance.yml/not_null_fct_student_attendanc_d9a013f35bc62a03a0069287b90a3061.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_fct_student_attendanc_d9a013f35bc62a03a0069287b90a3061"}, "created_at": 1643419470.4506876, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-proj-id`.`dev_attendance`.`fct_student_attendance`\nwhere school_attendance_event_category_descriptor is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "school_attendance_event_category_descriptor", "file_key_name": "models.fct_student_attendance"}, "test.project.not_null_fct_student_attendance_event_duration.7405fc5f51": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_duration", "model": "{{ get_where_subquery(ref('fct_student_attendance')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.fct_student_attendance"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "attendance", "not_null_fct_student_attendance_event_duration"], "unique_id": "test.project.not_null_fct_student_attendance_event_duration.7405fc5f51", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "not_null_fct_student_attendance_event_duration.sql", "original_file_path": "models/marts/attendance/attendance.yml", "name": "not_null_fct_student_attendance_event_duration", "alias": "not_null_fct_student_attendance_event_duration", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_student_attendance"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/attendance/attendance.yml/not_null_fct_student_attendance_event_duration.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1643419470.4524615, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-proj-id`.`dev_attendance`.`fct_student_attendance`\nwhere event_duration is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_duration", "file_key_name": "models.fct_student_attendance"}, "test.project.unique_dim_assessment_assessment_key.d45cb819a0": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "assessment_key", "model": "{{ get_where_subquery(ref('dim_assessment')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_assessment"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "assessments", "unique_dim_assessment_assessment_key"], "unique_id": "test.project.unique_dim_assessment_assessment_key.d45cb819a0", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "unique_dim_assessment_assessment_key.sql", "original_file_path": "models/marts/assessments/assessments.yml", "name": "unique_dim_assessment_assessment_key", "alias": "unique_dim_assessment_assessment_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_assessment"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/assessments/assessments.yml/unique_dim_assessment_assessment_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1643419470.4643822, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select assessment_key as unique_field\n  from `gcp-proj-id`.`dev_assessments`.`dim_assessment`\n  where assessment_key is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "assessment_key", "file_key_name": "models.dim_assessment"}, "test.project.not_null_dim_assessment_assessment_key.1ee4792dcf": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "assessment_key", "model": "{{ get_where_subquery(ref('dim_assessment')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_assessment"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "assessments", "not_null_dim_assessment_assessment_key"], "unique_id": "test.project.not_null_dim_assessment_assessment_key.1ee4792dcf", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "not_null_dim_assessment_assessment_key.sql", "original_file_path": "models/marts/assessments/assessments.yml", "name": "not_null_dim_assessment_assessment_key", "alias": "not_null_dim_assessment_assessment_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_assessment"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/assessments/assessments.yml/not_null_dim_assessment_assessment_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1643419470.466296, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-proj-id`.`dev_assessments`.`dim_assessment`\nwhere assessment_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "assessment_key", "file_key_name": "models.dim_assessment"}, "test.project.not_null_dim_assessment_education_organization_key.e46eded9e2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "education_organization_key", "model": "{{ get_where_subquery(ref('dim_assessment')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_assessment"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "assessments", "not_null_dim_assessment_education_organization_key"], "unique_id": "test.project.not_null_dim_assessment_education_organization_key.e46eded9e2", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "not_null_dim_assessment_education_organization_key.sql", "original_file_path": "models/marts/assessments/assessments.yml", "name": "not_null_dim_assessment_education_organization_key", "alias": "not_null_dim_assessment_education_organization_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_assessment"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/assessments/assessments.yml/not_null_dim_assessment_education_organization_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1643419470.468003, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-proj-id`.`dev_assessments`.`dim_assessment`\nwhere education_organization_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "education_organization_key", "file_key_name": "models.dim_assessment"}, "test.project.not_null_dim_assessment_school_year.6f50975711": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "school_year", "model": "{{ get_where_subquery(ref('dim_assessment')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_assessment"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "assessments", "not_null_dim_assessment_school_year"], "unique_id": "test.project.not_null_dim_assessment_school_year.6f50975711", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "not_null_dim_assessment_school_year.sql", "original_file_path": "models/marts/assessments/assessments.yml", "name": "not_null_dim_assessment_school_year", "alias": "not_null_dim_assessment_school_year", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_assessment"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/assessments/assessments.yml/not_null_dim_assessment_school_year.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1643419470.4696279, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-proj-id`.`dev_assessments`.`dim_assessment`\nwhere school_year is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "school_year", "file_key_name": "models.dim_assessment"}, "test.project.not_null_dim_assessment_assessment_identifier.b01a1c84ef": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "assessment_identifier", "model": "{{ get_where_subquery(ref('dim_assessment')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_assessment"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "assessments", "not_null_dim_assessment_assessment_identifier"], "unique_id": "test.project.not_null_dim_assessment_assessment_identifier.b01a1c84ef", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "not_null_dim_assessment_assessment_identifier.sql", "original_file_path": "models/marts/assessments/assessments.yml", "name": "not_null_dim_assessment_assessment_identifier", "alias": "not_null_dim_assessment_assessment_identifier", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_assessment"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/assessments/assessments.yml/not_null_dim_assessment_assessment_identifier.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1643419470.4712665, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-proj-id`.`dev_assessments`.`dim_assessment`\nwhere assessment_identifier is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "assessment_identifier", "file_key_name": "models.dim_assessment"}, "test.project.unique_dim_objective_assessment_objective_assessment_key.2a65565afd": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "objective_assessment_key", "model": "{{ get_where_subquery(ref('dim_objective_assessment')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_objective_assessment"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "assessments", "unique_dim_objective_assessment_objective_assessment_key"], "unique_id": "test.project.unique_dim_objective_assessment_objective_assessment_key.2a65565afd", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "unique_dim_objective_assessment_objective_assessment_key.sql", "original_file_path": "models/marts/assessments/assessments.yml", "name": "unique_dim_objective_assessment_objective_assessment_key", "alias": "unique_dim_objective_assessment_objective_assessment_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_objective_assessment"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/assessments/assessments.yml/unique_dim_objective_assessment_objective_assessment_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1643419470.473178, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select objective_assessment_key as unique_field\n  from `gcp-proj-id`.`dev_assessments`.`dim_objective_assessment`\n  where objective_assessment_key is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "objective_assessment_key", "file_key_name": "models.dim_objective_assessment"}, "test.project.not_null_dim_objective_assessment_objective_assessment_key.84f09a79e9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "objective_assessment_key", "model": "{{ get_where_subquery(ref('dim_objective_assessment')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_objective_assessment"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "assessments", "not_null_dim_objective_assessment_objective_assessment_key"], "unique_id": "test.project.not_null_dim_objective_assessment_objective_assessment_key.84f09a79e9", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "not_null_dim_objective_assessment_objective_assessment_key.sql", "original_file_path": "models/marts/assessments/assessments.yml", "name": "not_null_dim_objective_assessment_objective_assessment_key", "alias": "not_null_dim_objective_assessment_objective_assessment_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_objective_assessment"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/assessments/assessments.yml/not_null_dim_objective_assessment_objective_assessment_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1643419470.4748442, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-proj-id`.`dev_assessments`.`dim_objective_assessment`\nwhere objective_assessment_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "objective_assessment_key", "file_key_name": "models.dim_objective_assessment"}, "test.project.relationships_dim_objective_assessment_assessment_key__assessment_key__ref_dim_assessment_.1c513df798": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_dim_objective_as_ab0a44da67f391b1f14d0e8e4719a06a\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_assessment')", "field": "assessment_key", "column_name": "assessment_key", "model": "{{ get_where_subquery(ref('dim_objective_assessment')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_assessment", "model.project.dim_objective_assessment"]}, "config": {"enabled": true, "alias": "relationships_dim_objective_as_ab0a44da67f391b1f14d0e8e4719a06a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "assessments", "relationships_dim_objective_assessment_assessment_key__assessment_key__ref_dim_assessment_"], "unique_id": "test.project.relationships_dim_objective_assessment_assessment_key__assessment_key__ref_dim_assessment_.1c513df798", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "relationships_dim_objective_as_ab0a44da67f391b1f14d0e8e4719a06a.sql", "original_file_path": "models/marts/assessments/assessments.yml", "name": "relationships_dim_objective_assessment_assessment_key__assessment_key__ref_dim_assessment_", "alias": "relationships_dim_objective_as_ab0a44da67f391b1f14d0e8e4719a06a", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_assessment"], ["dim_objective_assessment"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/assessments/assessments.yml/relationships_dim_objective_as_ab0a44da67f391b1f14d0e8e4719a06a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_dim_objective_as_ab0a44da67f391b1f14d0e8e4719a06a"}, "created_at": 1643419470.4765527, "compiled_sql": "\n    \n    \n\nwith child as (\n    select assessment_key as from_field\n    from `gcp-proj-id`.`dev_assessments`.`dim_objective_assessment`\n    where assessment_key is not null\n),\n\nparent as (\n    select assessment_key as to_field\n    from `gcp-proj-id`.`dev_assessments`.`dim_assessment`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "assessment_key", "file_key_name": "models.dim_objective_assessment"}, "test.project.not_null_dim_objective_assessment_school_year.1ccf2c65ef": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "school_year", "model": "{{ get_where_subquery(ref('dim_objective_assessment')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_objective_assessment"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "assessments", "not_null_dim_objective_assessment_school_year"], "unique_id": "test.project.not_null_dim_objective_assessment_school_year.1ccf2c65ef", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "not_null_dim_objective_assessment_school_year.sql", "original_file_path": "models/marts/assessments/assessments.yml", "name": "not_null_dim_objective_assessment_school_year", "alias": "not_null_dim_objective_assessment_school_year", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_objective_assessment"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/assessments/assessments.yml/not_null_dim_objective_assessment_school_year.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1643419470.4814, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-proj-id`.`dev_assessments`.`dim_objective_assessment`\nwhere school_year is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "school_year", "file_key_name": "models.dim_objective_assessment"}, "test.project.not_null_dim_objective_assessment_identification_code.6e10638e4d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "identification_code", "model": "{{ get_where_subquery(ref('dim_objective_assessment')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_objective_assessment"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "assessments", "not_null_dim_objective_assessment_identification_code"], "unique_id": "test.project.not_null_dim_objective_assessment_identification_code.6e10638e4d", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "not_null_dim_objective_assessment_identification_code.sql", "original_file_path": "models/marts/assessments/assessments.yml", "name": "not_null_dim_objective_assessment_identification_code", "alias": "not_null_dim_objective_assessment_identification_code", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_objective_assessment"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/assessments/assessments.yml/not_null_dim_objective_assessment_identification_code.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1643419470.483075, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-proj-id`.`dev_assessments`.`dim_objective_assessment`\nwhere identification_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "identification_code", "file_key_name": "models.dim_objective_assessment"}, "test.project.relationships_fct_student_assessment_assessment_key__assessment_key__ref_dim_assessment_.fb7625afbd": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_student_asse_c16262d75cc7e4af113f86e2ae48fff6\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_assessment')", "field": "assessment_key", "column_name": "assessment_key", "model": "{{ get_where_subquery(ref('fct_student_assessment')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_assessment", "model.project.fct_student_assessment"]}, "config": {"enabled": true, "alias": "relationships_fct_student_asse_c16262d75cc7e4af113f86e2ae48fff6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "assessments", "relationships_fct_student_assessment_assessment_key__assessment_key__ref_dim_assessment_"], "unique_id": "test.project.relationships_fct_student_assessment_assessment_key__assessment_key__ref_dim_assessment_.fb7625afbd", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "relationships_fct_student_asse_c16262d75cc7e4af113f86e2ae48fff6.sql", "original_file_path": "models/marts/assessments/assessments.yml", "name": "relationships_fct_student_assessment_assessment_key__assessment_key__ref_dim_assessment_", "alias": "relationships_fct_student_asse_c16262d75cc7e4af113f86e2ae48fff6", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_assessment"], ["fct_student_assessment"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/assessments/assessments.yml/relationships_fct_student_asse_c16262d75cc7e4af113f86e2ae48fff6.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fct_student_asse_c16262d75cc7e4af113f86e2ae48fff6"}, "created_at": 1643419470.4847178, "compiled_sql": "\n    \n    \n\nwith child as (\n    select assessment_key as from_field\n    from `gcp-proj-id`.`dev_assessments`.`fct_student_assessment`\n    where assessment_key is not null\n),\n\nparent as (\n    select assessment_key as to_field\n    from `gcp-proj-id`.`dev_assessments`.`dim_assessment`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "assessment_key", "file_key_name": "models.fct_student_assessment"}, "test.project.relationships_fct_student_assessment_student_key__student_key__ref_dim_student_.505c0cae72": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_student_asse_5f28d9db6a23ff4d20abda5e94c218b1\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_student')", "field": "student_key", "column_name": "student_key", "model": "{{ get_where_subquery(ref('fct_student_assessment')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_student", "model.project.fct_student_assessment"]}, "config": {"enabled": true, "alias": "relationships_fct_student_asse_5f28d9db6a23ff4d20abda5e94c218b1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "assessments", "relationships_fct_student_assessment_student_key__student_key__ref_dim_student_"], "unique_id": "test.project.relationships_fct_student_assessment_student_key__student_key__ref_dim_student_.505c0cae72", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "relationships_fct_student_asse_5f28d9db6a23ff4d20abda5e94c218b1.sql", "original_file_path": "models/marts/assessments/assessments.yml", "name": "relationships_fct_student_assessment_student_key__student_key__ref_dim_student_", "alias": "relationships_fct_student_asse_5f28d9db6a23ff4d20abda5e94c218b1", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_student"], ["fct_student_assessment"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/assessments/assessments.yml/relationships_fct_student_asse_5f28d9db6a23ff4d20abda5e94c218b1.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fct_student_asse_5f28d9db6a23ff4d20abda5e94c218b1"}, "created_at": 1643419470.4894824, "compiled_sql": "\n    \n    \n\nwith child as (\n    select student_key as from_field\n    from `gcp-proj-id`.`dev_assessments`.`fct_student_assessment`\n    where student_key is not null\n),\n\nparent as (\n    select student_key as to_field\n    from `gcp-proj-id`.`dev_core`.`dim_student`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "student_key", "file_key_name": "models.fct_student_assessment"}, "test.project.relationships_fct_student_assessment_school_key__school_key__ref_dim_school_.6d4121ee49": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_student_asse_d76a607ab7d091529cb39a304297bf1c\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_school')", "field": "school_key", "column_name": "school_key", "model": "{{ get_where_subquery(ref('fct_student_assessment')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_school", "model.project.fct_student_assessment"]}, "config": {"enabled": true, "alias": "relationships_fct_student_asse_d76a607ab7d091529cb39a304297bf1c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "assessments", "relationships_fct_student_assessment_school_key__school_key__ref_dim_school_"], "unique_id": "test.project.relationships_fct_student_assessment_school_key__school_key__ref_dim_school_.6d4121ee49", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "relationships_fct_student_asse_d76a607ab7d091529cb39a304297bf1c.sql", "original_file_path": "models/marts/assessments/assessments.yml", "name": "relationships_fct_student_assessment_school_key__school_key__ref_dim_school_", "alias": "relationships_fct_student_asse_d76a607ab7d091529cb39a304297bf1c", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_school"], ["fct_student_assessment"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/assessments/assessments.yml/relationships_fct_student_asse_d76a607ab7d091529cb39a304297bf1c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fct_student_asse_d76a607ab7d091529cb39a304297bf1c"}, "created_at": 1643419470.493929, "compiled_sql": "\n    \n    \n\nwith child as (\n    select school_key as from_field\n    from `gcp-proj-id`.`dev_assessments`.`fct_student_assessment`\n    where school_key is not null\n),\n\nparent as (\n    select school_key as to_field\n    from `gcp-proj-id`.`dev_core`.`dim_school`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "school_key", "file_key_name": "models.fct_student_assessment"}, "test.project.not_null_fct_student_assessment_school_year.d353cc4178": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "school_year", "model": "{{ get_where_subquery(ref('fct_student_assessment')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.fct_student_assessment"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "assessments", "not_null_fct_student_assessment_school_year"], "unique_id": "test.project.not_null_fct_student_assessment_school_year.d353cc4178", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "not_null_fct_student_assessment_school_year.sql", "original_file_path": "models/marts/assessments/assessments.yml", "name": "not_null_fct_student_assessment_school_year", "alias": "not_null_fct_student_assessment_school_year", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_student_assessment"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/assessments/assessments.yml/not_null_fct_student_assessment_school_year.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1643419470.4991782, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-proj-id`.`dev_assessments`.`fct_student_assessment`\nwhere school_year is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "school_year", "file_key_name": "models.fct_student_assessment"}, "test.project.not_null_fct_student_assessment_student_assessment_identifier.bf72913748": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "student_assessment_identifier", "model": "{{ get_where_subquery(ref('fct_student_assessment')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.fct_student_assessment"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "assessments", "not_null_fct_student_assessment_student_assessment_identifier"], "unique_id": "test.project.not_null_fct_student_assessment_student_assessment_identifier.bf72913748", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "not_null_fct_student_assessment_student_assessment_identifier.sql", "original_file_path": "models/marts/assessments/assessments.yml", "name": "not_null_fct_student_assessment_student_assessment_identifier", "alias": "not_null_fct_student_assessment_student_assessment_identifier", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_student_assessment"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/assessments/assessments.yml/not_null_fct_student_assessment_student_assessment_identifier.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1643419470.500836, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-proj-id`.`dev_assessments`.`fct_student_assessment`\nwhere student_assessment_identifier is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "student_assessment_identifier", "file_key_name": "models.fct_student_assessment"}, "test.project.unique_dim_date_date.dd069a8d31": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('dim_date')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_date"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "unique_dim_date_date"], "unique_id": "test.project.unique_dim_date_date.dd069a8d31", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "unique_dim_date_date.sql", "original_file_path": "models/marts/core/core.yml", "name": "unique_dim_date_date", "alias": "unique_dim_date_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_date"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/unique_dim_date_date.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1643419470.5292053, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select date as unique_field\n  from `gcp-proj-id`.`dev_core`.`dim_date`\n  where date is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date", "file_key_name": "models.dim_date"}, "test.project.not_null_dim_date_date.78f11e7735": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('dim_date')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_date"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "not_null_dim_date_date"], "unique_id": "test.project.not_null_dim_date_date.78f11e7735", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "not_null_dim_date_date.sql", "original_file_path": "models/marts/core/core.yml", "name": "not_null_dim_date_date", "alias": "not_null_dim_date_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_date"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_date_date.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1643419470.530954, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-proj-id`.`dev_core`.`dim_date`\nwhere date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date", "file_key_name": "models.dim_date"}, "test.project.unique_dim_demographic_demographic_key.8c19c8ca9d": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "demographic_key", "model": "{{ get_where_subquery(ref('dim_demographic')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_demographic"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "unique_dim_demographic_demographic_key"], "unique_id": "test.project.unique_dim_demographic_demographic_key.8c19c8ca9d", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "unique_dim_demographic_demographic_key.sql", "original_file_path": "models/marts/core/core.yml", "name": "unique_dim_demographic_demographic_key", "alias": "unique_dim_demographic_demographic_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_demographic"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/unique_dim_demographic_demographic_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1643419470.532633, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select demographic_key as unique_field\n  from `gcp-proj-id`.`dev_core`.`dim_demographic`\n  where demographic_key is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "demographic_key", "file_key_name": "models.dim_demographic"}, "test.project.not_null_dim_demographic_demographic_key.9faec00ba3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "demographic_key", "model": "{{ get_where_subquery(ref('dim_demographic')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_demographic"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "not_null_dim_demographic_demographic_key"], "unique_id": "test.project.not_null_dim_demographic_demographic_key.9faec00ba3", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "not_null_dim_demographic_demographic_key.sql", "original_file_path": "models/marts/core/core.yml", "name": "not_null_dim_demographic_demographic_key", "alias": "not_null_dim_demographic_demographic_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_demographic"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_demographic_demographic_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1643419470.534281, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-proj-id`.`dev_core`.`dim_demographic`\nwhere demographic_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "demographic_key", "file_key_name": "models.dim_demographic"}, "test.project.not_null_dim_demographic_demographic_parent.eb525b15a9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "demographic_parent", "model": "{{ get_where_subquery(ref('dim_demographic')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_demographic"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "not_null_dim_demographic_demographic_parent"], "unique_id": "test.project.not_null_dim_demographic_demographic_parent.eb525b15a9", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "not_null_dim_demographic_demographic_parent.sql", "original_file_path": "models/marts/core/core.yml", "name": "not_null_dim_demographic_demographic_parent", "alias": "not_null_dim_demographic_demographic_parent", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_demographic"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_demographic_demographic_parent.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1643419470.535954, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-proj-id`.`dev_core`.`dim_demographic`\nwhere demographic_parent is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "demographic_parent", "file_key_name": "models.dim_demographic"}, "test.project.not_null_dim_demographic_demographic_label.042df09cff": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "demographic_label", "model": "{{ get_where_subquery(ref('dim_demographic')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_demographic"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "not_null_dim_demographic_demographic_label"], "unique_id": "test.project.not_null_dim_demographic_demographic_label.042df09cff", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "not_null_dim_demographic_demographic_label.sql", "original_file_path": "models/marts/core/core.yml", "name": "not_null_dim_demographic_demographic_label", "alias": "not_null_dim_demographic_demographic_label", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_demographic"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_demographic_demographic_label.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1643419470.5374668, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-proj-id`.`dev_core`.`dim_demographic`\nwhere demographic_label is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "demographic_label", "file_key_name": "models.dim_demographic"}, "test.project.unique_dim_grading_period_grading_period_key.2c941ffbec": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "grading_period_key", "model": "{{ get_where_subquery(ref('dim_grading_period')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_grading_period"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "unique_dim_grading_period_grading_period_key"], "unique_id": "test.project.unique_dim_grading_period_grading_period_key.2c941ffbec", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "unique_dim_grading_period_grading_period_key.sql", "original_file_path": "models/marts/core/core.yml", "name": "unique_dim_grading_period_grading_period_key", "alias": "unique_dim_grading_period_grading_period_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_grading_period"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/unique_dim_grading_period_grading_period_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1643419470.5390017, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select grading_period_key as unique_field\n  from `gcp-proj-id`.`dev_core`.`dim_grading_period`\n  where grading_period_key is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "grading_period_key", "file_key_name": "models.dim_grading_period"}, "test.project.not_null_dim_grading_period_grading_period_key.a9c6847f9d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "grading_period_key", "model": "{{ get_where_subquery(ref('dim_grading_period')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_grading_period"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "not_null_dim_grading_period_grading_period_key"], "unique_id": "test.project.not_null_dim_grading_period_grading_period_key.a9c6847f9d", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "not_null_dim_grading_period_grading_period_key.sql", "original_file_path": "models/marts/core/core.yml", "name": "not_null_dim_grading_period_grading_period_key", "alias": "not_null_dim_grading_period_grading_period_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_grading_period"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_grading_period_grading_period_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1643419470.540707, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-proj-id`.`dev_core`.`dim_grading_period`\nwhere grading_period_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "grading_period_key", "file_key_name": "models.dim_grading_period"}, "test.project.relationships_dim_grading_period_school_key__school_key__ref_dim_school_.fff5503f34": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_dim_grading_peri_bf5f9244b2f4169cae483073263d2681\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_school')", "field": "school_key", "column_name": "school_key", "model": "{{ get_where_subquery(ref('dim_grading_period')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_school", "model.project.dim_grading_period"]}, "config": {"enabled": true, "alias": "relationships_dim_grading_peri_bf5f9244b2f4169cae483073263d2681", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "relationships_dim_grading_period_school_key__school_key__ref_dim_school_"], "unique_id": "test.project.relationships_dim_grading_period_school_key__school_key__ref_dim_school_.fff5503f34", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "relationships_dim_grading_peri_bf5f9244b2f4169cae483073263d2681.sql", "original_file_path": "models/marts/core/core.yml", "name": "relationships_dim_grading_period_school_key__school_key__ref_dim_school_", "alias": "relationships_dim_grading_peri_bf5f9244b2f4169cae483073263d2681", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_school"], ["dim_grading_period"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/relationships_dim_grading_peri_bf5f9244b2f4169cae483073263d2681.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_dim_grading_peri_bf5f9244b2f4169cae483073263d2681"}, "created_at": 1643419470.5422418, "compiled_sql": "\n    \n    \n\nwith child as (\n    select school_key as from_field\n    from `gcp-proj-id`.`dev_core`.`dim_grading_period`\n    where school_key is not null\n),\n\nparent as (\n    select school_key as to_field\n    from `gcp-proj-id`.`dev_core`.`dim_school`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "school_key", "file_key_name": "models.dim_grading_period"}, "test.project.unique_dim_local_education_agency_local_education_agency_key.2cf2d58a69": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "local_education_agency_key", "model": "{{ get_where_subquery(ref('dim_local_education_agency')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_local_education_agency"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "unique_dim_local_education_agency_local_education_agency_key"], "unique_id": "test.project.unique_dim_local_education_agency_local_education_agency_key.2cf2d58a69", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "unique_dim_local_education_agency_local_education_agency_key.sql", "original_file_path": "models/marts/core/core.yml", "name": "unique_dim_local_education_agency_local_education_agency_key", "alias": "unique_dim_local_education_agency_local_education_agency_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_local_education_agency"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/unique_dim_local_education_agency_local_education_agency_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1643419470.5467067, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select local_education_agency_key as unique_field\n  from `gcp-proj-id`.`dev_core`.`dim_local_education_agency`\n  where local_education_agency_key is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "local_education_agency_key", "file_key_name": "models.dim_local_education_agency"}, "test.project.not_null_dim_local_education_agency_local_education_agency_key.3f6251750d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "local_education_agency_key", "model": "{{ get_where_subquery(ref('dim_local_education_agency')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_local_education_agency"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "not_null_dim_local_education_agency_local_education_agency_key"], "unique_id": "test.project.not_null_dim_local_education_agency_local_education_agency_key.3f6251750d", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "not_null_dim_local_education_agency_local_education_agency_key.sql", "original_file_path": "models/marts/core/core.yml", "name": "not_null_dim_local_education_agency_local_education_agency_key", "alias": "not_null_dim_local_education_agency_local_education_agency_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_local_education_agency"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_local_education_agency_local_education_agency_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1643419470.5482342, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-proj-id`.`dev_core`.`dim_local_education_agency`\nwhere local_education_agency_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "local_education_agency_key", "file_key_name": "models.dim_local_education_agency"}, "test.project.unique_dim_local_education_agency_local_education_agency_id.1a30878627": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "local_education_agency_id", "model": "{{ get_where_subquery(ref('dim_local_education_agency')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_local_education_agency"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "unique_dim_local_education_agency_local_education_agency_id"], "unique_id": "test.project.unique_dim_local_education_agency_local_education_agency_id.1a30878627", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "unique_dim_local_education_agency_local_education_agency_id.sql", "original_file_path": "models/marts/core/core.yml", "name": "unique_dim_local_education_agency_local_education_agency_id", "alias": "unique_dim_local_education_agency_local_education_agency_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_local_education_agency"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/unique_dim_local_education_agency_local_education_agency_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1643419470.54973, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select local_education_agency_id as unique_field\n  from `gcp-proj-id`.`dev_core`.`dim_local_education_agency`\n  where local_education_agency_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "local_education_agency_id", "file_key_name": "models.dim_local_education_agency"}, "test.project.not_null_dim_local_education_agency_local_education_agency_id.6ba737bcd9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "local_education_agency_id", "model": "{{ get_where_subquery(ref('dim_local_education_agency')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_local_education_agency"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "not_null_dim_local_education_agency_local_education_agency_id"], "unique_id": "test.project.not_null_dim_local_education_agency_local_education_agency_id.6ba737bcd9", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "not_null_dim_local_education_agency_local_education_agency_id.sql", "original_file_path": "models/marts/core/core.yml", "name": "not_null_dim_local_education_agency_local_education_agency_id", "alias": "not_null_dim_local_education_agency_local_education_agency_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_local_education_agency"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_local_education_agency_local_education_agency_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1643419470.5512366, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-proj-id`.`dev_core`.`dim_local_education_agency`\nwhere local_education_agency_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "local_education_agency_id", "file_key_name": "models.dim_local_education_agency"}, "test.project.unique_dim_school_school_key.64ec309207": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "school_key", "model": "{{ get_where_subquery(ref('dim_school')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_school"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "unique_dim_school_school_key"], "unique_id": "test.project.unique_dim_school_school_key.64ec309207", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "unique_dim_school_school_key.sql", "original_file_path": "models/marts/core/core.yml", "name": "unique_dim_school_school_key", "alias": "unique_dim_school_school_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_school"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/unique_dim_school_school_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1643419470.552931, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select school_key as unique_field\n  from `gcp-proj-id`.`dev_core`.`dim_school`\n  where school_key is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "school_key", "file_key_name": "models.dim_school"}, "test.project.not_null_dim_school_school_key.209ee6078e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "school_key", "model": "{{ get_where_subquery(ref('dim_school')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_school"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "not_null_dim_school_school_key"], "unique_id": "test.project.not_null_dim_school_school_key.209ee6078e", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "not_null_dim_school_school_key.sql", "original_file_path": "models/marts/core/core.yml", "name": "not_null_dim_school_school_key", "alias": "not_null_dim_school_school_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_school"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_school_school_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1643419470.5544386, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-proj-id`.`dev_core`.`dim_school`\nwhere school_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "school_key", "file_key_name": "models.dim_school"}, "test.project.relationships_dim_school_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.c40f28107b": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_dim_school_16176f352783ef9dbd2a61f8b08f167c\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_local_education_agency')", "field": "local_education_agency_key", "column_name": "local_education_agency_key", "model": "{{ get_where_subquery(ref('dim_school')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_local_education_agency", "model.project.dim_school"]}, "config": {"enabled": true, "alias": "relationships_dim_school_16176f352783ef9dbd2a61f8b08f167c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "relationships_dim_school_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_"], "unique_id": "test.project.relationships_dim_school_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.c40f28107b", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "relationships_dim_school_16176f352783ef9dbd2a61f8b08f167c.sql", "original_file_path": "models/marts/core/core.yml", "name": "relationships_dim_school_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_", "alias": "relationships_dim_school_16176f352783ef9dbd2a61f8b08f167c", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_local_education_agency"], ["dim_school"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/relationships_dim_school_16176f352783ef9dbd2a61f8b08f167c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_dim_school_16176f352783ef9dbd2a61f8b08f167c"}, "created_at": 1643419470.5559847, "compiled_sql": "\n    \n    \n\nwith child as (\n    select local_education_agency_key as from_field\n    from `gcp-proj-id`.`dev_core`.`dim_school`\n    where local_education_agency_key is not null\n),\n\nparent as (\n    select local_education_agency_key as to_field\n    from `gcp-proj-id`.`dev_core`.`dim_local_education_agency`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "local_education_agency_key", "file_key_name": "models.dim_school"}, "test.project.unique_dim_school_school_id.d10cafcd76": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "school_id", "model": "{{ get_where_subquery(ref('dim_school')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_school"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "unique_dim_school_school_id"], "unique_id": "test.project.unique_dim_school_school_id.d10cafcd76", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "unique_dim_school_school_id.sql", "original_file_path": "models/marts/core/core.yml", "name": "unique_dim_school_school_id", "alias": "unique_dim_school_school_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_school"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/unique_dim_school_school_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1643419470.5602129, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select school_id as unique_field\n  from `gcp-proj-id`.`dev_core`.`dim_school`\n  where school_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "school_id", "file_key_name": "models.dim_school"}, "test.project.not_null_dim_school_school_id.36d55ce30b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "school_id", "model": "{{ get_where_subquery(ref('dim_school')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_school"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "not_null_dim_school_school_id"], "unique_id": "test.project.not_null_dim_school_school_id.36d55ce30b", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "not_null_dim_school_school_id.sql", "original_file_path": "models/marts/core/core.yml", "name": "not_null_dim_school_school_id", "alias": "not_null_dim_school_school_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_school"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_school_school_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1643419470.5617797, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-proj-id`.`dev_core`.`dim_school`\nwhere school_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "school_id", "file_key_name": "models.dim_school"}, "test.project.unique_dim_section_section_key.4b442b173b": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "section_key", "model": "{{ get_where_subquery(ref('dim_section')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_section"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "unique_dim_section_section_key"], "unique_id": "test.project.unique_dim_section_section_key.4b442b173b", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "unique_dim_section_section_key.sql", "original_file_path": "models/marts/core/core.yml", "name": "unique_dim_section_section_key", "alias": "unique_dim_section_section_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_section"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/unique_dim_section_section_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1643419470.5632803, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select section_key as unique_field\n  from `gcp-proj-id`.`dev_core`.`dim_section`\n  where section_key is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "section_key", "file_key_name": "models.dim_section"}, "test.project.not_null_dim_section_section_key.d763cc8042": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "section_key", "model": "{{ get_where_subquery(ref('dim_section')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_section"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "not_null_dim_section_section_key"], "unique_id": "test.project.not_null_dim_section_section_key.d763cc8042", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "not_null_dim_section_section_key.sql", "original_file_path": "models/marts/core/core.yml", "name": "not_null_dim_section_section_key", "alias": "not_null_dim_section_section_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_section"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_section_section_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1643419470.5649753, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-proj-id`.`dev_core`.`dim_section`\nwhere section_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "section_key", "file_key_name": "models.dim_section"}, "test.project.relationships_dim_section_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.1c63a4fa13": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_dim_section_bc94c2ac1074fa89eff47b0d3840ae83\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_local_education_agency')", "field": "local_education_agency_key", "column_name": "local_education_agency_key", "model": "{{ get_where_subquery(ref('dim_section')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_local_education_agency", "model.project.dim_section"]}, "config": {"enabled": true, "alias": "relationships_dim_section_bc94c2ac1074fa89eff47b0d3840ae83", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "relationships_dim_section_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_"], "unique_id": "test.project.relationships_dim_section_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.1c63a4fa13", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "relationships_dim_section_bc94c2ac1074fa89eff47b0d3840ae83.sql", "original_file_path": "models/marts/core/core.yml", "name": "relationships_dim_section_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_", "alias": "relationships_dim_section_bc94c2ac1074fa89eff47b0d3840ae83", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_local_education_agency"], ["dim_section"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/relationships_dim_section_bc94c2ac1074fa89eff47b0d3840ae83.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_dim_section_bc94c2ac1074fa89eff47b0d3840ae83"}, "created_at": 1643419470.566512, "compiled_sql": "\n    \n    \n\nwith child as (\n    select local_education_agency_key as from_field\n    from `gcp-proj-id`.`dev_core`.`dim_section`\n    where local_education_agency_key is not null\n),\n\nparent as (\n    select local_education_agency_key as to_field\n    from `gcp-proj-id`.`dev_core`.`dim_local_education_agency`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "local_education_agency_key", "file_key_name": "models.dim_section"}, "test.project.relationships_dim_section_school_key__school_key__ref_dim_school_.b29c32ae93": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_dim_section_2e38f2c339276c08217f35f5dfd68b0e\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_school')", "field": "school_key", "column_name": "school_key", "model": "{{ get_where_subquery(ref('dim_section')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_school", "model.project.dim_section"]}, "config": {"enabled": true, "alias": "relationships_dim_section_2e38f2c339276c08217f35f5dfd68b0e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "relationships_dim_section_school_key__school_key__ref_dim_school_"], "unique_id": "test.project.relationships_dim_section_school_key__school_key__ref_dim_school_.b29c32ae93", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "relationships_dim_section_2e38f2c339276c08217f35f5dfd68b0e.sql", "original_file_path": "models/marts/core/core.yml", "name": "relationships_dim_section_school_key__school_key__ref_dim_school_", "alias": "relationships_dim_section_2e38f2c339276c08217f35f5dfd68b0e", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_school"], ["dim_section"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/relationships_dim_section_2e38f2c339276c08217f35f5dfd68b0e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_dim_section_2e38f2c339276c08217f35f5dfd68b0e"}, "created_at": 1643419470.5707235, "compiled_sql": "\n    \n    \n\nwith child as (\n    select school_key as from_field\n    from `gcp-proj-id`.`dev_core`.`dim_section`\n    where school_key is not null\n),\n\nparent as (\n    select school_key as to_field\n    from `gcp-proj-id`.`dev_core`.`dim_school`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "school_key", "file_key_name": "models.dim_section"}, "test.project.relationships_dim_section_session_key__session_key__ref_dim_session_.5fcf678cd6": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_dim_section_b5e3052d7db4e357d68d10109fcc302a\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_session')", "field": "session_key", "column_name": "session_key", "model": "{{ get_where_subquery(ref('dim_section')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_session", "model.project.dim_section"]}, "config": {"enabled": true, "alias": "relationships_dim_section_b5e3052d7db4e357d68d10109fcc302a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "relationships_dim_section_session_key__session_key__ref_dim_session_"], "unique_id": "test.project.relationships_dim_section_session_key__session_key__ref_dim_session_.5fcf678cd6", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "relationships_dim_section_b5e3052d7db4e357d68d10109fcc302a.sql", "original_file_path": "models/marts/core/core.yml", "name": "relationships_dim_section_session_key__session_key__ref_dim_session_", "alias": "relationships_dim_section_b5e3052d7db4e357d68d10109fcc302a", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_session"], ["dim_section"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/relationships_dim_section_b5e3052d7db4e357d68d10109fcc302a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_dim_section_b5e3052d7db4e357d68d10109fcc302a"}, "created_at": 1643419470.5747533, "compiled_sql": "\n    \n    \n\nwith child as (\n    select session_key as from_field\n    from `gcp-proj-id`.`dev_core`.`dim_section`\n    where session_key is not null\n),\n\nparent as (\n    select session_key as to_field\n    from `gcp-proj-id`.`dev_core`.`dim_session`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "session_key", "file_key_name": "models.dim_section"}, "test.project.not_null_dim_section_section_identifier.5aa4059a37": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "section_identifier", "model": "{{ get_where_subquery(ref('dim_section')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_section"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "not_null_dim_section_section_identifier"], "unique_id": "test.project.not_null_dim_section_section_identifier.5aa4059a37", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "not_null_dim_section_section_identifier.sql", "original_file_path": "models/marts/core/core.yml", "name": "not_null_dim_section_section_identifier", "alias": "not_null_dim_section_section_identifier", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_section"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_section_section_identifier.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1643419470.578992, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-proj-id`.`dev_core`.`dim_section`\nwhere section_identifier is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "section_identifier", "file_key_name": "models.dim_section"}, "test.project.unique_dim_session_session_key.b5230e3fd3": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "session_key", "model": "{{ get_where_subquery(ref('dim_session')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_session"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "unique_dim_session_session_key"], "unique_id": "test.project.unique_dim_session_session_key.b5230e3fd3", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "unique_dim_session_session_key.sql", "original_file_path": "models/marts/core/core.yml", "name": "unique_dim_session_session_key", "alias": "unique_dim_session_session_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_session"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/unique_dim_session_session_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1643419470.5805013, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select session_key as unique_field\n  from `gcp-proj-id`.`dev_core`.`dim_session`\n  where session_key is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "session_key", "file_key_name": "models.dim_session"}, "test.project.not_null_dim_session_session_key.2c2f8e6dac": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "session_key", "model": "{{ get_where_subquery(ref('dim_session')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_session"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "not_null_dim_session_session_key"], "unique_id": "test.project.not_null_dim_session_session_key.2c2f8e6dac", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "not_null_dim_session_session_key.sql", "original_file_path": "models/marts/core/core.yml", "name": "not_null_dim_session_session_key", "alias": "not_null_dim_session_session_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_session"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_session_session_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1643419470.5823996, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-proj-id`.`dev_core`.`dim_session`\nwhere session_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "session_key", "file_key_name": "models.dim_session"}, "test.project.relationships_dim_session_school_key__school_key__ref_dim_school_.d4064049b7": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_dim_session_3e72575c9101ef44f48695ee6d2b0040\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_school')", "field": "school_key", "column_name": "school_key", "model": "{{ get_where_subquery(ref('dim_session')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_school", "model.project.dim_session"]}, "config": {"enabled": true, "alias": "relationships_dim_session_3e72575c9101ef44f48695ee6d2b0040", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "relationships_dim_session_school_key__school_key__ref_dim_school_"], "unique_id": "test.project.relationships_dim_session_school_key__school_key__ref_dim_school_.d4064049b7", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "relationships_dim_session_3e72575c9101ef44f48695ee6d2b0040.sql", "original_file_path": "models/marts/core/core.yml", "name": "relationships_dim_session_school_key__school_key__ref_dim_school_", "alias": "relationships_dim_session_3e72575c9101ef44f48695ee6d2b0040", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_school"], ["dim_session"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/relationships_dim_session_3e72575c9101ef44f48695ee6d2b0040.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_dim_session_3e72575c9101ef44f48695ee6d2b0040"}, "created_at": 1643419470.5839634, "compiled_sql": "\n    \n    \n\nwith child as (\n    select school_key as from_field\n    from `gcp-proj-id`.`dev_core`.`dim_session`\n    where school_key is not null\n),\n\nparent as (\n    select school_key as to_field\n    from `gcp-proj-id`.`dev_core`.`dim_school`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "school_key", "file_key_name": "models.dim_session"}, "test.project.unique_dim_student_student_key.45ef646b54": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "student_key", "model": "{{ get_where_subquery(ref('dim_student')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_student"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "unique_dim_student_student_key"], "unique_id": "test.project.unique_dim_student_student_key.45ef646b54", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "unique_dim_student_student_key.sql", "original_file_path": "models/marts/core/core.yml", "name": "unique_dim_student_student_key", "alias": "unique_dim_student_student_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_student"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/unique_dim_student_student_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1643419470.5881515, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select student_key as unique_field\n  from `gcp-proj-id`.`dev_core`.`dim_student`\n  where student_key is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "student_key", "file_key_name": "models.dim_student"}, "test.project.not_null_dim_student_student_key.67ab09a6e6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "student_key", "model": "{{ get_where_subquery(ref('dim_student')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_student"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "not_null_dim_student_student_key"], "unique_id": "test.project.not_null_dim_student_student_key.67ab09a6e6", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "not_null_dim_student_student_key.sql", "original_file_path": "models/marts/core/core.yml", "name": "not_null_dim_student_student_key", "alias": "not_null_dim_student_student_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_student"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_student_student_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1643419470.589658, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-proj-id`.`dev_core`.`dim_student`\nwhere student_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "student_key", "file_key_name": "models.dim_student"}, "test.project.not_null_dim_student_school_year.cb1c50e460": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "school_year", "model": "{{ get_where_subquery(ref('dim_student')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_student"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "not_null_dim_student_school_year"], "unique_id": "test.project.not_null_dim_student_school_year.cb1c50e460", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "not_null_dim_student_school_year.sql", "original_file_path": "models/marts/core/core.yml", "name": "not_null_dim_student_school_year", "alias": "not_null_dim_student_school_year", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_student"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_student_school_year.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1643419470.5911996, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-proj-id`.`dev_core`.`dim_student`\nwhere school_year is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "school_year", "file_key_name": "models.dim_student"}, "test.project.not_null_dim_student_student_unique_id.8a392fc4ab": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "student_unique_id", "model": "{{ get_where_subquery(ref('dim_student')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_student"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "not_null_dim_student_student_unique_id"], "unique_id": "test.project.not_null_dim_student_student_unique_id.8a392fc4ab", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "not_null_dim_student_student_unique_id.sql", "original_file_path": "models/marts/core/core.yml", "name": "not_null_dim_student_student_unique_id", "alias": "not_null_dim_student_student_unique_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_student"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_student_student_unique_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1643419470.5927792, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-proj-id`.`dev_core`.`dim_student`\nwhere student_unique_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "student_unique_id", "file_key_name": "models.dim_student"}, "test.project.not_null_dim_student_student_last_surname.329ae57d5b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "student_last_surname", "model": "{{ get_where_subquery(ref('dim_student')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_student"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "not_null_dim_student_student_last_surname"], "unique_id": "test.project.not_null_dim_student_student_last_surname.329ae57d5b", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "not_null_dim_student_student_last_surname.sql", "original_file_path": "models/marts/core/core.yml", "name": "not_null_dim_student_student_last_surname", "alias": "not_null_dim_student_student_last_surname", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_student"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_student_student_last_surname.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1643419470.5945318, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-proj-id`.`dev_core`.`dim_student`\nwhere student_last_surname is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "student_last_surname", "file_key_name": "models.dim_student"}, "test.project.not_null_dim_student_student_first_name.f007907dff": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "student_first_name", "model": "{{ get_where_subquery(ref('dim_student')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_student"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "not_null_dim_student_student_first_name"], "unique_id": "test.project.not_null_dim_student_student_first_name.f007907dff", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "not_null_dim_student_student_first_name.sql", "original_file_path": "models/marts/core/core.yml", "name": "not_null_dim_student_student_first_name", "alias": "not_null_dim_student_student_first_name", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_student"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_student_student_first_name.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1643419470.596029, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-proj-id`.`dev_core`.`dim_student`\nwhere student_first_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "student_first_name", "file_key_name": "models.dim_student"}, "test.project.not_null_dim_student_is_english_language_learner.55a5cd929d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_english_language_learner", "model": "{{ get_where_subquery(ref('dim_student')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_student"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "not_null_dim_student_is_english_language_learner"], "unique_id": "test.project.not_null_dim_student_is_english_language_learner.55a5cd929d", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "not_null_dim_student_is_english_language_learner.sql", "original_file_path": "models/marts/core/core.yml", "name": "not_null_dim_student_is_english_language_learner", "alias": "not_null_dim_student_is_english_language_learner", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_student"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_student_is_english_language_learner.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1643419470.5975175, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-proj-id`.`dev_core`.`dim_student`\nwhere is_english_language_learner is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "is_english_language_learner", "file_key_name": "models.dim_student"}, "test.project.accepted_values_dim_student_is_english_language_learner__Yes__No.d5a7434ec1": {"raw_sql": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_dim_student_d65f910897a9da528bf85f0612b68a4c\") }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Yes", "No"], "column_name": "is_english_language_learner", "model": "{{ get_where_subquery(ref('dim_student')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_student"]}, "config": {"enabled": true, "alias": "accepted_values_dim_student_d65f910897a9da528bf85f0612b68a4c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "accepted_values_dim_student_is_english_language_learner__Yes__No"], "unique_id": "test.project.accepted_values_dim_student_is_english_language_learner__Yes__No.d5a7434ec1", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "accepted_values_dim_student_d65f910897a9da528bf85f0612b68a4c.sql", "original_file_path": "models/marts/core/core.yml", "name": "accepted_values_dim_student_is_english_language_learner__Yes__No", "alias": "accepted_values_dim_student_d65f910897a9da528bf85f0612b68a4c", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_student"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/accepted_values_dim_student_d65f910897a9da528bf85f0612b68a4c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_dim_student_d65f910897a9da528bf85f0612b68a4c"}, "created_at": 1643419470.599059, "compiled_sql": "\n    \n    \n\nwith all_values as (\n\n    select\n        is_english_language_learner as value_field,\n        count(*) as n_records\n\n    from `gcp-proj-id`.`dev_core`.`dim_student`\n    group by is_english_language_learner\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Yes','No'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "is_english_language_learner", "file_key_name": "models.dim_student"}, "test.project.not_null_dim_student_in_special_education_program.f8695e7bf3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "in_special_education_program", "model": "{{ get_where_subquery(ref('dim_student')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_student"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "not_null_dim_student_in_special_education_program"], "unique_id": "test.project.not_null_dim_student_in_special_education_program.f8695e7bf3", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "not_null_dim_student_in_special_education_program.sql", "original_file_path": "models/marts/core/core.yml", "name": "not_null_dim_student_in_special_education_program", "alias": "not_null_dim_student_in_special_education_program", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_student"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_student_in_special_education_program.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1643419470.6064103, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-proj-id`.`dev_core`.`dim_student`\nwhere in_special_education_program is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "in_special_education_program", "file_key_name": "models.dim_student"}, "test.project.accepted_values_dim_student_in_special_education_program__Yes__No.7a967caab1": {"raw_sql": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_dim_student_d099d9227794d242725afeb04495f96c\") }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Yes", "No"], "column_name": "in_special_education_program", "model": "{{ get_where_subquery(ref('dim_student')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_student"]}, "config": {"enabled": true, "alias": "accepted_values_dim_student_d099d9227794d242725afeb04495f96c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "accepted_values_dim_student_in_special_education_program__Yes__No"], "unique_id": "test.project.accepted_values_dim_student_in_special_education_program__Yes__No.7a967caab1", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "accepted_values_dim_student_d099d9227794d242725afeb04495f96c.sql", "original_file_path": "models/marts/core/core.yml", "name": "accepted_values_dim_student_in_special_education_program__Yes__No", "alias": "accepted_values_dim_student_d099d9227794d242725afeb04495f96c", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_student"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/accepted_values_dim_student_d099d9227794d242725afeb04495f96c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_dim_student_d099d9227794d242725afeb04495f96c"}, "created_at": 1643419470.6079648, "compiled_sql": "\n    \n    \n\nwith all_values as (\n\n    select\n        in_special_education_program as value_field,\n        count(*) as n_records\n\n    from `gcp-proj-id`.`dev_core`.`dim_student`\n    group by in_special_education_program\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Yes','No'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "in_special_education_program", "file_key_name": "models.dim_student"}, "test.project.not_null_dim_student_is_hispanic.2f36046142": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_hispanic", "model": "{{ get_where_subquery(ref('dim_student')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_student"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "not_null_dim_student_is_hispanic"], "unique_id": "test.project.not_null_dim_student_is_hispanic.2f36046142", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "not_null_dim_student_is_hispanic.sql", "original_file_path": "models/marts/core/core.yml", "name": "not_null_dim_student_is_hispanic", "alias": "not_null_dim_student_is_hispanic", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_student"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_student_is_hispanic.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1643419470.6121962, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-proj-id`.`dev_core`.`dim_student`\nwhere is_hispanic is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "is_hispanic", "file_key_name": "models.dim_student"}, "test.project.accepted_values_dim_student_is_hispanic__Yes__No.28cf24b221": {"raw_sql": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Yes", "No"], "column_name": "is_hispanic", "model": "{{ get_where_subquery(ref('dim_student')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_student"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "accepted_values_dim_student_is_hispanic__Yes__No"], "unique_id": "test.project.accepted_values_dim_student_is_hispanic__Yes__No.28cf24b221", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "accepted_values_dim_student_is_hispanic__Yes__No.sql", "original_file_path": "models/marts/core/core.yml", "name": "accepted_values_dim_student_is_hispanic__Yes__No", "alias": "accepted_values_dim_student_is_hispanic__Yes__No", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_student"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/accepted_values_dim_student_is_hispanic__Yes__No.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1643419470.6137228, "compiled_sql": "\n    \n    \n\nwith all_values as (\n\n    select\n        is_hispanic as value_field,\n        count(*) as n_records\n\n    from `gcp-proj-id`.`dev_core`.`dim_student`\n    group by is_hispanic\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Yes','No'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "is_hispanic", "file_key_name": "models.dim_student"}, "test.project.unique_student_local_education_agency_demographics_bridge_student_school_demographic_bridge_key.f8f8da40b7": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_student_local_education_eee0b99d8985c8f88aa16bf219b8154c\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "student_school_demographic_bridge_key", "model": "{{ get_where_subquery(ref('student_local_education_agency_demographics_bridge')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.project.student_local_education_agency_demographics_bridge"]}, "config": {"enabled": true, "alias": "unique_student_local_education_eee0b99d8985c8f88aa16bf219b8154c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "unique_student_local_education_agency_demographics_bridge_student_school_demographic_bridge_key"], "unique_id": "test.project.unique_student_local_education_agency_demographics_bridge_student_school_demographic_bridge_key.f8f8da40b7", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "unique_student_local_education_eee0b99d8985c8f88aa16bf219b8154c.sql", "original_file_path": "models/marts/core/core.yml", "name": "unique_student_local_education_agency_demographics_bridge_student_school_demographic_bridge_key", "alias": "unique_student_local_education_eee0b99d8985c8f88aa16bf219b8154c", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["student_local_education_agency_demographics_bridge"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/unique_student_local_education_eee0b99d8985c8f88aa16bf219b8154c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_student_local_education_eee0b99d8985c8f88aa16bf219b8154c"}, "created_at": 1643419470.617361, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select student_school_demographic_bridge_key as unique_field\n  from `gcp-proj-id`.`dev_core`.`student_local_education_agency_demographics_bridge`\n  where student_school_demographic_bridge_key is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "student_school_demographic_bridge_key", "file_key_name": "models.student_local_education_agency_demographics_bridge"}, "test.project.not_null_student_local_education_agency_demographics_bridge_student_school_demographic_bridge_key.751a8efb0e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_student_local_educati_0911f91fa8056e30ad52f5abf060e841\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "student_school_demographic_bridge_key", "model": "{{ get_where_subquery(ref('student_local_education_agency_demographics_bridge')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.student_local_education_agency_demographics_bridge"]}, "config": {"enabled": true, "alias": "not_null_student_local_educati_0911f91fa8056e30ad52f5abf060e841", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "not_null_student_local_education_agency_demographics_bridge_student_school_demographic_bridge_key"], "unique_id": "test.project.not_null_student_local_education_agency_demographics_bridge_student_school_demographic_bridge_key.751a8efb0e", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "not_null_student_local_educati_0911f91fa8056e30ad52f5abf060e841.sql", "original_file_path": "models/marts/core/core.yml", "name": "not_null_student_local_education_agency_demographics_bridge_student_school_demographic_bridge_key", "alias": "not_null_student_local_educati_0911f91fa8056e30ad52f5abf060e841", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["student_local_education_agency_demographics_bridge"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_student_local_educati_0911f91fa8056e30ad52f5abf060e841.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_student_local_educati_0911f91fa8056e30ad52f5abf060e841"}, "created_at": 1643419470.6190476, "compiled_sql": "\n    \n    \n\nselect *\nfrom `gcp-proj-id`.`dev_core`.`student_local_education_agency_demographics_bridge`\nwhere student_school_demographic_bridge_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "student_school_demographic_bridge_key", "file_key_name": "models.student_local_education_agency_demographics_bridge"}, "test.project.relationships_fct_student_school_student_key__student_key__ref_dim_student_.ce63ab9df5": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_student_scho_9205f868dbd4bb0a6c9f832723697eee\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_student')", "field": "student_key", "column_name": "student_key", "model": "{{ get_where_subquery(ref('fct_student_school')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_student", "model.project.fct_student_school"]}, "config": {"enabled": true, "alias": "relationships_fct_student_scho_9205f868dbd4bb0a6c9f832723697eee", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "relationships_fct_student_school_student_key__student_key__ref_dim_student_"], "unique_id": "test.project.relationships_fct_student_school_student_key__student_key__ref_dim_student_.ce63ab9df5", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "relationships_fct_student_scho_9205f868dbd4bb0a6c9f832723697eee.sql", "original_file_path": "models/marts/core/core.yml", "name": "relationships_fct_student_school_student_key__student_key__ref_dim_student_", "alias": "relationships_fct_student_scho_9205f868dbd4bb0a6c9f832723697eee", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_student"], ["fct_student_school"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/relationships_fct_student_scho_9205f868dbd4bb0a6c9f832723697eee.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fct_student_scho_9205f868dbd4bb0a6c9f832723697eee"}, "created_at": 1643419470.6209018, "compiled_sql": "\n    \n    \n\nwith child as (\n    select student_key as from_field\n    from `gcp-proj-id`.`dev_core`.`fct_student_school`\n    where student_key is not null\n),\n\nparent as (\n    select student_key as to_field\n    from `gcp-proj-id`.`dev_core`.`dim_student`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "student_key", "file_key_name": "models.fct_student_school"}, "test.project.relationships_fct_student_school_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.bdd6a57ac4": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_student_scho_441bae172a53ed8d01418f52d72d6788\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_local_education_agency')", "field": "local_education_agency_key", "column_name": "local_education_agency_key", "model": "{{ get_where_subquery(ref('fct_student_school')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_local_education_agency", "model.project.fct_student_school"]}, "config": {"enabled": true, "alias": "relationships_fct_student_scho_441bae172a53ed8d01418f52d72d6788", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "relationships_fct_student_school_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_"], "unique_id": "test.project.relationships_fct_student_school_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.bdd6a57ac4", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "relationships_fct_student_scho_441bae172a53ed8d01418f52d72d6788.sql", "original_file_path": "models/marts/core/core.yml", "name": "relationships_fct_student_school_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_", "alias": "relationships_fct_student_scho_441bae172a53ed8d01418f52d72d6788", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_local_education_agency"], ["fct_student_school"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/relationships_fct_student_scho_441bae172a53ed8d01418f52d72d6788.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fct_student_scho_441bae172a53ed8d01418f52d72d6788"}, "created_at": 1643419470.625113, "compiled_sql": "\n    \n    \n\nwith child as (\n    select local_education_agency_key as from_field\n    from `gcp-proj-id`.`dev_core`.`fct_student_school`\n    where local_education_agency_key is not null\n),\n\nparent as (\n    select local_education_agency_key as to_field\n    from `gcp-proj-id`.`dev_core`.`dim_local_education_agency`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "local_education_agency_key", "file_key_name": "models.fct_student_school"}, "test.project.relationships_fct_student_school_school_key__school_key__ref_dim_school_.7a675bb6ae": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_student_scho_a506ff10ff57a9f497f3d8065cbd010f\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_school')", "field": "school_key", "column_name": "school_key", "model": "{{ get_where_subquery(ref('fct_student_school')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_school", "model.project.fct_student_school"]}, "config": {"enabled": true, "alias": "relationships_fct_student_scho_a506ff10ff57a9f497f3d8065cbd010f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "marts", "core", "relationships_fct_student_school_school_key__school_key__ref_dim_school_"], "unique_id": "test.project.relationships_fct_student_school_school_key__school_key__ref_dim_school_.7a675bb6ae", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "relationships_fct_student_scho_a506ff10ff57a9f497f3d8065cbd010f.sql", "original_file_path": "models/marts/core/core.yml", "name": "relationships_fct_student_school_school_key__school_key__ref_dim_school_", "alias": "relationships_fct_student_scho_a506ff10ff57a9f497f3d8065cbd010f", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_school"], ["fct_student_school"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/marts/core/core.yml/relationships_fct_student_scho_a506ff10ff57a9f497f3d8065cbd010f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fct_student_scho_a506ff10ff57a9f497f3d8065cbd010f"}, "created_at": 1643419470.6293201, "compiled_sql": "\n    \n    \n\nwith child as (\n    select school_key as from_field\n    from `gcp-proj-id`.`dev_core`.`fct_student_school`\n    where school_key is not null\n),\n\nparent as (\n    select school_key as to_field\n    from `gcp-proj-id`.`dev_core`.`dim_school`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "school_key", "file_key_name": "models.fct_student_school"}, "test.project.unique_stg_edfi_local_education_agencies_CONCAT_school_year_local_education_agency_id_.68cfccff4d": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_stg_edfi_local_educatio_906b570608ceb8bb5b16cef42ff38670\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "CONCAT(school_year, '-', local_education_agency_id)", "model": "{{ get_where_subquery(ref('stg_edfi_local_education_agencies')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.project.stg_edfi_local_education_agencies"]}, "config": {"enabled": true, "alias": "unique_stg_edfi_local_educatio_906b570608ceb8bb5b16cef42ff38670", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "staging", "edfi", "unique_stg_edfi_local_education_agencies_CONCAT_school_year_local_education_agency_id_"], "unique_id": "test.project.unique_stg_edfi_local_education_agencies_CONCAT_school_year_local_education_agency_id_.68cfccff4d", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "unique_stg_edfi_local_educatio_906b570608ceb8bb5b16cef42ff38670.sql", "original_file_path": "models/staging/edfi/stg_edfi.yml", "name": "unique_stg_edfi_local_education_agencies_CONCAT_school_year_local_education_agency_id_", "alias": "unique_stg_edfi_local_educatio_906b570608ceb8bb5b16cef42ff38670", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_edfi_local_education_agencies"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi.yml/unique_stg_edfi_local_educatio_906b570608ceb8bb5b16cef42ff38670.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_stg_edfi_local_educatio_906b570608ceb8bb5b16cef42ff38670"}, "created_at": 1643419470.6685185, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select CONCAT(school_year, '-', local_education_agency_id) as unique_field\n  from `gcp-proj-id`.`dev_staging`.`stg_edfi_local_education_agencies`\n  where CONCAT(school_year, '-', local_education_agency_id) is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_edfi_local_education_agencies"}, "test.project.unique_stg_edfi_schools_school_year_school_id.e463495cb1": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "school_year || '-' || school_id", "model": "{{ get_where_subquery(ref('stg_edfi_schools')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.project.stg_edfi_schools"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "staging", "edfi", "unique_stg_edfi_schools_school_year_school_id"], "unique_id": "test.project.unique_stg_edfi_schools_school_year_school_id.e463495cb1", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "unique_stg_edfi_schools_school_year_school_id.sql", "original_file_path": "models/staging/edfi/stg_edfi.yml", "name": "unique_stg_edfi_schools_school_year_school_id", "alias": "unique_stg_edfi_schools_school_year_school_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_edfi_schools"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi.yml/unique_stg_edfi_schools_school_year_school_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1643419470.6703336, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select school_year || '-' || school_id as unique_field\n  from `gcp-proj-id`.`dev_staging`.`stg_edfi_schools`\n  where school_year || '-' || school_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_edfi_schools"}, "test.project.unique_stg_edfi_students_school_year_student_unique_id.3a33c30a48": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "school_year || '-' || student_unique_id", "model": "{{ get_where_subquery(ref('stg_edfi_students')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.project.stg_edfi_students"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "gcp-proj-id", "schema": "dev_dbt_test__audit", "fqn": ["project", "staging", "edfi", "unique_stg_edfi_students_school_year_student_unique_id"], "unique_id": "test.project.unique_stg_edfi_students_school_year_student_unique_id.3a33c30a48", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "unique_stg_edfi_students_school_year_student_unique_id.sql", "original_file_path": "models/staging/edfi/stg_edfi.yml", "name": "unique_stg_edfi_students_school_year_student_unique_id", "alias": "unique_stg_edfi_students_school_year_student_unique_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_edfi_students"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi.yml/unique_stg_edfi_students_school_year_student_unique_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1643419470.6720796, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select school_year || '-' || student_unique_id as unique_field\n  from `gcp-proj-id`.`dev_staging`.`stg_edfi_students`\n  where school_year || '-' || student_unique_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_edfi_students"}}, "sources": {"source.project.staging.base_edfi_assessments": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_assessments"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_assessments", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_assessments", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_assessments", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_assessments`", "created_at": 1643419470.6782463}, "source.project.staging.base_edfi_assessments_deletes": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_assessments_deletes"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_assessments_deletes", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_assessments_deletes", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_assessments_deletes", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_assessments_deletes`", "created_at": 1643419470.6783776}, "source.project.staging.base_edfi_calendars": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_calendars"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_calendars", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_calendars", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_calendars", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_calendars`", "created_at": 1643419470.6784875}, "source.project.staging.base_edfi_calendars_deletes": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_calendars_deletes"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_calendars_deletes", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_calendars_deletes", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_calendars_deletes", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_calendars_deletes`", "created_at": 1643419470.6785944}, "source.project.staging.base_edfi_calendar_dates": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_calendar_dates"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_calendar_dates", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_calendar_dates", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_calendar_dates", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_calendar_dates`", "created_at": 1643419470.6786993}, "source.project.staging.base_edfi_calendar_dates_deletes": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_calendar_dates_deletes"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_calendar_dates_deletes", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_calendar_dates_deletes", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_calendar_dates_deletes", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_calendar_dates_deletes`", "created_at": 1643419470.678954}, "source.project.staging.base_edfi_courses": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_courses"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_courses", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_courses", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_courses", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_courses`", "created_at": 1643419470.679066}, "source.project.staging.base_edfi_courses_deletes": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_courses_deletes"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_courses_deletes", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_courses_deletes", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_courses_deletes", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_courses_deletes`", "created_at": 1643419470.679172}, "source.project.staging.base_edfi_course_offerings": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_course_offerings"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_course_offerings", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_course_offerings", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_course_offerings", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_course_offerings`", "created_at": 1643419470.6792903}, "source.project.staging.base_edfi_course_offerings_deletes": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_course_offerings_deletes"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_course_offerings_deletes", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_course_offerings_deletes", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_course_offerings_deletes", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_course_offerings_deletes`", "created_at": 1643419470.6794078}, "source.project.staging.base_edfi_discipline_actions": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_discipline_actions"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_discipline_actions", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_discipline_actions", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_discipline_actions", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_discipline_actions`", "created_at": 1643419470.679512}, "source.project.staging.base_edfi_discipline_actions_deletes": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_discipline_actions_deletes"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_discipline_actions_deletes", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_discipline_actions_deletes", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_discipline_actions_deletes", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_discipline_actions_deletes`", "created_at": 1643419470.6796162}, "source.project.staging.base_edfi_discipline_incidents": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_discipline_incidents"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_discipline_incidents", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_discipline_incidents", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_discipline_incidents", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_discipline_incidents`", "created_at": 1643419470.6797214}, "source.project.staging.base_edfi_discipline_incident_deletes": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_discipline_incident_deletes"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_discipline_incident_deletes", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_discipline_incident_deletes", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_discipline_incident_deletes", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_discipline_incident_deletes`", "created_at": 1643419470.6798263}, "source.project.staging.base_edfi_grading_periods": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_grading_periods"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_grading_periods", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_grading_periods", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_grading_periods", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_grading_periods`", "created_at": 1643419470.6799328}, "source.project.staging.base_edfi_grading_periods_deletes": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_grading_periods_deletes"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_grading_periods_deletes", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_grading_periods_deletes", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_grading_periods_deletes", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_grading_periods_deletes`", "created_at": 1643419470.680039}, "source.project.staging.base_edfi_grading_period_descriptors": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_grading_period_descriptors"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_grading_period_descriptors", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_grading_period_descriptors", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_grading_period_descriptors", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_grading_period_descriptors`", "created_at": 1643419470.6801429}, "source.project.staging.base_edfi_grades": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_grades"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_grades", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_grades", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_grades", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_grades`", "created_at": 1643419470.680246}, "source.project.staging.base_edfi_grades_deletes": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_grades_deletes"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_grades_deletes", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_grades_deletes", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_grades_deletes", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_grades_deletes`", "created_at": 1643419470.6803505}, "source.project.staging.base_edfi_local_education_agencies": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_local_education_agencies"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_local_education_agencies", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_local_education_agencies", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_local_education_agencies", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_local_education_agencies`", "created_at": 1643419470.6804545}, "source.project.staging.base_edfi_local_education_agencies_deletes": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_local_education_agencies_deletes"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_local_education_agencies_deletes", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_local_education_agencies_deletes", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_local_education_agencies_deletes", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_local_education_agencies_deletes`", "created_at": 1643419470.6805577}, "source.project.staging.base_edfi_objective_assessments": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_objective_assessments"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_objective_assessments", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_objective_assessments", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_objective_assessments", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_objective_assessments`", "created_at": 1643419470.680661}, "source.project.staging.base_edfi_objective_assessments_deletes": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_objective_assessments_deletes"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_objective_assessments_deletes", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_objective_assessments_deletes", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_objective_assessments_deletes", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_objective_assessments_deletes`", "created_at": 1643419470.6807642}, "source.project.staging.base_edfi_parents": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_parents"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_parents", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_parents", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_parents", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_parents`", "created_at": 1643419470.680868}, "source.project.staging.base_edfi_parents_deletes": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_parents_deletes"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_parents_deletes", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_parents_deletes", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_parents_deletes", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_parents_deletes`", "created_at": 1643419470.680976}, "source.project.staging.base_edfi_programs": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_programs"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_programs", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_programs", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_programs", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_programs`", "created_at": 1643419470.6810784}, "source.project.staging.base_edfi_programs_deletes": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_programs_deletes"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_programs_deletes", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_programs_deletes", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_programs_deletes", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_programs_deletes`", "created_at": 1643419470.6811805}, "source.project.staging.base_edfi_schools": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_schools"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_schools", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_schools", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_schools", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_schools`", "created_at": 1643419470.6812937}, "source.project.staging.base_edfi_schools_deletes": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_schools_deletes"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_schools_deletes", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_schools_deletes", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_schools_deletes", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_schools_deletes`", "created_at": 1643419470.681397}, "source.project.staging.base_edfi_school_year_types": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_school_year_types"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_school_year_types", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_school_year_types", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_school_year_types", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_school_year_types`", "created_at": 1643419470.6814997}, "source.project.staging.base_edfi_sections": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_sections"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_sections", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_sections", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_sections", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_sections`", "created_at": 1643419470.6816025}, "source.project.staging.base_edfi_sections_deletes": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_sections_deletes"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_sections_deletes", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_sections_deletes", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_sections_deletes", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_sections_deletes`", "created_at": 1643419470.681706}, "source.project.staging.base_edfi_sessions": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_sessions"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_sessions", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_sessions", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_sessions", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_sessions`", "created_at": 1643419470.681809}, "source.project.staging.base_edfi_sessions_deletes": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_sessions_deletes"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_sessions_deletes", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_sessions_deletes", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_sessions_deletes", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_sessions_deletes`", "created_at": 1643419470.6819112}, "source.project.staging.base_edfi_staffs": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_staffs"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_staffs", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_staffs", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_staffs", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_staffs`", "created_at": 1643419470.6820188}, "source.project.staging.base_edfi_staffs_deletes": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_staffs_deletes"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_staffs_deletes", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_staffs_deletes", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_staffs_deletes", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_staffs_deletes`", "created_at": 1643419470.6821213}, "source.project.staging.base_edfi_staff_discipline_incident_associations": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_staff_discipline_incident_associations"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_staff_discipline_incident_associations", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_staff_discipline_incident_associations", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_staff_discipline_incident_associations", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_staff_discipline_incident_associations`", "created_at": 1643419470.6822233}, "source.project.staging.base_edfi_staff_discipline_incident_associations_deletes": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_staff_discipline_incident_associations_deletes"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_staff_discipline_incident_associations_deletes", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_staff_discipline_incident_associations_deletes", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_staff_discipline_incident_associations_deletes", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_staff_discipline_incident_associations_deletes`", "created_at": 1643419470.6823256}, "source.project.staging.base_edfi_staff_education_organization_assignment_associations": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_staff_education_organization_assignment_associations"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_staff_education_organization_assignment_associations", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_staff_education_organization_assignment_associations", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_staff_education_organization_assignment_associations", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_staff_education_organization_assignment_associations`", "created_at": 1643419470.682428}, "source.project.staging.base_edfi_staff_education_organization_assignment_associations_deletes": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_staff_education_organization_assignment_associations_deletes"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_staff_education_organization_assignment_associations_deletes", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_staff_education_organization_assignment_associations_deletes", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_staff_education_organization_assignment_associations_deletes", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_staff_education_organization_assignment_associations_deletes`", "created_at": 1643419470.6825304}, "source.project.staging.base_edfi_staff_school_associations": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_staff_school_associations"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_staff_school_associations", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_staff_school_associations", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_staff_school_associations", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_staff_school_associations`", "created_at": 1643419470.682633}, "source.project.staging.base_edfi_staff_school_associations_deletes": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_staff_school_associations_deletes"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_staff_school_associations_deletes", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_staff_school_associations_deletes", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_staff_school_associations_deletes", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_staff_school_associations_deletes`", "created_at": 1643419470.6827357}, "source.project.staging.base_edfi_staff_section_associations": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_staff_section_associations"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_staff_section_associations", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_staff_section_associations", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_staff_section_associations", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_staff_section_associations`", "created_at": 1643419470.6828384}, "source.project.staging.base_edfi_staff_section_associations_deletes": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_staff_section_associations_deletes"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_staff_section_associations_deletes", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_staff_section_associations_deletes", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_staff_section_associations_deletes", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_staff_section_associations_deletes`", "created_at": 1643419470.6829438}, "source.project.staging.base_edfi_students": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_students"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_students", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_students", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_students", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_students`", "created_at": 1643419470.6830463}, "source.project.staging.base_edfi_students_deletes": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_students_deletes"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_students_deletes", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_students_deletes", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_students_deletes", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_students_deletes`", "created_at": 1643419470.6831484}, "source.project.staging.base_edfi_student_assessments": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_student_assessments"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_student_assessments", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_student_assessments", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_student_assessments", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_student_assessments`", "created_at": 1643419470.6832495}, "source.project.staging.base_edfi_student_assessments_deletes": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_student_assessments_deletes"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_student_assessments_deletes", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_student_assessments_deletes", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_student_assessments_deletes", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_student_assessments_deletes`", "created_at": 1643419470.6833508}, "source.project.staging.base_edfi_student_discipline_incident_associations": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_student_discipline_incident_associations"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_student_discipline_incident_associations", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_student_discipline_incident_associations", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_student_discipline_incident_associations", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_student_discipline_incident_associations`", "created_at": 1643419470.6834526}, "source.project.staging.base_edfi_student_discipline_incident_associations_deletes": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_student_discipline_incident_associations_deletes"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_student_discipline_incident_associations_deletes", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_student_discipline_incident_associations_deletes", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_student_discipline_incident_associations_deletes", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_student_discipline_incident_associations_deletes`", "created_at": 1643419470.6835544}, "source.project.staging.base_edfi_student_education_organization_associations": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_student_education_organization_associations"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_student_education_organization_associations", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_student_education_organization_associations", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_student_education_organization_associations", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_student_education_organization_associations`", "created_at": 1643419470.683703}, "source.project.staging.base_edfi_student_education_organization_associations_deletes": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_student_education_organization_associations_deletes"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_student_education_organization_associations_deletes", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_student_education_organization_associations_deletes", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_student_education_organization_associations_deletes", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_student_education_organization_associations_deletes`", "created_at": 1643419470.6838129}, "source.project.staging.base_edfi_student_parent_associations": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_student_parent_associations"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_student_parent_associations", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_student_parent_associations", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_student_parent_associations", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_student_parent_associations`", "created_at": 1643419470.6839154}, "source.project.staging.base_edfi_student_parent_associations_deletes": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_student_parent_associations_deletes"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_student_parent_associations_deletes", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_student_parent_associations_deletes", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_student_parent_associations_deletes", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_student_parent_associations_deletes`", "created_at": 1643419470.6840253}, "source.project.staging.base_edfi_student_program_associations": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_student_program_associations"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_student_program_associations", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_student_program_associations", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_student_program_associations", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_student_program_associations`", "created_at": 1643419470.6841278}, "source.project.staging.base_edfi_student_program_associations_deletes": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_student_program_associations_deletes"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_student_program_associations_deletes", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_student_program_associations_deletes", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_student_program_associations_deletes", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_student_program_associations_deletes`", "created_at": 1643419470.6842299}, "source.project.staging.base_edfi_student_school_associations": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_student_school_associations"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_student_school_associations", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_student_school_associations", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_student_school_associations", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_student_school_associations`", "created_at": 1643419470.6843312}, "source.project.staging.base_edfi_student_school_associations_deletes": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_student_school_associations_deletes"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_student_school_associations_deletes", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_student_school_associations_deletes", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_student_school_associations_deletes", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_student_school_associations_deletes`", "created_at": 1643419470.6844327}, "source.project.staging.base_edfi_student_school_attendance_events": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_student_school_attendance_events"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_student_school_attendance_events", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_student_school_attendance_events", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_student_school_attendance_events", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_student_school_attendance_events`", "created_at": 1643419470.6845345}, "source.project.staging.base_edfi_student_school_attendance_events_deletes": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_student_school_attendance_events_deletes"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_student_school_attendance_events_deletes", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_student_school_attendance_events_deletes", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_student_school_attendance_events_deletes", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_student_school_attendance_events_deletes`", "created_at": 1643419470.6846364}, "source.project.staging.base_edfi_student_section_associations": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_student_section_associations"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_student_section_associations", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_student_section_associations", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_student_section_associations", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_student_section_associations`", "created_at": 1643419470.6847384}, "source.project.staging.base_edfi_student_section_associations_deletes": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_student_section_associations_deletes"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_student_section_associations_deletes", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_student_section_associations_deletes", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_student_section_associations_deletes", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_student_section_associations_deletes`", "created_at": 1643419470.6848404}, "source.project.staging.base_edfi_student_section_attendance_events": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_student_section_attendance_events"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_student_section_attendance_events", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_student_section_attendance_events", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_student_section_attendance_events", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_student_section_attendance_events`", "created_at": 1643419470.6849422}, "source.project.staging.base_edfi_student_section_attendance_events_deletes": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_student_section_attendance_events_deletes"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_student_section_attendance_events_deletes", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_student_section_attendance_events_deletes", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_student_section_attendance_events_deletes", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_student_section_attendance_events_deletes`", "created_at": 1643419470.6850443}, "source.project.staging.base_edfi_student_special_education_program_associations": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_student_special_education_program_associations"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_student_special_education_program_associations", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_student_special_education_program_associations", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_student_special_education_program_associations", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_student_special_education_program_associations`", "created_at": 1643419470.6851468}, "source.project.staging.base_edfi_student_special_education_program_associations_deletes": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_student_special_education_program_associations_deletes"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_student_special_education_program_associations_deletes", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_student_special_education_program_associations_deletes", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_student_special_education_program_associations_deletes", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_student_special_education_program_associations_deletes`", "created_at": 1643419470.6852498}, "source.project.staging.base_edfi_cohort_type_descriptors": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_cohort_type_descriptors"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_cohort_type_descriptors", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_cohort_type_descriptors", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_cohort_type_descriptors", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_cohort_type_descriptors`", "created_at": 1643419470.6853516}, "source.project.staging.base_edfi_cohort_type_descriptors_deletes": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_cohort_type_descriptors_deletes"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_cohort_type_descriptors_deletes", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_cohort_type_descriptors_deletes", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_cohort_type_descriptors_deletes", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_cohort_type_descriptors_deletes`", "created_at": 1643419470.6854544}, "source.project.staging.base_edfi_disability_descriptors": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_disability_descriptors"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_disability_descriptors", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_disability_descriptors", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_disability_descriptors", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_disability_descriptors`", "created_at": 1643419470.6855564}, "source.project.staging.base_edfi_disability_descriptors_deletes": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_disability_descriptors_deletes"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_disability_descriptors_deletes", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_disability_descriptors_deletes", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_disability_descriptors_deletes", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_disability_descriptors_deletes`", "created_at": 1643419470.6856594}, "source.project.staging.base_edfi_language_descriptors": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_language_descriptors"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_language_descriptors", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_language_descriptors", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_language_descriptors", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_language_descriptors`", "created_at": 1643419470.6857622}, "source.project.staging.base_edfi_language_descriptors_deletes": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_language_descriptors_deletes"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_language_descriptors_deletes", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_language_descriptors_deletes", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_language_descriptors_deletes", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_language_descriptors_deletes`", "created_at": 1643419470.6858637}, "source.project.staging.base_edfi_language_use_descriptors": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_language_use_descriptors"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_language_use_descriptors", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_language_use_descriptors", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_language_use_descriptors", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_language_use_descriptors`", "created_at": 1643419470.685968}, "source.project.staging.base_edfi_language_use_descriptors_deletes": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_language_use_descriptors_deletes"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_language_use_descriptors_deletes", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_language_use_descriptors_deletes", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_language_use_descriptors_deletes", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_language_use_descriptors_deletes`", "created_at": 1643419470.6860693}, "source.project.staging.base_edfi_race_descriptors": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_race_descriptors"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_race_descriptors", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_race_descriptors", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_race_descriptors", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_race_descriptors`", "created_at": 1643419470.686171}, "source.project.staging.base_edfi_race_descriptors_deletes": {"fqn": ["project", "staging", "edfi", "staging", "base_edfi_race_descriptors_deletes"], "database": "gcp-proj-id", "schema": "dev_staging", "unique_id": "source.project.staging.base_edfi_race_descriptors_deletes", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "name": "base_edfi_race_descriptors_deletes", "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_race_descriptors_deletes", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`gcp-proj-id`.`dev_staging`.`base_edfi_race_descriptors_deletes`", "created_at": 1643419470.6862726}}, "macros": {"macro.project.convert_grade_level_to_id": {"unique_id": "macro.project.convert_grade_level_to_id", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "macros/convert_grade_level_to_id.sql", "original_file_path": "macros/convert_grade_level_to_id.sql", "name": "convert_grade_level_to_id", "macro_sql": "{% macro convert_grade_level_to_id(grade_level) %}\n    CASE {{ grade_level }}\n        WHEN 'Infant/toddler'            THEN -3\n        WHEN 'Preschool/Prekindergarten' THEN -2\n        WHEN 'Kindergarten'              THEN -1\n        WHEN 'First grade'               THEN 1\n        WHEN 'Second grade'              THEN 2\n        WHEN 'Third grade'               THEN 3\n        WHEN 'Fourth grade'              THEN 4\n        WHEN 'Fifth grade'               THEN 5\n        WHEN 'Sixth grade'               THEN 6\n        WHEN 'Seventh grade'             THEN 7\n        WHEN 'Eighth grade'              THEN 8\n        WHEN 'Ninth grade'               THEN 9\n        WHEN 'Tenth grade'               THEN 10\n        WHEN 'Eleventh grade'            THEN 11\n        WHEN 'Twelfth grade'             THEN 12\n        ELSE 999999999\n    END\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "This macro converts grade level descriptors to a numeric value for use in sorting in a bi tool\n", "meta": {}, "docs": {"show": true}, "patch_path": "project://macros/macros.yml", "arguments": [{"name": "grade_level", "type": "string", "description": "Ed-Fi grade level descriptor"}], "created_at": 1643419470.6763408}, "macro.project.get_unweighted_gpa_point": {"unique_id": "macro.project.get_unweighted_gpa_point", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "macros/get_unweighted_gpa_point.sql", "original_file_path": "macros/get_unweighted_gpa_point.sql", "name": "get_unweighted_gpa_point", "macro_sql": "{% macro get_unweighted_gpa_point(letter_grade) %}\n    CASE {{ letter_grade }}\n        WHEN 'A+'   THEN 4.4\n        WHEN 'A'    THEN 4\n        WHEN 'A-'   THEN 3.7\n        WHEN 'B+'   THEN 3.4\n        WHEN 'B'    THEN 3\n        WHEN 'B-'   THEN 2.7\n        WHEN 'C+'   THEN 2.4\n        WHEN 'C'    THEN 2\n        WHEN 'C-'   THEN 1.7\n        WHEN 'D+'   THEN 1.4\n        WHEN 'D'    THEN 1.4\n        WHEN 'D-'   THEN 0.6\n        WHEN 'F'    THEN 0\n        ELSE NULL\n    END\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "This macro converts a letter grade to the equivalent unweighted gpa point value\n", "meta": {}, "docs": {"show": true}, "patch_path": "project://macros/macros.yml", "arguments": [{"name": "letter_grade", "type": "string", "description": "Letter grade earned"}], "created_at": 1643419470.6781273}, "macro.project.convert_grade_level_to_short_label": {"unique_id": "macro.project.convert_grade_level_to_short_label", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "macros/convert_grade_level_to_short_label.sql", "original_file_path": "macros/convert_grade_level_to_short_label.sql", "name": "convert_grade_level_to_short_label", "macro_sql": "{% macro convert_grade_level_to_short_label(grade_level) %}\n    CASE {{ grade_level }}\n        WHEN 'Infant/toddler'            THEN 'Infant'\n        WHEN 'Preschool/Prekindergarten' THEN 'PreK'\n        WHEN 'Kindergarten'              THEN 'K'\n        WHEN 'First grade'               THEN '1'\n        WHEN 'Second grade'              THEN '2'\n        WHEN 'Third grade'               THEN '3'\n        WHEN 'Fourth grade'              THEN '4'\n        WHEN 'Fifth grade'               THEN '5'\n        WHEN 'Sixth grade'               THEN '6'\n        WHEN 'Seventh grade'             THEN '7'\n        WHEN 'Eighth grade'              THEN '8'\n        WHEN 'Ninth grade'               THEN '9'\n        WHEN 'Tenth grade'               THEN '10'\n        WHEN 'Eleventh grade'            THEN '11'\n        WHEN 'Twelfth grade'             THEN '12'\n        ELSE '999999999'\n    END\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "This macro converts grade level descriptors to shorter, often numeric grade levels (ie. Fifth grade -> 5 )\n", "meta": {}, "docs": {"show": true}, "patch_path": "project://macros/macros.yml", "arguments": [{"name": "grade_level", "type": "string", "description": "Ed-Fi grade level descriptor"}], "created_at": 1643419470.677262}, "macro.dbt_bigquery.date_sharded_table": {"unique_id": "macro.dbt_bigquery.date_sharded_table", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3059316}, "macro.dbt_bigquery.grant_access_to": {"unique_id": "macro.dbt_bigquery.grant_access_to", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "grant_access_to", "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3063996}, "macro.dbt_bigquery.get_partitions_metadata": {"unique_id": "macro.dbt_bigquery.get_partitions_metadata", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "get_partitions_metadata", "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3070123}, "macro.dbt_bigquery.partition_by": {"unique_id": "macro.dbt_bigquery.partition_by", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3147008}, "macro.dbt_bigquery.cluster_by": {"unique_id": "macro.dbt_bigquery.cluster_by", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.315479}, "macro.dbt_bigquery.bigquery_options": {"unique_id": "macro.dbt_bigquery.bigquery_options", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery_options", "macro_sql": "{% macro bigquery_options(opts) %}\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.316224}, "macro.dbt_bigquery.bigquery_table_options": {"unique_id": "macro.dbt_bigquery.bigquery_table_options", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.31676}, "macro.dbt_bigquery.bigquery__create_table_as": {"unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, sql) -%}\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace table {{ relation }}\n  {{ partition_by(partition_config) }}\n  {{ cluster_by(raw_cluster_by) }}\n  {{ bigquery_table_options(config, model, temporary) }}\n  as (\n    {{ sql }}\n  );\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_table_options"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.318135}, "macro.dbt_bigquery.bigquery_view_options": {"unique_id": "macro.dbt_bigquery.bigquery_view_options", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery_view_options", "macro_sql": "{% macro bigquery_view_options(config, node) %}\n  {% set opts = adapter.get_view_options(config, node) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3186264}, "macro.dbt_bigquery.bigquery__create_view_as": {"unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_view_options(config, model) }}\n  as {{ sql }};\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_view_options"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3192952}, "macro.dbt_bigquery.bigquery__create_schema": {"unique_id": "macro.dbt_bigquery.bigquery__create_schema", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_schema", "macro_sql": "{% macro bigquery__create_schema(relation) -%}\n  {{ adapter.create_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.319558}, "macro.dbt_bigquery.bigquery__drop_schema": {"unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3198195}, "macro.dbt_bigquery.bigquery__drop_relation": {"unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n  {% call statement('drop_relation') -%}\n    drop {{ relation.type }} if exists {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3202271}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3205302}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3208227}, "macro.dbt_bigquery.bigquery__current_timestamp": {"unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  CURRENT_TIMESTAMP()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.320978}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3213794}, "macro.dbt_bigquery.bigquery__list_schemas": {"unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3217232}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.32211}, "macro.dbt_bigquery.bigquery__persist_docs": {"unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3227267}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3230658}, "macro.dbt_bigquery.bigquery__rename_relation": {"unique_id": "macro.dbt_bigquery.bigquery__rename_relation", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__rename_relation", "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3234239}, "macro.dbt_bigquery.bigquery__alter_relation_add_columns": {"unique_id": "macro.dbt_bigquery.bigquery__alter_relation_add_columns", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_relation_add_columns", "macro_sql": "{% macro bigquery__alter_relation_add_columns(relation, add_columns) %}\n  \n  {% set sql -%}\n     \n     alter {{ relation.type }} {{ relation }}\n        {% for column in add_columns %}\n          add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n        {% endfor %}\n  \n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3243706}, "macro.dbt_bigquery.bigquery__alter_relation_drop_columns": {"unique_id": "macro.dbt_bigquery.bigquery__alter_relation_drop_columns", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_relation_drop_columns", "macro_sql": "{% macro bigquery__alter_relation_drop_columns(relation, drop_columns) %}\n  \n  {% set sql -%}\n     \n     alter {{ relation.type }} {{ relation }}\n\n        {% for column in drop_columns %}\n          drop column {{ column.name }}{{ ',' if not loop.last }}\n        {% endfor %}\n  \n  {%- endset -%}\n  \n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3251815}, "macro.dbt_bigquery.bigquery__alter_column_type": {"unique_id": "macro.dbt_bigquery.bigquery__alter_column_type", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_column_type", "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#-- Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_relation", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3265758}, "macro.dbt_bigquery.bigquery__test_unique": {"unique_id": "macro.dbt_bigquery.bigquery__test_unique", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__test_unique", "macro_sql": "{% macro bigquery__test_unique(model, column_name) %}\n\nwith dbt_test__target as (\n  \n  select {{ column_name }} as unique_field\n  from {{ model }}\n  where {{ column_name }} is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.326943}, "macro.dbt_bigquery.bigquery__get_catalog": {"unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n  {%- if (schemas | length) == 0 -%}\n    {# Hopefully nothing cares about the columns we return when there are no rows #}\n    {%- set query  = \"select 1 as id limit 0\" -%}\n  {%- else -%}\n\n  {%- set query -%}\n    with tables as (\n        select\n            project_id as table_database,\n            dataset_id as table_schema,\n            table_id as original_table_name,\n\n            concat(project_id, '.', dataset_id, '.', table_id) as relation_id,\n\n            row_count,\n            size_bytes as size_bytes,\n            case\n                when type = 1 then 'table'\n                when type = 2 then 'view'\n                else 'external'\n            end as table_type,\n\n            REGEXP_CONTAINS(table_id, '^.+[0-9]{8}$') and coalesce(type, 0) = 1 as is_date_shard,\n            REGEXP_EXTRACT(table_id, '^(.+)[0-9]{8}$') as shard_base_name,\n            REGEXP_EXTRACT(table_id, '^.+([0-9]{8})$') as shard_name\n\n        from {{ information_schema.replace(information_schema_view='__TABLES__') }}\n        where (\n          {%- for schema in schemas -%}\n            upper(dataset_id) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n    ),\n\n    extracted as (\n\n        select *,\n            case\n                when is_date_shard then shard_base_name\n                else original_table_name\n            end as table_name\n\n        from tables\n\n    ),\n\n    unsharded_tables as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            coalesce(table_type, 'external') as table_type,\n            is_date_shard,\n\n            struct(\n                min(shard_name) as shard_min,\n                max(shard_name) as shard_max,\n                count(*) as shard_count\n            ) as table_shards,\n\n            sum(size_bytes) as size_bytes,\n            sum(row_count) as row_count,\n\n            max(relation_id) as relation_id\n\n        from extracted\n        group by 1,2,3,4,5\n\n    ),\n\n    info_schema_columns as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            table_catalog as table_database,\n            table_schema,\n            table_name,\n\n            -- use the \"real\" column name from the paths query below\n            column_name as base_column_name,\n            ordinal_position as column_index,\n\n            is_partitioning_column,\n            clustering_ordinal_position\n\n        from {{ information_schema.replace(information_schema_view='COLUMNS') }}\n        where ordinal_position is not null\n\n    ),\n\n    info_schema_column_paths as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            field_path as column_name,\n            data_type as column_type,\n            column_name as base_column_name,\n            description as column_comment\n\n        from {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }}\n\n    ),\n\n    columns as (\n\n        select * except (base_column_name)\n        from info_schema_columns\n        join info_schema_column_paths using (relation_id, base_column_name)\n\n    ),\n\n    column_stats as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            max(relation_id) as relation_id,\n            max(case when is_partitioning_column = 'YES' then 1 else 0 end) = 1 as is_partitioned,\n            max(case when is_partitioning_column = 'YES' then column_name else null end) as partition_column,\n            max(case when clustering_ordinal_position is not null then 1 else 0 end) = 1 as is_clustered,\n            array_to_string(\n                array_agg(\n                    case\n                        when clustering_ordinal_position is not null then column_name\n                        else null\n                    end ignore nulls\n                    order by clustering_ordinal_position\n                ), ', '\n            ) as clustering_columns\n\n        from columns\n        group by 1,2,3\n\n    )\n\n    select\n        unsharded_tables.table_database,\n        unsharded_tables.table_schema,\n        case\n            when is_date_shard then concat(unsharded_tables.table_name, '*')\n            else unsharded_tables.table_name\n        end as table_name,\n        unsharded_tables.table_type,\n\n        -- coalesce name and type for External tables - these columns are not\n        -- present in the COLUMN_FIELD_PATHS resultset\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields -- BQ does\n        -- not treat these nested properties as independent fields\n        row_number() over (\n            partition by relation_id\n            order by columns.column_index, columns.column_name\n        ) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        columns.column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_shards.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_shards.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_shards.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        is_clustered as `stats__clustering_fields__include`\n\n    -- join using relation_id (an actual relation, not a shard prefix) to make\n    -- sure that column metadata is picked up through the join. This will only\n    -- return the column information for the \"max\" table in a date-sharded table set\n    from unsharded_tables\n    left join columns using (relation_id)\n    left join column_stats using (relation_id)\n  {%- endset -%}\n\n  {%- endif -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3315427}, "macro.dbt_bigquery.materialization_copy_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_copy_bigquery", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/copy.sql", "original_file_path": "macros/materializations/copy.sql", "name": "materialization_copy_bigquery", "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {% set destination = this.incorporate(type='table') %}\n\n  {# there can be several ref() or source() according to BQ copy API docs #}\n  {# cycle over ref() and source() to create source tables array #}\n  {% set source_array = [] %}\n  {% for ref_table in model.refs %}\n    {{ source_array.append(ref(*ref_table)) }}\n  {% endfor %}\n\n  {% for src_table in model.sources %}\n    {{ source_array.append(source(*src_table)) }}\n  {% endfor %}\n\n  {# Call adapter's copy_table function #}\n  {%- set result_str = adapter.copy_table(\n      source_array,\n      destination,\n      config.get('copy_materialization', default = 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3339403}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.334792}, "macro.dbt_bigquery.bigquery__create_columns": {"unique_id": "macro.dbt_bigquery.bigquery__create_columns", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3351173}, "macro.dbt_bigquery.bigquery__post_snapshot": {"unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3353877}, "macro.dbt_bigquery.declare_dbt_max_partition": {"unique_id": "macro.dbt_bigquery.declare_dbt_max_partition", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "declare_dbt_max_partition", "macro_sql": "{% macro declare_dbt_max_partition(relation, partition_by, sql) %}\n\n  {% if '_dbt_max_partition' in sql %}\n\n    declare _dbt_max_partition {{ partition_by.data_type }} default (\n      select max({{ partition_by.field }}) from {{ this }}\n      where {{ partition_by.field }} is not null\n    );\n  \n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3384206}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3393693}, "macro.dbt_bigquery.bq_insert_overwrite": {"unique_id": "macro.dbt_bigquery.bq_insert_overwrite", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "bq_insert_overwrite", "macro_sql": "{% macro bq_insert_overwrite(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n) %}\n\n  {% if partitions is not none and partitions != [] %} {# static #}\n\n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {{sql}}\n        )\n      {%- endset -%}\n\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=true) }}\n\n  {% else %} {# dynamic #}\n\n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type }}>;\n\n      {# have we already created the temp table to check for schema changes? #}\n      {% if not tmp_relation_exists %}\n        {{ declare_dbt_max_partition(this, partition_by, sql) }}\n        \n        -- 1. create a temp table\n        {{ create_table_as(True, tmp_relation, sql) }}\n      {% else %}\n        -- 1. temp table already exists, we used it to check for schema changes\n      {% endif %}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              array_agg(distinct {{ partition_by.render() }})\n          from {{ tmp_relation }}\n      );\n\n      {#\n        TODO: include_sql_header is a hack; consider a better approach that includes\n              the sql_header at the materialization-level instead\n      #}\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=false) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql", "macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3420496}, "macro.dbt_bigquery.bq_generate_incremental_build_sql": {"unique_id": "macro.dbt_bigquery.bq_generate_incremental_build_sql", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "bq_generate_incremental_build_sql", "macro_sql": "{% macro bq_generate_incremental_build_sql(\n    strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n) %}\n  {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n  {% if strategy == 'insert_overwrite' %}\n\n    {% set missing_partition_msg -%}\n      The 'insert_overwrite' strategy requires the `partition_by` config.\n    {%- endset %}\n    {% if partition_by is none %}\n      {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n    {% endif %}\n\n    {% set build_sql = bq_insert_overwrite(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, on_schema_change\n    ) %}\n\n  {% else %} {# strategy == 'merge' #}\n    {%- set source_sql -%}\n      {%- if tmp_relation_exists -%}\n        (\n          select * from {{ tmp_relation }}\n        )\n      {%- else -%} {#-- wrap sql in parens to make it a subquery --#}\n        (\n          {{sql}}\n        )\n      {%- endif -%}\n    {%- endset -%}\n\n    {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {{ return(build_sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3438506}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery' -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% else %}\n    {% set tmp_relation_exists = false %}\n    {% if on_schema_change != 'ignore' %} {# Check first, since otherwise we may not build a temp table #}\n      {% do run_query(\n        declare_dbt_max_partition(this, partition_by, sql) + create_table_as(True, tmp_relation, sql)\n      ) %}\n      {% set tmp_relation_exists = true %}\n      {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n      {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% endif %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = bq_generate_incremental_build_sql(\n        strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n    ) %}\n\n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {% endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.process_schema_changes", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.statement", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3493438}, "macro.dbt_bigquery.materialization_table_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery' -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      We only need to drop this thing if it is not a table.\n      If it _is_ already a table, then we can overwrite it without downtime\n      Unlike table -> view, no need for `--full-refresh`: dropping a view is no big deal\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n  {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n    {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% endif %}\n  {% call statement('main') -%}\n    {{ create_table_as(False, target_relation, sql) }}\n  {% endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3530152}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3541353}, "macro.dbt_bigquery.materialization_view_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3553543}, "macro.dbt_bigquery.bigquery__create_csv_table": {"unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.356012}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.356341}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override) }}\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3575966}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3600712}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3604214}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3610806}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3614855}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3622303}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3627028}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3639898}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3645139}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n  \n  {% set sql -%}\n     \n     alter {{ relation.type }} {{ relation }}\n       \n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n            \n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n  \n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3662448}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3687296}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3693545}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.369793}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3702416}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3706079}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3710387}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.371533}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3721228}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.372682}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.37388}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3743484}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3747458}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.375977}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.376319}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3767555}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3771017}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3776472}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3786829}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3795724}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3798683}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.380335}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.381231}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3822048}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3824844}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.382807}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3836308}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3844295}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3848042}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3852139}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3855846}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3878424}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3883736}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3887498}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3890684}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3894343}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.389945}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3903587}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3910005}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3914123}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3917515}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3927922}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.393339}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.393953}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3948164}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3953454}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3961697}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3966346}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.3993125}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.4019766}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.403577}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.4040506}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.4062216}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.4074235}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.4080315}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.408654}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\nselect *\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.409144}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.4099038}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.411152}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.4119782}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.4126022}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.4132316}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.4153004}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.4156935}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.4160128}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.416305}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.4165928}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.417395}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.4182277}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.4191623}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.4198103}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n    \n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n    \n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n    \n    {% do relations.append(target_relation) %}\n  \n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n    \n    {{ adapter.commit() }}\n  \n  {% else %}\n\n      {% set main_sql = sql %}\n  \n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n  \n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.4240851}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.4293463}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.4312665}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.4317532}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.432791}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.4330873}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.4333222}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.433672}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.4339697}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.4349852}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.4353652}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.4380047}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.4436052}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.444498}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.4451447}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_schema", "macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.4551609}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.4607298}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.461067}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.4615393}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.4618254}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.4620209}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.4635725}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.4639006}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.4642487}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.4663005}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = config.get('updated_at', snapshot_string_as_time(now)) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.run_query", "macro.dbt.snapshot_string_as_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.4703548}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.4744344}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.4750295}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.475368}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.4755454}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.4759648}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.4778187}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.4782116}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.478738}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.4796286}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n   \n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n     \n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n     \n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n   \n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.485972}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n  \n  {% set schema_changed = False %}\n  \n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n  \n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.488571}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n  \n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n  \n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n  \n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %} \n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n  \n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(schema_change_message) %}\n  \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.4914274}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n    \n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n    \n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n      \n      {% if schema_changes_dict['schema_changed'] %}\n    \n        {% if on_schema_change == 'fail' %}\n        \n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways: \n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n          \n          {% do exceptions.raise_compiler_error(fail_msg) %}\n        \n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n          \n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n        \n        {% endif %}\n      \n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n    \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.4930198}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.4969125}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.4994001}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.499893}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.500796}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.501345}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5026596}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(target_relation) %}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n  {% set backup_identifier = model['name'] + \"__dbt_backup\" %}\n\n  -- the intermediate_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {% set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                  schema=schema,\n                                                                  database=database) %}                                               \n  {% set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                            schema=schema,\n                                                            database=database) %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {# -- first check whether we want to full refresh for source view or config reasons #}\n  {% set trigger_full_refresh = (full_refresh_mode or existing_relation.is_view) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n{% elif trigger_full_refresh %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n      {% set backup_identifier = model['name'] + '__dbt_backup' %}\n      {% set intermediate_relation = existing_relation.incorporate(path={\"identifier\": tmp_identifier}) %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n\n      {% set build_sql = create_table_as(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns) %}\n  \n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %} \n      {% do adapter.rename_relation(target_relation, backup_relation) %} \n      {% do adapter.rename_relation(intermediate_relation, target_relation) %} \n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.get_delete_insert_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.511652}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5130477}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    \n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5145764}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n   \n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n  \n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5157275}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n  \n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }} \n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5170245}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5194185}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5201118}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5205624}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5265658}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5273662}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5276988}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5280714}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5286067}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5295177}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5298936}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.530307}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  \n  {{ sql_header if sql_header is not none }}\n  \n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5311565}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5380206}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5390918}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.539564}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5401537}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5407147}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5416324}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5419755}, "macro.dbt_utils.bigquery__split_part": {"unique_id": "macro.dbt_utils.bigquery__split_part", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5423367}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5429547}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5431626}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5466926}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5470295}, "macro.dbt_utils.bigquery__datediff": {"unique_id": "macro.dbt_utils.bigquery__datediff", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5473568}, "macro.dbt_utils.postgres__datediff": {"unique_id": "macro.dbt_utils.postgres__datediff", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5511982}, "macro.dbt_utils.redshift__datediff": {"unique_id": "macro.dbt_utils.redshift__datediff", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "redshift__datediff", "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) %}\n\n    {{ return(dbt_utils.default__datediff(first_date, second_date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5516107}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_ephemeral.sql", "original_file_path": "macros/cross_db_utils/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5533128}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5541363}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) %}\n    date_trunc('{{datepart}}', {{date}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5544388}, "macro.dbt_utils.bigquery__date_trunc": {"unique_id": "macro.dbt_utils.bigquery__date_trunc", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) %}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5547118}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5558076}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5561638}, "macro.dbt_utils.bigquery__dateadd": {"unique_id": "macro.dbt_utils.bigquery__dateadd", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.556517}, "macro.dbt_utils.postgres__dateadd": {"unique_id": "macro.dbt_utils.postgres__dateadd", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5568607}, "macro.dbt_utils.redshift__dateadd": {"unique_id": "macro.dbt_utils.redshift__dateadd", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "redshift__dateadd", "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ return(dbt_utils.default__dateadd(datepart, interval, from_date_or_timestamp)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5572581}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5580616}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.55837}, "macro.dbt_utils.snowflake__safe_cast": {"unique_id": "macro.dbt_utils.snowflake__safe_cast", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5586374}, "macro.dbt_utils.bigquery__safe_cast": {"unique_id": "macro.dbt_utils.bigquery__safe_cast", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5588999}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5599544}, "macro.dbt_utils.default_last_day": {"unique_id": "macro.dbt_utils.default_last_day", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.560497}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5607934}, "macro.dbt_utils.postgres__last_day": {"unique_id": "macro.dbt_utils.postgres__last_day", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc", "macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5616071}, "macro.dbt_utils.redshift__last_day": {"unique_id": "macro.dbt_utils.redshift__last_day", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "redshift__last_day", "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n\n    {{ return(dbt_utils.default__last_day(date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5619602}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5626643}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.562876}, "macro.dbt_utils.redshift__length": {"unique_id": "macro.dbt_utils.redshift__length", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5630913}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__identifier"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5642376}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.564448}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5646503}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5652964}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.565543}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.56685}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.567006}, "macro.dbt_utils.redshift__type_string": {"unique_id": "macro.dbt_utils.redshift__type_string", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5671527}, "macro.dbt_utils.postgres__type_string": {"unique_id": "macro.dbt_utils.postgres__type_string", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5672956}, "macro.dbt_utils.snowflake__type_string": {"unique_id": "macro.dbt_utils.snowflake__type_string", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5674388}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5677583}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5679038}, "macro.dbt_utils.snowflake__type_timestamp": {"unique_id": "macro.dbt_utils.snowflake__type_timestamp", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5680501}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5683687}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.568514}, "macro.dbt_utils.bigquery__type_float": {"unique_id": "macro.dbt_utils.bigquery__type_float", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5686567}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.568981}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5691266}, "macro.dbt_utils.bigquery__type_numeric": {"unique_id": "macro.dbt_utils.bigquery__type_numeric", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5692694}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.569588}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.569733}, "macro.dbt_utils.bigquery__type_bigint": {"unique_id": "macro.dbt_utils.bigquery__type_bigint", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5699015}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5702655}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5704145}, "macro.dbt_utils.bigquery__type_int": {"unique_id": "macro.dbt_utils.bigquery__type_int", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.570649}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5716949}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.571922}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5720682}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5722108}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5725272}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.572748}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5730433}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5732656}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5735264}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5744922}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5747888}, "macro.dbt_utils.bigquery__right": {"unique_id": "macro.dbt_utils.bigquery__right", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.575114}, "macro.dbt_utils.snowflake__right": {"unique_id": "macro.dbt_utils.snowflake__right", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5754335}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_relation.sql", "original_file_path": "macros/cross_db_utils/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.576432}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5772064}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.577479}, "macro.dbt_utils.bigquery__position": {"unique_id": "macro.dbt_utils.bigquery__position", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.57775}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5785167}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5788596}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5795696}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5798542}, "macro.dbt_utils.redshift__cast_bool_to_text": {"unique_id": "macro.dbt_utils.redshift__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "redshift__cast_bool_to_text", "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5801167}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5808175}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5809655}, "macro.dbt_utils.bigquery__intersect": {"unique_id": "macro.dbt_utils.bigquery__intersect", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.581109}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5831196}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5841062}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.585061}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5854528}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5860913}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5862405}, "macro.dbt_utils.bigquery__except": {"unique_id": "macro.dbt_utils.bigquery__except", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.586386}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5870674}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5873485}, "macro.dbt_utils.bigquery__hash": {"unique_id": "macro.dbt_utils.bigquery__hash", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5876071}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5883994}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(\n                    dbt_utils.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5893598}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5902526}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.591607}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.592375}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5930536}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5944195}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n\n        {%- endif %}\n    {%- endfor %}\n\n    {%- for col in include_cols %}\n\n        {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }}\n        {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n\n    {%- endfor -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5967574}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5976338}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.5982172}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.6001296}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for v in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ v }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ v ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ v ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.601894}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.6026382}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.6033485}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.6059654}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.610339}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.6126778}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.6175756}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.6183767}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.619109}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.6207225}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.6213038}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.6224513}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.6241412}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.6255167}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.626368}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.6267443}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.62783}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.6290517}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.6308289}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.6319985}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.6339798}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.6355455}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.6367905}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.6373591}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.638097}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.6403353}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.6408536}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                case table_type\n                    when 'BASE TABLE' then 'table'\n                    else lower(table_type)\n                end as table_type\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.642314}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.6434069}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.6450875}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none) -%}\n{% if default is none %}\n    {% set default = [] %}\n{% endif %}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return(default) }}\n    {% endif %}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.6480057}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.6486866}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.6492615}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.6501632}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.6507392}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.6515698}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.652812}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.6540403}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.6558151}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.656477}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.6568148}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.6574852}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.6578772}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.6589687}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.6596076}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.6599593}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.6673298}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.668392}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.669056}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.6701188}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.6807714}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/expression_is_true.sql", "original_file_path": "macros/schema_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.6818466}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/expression_is_true.sql", "original_file_path": "macros/schema_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.6825006}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_accepted_values.sql", "original_file_path": "macros/schema_tests/not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.683585}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_accepted_values.sql", "original_file_path": "macros/schema_tests/not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.6843956}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/cardinality_equality.sql", "original_file_path": "macros/schema_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.6854439}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/cardinality_equality.sql", "original_file_path": "macros/schema_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.6861806}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/test_not_null_where.sql", "original_file_path": "macros/schema_tests/test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.6871014}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/test_not_null_where.sql", "original_file_path": "macros/schema_tests/test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.6874404}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/sequential_values.sql", "original_file_path": "macros/schema_tests/sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.688596}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/sequential_values.sql", "original_file_path": "macros/schema_tests/sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as previous_{{ column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, 'previous_' + column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = previous_{{ column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.689837}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_null_proportion.sql", "original_file_path": "macros/schema_tests/not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.690705}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_null_proportion.sql", "original_file_path": "macros/schema_tests/not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.6917868}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/recency.sql", "original_file_path": "macros/schema_tests/recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.6927187}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/recency.sql", "original_file_path": "macros/schema_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.6933985}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/accepted_range.sql", "original_file_path": "macros/schema_tests/accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.6946013}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/accepted_range.sql", "original_file_path": "macros/schema_tests/accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.6955924}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/schema_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.6996593}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/schema_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.7029874}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/equality.sql", "original_file_path": "macros/schema_tests/equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.704336}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/equality.sql", "original_file_path": "macros/schema_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.706272}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/relationships_where.sql", "original_file_path": "macros/schema_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.7074716}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/relationships_where.sql", "original_file_path": "macros/schema_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.7081866}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_constant.sql", "original_file_path": "macros/schema_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.7089124}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_constant.sql", "original_file_path": "macros/schema_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.709274}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/at_least_one.sql", "original_file_path": "macros/schema_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.7100096}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/at_least_one.sql", "original_file_path": "macros/schema_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.7103896}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/test_unique_where.sql", "original_file_path": "macros/schema_tests/test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.7113245}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/test_unique_where.sql", "original_file_path": "macros/schema_tests/test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.7116601}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/unique_combination_of_columns.sql", "original_file_path": "macros/schema_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.7128031}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/unique_combination_of_columns.sql", "original_file_path": "macros/schema_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.714187}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/fewer_rows_than.sql", "original_file_path": "macros/schema_tests/fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.7151804}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/fewer_rows_than.sql", "original_file_path": "macros/schema_tests/fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.715636}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/equal_rowcount.sql", "original_file_path": "macros/schema_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.7164538}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/equal_rowcount.sql", "original_file_path": "macros/schema_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643419469.7170613}}, "docs": {"project.__overview__": {"unique_id": "project.__overview__", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "overview.md", "original_file_path": "models/overview.md", "name": "__overview__", "block_contents": "# Ed-Fi data marts\n\nThe data marts and models found in this documentation largely reflect Ed-Fi's Analytics Middle Tier. There are some places where additional columns or entirely new data models were added. The documentation will always note when this is the case. This documentation should serve as a companion guide to Ed-Fi's [official documentation](https://techdocs.ed-fi.org/display/EDFITOOLS/AMT+User+Guide)."}, "project.fct_student_section_grades": {"unique_id": "project.fct_student_section_grades", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "marts/grades/grades.md", "original_file_path": "models/marts/grades/grades.md", "name": "fct_student_section_grades", "block_contents": "# Student section grades fact\n\nThis fact table can be found in Ed-Fi's Early Warning System collection. Here it is included in the grades data mart due to student grades being valuable in other places in addition to early warning systems.\n\nThis table contains a row per student per section per grading period per grade type.\n\n---------------------------\nDifferences from Ed-Fi AMT\n*"}, "project.fct_student_attendance": {"unique_id": "project.fct_student_attendance", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "marts/attendance/attendance.md", "original_file_path": "models/marts/attendance/attendance.md", "name": "fct_student_attendance", "block_contents": "# Student attendance fact\n\nGrain: one row per student per instructional day they hold an enrollment\n\nUsed for looking at a student's attendance per day. This fact table provides a row for each instructional day the student holds an enrollment up to the previous date.\n\n---------------------------\nDifferences from Ed-Fi AMT\n* Adds `event_duration` columns\n* Adds `school_attendance_event_category_descriptor` column"}, "project.dim_assessment": {"unique_id": "project.dim_assessment", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "marts/assessments/assessments.md", "original_file_path": "models/marts/assessments/assessments.md", "name": "dim_assessment", "block_contents": "# Assessments dim\n\n\n---------------------------\nDifferences from Ed-Fi AMT\n* Renames assessment fact table to be a dimension table"}, "project.fct_student_assessment": {"unique_id": "project.fct_student_assessment", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "marts/assessments/assessments.md", "original_file_path": "models/marts/assessments/assessments.md", "name": "fct_student_assessment", "block_contents": "# Student assessments fact\n\n\n---------------------------\nDifferences from Ed-Fi AMT\n* Removes student assessment fact key\n* Removes `student_assessment_fact_key`\n* Removes `student_objective_assessment_key`\n* Adds `assessment_family`\n* Adds `school_year`\n* Removes `student_school_key`"}, "project.dim_date": {"unique_id": "project.dim_date", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "marts/core/core.md", "original_file_path": "models/marts/core/core.md", "name": "dim_date", "block_contents": "# Date dim\n\nA date dimension table can be found in almost every dimensional model and allows the analytics engineer to look at student performance across different time periods. An explicit date dimension table can also help store date attributes that are not supported by a SQL date function (ie. month sort order in the context of a school year).\n\nThis dimension table notably lacks the date key found in Ed-Fi's Analytics Middle Tier. This is also counter to what Kimball tells us to do. Instead, fact tables found in the marts that include a date, use the DATE type. Kimball argues that if a fact table does this, it will cause folks to use SQL functions on that date to extract items like month name and avoid the join to the date dimension when they need to retrieve such information. You should use the date if you need the date and join on the date dimension if you need more.\n\n---------------------------\nDifferences from Ed-Fi AMT\n* Removes `date_key`\n* Adds `month_sort_order`"}, "project.dim_demographic": {"unique_id": "project.dim_demographic", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "marts/core/core.md", "original_file_path": "models/marts/core/core.md", "name": "dim_demographic", "block_contents": "# Demographic dim\n\nGrain: one row per descriptor parent key and descriptor\n\nThis table is usually joined to the student demographic bridge tables.\n\n---------------------------\nDifferences from Ed-Fi AMT\n* The descriptor's short description is used in place of code value for the demographic label\n* Renames `demographic_parent_key` to `demographic_parent`"}, "project.dim_grading_period": {"unique_id": "project.dim_grading_period", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "marts/core/core.md", "original_file_path": "models/marts/core/core.md", "name": "dim_grading_period", "block_contents": "# Grading period dim\n\nGrain: one row per school per grading period"}, "project.dim_local_education_agency": {"unique_id": "project.dim_local_education_agency", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "marts/core/core.md", "original_file_path": "models/marts/core/core.md", "name": "dim_local_education_agency", "block_contents": "# Local education agency dim\n\nGrain: one row per local education agency"}, "project.dim_school": {"unique_id": "project.dim_school", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "marts/core/core.md", "original_file_path": "models/marts/core/core.md", "name": "dim_school", "block_contents": "# School dim\n\nGrain: one row per school per school year"}, "project.dim_section": {"unique_id": "project.dim_section", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "marts/core/core.md", "original_file_path": "models/marts/core/core.md", "name": "dim_section", "block_contents": "# Section dim\n\nGrain: one row per section per school\n\n---------------------------\nDifferences from Ed-Fi AMT\n* Removes `description`\n* Adds `section_identifier` to allow for a natural key for section id"}, "project.dim_session": {"unique_id": "project.dim_session", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "marts/core/core.md", "original_file_path": "models/marts/core/core.md", "name": "dim_session", "block_contents": "# Session dim\n\nGrain: one row per school per session\n\n---------------------------\nDifferences from Ed-Fi AMT\n* Adds `total_instructional_days`\n* Adds `session_begin_date`\n* Adds `session_end_date`"}, "project.dim_student": {"unique_id": "project.dim_student", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "marts/core/core.md", "original_file_path": "models/marts/core/core.md", "name": "dim_student", "block_contents": "# Student dim\n\nGrain: one record per student\n\nEd-Fi's Analytics Middle Tier provides two student dims related to the student's LEA association and the student's school association. This dim combines those two dims to provide one student dim that can be used downstream. If a student has multiple school enrollments, only their most recent will show in this dim."}, "project.dim_student_section": {"unique_id": "project.dim_student_section", "package_name": "project", "root_path": "/workspaces/dagster-edfi-api-to-bq-amt/project_dbt", "path": "marts/core/core.md", "original_file_path": "models/marts/core/core.md", "name": "dim_student_section", "block_contents": "# Student section dim\n\nGrain: `dim_student_section` has one record per student section per section enrollment. The `teacher_name` field is a concatenation of all teachers currently assigned to the class section.\n\n---------------------------\nDifferences from Ed-Fi AMT\n* Renames `subject` to `academic_subject`\n* Adds `session_key` to enable join between student section dim and session dim"}, "dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.project.rls_student_data_authorization": ["model.project.stg_edfi_sections", "model.project.stg_edfi_student_section_associations"], "model.project.rls_user_authorization": ["model.project.stg_edfi_sections", "model.project.stg_edfi_staff_education_organization_assignment_associations", "model.project.stg_edfi_staff_section_associations"], "model.project.rls_dim_user": ["model.project.stg_edfi_staffs"], "model.project.rls_user_student_data_authorization": ["model.project.stg_edfi_schools", "model.project.stg_edfi_staff_education_organization_assignment_associations", "model.project.stg_edfi_staff_education_organization_assignment_associations", "model.project.stg_edfi_staff_education_organization_assignment_associations", "model.project.stg_edfi_staff_section_associations", "model.project.stg_edfi_student_school_associations", "model.project.stg_edfi_student_school_associations", "model.project.stg_edfi_student_section_associations"], "model.project.rls_user_school_authorization": ["model.project.stg_edfi_staff_school_associations", "model.project.stg_edfi_staffs"], "model.project.rpt_student_section_grade": ["model.project.dim_grading_period", "model.project.dim_local_education_agency", "model.project.dim_school", "model.project.dim_section", "model.project.dim_session", "model.project.dim_student", "model.project.dim_student_section", "model.project.fct_student_section_grade"], "model.project.fct_student_section_grade": ["model.project.stg_edfi_descriptors", "model.project.stg_edfi_grades"], "model.project.rpt_student_attendance": ["model.project.dim_date", "model.project.dim_local_education_agency", "model.project.dim_school", "model.project.dim_student", "model.project.fct_student_attendance"], "model.project.fct_student_attendance": ["model.project.stg_edfi_calendar_dates", "model.project.stg_edfi_student_school_associations", "model.project.stg_edfi_student_school_attendance_events", "model.project.stg_edfi_student_section_associations", "model.project.stg_edfi_student_section_attendance_events", "model.project.stg_edfi_students"], "model.project.rpt_student_assessment": ["model.project.dim_assessment", "model.project.dim_objective_assessment", "model.project.dim_school", "model.project.dim_student", "model.project.fct_student_assessment", "model.project.fct_student_assessment", "model.project.fct_student_assessment"], "model.project.fct_student_assessment": ["model.project.stg_edfi_student_assessments", "model.project.stg_edfi_student_assessments", "model.project.stg_edfi_student_assessments", "model.project.stg_edfi_student_assessments", "model.project.stg_edfi_student_school_associations", "model.project.stg_edfi_student_school_associations", "model.project.stg_edfi_student_school_associations", "model.project.stg_edfi_student_school_associations"], "model.project.dim_assessment": ["model.project.stg_edfi_assessments"], "model.project.dim_objective_assessment": ["model.project.stg_edfi_assessments", "model.project.stg_edfi_objective_assessments"], "model.project.fct_student_school": ["model.project.stg_edfi_calendar_dates", "model.project.stg_edfi_schools", "model.project.stg_edfi_student_school_associations"], "model.project.dim_student_section": ["model.project.stg_edfi_course_offerings", "model.project.stg_edfi_courses", "model.project.stg_edfi_staff_section_associations", "model.project.stg_edfi_staffs", "model.project.stg_edfi_student_section_associations"], "model.project.student_local_education_agency_demographics_bridge": ["model.project.stg_edfi_schools", "model.project.stg_edfi_student_education_organization_associations", "model.project.stg_edfi_student_education_organization_associations", "model.project.stg_edfi_student_education_organization_associations", "model.project.stg_edfi_student_education_organization_associations", "model.project.stg_edfi_student_school_associations"], "model.project.dim_date": ["model.project.stg_edfi_calendar_dates"], "model.project.dim_student_program": ["model.project.stg_edfi_programs", "model.project.stg_edfi_student_special_education_program_associations"], "model.project.dim_grading_period": ["model.project.stg_edfi_grades", "model.project.stg_edfi_grading_periods", "model.project.stg_edfi_grading_periods", "model.project.stg_edfi_school_year_types", "model.project.stg_edfi_sessions"], "model.project.dim_school": ["model.project.stg_edfi_local_education_agencies", "model.project.stg_edfi_schools"], "model.project.dim_local_education_agency": ["model.project.stg_edfi_local_education_agencies"], "model.project.dim_section": ["model.project.stg_edfi_course_offerings", "model.project.stg_edfi_courses", "model.project.stg_edfi_schools", "model.project.stg_edfi_sections", "model.project.stg_edfi_sessions"], "model.project.dim_session": ["model.project.stg_edfi_school_year_types", "model.project.stg_edfi_sessions"], "model.project.dim_demographic": ["model.project.stg_edfi_descriptors", "model.project.stg_edfi_descriptors", "model.project.stg_edfi_descriptors", "model.project.stg_edfi_descriptors", "model.project.stg_edfi_school_year_types"], "model.project.dim_student": ["model.project.stg_edfi_programs", "model.project.stg_edfi_sessions", "model.project.stg_edfi_student_education_organization_associations", "model.project.stg_edfi_student_school_associations", "model.project.stg_edfi_student_school_associations", "model.project.stg_edfi_student_special_education_program_associations", "model.project.stg_edfi_students"], "model.project.is_chronically_absent": ["model.project.dim_local_education_agency", "model.project.dim_school", "model.project.dim_student", "model.project.fct_student_attendance"], "model.project.current_gpa": ["model.project.rpt_student_section_grade"], "model.project.stg_edfi_objective_assessments": ["model.project.stg_edfi_deletes", "source.project.staging.base_edfi_objective_assessments"], "model.project.stg_edfi_assessments": ["model.project.stg_edfi_deletes", "source.project.staging.base_edfi_assessments"], "model.project.stg_edfi_school_year_types": ["source.project.staging.base_edfi_school_year_types"], "model.project.stg_edfi_staff_school_associations": ["model.project.stg_edfi_deletes", "source.project.staging.base_edfi_staff_school_associations"], "model.project.stg_edfi_parents": ["model.project.stg_edfi_deletes", "source.project.staging.base_edfi_parents"], "model.project.stg_edfi_student_education_organization_associations": ["model.project.stg_edfi_deletes", "source.project.staging.base_edfi_student_education_organization_associations"], "model.project.stg_edfi_courses": ["model.project.stg_edfi_deletes", "source.project.staging.base_edfi_courses"], "model.project.stg_edfi_sessions": ["model.project.stg_edfi_deletes", "source.project.staging.base_edfi_sessions"], "model.project.stg_edfi_student_parent_associations": ["model.project.stg_edfi_deletes", "source.project.staging.base_edfi_student_parent_associations"], "model.project.stg_edfi_student_section_associations": ["model.project.stg_edfi_deletes", "source.project.staging.base_edfi_student_section_associations"], "model.project.stg_edfi_student_section_attendance_events": ["model.project.stg_edfi_deletes", "source.project.staging.base_edfi_student_section_attendance_events"], "model.project.stg_edfi_grades": ["model.project.stg_edfi_deletes", "source.project.staging.base_edfi_grades"], "model.project.stg_edfi_course_offerings": ["model.project.stg_edfi_deletes", "source.project.staging.base_edfi_course_offerings"], "model.project.stg_edfi_grading_periods": ["model.project.stg_edfi_deletes", "source.project.staging.base_edfi_grading_periods"], "model.project.stg_edfi_programs": ["model.project.stg_edfi_deletes", "source.project.staging.base_edfi_programs"], "model.project.stg_edfi_student_school_attendance_events": ["model.project.stg_edfi_deletes", "source.project.staging.base_edfi_student_school_attendance_events"], "model.project.stg_edfi_local_education_agencies": ["model.project.stg_edfi_deletes", "source.project.staging.base_edfi_local_education_agencies"], "model.project.stg_edfi_staff_education_organization_assignment_associations": ["model.project.stg_edfi_deletes", "source.project.staging.base_edfi_staff_education_organization_assignment_associations"], "model.project.stg_edfi_discipline_incidents": ["model.project.stg_edfi_deletes", "source.project.staging.base_edfi_discipline_incidents"], "model.project.stg_edfi_student_school_associations": ["model.project.stg_edfi_deletes", "source.project.staging.base_edfi_student_school_associations"], "model.project.stg_edfi_student_special_education_program_associations": ["model.project.stg_edfi_deletes", "source.project.staging.base_edfi_student_special_education_program_associations"], "model.project.stg_edfi_calendar_dates": ["model.project.stg_edfi_deletes", "source.project.staging.base_edfi_calendar_dates"], "model.project.stg_edfi_schools": ["model.project.stg_edfi_deletes", "source.project.staging.base_edfi_schools"], "model.project.stg_edfi_staff_section_associations": ["model.project.stg_edfi_deletes", "source.project.staging.base_edfi_staff_section_associations"], "model.project.stg_edfi_student_assessments": ["model.project.stg_edfi_deletes", "source.project.staging.base_edfi_student_assessments"], "model.project.stg_edfi_deletes": ["source.project.staging.base_edfi_assessments_deletes", "source.project.staging.base_edfi_calendar_dates_deletes", "source.project.staging.base_edfi_calendars_deletes", "source.project.staging.base_edfi_calendars_deletes", "source.project.staging.base_edfi_cohort_type_descriptors_deletes", "source.project.staging.base_edfi_course_offerings_deletes", "source.project.staging.base_edfi_courses_deletes", "source.project.staging.base_edfi_disability_descriptors_deletes", "source.project.staging.base_edfi_discipline_actions_deletes", "source.project.staging.base_edfi_discipline_incident_deletes", "source.project.staging.base_edfi_grades_deletes", "source.project.staging.base_edfi_grading_periods_deletes", "source.project.staging.base_edfi_language_descriptors_deletes", "source.project.staging.base_edfi_language_use_descriptors_deletes", "source.project.staging.base_edfi_local_education_agencies_deletes", "source.project.staging.base_edfi_objective_assessments_deletes", "source.project.staging.base_edfi_parents_deletes", "source.project.staging.base_edfi_programs_deletes", "source.project.staging.base_edfi_race_descriptors_deletes", "source.project.staging.base_edfi_schools_deletes", "source.project.staging.base_edfi_sections_deletes", "source.project.staging.base_edfi_sessions_deletes", "source.project.staging.base_edfi_staff_discipline_incident_associations_deletes", "source.project.staging.base_edfi_staff_education_organization_assignment_associations_deletes", "source.project.staging.base_edfi_staff_school_associations_deletes", "source.project.staging.base_edfi_staff_section_associations_deletes", "source.project.staging.base_edfi_staffs_deletes", "source.project.staging.base_edfi_student_assessments_deletes", "source.project.staging.base_edfi_student_discipline_incident_associations_deletes", "source.project.staging.base_edfi_student_education_organization_associations_deletes", "source.project.staging.base_edfi_student_parent_associations_deletes", "source.project.staging.base_edfi_student_program_associations_deletes", "source.project.staging.base_edfi_student_school_associations_deletes", "source.project.staging.base_edfi_student_school_attendance_events_deletes", "source.project.staging.base_edfi_student_section_associations_deletes", "source.project.staging.base_edfi_student_section_attendance_events_deletes", "source.project.staging.base_edfi_student_special_education_program_associations_deletes", "source.project.staging.base_edfi_students_deletes"], "model.project.stg_edfi_descriptors": ["model.project.stg_edfi_deletes", "source.project.staging.base_edfi_cohort_type_descriptors", "source.project.staging.base_edfi_disability_descriptors", "source.project.staging.base_edfi_grading_period_descriptors", "source.project.staging.base_edfi_language_descriptors", "source.project.staging.base_edfi_language_use_descriptors", "source.project.staging.base_edfi_race_descriptors"], "model.project.stg_edfi_sections": ["model.project.stg_edfi_deletes", "source.project.staging.base_edfi_sections"], "model.project.stg_edfi_student_program_associations": ["model.project.stg_edfi_deletes", "source.project.staging.base_edfi_student_program_associations"], "model.project.stg_edfi_students": ["model.project.stg_edfi_deletes", "source.project.staging.base_edfi_students"], "model.project.stg_edfi_calendars": ["model.project.stg_edfi_deletes", "source.project.staging.base_edfi_calendars"], "model.project.stg_edfi_staffs": ["model.project.stg_edfi_deletes", "source.project.staging.base_edfi_staffs"], "model.project.stg_edfi_student_discipline_incident_associations": ["model.project.stg_edfi_deletes", "source.project.staging.base_edfi_student_discipline_incident_associations"], "test.project.not_null_fct_student_section_grade_student_key.cc4059fd96": ["model.project.fct_student_section_grade"], "test.project.relationships_fct_student_section_grade_student_section_key__student_section_key__ref_dim_student_section_.4e7c6c131b": ["model.project.dim_student_section", "model.project.fct_student_section_grade"], "test.project.not_null_fct_student_section_grade_letter_grade_earned.14c0fe6021": ["model.project.fct_student_section_grade"], "test.project.dbt_utils_expression_is_true_fct_student_section_grade_numeric_grade_earned_0.144140aea3": ["model.project.fct_student_section_grade"], "test.project.relationships_fct_student_attendance_student_key__student_key__ref_dim_student_.902b20eb5a": ["model.project.dim_student", "model.project.fct_student_attendance"], "test.project.relationships_fct_student_attendance_school_key__school_key__ref_dim_school_.a425d4b0e7": ["model.project.dim_school", "model.project.fct_student_attendance"], "test.project.not_null_fct_student_attendance_school_year.c69c139be1": ["model.project.fct_student_attendance"], "test.project.not_null_fct_student_attendance_date.1c7057eb63": ["model.project.fct_student_attendance"], "test.project.not_null_fct_student_attendance_school_attendance_event_category_descriptor.be3ab06fa8": ["model.project.fct_student_attendance"], "test.project.not_null_fct_student_attendance_event_duration.7405fc5f51": ["model.project.fct_student_attendance"], "test.project.unique_dim_assessment_assessment_key.d45cb819a0": ["model.project.dim_assessment"], "test.project.not_null_dim_assessment_assessment_key.1ee4792dcf": ["model.project.dim_assessment"], "test.project.not_null_dim_assessment_education_organization_key.e46eded9e2": ["model.project.dim_assessment"], "test.project.not_null_dim_assessment_school_year.6f50975711": ["model.project.dim_assessment"], "test.project.not_null_dim_assessment_assessment_identifier.b01a1c84ef": ["model.project.dim_assessment"], "test.project.unique_dim_objective_assessment_objective_assessment_key.2a65565afd": ["model.project.dim_objective_assessment"], "test.project.not_null_dim_objective_assessment_objective_assessment_key.84f09a79e9": ["model.project.dim_objective_assessment"], "test.project.relationships_dim_objective_assessment_assessment_key__assessment_key__ref_dim_assessment_.1c513df798": ["model.project.dim_assessment", "model.project.dim_objective_assessment"], "test.project.not_null_dim_objective_assessment_school_year.1ccf2c65ef": ["model.project.dim_objective_assessment"], "test.project.not_null_dim_objective_assessment_identification_code.6e10638e4d": ["model.project.dim_objective_assessment"], "test.project.relationships_fct_student_assessment_assessment_key__assessment_key__ref_dim_assessment_.fb7625afbd": ["model.project.dim_assessment", "model.project.fct_student_assessment"], "test.project.relationships_fct_student_assessment_student_key__student_key__ref_dim_student_.505c0cae72": ["model.project.dim_student", "model.project.fct_student_assessment"], "test.project.relationships_fct_student_assessment_school_key__school_key__ref_dim_school_.6d4121ee49": ["model.project.dim_school", "model.project.fct_student_assessment"], "test.project.not_null_fct_student_assessment_school_year.d353cc4178": ["model.project.fct_student_assessment"], "test.project.not_null_fct_student_assessment_student_assessment_identifier.bf72913748": ["model.project.fct_student_assessment"], "test.project.unique_dim_date_date.dd069a8d31": ["model.project.dim_date"], "test.project.not_null_dim_date_date.78f11e7735": ["model.project.dim_date"], "test.project.unique_dim_demographic_demographic_key.8c19c8ca9d": ["model.project.dim_demographic"], "test.project.not_null_dim_demographic_demographic_key.9faec00ba3": ["model.project.dim_demographic"], "test.project.not_null_dim_demographic_demographic_parent.eb525b15a9": ["model.project.dim_demographic"], "test.project.not_null_dim_demographic_demographic_label.042df09cff": ["model.project.dim_demographic"], "test.project.unique_dim_grading_period_grading_period_key.2c941ffbec": ["model.project.dim_grading_period"], "test.project.not_null_dim_grading_period_grading_period_key.a9c6847f9d": ["model.project.dim_grading_period"], "test.project.relationships_dim_grading_period_school_key__school_key__ref_dim_school_.fff5503f34": ["model.project.dim_grading_period", "model.project.dim_school"], "test.project.unique_dim_local_education_agency_local_education_agency_key.2cf2d58a69": ["model.project.dim_local_education_agency"], "test.project.not_null_dim_local_education_agency_local_education_agency_key.3f6251750d": ["model.project.dim_local_education_agency"], "test.project.unique_dim_local_education_agency_local_education_agency_id.1a30878627": ["model.project.dim_local_education_agency"], "test.project.not_null_dim_local_education_agency_local_education_agency_id.6ba737bcd9": ["model.project.dim_local_education_agency"], "test.project.unique_dim_school_school_key.64ec309207": ["model.project.dim_school"], "test.project.not_null_dim_school_school_key.209ee6078e": ["model.project.dim_school"], "test.project.relationships_dim_school_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.c40f28107b": ["model.project.dim_local_education_agency", "model.project.dim_school"], "test.project.unique_dim_school_school_id.d10cafcd76": ["model.project.dim_school"], "test.project.not_null_dim_school_school_id.36d55ce30b": ["model.project.dim_school"], "test.project.unique_dim_section_section_key.4b442b173b": ["model.project.dim_section"], "test.project.not_null_dim_section_section_key.d763cc8042": ["model.project.dim_section"], "test.project.relationships_dim_section_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.1c63a4fa13": ["model.project.dim_local_education_agency", "model.project.dim_section"], "test.project.relationships_dim_section_school_key__school_key__ref_dim_school_.b29c32ae93": ["model.project.dim_school", "model.project.dim_section"], "test.project.relationships_dim_section_session_key__session_key__ref_dim_session_.5fcf678cd6": ["model.project.dim_section", "model.project.dim_session"], "test.project.not_null_dim_section_section_identifier.5aa4059a37": ["model.project.dim_section"], "test.project.unique_dim_session_session_key.b5230e3fd3": ["model.project.dim_session"], "test.project.not_null_dim_session_session_key.2c2f8e6dac": ["model.project.dim_session"], "test.project.relationships_dim_session_school_key__school_key__ref_dim_school_.d4064049b7": ["model.project.dim_school", "model.project.dim_session"], "test.project.unique_dim_student_student_key.45ef646b54": ["model.project.dim_student"], "test.project.not_null_dim_student_student_key.67ab09a6e6": ["model.project.dim_student"], "test.project.not_null_dim_student_school_year.cb1c50e460": ["model.project.dim_student"], "test.project.not_null_dim_student_student_unique_id.8a392fc4ab": ["model.project.dim_student"], "test.project.not_null_dim_student_student_last_surname.329ae57d5b": ["model.project.dim_student"], "test.project.not_null_dim_student_student_first_name.f007907dff": ["model.project.dim_student"], "test.project.not_null_dim_student_is_english_language_learner.55a5cd929d": ["model.project.dim_student"], "test.project.accepted_values_dim_student_is_english_language_learner__Yes__No.d5a7434ec1": ["model.project.dim_student"], "test.project.not_null_dim_student_in_special_education_program.f8695e7bf3": ["model.project.dim_student"], "test.project.accepted_values_dim_student_in_special_education_program__Yes__No.7a967caab1": ["model.project.dim_student"], "test.project.not_null_dim_student_is_hispanic.2f36046142": ["model.project.dim_student"], "test.project.accepted_values_dim_student_is_hispanic__Yes__No.28cf24b221": ["model.project.dim_student"], "test.project.unique_student_local_education_agency_demographics_bridge_student_school_demographic_bridge_key.f8f8da40b7": ["model.project.student_local_education_agency_demographics_bridge"], "test.project.not_null_student_local_education_agency_demographics_bridge_student_school_demographic_bridge_key.751a8efb0e": ["model.project.student_local_education_agency_demographics_bridge"], "test.project.relationships_fct_student_school_student_key__student_key__ref_dim_student_.ce63ab9df5": ["model.project.dim_student", "model.project.fct_student_school"], "test.project.relationships_fct_student_school_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.bdd6a57ac4": ["model.project.dim_local_education_agency", "model.project.fct_student_school"], "test.project.relationships_fct_student_school_school_key__school_key__ref_dim_school_.7a675bb6ae": ["model.project.dim_school", "model.project.fct_student_school"], "test.project.unique_stg_edfi_local_education_agencies_CONCAT_school_year_local_education_agency_id_.68cfccff4d": ["model.project.stg_edfi_local_education_agencies"], "test.project.unique_stg_edfi_schools_school_year_school_id.e463495cb1": ["model.project.stg_edfi_schools"], "test.project.unique_stg_edfi_students_school_year_student_unique_id.3a33c30a48": ["model.project.stg_edfi_students"], "source.project.staging.base_edfi_assessments": [], "source.project.staging.base_edfi_assessments_deletes": [], "source.project.staging.base_edfi_calendars": [], "source.project.staging.base_edfi_calendars_deletes": [], "source.project.staging.base_edfi_calendar_dates": [], "source.project.staging.base_edfi_calendar_dates_deletes": [], "source.project.staging.base_edfi_courses": [], "source.project.staging.base_edfi_courses_deletes": [], "source.project.staging.base_edfi_course_offerings": [], "source.project.staging.base_edfi_course_offerings_deletes": [], "source.project.staging.base_edfi_discipline_actions": [], "source.project.staging.base_edfi_discipline_actions_deletes": [], "source.project.staging.base_edfi_discipline_incidents": [], "source.project.staging.base_edfi_discipline_incident_deletes": [], "source.project.staging.base_edfi_grading_periods": [], "source.project.staging.base_edfi_grading_periods_deletes": [], "source.project.staging.base_edfi_grading_period_descriptors": [], "source.project.staging.base_edfi_grades": [], "source.project.staging.base_edfi_grades_deletes": [], "source.project.staging.base_edfi_local_education_agencies": [], "source.project.staging.base_edfi_local_education_agencies_deletes": [], "source.project.staging.base_edfi_objective_assessments": [], "source.project.staging.base_edfi_objective_assessments_deletes": [], "source.project.staging.base_edfi_parents": [], "source.project.staging.base_edfi_parents_deletes": [], "source.project.staging.base_edfi_programs": [], "source.project.staging.base_edfi_programs_deletes": [], "source.project.staging.base_edfi_schools": [], "source.project.staging.base_edfi_schools_deletes": [], "source.project.staging.base_edfi_school_year_types": [], "source.project.staging.base_edfi_sections": [], "source.project.staging.base_edfi_sections_deletes": [], "source.project.staging.base_edfi_sessions": [], "source.project.staging.base_edfi_sessions_deletes": [], "source.project.staging.base_edfi_staffs": [], "source.project.staging.base_edfi_staffs_deletes": [], "source.project.staging.base_edfi_staff_discipline_incident_associations": [], "source.project.staging.base_edfi_staff_discipline_incident_associations_deletes": [], "source.project.staging.base_edfi_staff_education_organization_assignment_associations": [], "source.project.staging.base_edfi_staff_education_organization_assignment_associations_deletes": [], "source.project.staging.base_edfi_staff_school_associations": [], "source.project.staging.base_edfi_staff_school_associations_deletes": [], "source.project.staging.base_edfi_staff_section_associations": [], "source.project.staging.base_edfi_staff_section_associations_deletes": [], "source.project.staging.base_edfi_students": [], "source.project.staging.base_edfi_students_deletes": [], "source.project.staging.base_edfi_student_assessments": [], "source.project.staging.base_edfi_student_assessments_deletes": [], "source.project.staging.base_edfi_student_discipline_incident_associations": [], "source.project.staging.base_edfi_student_discipline_incident_associations_deletes": [], "source.project.staging.base_edfi_student_education_organization_associations": [], "source.project.staging.base_edfi_student_education_organization_associations_deletes": [], "source.project.staging.base_edfi_student_parent_associations": [], "source.project.staging.base_edfi_student_parent_associations_deletes": [], "source.project.staging.base_edfi_student_program_associations": [], "source.project.staging.base_edfi_student_program_associations_deletes": [], "source.project.staging.base_edfi_student_school_associations": [], "source.project.staging.base_edfi_student_school_associations_deletes": [], "source.project.staging.base_edfi_student_school_attendance_events": [], "source.project.staging.base_edfi_student_school_attendance_events_deletes": [], "source.project.staging.base_edfi_student_section_associations": [], "source.project.staging.base_edfi_student_section_associations_deletes": [], "source.project.staging.base_edfi_student_section_attendance_events": [], "source.project.staging.base_edfi_student_section_attendance_events_deletes": [], "source.project.staging.base_edfi_student_special_education_program_associations": [], "source.project.staging.base_edfi_student_special_education_program_associations_deletes": [], "source.project.staging.base_edfi_cohort_type_descriptors": [], "source.project.staging.base_edfi_cohort_type_descriptors_deletes": [], "source.project.staging.base_edfi_disability_descriptors": [], "source.project.staging.base_edfi_disability_descriptors_deletes": [], "source.project.staging.base_edfi_language_descriptors": [], "source.project.staging.base_edfi_language_descriptors_deletes": [], "source.project.staging.base_edfi_language_use_descriptors": [], "source.project.staging.base_edfi_language_use_descriptors_deletes": [], "source.project.staging.base_edfi_race_descriptors": [], "source.project.staging.base_edfi_race_descriptors_deletes": []}, "child_map": {"model.project.rls_student_data_authorization": [], "model.project.rls_user_authorization": [], "model.project.rls_dim_user": [], "model.project.rls_user_student_data_authorization": [], "model.project.rls_user_school_authorization": [], "model.project.rpt_student_section_grade": ["model.project.current_gpa"], "model.project.fct_student_section_grade": ["model.project.rpt_student_section_grade", "test.project.dbt_utils_expression_is_true_fct_student_section_grade_numeric_grade_earned_0.144140aea3", "test.project.not_null_fct_student_section_grade_letter_grade_earned.14c0fe6021", "test.project.not_null_fct_student_section_grade_student_key.cc4059fd96", "test.project.relationships_fct_student_section_grade_student_section_key__student_section_key__ref_dim_student_section_.4e7c6c131b"], "model.project.rpt_student_attendance": [], "model.project.fct_student_attendance": ["model.project.is_chronically_absent", "model.project.rpt_student_attendance", "test.project.not_null_fct_student_attendance_date.1c7057eb63", "test.project.not_null_fct_student_attendance_event_duration.7405fc5f51", "test.project.not_null_fct_student_attendance_school_attendance_event_category_descriptor.be3ab06fa8", "test.project.not_null_fct_student_attendance_school_year.c69c139be1", "test.project.relationships_fct_student_attendance_school_key__school_key__ref_dim_school_.a425d4b0e7", "test.project.relationships_fct_student_attendance_student_key__student_key__ref_dim_student_.902b20eb5a"], "model.project.rpt_student_assessment": [], "model.project.fct_student_assessment": ["model.project.rpt_student_assessment", "model.project.rpt_student_assessment", "model.project.rpt_student_assessment", "test.project.not_null_fct_student_assessment_school_year.d353cc4178", "test.project.not_null_fct_student_assessment_student_assessment_identifier.bf72913748", "test.project.relationships_fct_student_assessment_assessment_key__assessment_key__ref_dim_assessment_.fb7625afbd", "test.project.relationships_fct_student_assessment_school_key__school_key__ref_dim_school_.6d4121ee49", "test.project.relationships_fct_student_assessment_student_key__student_key__ref_dim_student_.505c0cae72"], "model.project.dim_assessment": ["model.project.rpt_student_assessment", "test.project.not_null_dim_assessment_assessment_identifier.b01a1c84ef", "test.project.not_null_dim_assessment_assessment_key.1ee4792dcf", "test.project.not_null_dim_assessment_education_organization_key.e46eded9e2", "test.project.not_null_dim_assessment_school_year.6f50975711", "test.project.relationships_dim_objective_assessment_assessment_key__assessment_key__ref_dim_assessment_.1c513df798", "test.project.relationships_fct_student_assessment_assessment_key__assessment_key__ref_dim_assessment_.fb7625afbd", "test.project.unique_dim_assessment_assessment_key.d45cb819a0"], "model.project.dim_objective_assessment": ["model.project.rpt_student_assessment", "test.project.not_null_dim_objective_assessment_identification_code.6e10638e4d", "test.project.not_null_dim_objective_assessment_objective_assessment_key.84f09a79e9", "test.project.not_null_dim_objective_assessment_school_year.1ccf2c65ef", "test.project.relationships_dim_objective_assessment_assessment_key__assessment_key__ref_dim_assessment_.1c513df798", "test.project.unique_dim_objective_assessment_objective_assessment_key.2a65565afd"], "model.project.fct_student_school": ["test.project.relationships_fct_student_school_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.bdd6a57ac4", "test.project.relationships_fct_student_school_school_key__school_key__ref_dim_school_.7a675bb6ae", "test.project.relationships_fct_student_school_student_key__student_key__ref_dim_student_.ce63ab9df5"], "model.project.dim_student_section": ["model.project.rpt_student_section_grade", "test.project.relationships_fct_student_section_grade_student_section_key__student_section_key__ref_dim_student_section_.4e7c6c131b"], "model.project.student_local_education_agency_demographics_bridge": ["test.project.not_null_student_local_education_agency_demographics_bridge_student_school_demographic_bridge_key.751a8efb0e", "test.project.unique_student_local_education_agency_demographics_bridge_student_school_demographic_bridge_key.f8f8da40b7"], "model.project.dim_date": ["model.project.rpt_student_attendance", "test.project.not_null_dim_date_date.78f11e7735", "test.project.unique_dim_date_date.dd069a8d31"], "model.project.dim_student_program": [], "model.project.dim_grading_period": ["model.project.rpt_student_section_grade", "test.project.not_null_dim_grading_period_grading_period_key.a9c6847f9d", "test.project.relationships_dim_grading_period_school_key__school_key__ref_dim_school_.fff5503f34", "test.project.unique_dim_grading_period_grading_period_key.2c941ffbec"], "model.project.dim_school": ["model.project.is_chronically_absent", "model.project.rpt_student_assessment", "model.project.rpt_student_attendance", "model.project.rpt_student_section_grade", "test.project.not_null_dim_school_school_id.36d55ce30b", "test.project.not_null_dim_school_school_key.209ee6078e", "test.project.relationships_dim_grading_period_school_key__school_key__ref_dim_school_.fff5503f34", "test.project.relationships_dim_school_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.c40f28107b", "test.project.relationships_dim_section_school_key__school_key__ref_dim_school_.b29c32ae93", "test.project.relationships_dim_session_school_key__school_key__ref_dim_school_.d4064049b7", "test.project.relationships_fct_student_assessment_school_key__school_key__ref_dim_school_.6d4121ee49", "test.project.relationships_fct_student_attendance_school_key__school_key__ref_dim_school_.a425d4b0e7", "test.project.relationships_fct_student_school_school_key__school_key__ref_dim_school_.7a675bb6ae", "test.project.unique_dim_school_school_id.d10cafcd76", "test.project.unique_dim_school_school_key.64ec309207"], "model.project.dim_local_education_agency": ["model.project.is_chronically_absent", "model.project.rpt_student_attendance", "model.project.rpt_student_section_grade", "test.project.not_null_dim_local_education_agency_local_education_agency_id.6ba737bcd9", "test.project.not_null_dim_local_education_agency_local_education_agency_key.3f6251750d", "test.project.relationships_dim_school_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.c40f28107b", "test.project.relationships_dim_section_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.1c63a4fa13", "test.project.relationships_fct_student_school_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.bdd6a57ac4", "test.project.unique_dim_local_education_agency_local_education_agency_id.1a30878627", "test.project.unique_dim_local_education_agency_local_education_agency_key.2cf2d58a69"], "model.project.dim_section": ["model.project.rpt_student_section_grade", "test.project.not_null_dim_section_section_identifier.5aa4059a37", "test.project.not_null_dim_section_section_key.d763cc8042", "test.project.relationships_dim_section_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.1c63a4fa13", "test.project.relationships_dim_section_school_key__school_key__ref_dim_school_.b29c32ae93", "test.project.relationships_dim_section_session_key__session_key__ref_dim_session_.5fcf678cd6", "test.project.unique_dim_section_section_key.4b442b173b"], "model.project.dim_session": ["model.project.rpt_student_section_grade", "test.project.not_null_dim_session_session_key.2c2f8e6dac", "test.project.relationships_dim_section_session_key__session_key__ref_dim_session_.5fcf678cd6", "test.project.relationships_dim_session_school_key__school_key__ref_dim_school_.d4064049b7", "test.project.unique_dim_session_session_key.b5230e3fd3"], "model.project.dim_demographic": ["test.project.not_null_dim_demographic_demographic_key.9faec00ba3", "test.project.not_null_dim_demographic_demographic_label.042df09cff", "test.project.not_null_dim_demographic_demographic_parent.eb525b15a9", "test.project.unique_dim_demographic_demographic_key.8c19c8ca9d"], "model.project.dim_student": ["model.project.is_chronically_absent", "model.project.rpt_student_assessment", "model.project.rpt_student_attendance", "model.project.rpt_student_section_grade", "test.project.accepted_values_dim_student_in_special_education_program__Yes__No.7a967caab1", "test.project.accepted_values_dim_student_is_english_language_learner__Yes__No.d5a7434ec1", "test.project.accepted_values_dim_student_is_hispanic__Yes__No.28cf24b221", "test.project.not_null_dim_student_in_special_education_program.f8695e7bf3", "test.project.not_null_dim_student_is_english_language_learner.55a5cd929d", "test.project.not_null_dim_student_is_hispanic.2f36046142", "test.project.not_null_dim_student_school_year.cb1c50e460", "test.project.not_null_dim_student_student_first_name.f007907dff", "test.project.not_null_dim_student_student_key.67ab09a6e6", "test.project.not_null_dim_student_student_last_surname.329ae57d5b", "test.project.not_null_dim_student_student_unique_id.8a392fc4ab", "test.project.relationships_fct_student_assessment_student_key__student_key__ref_dim_student_.505c0cae72", "test.project.relationships_fct_student_attendance_student_key__student_key__ref_dim_student_.902b20eb5a", "test.project.relationships_fct_student_school_student_key__student_key__ref_dim_student_.ce63ab9df5", "test.project.unique_dim_student_student_key.45ef646b54"], "model.project.is_chronically_absent": [], "model.project.current_gpa": [], "model.project.stg_edfi_objective_assessments": ["model.project.dim_objective_assessment"], "model.project.stg_edfi_assessments": ["model.project.dim_assessment", "model.project.dim_objective_assessment"], "model.project.stg_edfi_school_year_types": ["model.project.dim_demographic", "model.project.dim_grading_period", "model.project.dim_session"], "model.project.stg_edfi_staff_school_associations": ["model.project.rls_user_school_authorization"], "model.project.stg_edfi_parents": [], "model.project.stg_edfi_student_education_organization_associations": ["model.project.dim_student", "model.project.student_local_education_agency_demographics_bridge", "model.project.student_local_education_agency_demographics_bridge", "model.project.student_local_education_agency_demographics_bridge", "model.project.student_local_education_agency_demographics_bridge"], "model.project.stg_edfi_courses": ["model.project.dim_section", "model.project.dim_student_section"], "model.project.stg_edfi_sessions": ["model.project.dim_grading_period", "model.project.dim_section", "model.project.dim_session", "model.project.dim_student"], "model.project.stg_edfi_student_parent_associations": [], "model.project.stg_edfi_student_section_associations": ["model.project.dim_student_section", "model.project.fct_student_attendance", "model.project.rls_student_data_authorization", "model.project.rls_user_student_data_authorization"], "model.project.stg_edfi_student_section_attendance_events": ["model.project.fct_student_attendance"], "model.project.stg_edfi_grades": ["model.project.dim_grading_period", "model.project.fct_student_section_grade"], "model.project.stg_edfi_course_offerings": ["model.project.dim_section", "model.project.dim_student_section"], "model.project.stg_edfi_grading_periods": ["model.project.dim_grading_period", "model.project.dim_grading_period"], "model.project.stg_edfi_programs": ["model.project.dim_student", "model.project.dim_student_program"], "model.project.stg_edfi_student_school_attendance_events": ["model.project.fct_student_attendance"], "model.project.stg_edfi_local_education_agencies": ["model.project.dim_local_education_agency", "model.project.dim_school", "test.project.unique_stg_edfi_local_education_agencies_CONCAT_school_year_local_education_agency_id_.68cfccff4d"], "model.project.stg_edfi_staff_education_organization_assignment_associations": ["model.project.rls_user_authorization", "model.project.rls_user_student_data_authorization", "model.project.rls_user_student_data_authorization", "model.project.rls_user_student_data_authorization"], "model.project.stg_edfi_discipline_incidents": [], "model.project.stg_edfi_student_school_associations": ["model.project.dim_student", "model.project.dim_student", "model.project.fct_student_assessment", "model.project.fct_student_assessment", "model.project.fct_student_assessment", "model.project.fct_student_assessment", "model.project.fct_student_attendance", "model.project.fct_student_school", "model.project.rls_user_student_data_authorization", "model.project.rls_user_student_data_authorization", "model.project.student_local_education_agency_demographics_bridge"], "model.project.stg_edfi_student_special_education_program_associations": ["model.project.dim_student", "model.project.dim_student_program"], "model.project.stg_edfi_calendar_dates": ["model.project.dim_date", "model.project.fct_student_attendance", "model.project.fct_student_school"], "model.project.stg_edfi_schools": ["model.project.dim_school", "model.project.dim_section", "model.project.fct_student_school", "model.project.rls_user_student_data_authorization", "model.project.student_local_education_agency_demographics_bridge", "test.project.unique_stg_edfi_schools_school_year_school_id.e463495cb1"], "model.project.stg_edfi_staff_section_associations": ["model.project.dim_student_section", "model.project.rls_user_authorization", "model.project.rls_user_student_data_authorization"], "model.project.stg_edfi_student_assessments": ["model.project.fct_student_assessment", "model.project.fct_student_assessment", "model.project.fct_student_assessment", "model.project.fct_student_assessment"], "model.project.stg_edfi_deletes": ["model.project.stg_edfi_assessments", "model.project.stg_edfi_calendar_dates", "model.project.stg_edfi_calendars", "model.project.stg_edfi_course_offerings", "model.project.stg_edfi_courses", "model.project.stg_edfi_descriptors", "model.project.stg_edfi_discipline_incidents", "model.project.stg_edfi_grades", "model.project.stg_edfi_grading_periods", "model.project.stg_edfi_local_education_agencies", "model.project.stg_edfi_objective_assessments", "model.project.stg_edfi_parents", "model.project.stg_edfi_programs", "model.project.stg_edfi_schools", "model.project.stg_edfi_sections", "model.project.stg_edfi_sessions", "model.project.stg_edfi_staff_education_organization_assignment_associations", "model.project.stg_edfi_staff_school_associations", "model.project.stg_edfi_staff_section_associations", "model.project.stg_edfi_staffs", "model.project.stg_edfi_student_assessments", "model.project.stg_edfi_student_discipline_incident_associations", "model.project.stg_edfi_student_education_organization_associations", "model.project.stg_edfi_student_parent_associations", "model.project.stg_edfi_student_program_associations", "model.project.stg_edfi_student_school_associations", "model.project.stg_edfi_student_school_attendance_events", "model.project.stg_edfi_student_section_associations", "model.project.stg_edfi_student_section_attendance_events", "model.project.stg_edfi_student_special_education_program_associations", "model.project.stg_edfi_students"], "model.project.stg_edfi_descriptors": ["model.project.dim_demographic", "model.project.dim_demographic", "model.project.dim_demographic", "model.project.dim_demographic", "model.project.fct_student_section_grade"], "model.project.stg_edfi_sections": ["model.project.dim_section", "model.project.rls_student_data_authorization", "model.project.rls_user_authorization"], "model.project.stg_edfi_student_program_associations": [], "model.project.stg_edfi_students": ["model.project.dim_student", "model.project.fct_student_attendance", "test.project.unique_stg_edfi_students_school_year_student_unique_id.3a33c30a48"], "model.project.stg_edfi_calendars": [], "model.project.stg_edfi_staffs": ["model.project.dim_student_section", "model.project.rls_dim_user", "model.project.rls_user_school_authorization"], "model.project.stg_edfi_student_discipline_incident_associations": [], "test.project.not_null_fct_student_section_grade_student_key.cc4059fd96": [], "test.project.relationships_fct_student_section_grade_student_section_key__student_section_key__ref_dim_student_section_.4e7c6c131b": [], "test.project.not_null_fct_student_section_grade_letter_grade_earned.14c0fe6021": [], "test.project.dbt_utils_expression_is_true_fct_student_section_grade_numeric_grade_earned_0.144140aea3": [], "test.project.relationships_fct_student_attendance_student_key__student_key__ref_dim_student_.902b20eb5a": [], "test.project.relationships_fct_student_attendance_school_key__school_key__ref_dim_school_.a425d4b0e7": [], "test.project.not_null_fct_student_attendance_school_year.c69c139be1": [], "test.project.not_null_fct_student_attendance_date.1c7057eb63": [], "test.project.not_null_fct_student_attendance_school_attendance_event_category_descriptor.be3ab06fa8": [], "test.project.not_null_fct_student_attendance_event_duration.7405fc5f51": [], "test.project.unique_dim_assessment_assessment_key.d45cb819a0": [], "test.project.not_null_dim_assessment_assessment_key.1ee4792dcf": [], "test.project.not_null_dim_assessment_education_organization_key.e46eded9e2": [], "test.project.not_null_dim_assessment_school_year.6f50975711": [], "test.project.not_null_dim_assessment_assessment_identifier.b01a1c84ef": [], "test.project.unique_dim_objective_assessment_objective_assessment_key.2a65565afd": [], "test.project.not_null_dim_objective_assessment_objective_assessment_key.84f09a79e9": [], "test.project.relationships_dim_objective_assessment_assessment_key__assessment_key__ref_dim_assessment_.1c513df798": [], "test.project.not_null_dim_objective_assessment_school_year.1ccf2c65ef": [], "test.project.not_null_dim_objective_assessment_identification_code.6e10638e4d": [], "test.project.relationships_fct_student_assessment_assessment_key__assessment_key__ref_dim_assessment_.fb7625afbd": [], "test.project.relationships_fct_student_assessment_student_key__student_key__ref_dim_student_.505c0cae72": [], "test.project.relationships_fct_student_assessment_school_key__school_key__ref_dim_school_.6d4121ee49": [], "test.project.not_null_fct_student_assessment_school_year.d353cc4178": [], "test.project.not_null_fct_student_assessment_student_assessment_identifier.bf72913748": [], "test.project.unique_dim_date_date.dd069a8d31": [], "test.project.not_null_dim_date_date.78f11e7735": [], "test.project.unique_dim_demographic_demographic_key.8c19c8ca9d": [], "test.project.not_null_dim_demographic_demographic_key.9faec00ba3": [], "test.project.not_null_dim_demographic_demographic_parent.eb525b15a9": [], "test.project.not_null_dim_demographic_demographic_label.042df09cff": [], "test.project.unique_dim_grading_period_grading_period_key.2c941ffbec": [], "test.project.not_null_dim_grading_period_grading_period_key.a9c6847f9d": [], "test.project.relationships_dim_grading_period_school_key__school_key__ref_dim_school_.fff5503f34": [], "test.project.unique_dim_local_education_agency_local_education_agency_key.2cf2d58a69": [], "test.project.not_null_dim_local_education_agency_local_education_agency_key.3f6251750d": [], "test.project.unique_dim_local_education_agency_local_education_agency_id.1a30878627": [], "test.project.not_null_dim_local_education_agency_local_education_agency_id.6ba737bcd9": [], "test.project.unique_dim_school_school_key.64ec309207": [], "test.project.not_null_dim_school_school_key.209ee6078e": [], "test.project.relationships_dim_school_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.c40f28107b": [], "test.project.unique_dim_school_school_id.d10cafcd76": [], "test.project.not_null_dim_school_school_id.36d55ce30b": [], "test.project.unique_dim_section_section_key.4b442b173b": [], "test.project.not_null_dim_section_section_key.d763cc8042": [], "test.project.relationships_dim_section_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.1c63a4fa13": [], "test.project.relationships_dim_section_school_key__school_key__ref_dim_school_.b29c32ae93": [], "test.project.relationships_dim_section_session_key__session_key__ref_dim_session_.5fcf678cd6": [], "test.project.not_null_dim_section_section_identifier.5aa4059a37": [], "test.project.unique_dim_session_session_key.b5230e3fd3": [], "test.project.not_null_dim_session_session_key.2c2f8e6dac": [], "test.project.relationships_dim_session_school_key__school_key__ref_dim_school_.d4064049b7": [], "test.project.unique_dim_student_student_key.45ef646b54": [], "test.project.not_null_dim_student_student_key.67ab09a6e6": [], "test.project.not_null_dim_student_school_year.cb1c50e460": [], "test.project.not_null_dim_student_student_unique_id.8a392fc4ab": [], "test.project.not_null_dim_student_student_last_surname.329ae57d5b": [], "test.project.not_null_dim_student_student_first_name.f007907dff": [], "test.project.not_null_dim_student_is_english_language_learner.55a5cd929d": [], "test.project.accepted_values_dim_student_is_english_language_learner__Yes__No.d5a7434ec1": [], "test.project.not_null_dim_student_in_special_education_program.f8695e7bf3": [], "test.project.accepted_values_dim_student_in_special_education_program__Yes__No.7a967caab1": [], "test.project.not_null_dim_student_is_hispanic.2f36046142": [], "test.project.accepted_values_dim_student_is_hispanic__Yes__No.28cf24b221": [], "test.project.unique_student_local_education_agency_demographics_bridge_student_school_demographic_bridge_key.f8f8da40b7": [], "test.project.not_null_student_local_education_agency_demographics_bridge_student_school_demographic_bridge_key.751a8efb0e": [], "test.project.relationships_fct_student_school_student_key__student_key__ref_dim_student_.ce63ab9df5": [], "test.project.relationships_fct_student_school_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.bdd6a57ac4": [], "test.project.relationships_fct_student_school_school_key__school_key__ref_dim_school_.7a675bb6ae": [], "test.project.unique_stg_edfi_local_education_agencies_CONCAT_school_year_local_education_agency_id_.68cfccff4d": [], "test.project.unique_stg_edfi_schools_school_year_school_id.e463495cb1": [], "test.project.unique_stg_edfi_students_school_year_student_unique_id.3a33c30a48": [], "source.project.staging.base_edfi_assessments": ["model.project.stg_edfi_assessments"], "source.project.staging.base_edfi_assessments_deletes": ["model.project.stg_edfi_deletes"], "source.project.staging.base_edfi_calendars": ["model.project.stg_edfi_calendars"], "source.project.staging.base_edfi_calendars_deletes": ["model.project.stg_edfi_deletes", "model.project.stg_edfi_deletes"], "source.project.staging.base_edfi_calendar_dates": ["model.project.stg_edfi_calendar_dates"], "source.project.staging.base_edfi_calendar_dates_deletes": ["model.project.stg_edfi_deletes"], "source.project.staging.base_edfi_courses": ["model.project.stg_edfi_courses"], "source.project.staging.base_edfi_courses_deletes": ["model.project.stg_edfi_deletes"], "source.project.staging.base_edfi_course_offerings": ["model.project.stg_edfi_course_offerings"], "source.project.staging.base_edfi_course_offerings_deletes": ["model.project.stg_edfi_deletes"], "source.project.staging.base_edfi_discipline_actions": [], "source.project.staging.base_edfi_discipline_actions_deletes": ["model.project.stg_edfi_deletes"], "source.project.staging.base_edfi_discipline_incidents": ["model.project.stg_edfi_discipline_incidents"], "source.project.staging.base_edfi_discipline_incident_deletes": ["model.project.stg_edfi_deletes"], "source.project.staging.base_edfi_grading_periods": ["model.project.stg_edfi_grading_periods"], "source.project.staging.base_edfi_grading_periods_deletes": ["model.project.stg_edfi_deletes"], "source.project.staging.base_edfi_grading_period_descriptors": ["model.project.stg_edfi_descriptors"], "source.project.staging.base_edfi_grades": ["model.project.stg_edfi_grades"], "source.project.staging.base_edfi_grades_deletes": ["model.project.stg_edfi_deletes"], "source.project.staging.base_edfi_local_education_agencies": ["model.project.stg_edfi_local_education_agencies"], "source.project.staging.base_edfi_local_education_agencies_deletes": ["model.project.stg_edfi_deletes"], "source.project.staging.base_edfi_objective_assessments": ["model.project.stg_edfi_objective_assessments"], "source.project.staging.base_edfi_objective_assessments_deletes": ["model.project.stg_edfi_deletes"], "source.project.staging.base_edfi_parents": ["model.project.stg_edfi_parents"], "source.project.staging.base_edfi_parents_deletes": ["model.project.stg_edfi_deletes"], "source.project.staging.base_edfi_programs": ["model.project.stg_edfi_programs"], "source.project.staging.base_edfi_programs_deletes": ["model.project.stg_edfi_deletes"], "source.project.staging.base_edfi_schools": ["model.project.stg_edfi_schools"], "source.project.staging.base_edfi_schools_deletes": ["model.project.stg_edfi_deletes"], "source.project.staging.base_edfi_school_year_types": ["model.project.stg_edfi_school_year_types"], "source.project.staging.base_edfi_sections": ["model.project.stg_edfi_sections"], "source.project.staging.base_edfi_sections_deletes": ["model.project.stg_edfi_deletes"], "source.project.staging.base_edfi_sessions": ["model.project.stg_edfi_sessions"], "source.project.staging.base_edfi_sessions_deletes": ["model.project.stg_edfi_deletes"], "source.project.staging.base_edfi_staffs": ["model.project.stg_edfi_staffs"], "source.project.staging.base_edfi_staffs_deletes": ["model.project.stg_edfi_deletes"], "source.project.staging.base_edfi_staff_discipline_incident_associations": [], "source.project.staging.base_edfi_staff_discipline_incident_associations_deletes": ["model.project.stg_edfi_deletes"], "source.project.staging.base_edfi_staff_education_organization_assignment_associations": ["model.project.stg_edfi_staff_education_organization_assignment_associations"], "source.project.staging.base_edfi_staff_education_organization_assignment_associations_deletes": ["model.project.stg_edfi_deletes"], "source.project.staging.base_edfi_staff_school_associations": ["model.project.stg_edfi_staff_school_associations"], "source.project.staging.base_edfi_staff_school_associations_deletes": ["model.project.stg_edfi_deletes"], "source.project.staging.base_edfi_staff_section_associations": ["model.project.stg_edfi_staff_section_associations"], "source.project.staging.base_edfi_staff_section_associations_deletes": ["model.project.stg_edfi_deletes"], "source.project.staging.base_edfi_students": ["model.project.stg_edfi_students"], "source.project.staging.base_edfi_students_deletes": ["model.project.stg_edfi_deletes"], "source.project.staging.base_edfi_student_assessments": ["model.project.stg_edfi_student_assessments"], "source.project.staging.base_edfi_student_assessments_deletes": ["model.project.stg_edfi_deletes"], "source.project.staging.base_edfi_student_discipline_incident_associations": ["model.project.stg_edfi_student_discipline_incident_associations"], "source.project.staging.base_edfi_student_discipline_incident_associations_deletes": ["model.project.stg_edfi_deletes"], "source.project.staging.base_edfi_student_education_organization_associations": ["model.project.stg_edfi_student_education_organization_associations"], "source.project.staging.base_edfi_student_education_organization_associations_deletes": ["model.project.stg_edfi_deletes"], "source.project.staging.base_edfi_student_parent_associations": ["model.project.stg_edfi_student_parent_associations"], "source.project.staging.base_edfi_student_parent_associations_deletes": ["model.project.stg_edfi_deletes"], "source.project.staging.base_edfi_student_program_associations": ["model.project.stg_edfi_student_program_associations"], "source.project.staging.base_edfi_student_program_associations_deletes": ["model.project.stg_edfi_deletes"], "source.project.staging.base_edfi_student_school_associations": ["model.project.stg_edfi_student_school_associations"], "source.project.staging.base_edfi_student_school_associations_deletes": ["model.project.stg_edfi_deletes"], "source.project.staging.base_edfi_student_school_attendance_events": ["model.project.stg_edfi_student_school_attendance_events"], "source.project.staging.base_edfi_student_school_attendance_events_deletes": ["model.project.stg_edfi_deletes"], "source.project.staging.base_edfi_student_section_associations": ["model.project.stg_edfi_student_section_associations"], "source.project.staging.base_edfi_student_section_associations_deletes": ["model.project.stg_edfi_deletes"], "source.project.staging.base_edfi_student_section_attendance_events": ["model.project.stg_edfi_student_section_attendance_events"], "source.project.staging.base_edfi_student_section_attendance_events_deletes": ["model.project.stg_edfi_deletes"], "source.project.staging.base_edfi_student_special_education_program_associations": ["model.project.stg_edfi_student_special_education_program_associations"], "source.project.staging.base_edfi_student_special_education_program_associations_deletes": ["model.project.stg_edfi_deletes"], "source.project.staging.base_edfi_cohort_type_descriptors": ["model.project.stg_edfi_descriptors"], "source.project.staging.base_edfi_cohort_type_descriptors_deletes": ["model.project.stg_edfi_deletes"], "source.project.staging.base_edfi_disability_descriptors": ["model.project.stg_edfi_descriptors"], "source.project.staging.base_edfi_disability_descriptors_deletes": ["model.project.stg_edfi_deletes"], "source.project.staging.base_edfi_language_descriptors": ["model.project.stg_edfi_descriptors"], "source.project.staging.base_edfi_language_descriptors_deletes": ["model.project.stg_edfi_deletes"], "source.project.staging.base_edfi_language_use_descriptors": ["model.project.stg_edfi_descriptors"], "source.project.staging.base_edfi_language_use_descriptors_deletes": ["model.project.stg_edfi_deletes"], "source.project.staging.base_edfi_race_descriptors": ["model.project.stg_edfi_descriptors"], "source.project.staging.base_edfi_race_descriptors_deletes": ["model.project.stg_edfi_deletes"]}}